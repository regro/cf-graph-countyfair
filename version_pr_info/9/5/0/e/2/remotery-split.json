{
  "bad": false,
  "new_version": "1.2.1",
  "new_version_attempt_ts": {
    "1.2.1": 1758390789.0
  },
  "new_version_attempts": {
    "1.2.1": 0
  },
  "new_version_errors": {
    "1.2.1": "The recipe did not change in the version migration, a URL did not hash, or there is jinja2 syntax the bot cannot handle!\n\nPlease check the URLs in your recipe with version '1.2.1' to make sure they exist!\n\nWe also found the following errors:\n\n - We found a problem parsing the recipe for version '1.2.1': \n\nDuplicateKeyError('while constructing a mapping',   in \"<unicode string>\", line 6, column 1:\n    package:\n    ^ (line: 6), 'found duplicate key \"outputs\" with value \"[ordereddict([(\\'name\\', \\'<{ name|lower }}-static\\'), (\\'version\\', \\'<{ version }}\\'), (\\'script__###conda-selector###__unix\\', \\'build_remotery.sh\\'), (\\'script__###conda-selector###__win\\', \\'build_remotery.bat\\'), (\\'requirements\\', ordereddict([(\\'build\\', [\"<{ compiler(\\'c\\') }}\", \"<{ compiler(\\'cxx\\') }}\", \\'cmake\\', \\'make\\', \\'ninja\\'])])), (\\'test\\', ordereddict([(\\'commands\\', [\\'test -d ${PREFIX}/include/remotery\\', \\'test -f ${PREFIX}/include/remotery/Remotery.h\\', \\'test -f ${PREFIX}/lib/cmake/Remotery/RemoteryConfig.cmake\\', \\'test -f ${PREFIX}/lib/cmake/Remotery/RemoteryConfigVersion.cmake\\', \\'test -f ${PREFIX}/lib/cmake/Remotery/RemoteryTargets.cmake\\', \\'test -f ${PREFIX}/lib/cmake/Remotery/RemoteryTargets-release.cmake\\', \\'test -e ${PREFIX}/lib/libRemotery.a\\', \\'cat $PREFIX/include/remotery/Remotery.h | grep \"RMT_VERSION_MAJOR <{ version_split[0] }}\"\\', \\'cat $PREFIX/include/remotery/Remotery.h | grep \"RMT_VERSION_MINOR <{ version_split[1] }}\"\\', \\'cat $PREFIX/include/remotery/Remotery.h | grep \"RMT_VERSION_PATCH <{ version_split[2] }}\"\\', \\'if not exist %LIBRARY_PREFIX%\\\\\\\\include\\\\\\\\remotery\\\\\\\\Remotery.h (exit 1)\\', \\'if not exist %LIBRARY_PREFIX%\\\\\\\\lib\\\\\\\\cmake\\\\\\\\Remotery\\\\\\\\RemoteryConfig.cmake (exit 1)\\', \\'if not exist %LIBRARY_PREFIX%\\\\\\\\lib\\\\\\\\cmake\\\\\\\\Remotery\\\\\\\\RemoteryConfigVersion.cmake (exit 1)\\', \\'if not exist %LIBRARY_PREFIX%\\\\\\\\lib\\\\\\\\Remotery_static.lib (exit 1)\\'])]))])]\" (original value: \"[ordereddict([(\\'name\\', \\'<{ name|lower }}\\'), (\\'version\\', \\'<{ version }}\\'), (\\'script__###conda-selector###__unix\\', \\'build_remotery.sh\\'), (\\'script__###conda-selector###__win\\', \\'build_remotery.bat\\'), (\\'requirements\\', ordereddict([(\\'build\\', [\"<{ compiler(\\'c\\') }}\", \"<{ compiler(\\'cxx\\') }}\", \\'cmake\\', \\'make\\', \\'ninja\\'])])), (\\'test\\', ordereddict([(\\'commands\\', [\\'test -d ${PREFIX}/include/remotery\\', \\'test -f ${PREFIX}/include/remotery/Remotery.h\\', \\'test -f ${PREFIX}/lib/cmake/Remotery/RemoteryConfig.cmake\\', \\'test -f ${PREFIX}/lib/cmake/Remotery/RemoteryConfigVersion.cmake\\', \\'test -f ${PREFIX}/lib/cmake/Remotery/RemoteryTargets.cmake\\', \\'test -f ${PREFIX}/lib/cmake/Remotery/RemoteryTargets-release.cmake\\', \\'test -e ${PREFIX}/lib/libRemotery${SHLIB_EXT}\\', \\'cat $PREFIX/include/remotery/Remotery.h | grep \"RMT_VERSION_MAJOR <{ version_split[0] }}\"\\', \\'cat $PREFIX/include/remotery/Remotery.h | grep \"RMT_VERSION_MINOR <{ version_split[1] }}\"\\', \\'cat $PREFIX/include/remotery/Remotery.h | grep \"RMT_VERSION_PATCH <{ version_split[2] }}\"\\', \\'test -L ${PREFIX}/lib/libRemotery${SHLIB_EXT}.<{ version_split[0] }}\\', \\'test -L ${PREFIX}/lib/libRemotery${SHLIB_EXT}.<{ version }}\\', \\'if not exist %LIBRARY_PREFIX%\\\\\\\\include\\\\\\\\remotery\\\\\\\\Remotery.h (exit 1)\\', \\'if not exist %LIBRARY_PREFIX%\\\\\\\\lib\\\\\\\\cmake\\\\\\\\Remotery\\\\\\\\RemoteryConfig.cmake (exit 1)\\', \\'if not exist %LIBRARY_PREFIX%\\\\\\\\lib\\\\\\\\cmake\\\\\\\\Remotery\\\\\\\\RemoteryConfigVersion.cmake (exit 1)\\', \\'if not exist %LIBRARY_PREFIX%\\\\\\\\bin\\\\\\\\Remotery.dll (exit 1)\\'])]))])]\")',   in \"<unicode string>\", line 62, column 1:\n    outputs:\n    ^ (line: 62), '\\n                    To suppress this check see:\\n                        http://yaml.readthedocs.io/en/latest/api.html#duplicate-keys\\n                    ', '                    Duplicate keys will become an error in future releases, and are errors\\n                    by default when using the new API.\\n                    ')\n\ntraceback:\n  File \"/home/runner/work/cf-scripts/cf-scripts/cf-scripts/conda_forge_tick/update_recipe/version.py\", line 411, in update_version\n    cmeta = CondaMetaYAML(raw_meta_yaml)\n  File \"/home/runner/work/cf-scripts/cf-scripts/cf-scripts/conda_forge_tick/recipe_parser/_parser.py\", line 492, in __init__\n    self.meta = self._parser.load(\"\".join(lines))\n  File \"/usr/share/miniconda3/envs/cf-scripts/lib/python3.9/site-packages/ruamel/yaml/main.py\", line 434, in load\n    return constructor.get_single_data()\n  File \"/usr/share/miniconda3/envs/cf-scripts/lib/python3.9/site-packages/ruamel/yaml/constructor.py\", line 121, in get_single_data\n    return self.construct_document(node)\n  File \"/usr/share/miniconda3/envs/cf-scripts/lib/python3.9/site-packages/ruamel/yaml/constructor.py\", line 131, in construct_document\n    for _dummy in generator:\n  File \"/usr/share/miniconda3/envs/cf-scripts/lib/python3.9/site-packages/ruamel/yaml/constructor.py\", line 1569, in construct_yaml_map\n    self.construct_mapping(node, data, deep=True)\n  File \"/usr/share/miniconda3/envs/cf-scripts/lib/python3.9/site-packages/ruamel/yaml/constructor.py\", line 1453, in construct_mapping\n    if self.check_mapping_key(node, key_node, maptyp, key, value):\n  File \"/usr/share/miniconda3/envs/cf-scripts/lib/python3.9/site-packages/ruamel/yaml/constructor.py\", line 294, in check_mapping_key\n    raise DuplicateKeyError(*args)\n\n"
  }
}