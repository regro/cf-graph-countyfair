{
  "archived": false,
  "branch": "main",
  "conda-forge.yml": {
    "build_platform": {
      "osx_arm64": "osx_64"
    },
    "conda_build": {
      "error_overlinking": true
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    },
    "test": "native_and_emulated"
  },
  "feedstock_hash": "2d3d737c9d036242c148a2dc476d724c45237c4f",
  "feedstock_hash_ts": 1742547681,
  "feedstock_name": "rapidcheck",
  "hash_type": "sha256",
  "linux_64_meta_yaml": {
    "about": {
      "description": "RapidCheck is a C++ framework for property based testing inspired by QuickCheck and other similar frameworks.\nIn property based testing, you state facts about your code that given certain precondition should always be true.\nRapidCheck then generates random test data to try and find a case for which the property doesn't hold.\nIf such a case is found, RapidCheck tries to find the smallest case (for some definition of smallest)\nfor which the property is still false and then displays this as a counterexample.\nFor example, if the input is an integer, RapidCheck tries to find the smallest integer for which the property is false.\n",
      "dev_url": "https://github.com/emil-e/rapidcheck",
      "doc_url": "https://github.com/emil-e/rapidcheck/blob/master/doc/user_guide.md",
      "home": "https://github.com/emil-e/rapidcheck",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE.md",
      "summary": "RapidCheck is a C++ framework for property based testing inspired by QuickCheck and other similar frameworks."
    },
    "build": {
      "number": "3"
    },
    "extra": {
      "recipe-maintainers": [
        "DerThorsten",
        "jjerphan"
      ]
    },
    "package": {
      "name": "rapidcheck",
      "version": "2023.4.13"
    },
    "requirements": {
      "build": [
        "make",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "cmake"
      ],
      "host": [
        "gtest"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "9a754942f99027c66c0aed14a684cd4a36b28ab232d9079473d427d09af57871",
      "url": "https://github.com/emil-e/rapidcheck/archive/a5724ea5b0b00147109b0605c377f1e54c353ba2.tar.gz"
    },
    "test": {
      "commands": [
        "test -e ${PREFIX}/include/rapidcheck.h",
        "test -e ${PREFIX}/include/rapidcheck/Show.hpp",
        "test -e ${PREFIX}/share/rapidcheck/cmake/rapidcheckConfig.cmake",
        "test -e ${PREFIX}/lib/librapidcheck.so"
      ]
    }
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "gtest"
      ]
    },
    "run": {
      "__set__": true,
      "elements": []
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "meta_yaml": {
    "about": {
      "description": "RapidCheck is a C++ framework for property based testing inspired by QuickCheck and other similar frameworks.\nIn property based testing, you state facts about your code that given certain precondition should always be true.\nRapidCheck then generates random test data to try and find a case for which the property doesn't hold.\nIf such a case is found, RapidCheck tries to find the smallest case (for some definition of smallest)\nfor which the property is still false and then displays this as a counterexample.\nFor example, if the input is an integer, RapidCheck tries to find the smallest integer for which the property is false.\n",
      "dev_url": "https://github.com/emil-e/rapidcheck",
      "doc_url": "https://github.com/emil-e/rapidcheck/blob/master/doc/user_guide.md",
      "home": "https://github.com/emil-e/rapidcheck",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE.md",
      "summary": "RapidCheck is a C++ framework for property based testing inspired by QuickCheck and other similar frameworks."
    },
    "build": {
      "number": "3"
    },
    "extra": {
      "recipe-maintainers": [
        "DerThorsten",
        "jjerphan"
      ]
    },
    "package": {
      "name": "rapidcheck",
      "version": "2023.4.13"
    },
    "requirements": {
      "build": [
        "make",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "cmake"
      ],
      "host": [
        "gtest"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "9a754942f99027c66c0aed14a684cd4a36b28ab232d9079473d427d09af57871",
      "url": "https://github.com/emil-e/rapidcheck/archive/a5724ea5b0b00147109b0605c377f1e54c353ba2.tar.gz"
    },
    "test": {
      "commands": [
        "test -e ${PREFIX}/include/rapidcheck.h",
        "test -e ${PREFIX}/include/rapidcheck/Show.hpp",
        "test -e ${PREFIX}/share/rapidcheck/cmake/rapidcheckConfig.cmake",
        "test -e ${PREFIX}/lib/librapidcheck.so",
        "if not exist %LIBRARY_PREFIX%\\include\\rapidcheck.h (exit 1)",
        "if not exist %LIBRARY_PREFIX%\\lib\\rapidcheck.lib (exit 1)",
        "if not exist %LIBRARY_PREFIX%\\bin\\rapidcheck.dll (exit 1)"
      ]
    }
  },
  "name": "rapidcheck",
  "osx_64_meta_yaml": {
    "about": {
      "description": "RapidCheck is a C++ framework for property based testing inspired by QuickCheck and other similar frameworks.\nIn property based testing, you state facts about your code that given certain precondition should always be true.\nRapidCheck then generates random test data to try and find a case for which the property doesn't hold.\nIf such a case is found, RapidCheck tries to find the smallest case (for some definition of smallest)\nfor which the property is still false and then displays this as a counterexample.\nFor example, if the input is an integer, RapidCheck tries to find the smallest integer for which the property is false.\n",
      "dev_url": "https://github.com/emil-e/rapidcheck",
      "doc_url": "https://github.com/emil-e/rapidcheck/blob/master/doc/user_guide.md",
      "home": "https://github.com/emil-e/rapidcheck",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE.md",
      "summary": "RapidCheck is a C++ framework for property based testing inspired by QuickCheck and other similar frameworks."
    },
    "build": {
      "number": "3"
    },
    "extra": {
      "recipe-maintainers": [
        "DerThorsten",
        "jjerphan"
      ]
    },
    "package": {
      "name": "rapidcheck",
      "version": "2023.4.13"
    },
    "requirements": {
      "build": [
        "make",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "cmake"
      ],
      "host": [
        "gtest"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "9a754942f99027c66c0aed14a684cd4a36b28ab232d9079473d427d09af57871",
      "url": "https://github.com/emil-e/rapidcheck/archive/a5724ea5b0b00147109b0605c377f1e54c353ba2.tar.gz"
    },
    "test": {
      "commands": [
        "test -e ${PREFIX}/include/rapidcheck.h",
        "test -e ${PREFIX}/include/rapidcheck/Show.hpp",
        "test -e ${PREFIX}/share/rapidcheck/cmake/rapidcheckConfig.cmake"
      ]
    }
  },
  "osx_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "gtest"
      ]
    },
    "run": {
      "__set__": true,
      "elements": []
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "osx_arm64_meta_yaml": {
    "about": {
      "description": "RapidCheck is a C++ framework for property based testing inspired by QuickCheck and other similar frameworks.\nIn property based testing, you state facts about your code that given certain precondition should always be true.\nRapidCheck then generates random test data to try and find a case for which the property doesn't hold.\nIf such a case is found, RapidCheck tries to find the smallest case (for some definition of smallest)\nfor which the property is still false and then displays this as a counterexample.\nFor example, if the input is an integer, RapidCheck tries to find the smallest integer for which the property is false.\n",
      "dev_url": "https://github.com/emil-e/rapidcheck",
      "doc_url": "https://github.com/emil-e/rapidcheck/blob/master/doc/user_guide.md",
      "home": "https://github.com/emil-e/rapidcheck",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE.md",
      "summary": "RapidCheck is a C++ framework for property based testing inspired by QuickCheck and other similar frameworks."
    },
    "build": {
      "number": "3"
    },
    "extra": {
      "recipe-maintainers": [
        "DerThorsten",
        "jjerphan"
      ]
    },
    "package": {
      "name": "rapidcheck",
      "version": "2023.4.13"
    },
    "requirements": {
      "build": [
        "make",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "cmake"
      ],
      "host": [
        "gtest"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "9a754942f99027c66c0aed14a684cd4a36b28ab232d9079473d427d09af57871",
      "url": "https://github.com/emil-e/rapidcheck/archive/a5724ea5b0b00147109b0605c377f1e54c353ba2.tar.gz"
    },
    "test": {
      "commands": [
        "test -e ${PREFIX}/include/rapidcheck.h",
        "test -e ${PREFIX}/include/rapidcheck/Show.hpp",
        "test -e ${PREFIX}/share/rapidcheck/cmake/rapidcheckConfig.cmake"
      ]
    }
  },
  "osx_arm64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "gtest"
      ]
    },
    "run": {
      "__set__": true,
      "elements": []
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "outputs_names": {
    "__set__": true,
    "elements": [
      "rapidcheck"
    ]
  },
  "parsing_error": false,
  "platforms": [
    "linux_64",
    "osx_64",
    "osx_arm64",
    "win_64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/rapidcheck.json"
  },
  "raw_meta_yaml": "{% set name = \"rapidcheck\" %}\n{% set version = \"2023.4.13\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\n# rapidcheck does not have tags or release.\n# For now, we version it with the date of a commit of choice.\n# See: https://github.com/emil-e/rapidcheck/issues/306\nsource:\n  url: https://github.com/emil-e/rapidcheck/archive/a5724ea5b0b00147109b0605c377f1e54c353ba2.tar.gz\n  sha256: 9a754942f99027c66c0aed14a684cd4a36b28ab232d9079473d427d09af57871\n\nbuild:\n  number: 3\n\nrequirements:\n  build:\n    - make  # [unix]\n    - {{ stdlib(\"c\") }}\n    - {{ compiler('cxx') }}\n    - cmake\n  host:\n    - gtest\n\ntest:\n  commands:\n    - test -e ${PREFIX}/include/rapidcheck.h  # [unix]\n    - test -e ${PREFIX}/include/rapidcheck/Show.hpp  # [unix]\n    - test -e ${PREFIX}/share/rapidcheck/cmake/rapidcheckConfig.cmake  # [unix]\n    - test -e ${PREFIX}/lib/librapidcheck.so  # [linux]\n    - if not exist %LIBRARY_PREFIX%\\include\\rapidcheck.h (exit 1)  # [win]\n    # The import and shared library must be present on Windows\n    - if not exist %LIBRARY_PREFIX%\\lib\\rapidcheck.lib (exit 1)  # [win]\n    - if not exist %LIBRARY_PREFIX%\\bin\\rapidcheck.dll (exit 1)  # [win]\n\n\nabout:\n  home: https://github.com/emil-e/rapidcheck\n  summary: 'RapidCheck is a C++ framework for property based testing inspired by QuickCheck and other similar frameworks.'\n  description: |\n    RapidCheck is a C++ framework for property based testing inspired by QuickCheck and other similar frameworks.\n    In property based testing, you state facts about your code that given certain precondition should always be true.\n    RapidCheck then generates random test data to try and find a case for which the property doesn't hold.\n    If such a case is found, RapidCheck tries to find the smallest case (for some definition of smallest)\n    for which the property is still false and then displays this as a counterexample.\n    For example, if the input is an integer, RapidCheck tries to find the smallest integer for which the property is false.\n\n  license: BSD-3-Clause\n  license_family: BSD\n  license_file: LICENSE.md\n  doc_url: https://github.com/emil-e/rapidcheck/blob/master/doc/user_guide.md\n  dev_url: https://github.com/emil-e/rapidcheck\n\nextra:\n  recipe-maintainers:\n    - DerThorsten\n    - jjerphan\n",
  "req": {
    "__set__": true,
    "elements": [
      "c_stdlib_stub",
      "cmake",
      "cxx_compiler_stub",
      "gtest",
      "make"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "gtest"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "c_stdlib_stub",
        "cxx_compiler_stub"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "gtest"
      ]
    },
    "run": {
      "__set__": true,
      "elements": []
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "url": "https://github.com/emil-e/rapidcheck/archive/a5724ea5b0b00147109b0605c377f1e54c353ba2.tar.gz",
  "version": "2023.4.13",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/rapidcheck.json"
  },
  "win_64_meta_yaml": {
    "about": {
      "description": "RapidCheck is a C++ framework for property based testing inspired by QuickCheck and other similar frameworks.\nIn property based testing, you state facts about your code that given certain precondition should always be true.\nRapidCheck then generates random test data to try and find a case for which the property doesn't hold.\nIf such a case is found, RapidCheck tries to find the smallest case (for some definition of smallest)\nfor which the property is still false and then displays this as a counterexample.\nFor example, if the input is an integer, RapidCheck tries to find the smallest integer for which the property is false.\n",
      "dev_url": "https://github.com/emil-e/rapidcheck",
      "doc_url": "https://github.com/emil-e/rapidcheck/blob/master/doc/user_guide.md",
      "home": "https://github.com/emil-e/rapidcheck",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE.md",
      "summary": "RapidCheck is a C++ framework for property based testing inspired by QuickCheck and other similar frameworks."
    },
    "build": {
      "number": "3"
    },
    "extra": {
      "recipe-maintainers": [
        "DerThorsten",
        "jjerphan"
      ]
    },
    "package": {
      "name": "rapidcheck",
      "version": "2023.4.13"
    },
    "requirements": {
      "build": [
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "cmake"
      ],
      "host": [
        "gtest"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "9a754942f99027c66c0aed14a684cd4a36b28ab232d9079473d427d09af57871",
      "url": "https://github.com/emil-e/rapidcheck/archive/a5724ea5b0b00147109b0605c377f1e54c353ba2.tar.gz"
    },
    "test": {
      "commands": [
        "if not exist %LIBRARY_PREFIX%\\include\\rapidcheck.h (exit 1)",
        "if not exist %LIBRARY_PREFIX%\\lib\\rapidcheck.lib (exit 1)",
        "if not exist %LIBRARY_PREFIX%\\bin\\rapidcheck.dll (exit 1)"
      ]
    }
  },
  "win_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "gtest"
      ]
    },
    "run": {
      "__set__": true,
      "elements": []
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  }
}