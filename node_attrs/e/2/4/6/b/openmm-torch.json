{
  "archived": false,
  "branch": "main",
  "conda-forge.yml": {
    "azure": {
      "free_disk_space": true,
      "settings_win": {
        "variables": {
          "CONDA_BLD_PATH": "C:\\bld",
          "MINIFORGE_HOME": "C:\\Miniforge",
          "SET_PAGEFILE": "True"
        }
      },
      "store_build_artifacts": true
    },
    "build_platform": {
      "linux_aarch64": "linux_64",
      "osx_arm64": "osx_64"
    },
    "conda_build": {
      "pkg_format": "2"
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    },
    "test": "native_and_emulated"
  },
  "feedstock_name": "openmm-torch",
  "linux_64_meta_yaml": {
    "about": {
      "description": "This is a plugin for OpenMM that allows neural networks to be\nused for defining forces. It is implemented with PyTorch.\nTo use it, you create a PyTorch model that takes particle\npositions as input and produces energy as output. This plugin\nuses the model to apply forces to particles during a simulation.\n",
      "dev_url": "https://github.com/openmm/openmm-torch",
      "doc_url": "https://github.com/openmm/openmm-torch",
      "home": "https://github.com/openmm/openmm-torch",
      "license": "MIT",
      "license_family": "MIT",
      "license_file": "README.md",
      "summary": "OpenMM plugin to define forces with neural networks"
    },
    "build": {
      "number": "1",
      "string": "cuda126py39h1234567_1"
    },
    "extra": {
      "recipe-maintainers": [
        "raimis",
        "jaimergp",
        "peastman",
        "mikemhenry",
        "RaulPPelaez"
      ]
    },
    "package": {
      "name": "openmm-torch",
      "version": "1.5.1"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "cdt_stub",
        "cmake",
        "make",
        "cuda_compiler_stub",
        "cuda-version 12.6"
      ],
      "host": [
        "python",
        "setuptools",
        "pip",
        "swig",
        "openmm >=8.3.0",
        "ocl-icd",
        "pytorch",
        "pytorch =*=cpu*",
        "pytorch =*=cuda*",
        "cuda-version 12.6"
      ],
      "run": [
        "python",
        "openmm",
        "ocl-icd",
        "ocl-icd-system"
      ],
      "run_constrained": [
        "pytorch =*=cpu*",
        "pytorch =*=cuda*"
      ]
    },
    "schema_version": 0,
    "source": {
      "git_rev": "v1.5.1",
      "git_url": "https://github.com/openmm/openmm-torch.git"
    },
    "test": {
      "imports": [
        "openmmtorch"
      ]
    }
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cdt_stub",
        "cmake",
        "cuda-version",
        "cuda_compiler_stub",
        "cxx_compiler_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "cuda-version",
        "ocl-icd",
        "openmm",
        "pip",
        "python",
        "pytorch",
        "setuptools",
        "swig"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "ocl-icd",
        "ocl-icd-system",
        "openmm",
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "linux_aarch64_meta_yaml": {
    "about": {
      "description": "This is a plugin for OpenMM that allows neural networks to be\nused for defining forces. It is implemented with PyTorch.\nTo use it, you create a PyTorch model that takes particle\npositions as input and produces energy as output. This plugin\nuses the model to apply forces to particles during a simulation.\n",
      "dev_url": "https://github.com/openmm/openmm-torch",
      "doc_url": "https://github.com/openmm/openmm-torch",
      "home": "https://github.com/openmm/openmm-torch",
      "license": "MIT",
      "license_family": "MIT",
      "license_file": "README.md",
      "summary": "OpenMM plugin to define forces with neural networks"
    },
    "build": {
      "number": "1",
      "string": "cpu_py39h1234567_1"
    },
    "extra": {
      "recipe-maintainers": [
        "raimis",
        "jaimergp",
        "peastman",
        "mikemhenry",
        "RaulPPelaez"
      ]
    },
    "package": {
      "name": "openmm-torch",
      "version": "1.5.1"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "cdt_stub",
        "cmake",
        "make"
      ],
      "host": [
        "python",
        "setuptools",
        "pip",
        "swig",
        "openmm >=8.3.0",
        "ocl-icd",
        "pytorch",
        "pytorch =*=cpu*"
      ],
      "run": [
        "python",
        "openmm",
        "ocl-icd",
        "ocl-icd-system"
      ],
      "run_constrained": [
        "pytorch =*=cpu*"
      ]
    },
    "schema_version": 0,
    "source": {
      "git_rev": "v1.5.1",
      "git_url": "https://github.com/openmm/openmm-torch.git"
    },
    "test": {
      "imports": [
        "openmmtorch"
      ]
    }
  },
  "linux_aarch64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cdt_stub",
        "cmake",
        "cxx_compiler_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "ocl-icd",
        "openmm",
        "pip",
        "python",
        "pytorch",
        "setuptools",
        "swig"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "ocl-icd",
        "ocl-icd-system",
        "openmm",
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "meta_yaml": {
    "about": {
      "description": "This is a plugin for OpenMM that allows neural networks to be\nused for defining forces. It is implemented with PyTorch.\nTo use it, you create a PyTorch model that takes particle\npositions as input and produces energy as output. This plugin\nuses the model to apply forces to particles during a simulation.\n",
      "dev_url": "https://github.com/openmm/openmm-torch",
      "doc_url": "https://github.com/openmm/openmm-torch",
      "home": "https://github.com/openmm/openmm-torch",
      "license": "MIT",
      "license_family": "MIT",
      "license_file": "README.md",
      "summary": "OpenMM plugin to define forces with neural networks"
    },
    "build": {
      "number": "1",
      "string": "cuda126py39h1234567_1"
    },
    "extra": {
      "recipe-maintainers": [
        "raimis",
        "jaimergp",
        "peastman",
        "mikemhenry",
        "RaulPPelaez"
      ]
    },
    "package": {
      "name": "openmm-torch",
      "version": "1.5.1"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "cdt_stub",
        "cmake",
        "make",
        "cuda_compiler_stub",
        "cuda-version 12.6"
      ],
      "host": [
        "python",
        "setuptools",
        "pip",
        "swig",
        "openmm >=8.3.0",
        "ocl-icd",
        "pytorch",
        "pytorch =*=cpu*",
        "pytorch =*=cuda*",
        "cuda-version 12.6",
        "khronos-opencl-icd-loader",
        "nvtx-c"
      ],
      "run": [
        "python",
        "openmm",
        "ocl-icd",
        "ocl-icd-system",
        "khronos-opencl-icd-loader",
        "ocl_icd_wrapper_apple"
      ],
      "run_constrained": [
        "pytorch =*=cpu*",
        "pytorch =*=cuda*"
      ]
    },
    "schema_version": 0,
    "source": {
      "git_rev": "v1.5.1",
      "git_url": "https://github.com/openmm/openmm-torch.git"
    },
    "test": {
      "imports": [
        "openmmtorch"
      ]
    }
  },
  "name": "openmm-torch",
  "osx_64_meta_yaml": {
    "about": {
      "description": "This is a plugin for OpenMM that allows neural networks to be\nused for defining forces. It is implemented with PyTorch.\nTo use it, you create a PyTorch model that takes particle\npositions as input and produces energy as output. This plugin\nuses the model to apply forces to particles during a simulation.\n",
      "dev_url": "https://github.com/openmm/openmm-torch",
      "doc_url": "https://github.com/openmm/openmm-torch",
      "home": "https://github.com/openmm/openmm-torch",
      "license": "MIT",
      "license_family": "MIT",
      "license_file": "README.md",
      "summary": "OpenMM plugin to define forces with neural networks"
    },
    "build": {
      "number": "1",
      "string": "cpu_py39h1234567_1"
    },
    "extra": {
      "recipe-maintainers": [
        "raimis",
        "jaimergp",
        "peastman",
        "mikemhenry",
        "RaulPPelaez"
      ]
    },
    "package": {
      "name": "openmm-torch",
      "version": "1.5.1"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "cmake",
        "make"
      ],
      "host": [
        "python",
        "setuptools",
        "pip",
        "swig",
        "openmm >=8.3.0",
        "khronos-opencl-icd-loader",
        "pytorch",
        "pytorch =*=cpu*"
      ],
      "run": [
        "python",
        "openmm",
        "khronos-opencl-icd-loader",
        "ocl_icd_wrapper_apple"
      ],
      "run_constrained": [
        "pytorch =*=cpu*"
      ]
    },
    "schema_version": 0,
    "source": {
      "git_rev": "v1.5.1",
      "git_url": "https://github.com/openmm/openmm-torch.git"
    },
    "test": {
      "imports": [
        "openmmtorch"
      ]
    }
  },
  "osx_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "khronos-opencl-icd-loader",
        "openmm",
        "pip",
        "python",
        "pytorch",
        "setuptools",
        "swig"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "khronos-opencl-icd-loader",
        "ocl_icd_wrapper_apple",
        "openmm",
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "osx_arm64_meta_yaml": {
    "about": {
      "description": "This is a plugin for OpenMM that allows neural networks to be\nused for defining forces. It is implemented with PyTorch.\nTo use it, you create a PyTorch model that takes particle\npositions as input and produces energy as output. This plugin\nuses the model to apply forces to particles during a simulation.\n",
      "dev_url": "https://github.com/openmm/openmm-torch",
      "doc_url": "https://github.com/openmm/openmm-torch",
      "home": "https://github.com/openmm/openmm-torch",
      "license": "MIT",
      "license_family": "MIT",
      "license_file": "README.md",
      "summary": "OpenMM plugin to define forces with neural networks"
    },
    "build": {
      "number": "1",
      "string": "cpu_py39h1234567_1"
    },
    "extra": {
      "recipe-maintainers": [
        "raimis",
        "jaimergp",
        "peastman",
        "mikemhenry",
        "RaulPPelaez"
      ]
    },
    "package": {
      "name": "openmm-torch",
      "version": "1.5.1"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "cmake",
        "make"
      ],
      "host": [
        "python",
        "setuptools",
        "pip",
        "swig",
        "openmm >=8.3.0",
        "khronos-opencl-icd-loader",
        "pytorch",
        "pytorch =*=cpu*"
      ],
      "run": [
        "python",
        "openmm",
        "khronos-opencl-icd-loader",
        "ocl_icd_wrapper_apple"
      ],
      "run_constrained": [
        "pytorch =*=cpu*"
      ]
    },
    "schema_version": 0,
    "source": {
      "git_rev": "v1.5.1",
      "git_url": "https://github.com/openmm/openmm-torch.git"
    },
    "test": {
      "imports": [
        "openmmtorch"
      ]
    }
  },
  "osx_arm64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "khronos-opencl-icd-loader",
        "openmm",
        "pip",
        "python",
        "pytorch",
        "setuptools",
        "swig"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "khronos-opencl-icd-loader",
        "ocl_icd_wrapper_apple",
        "openmm",
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "outputs_names": {
    "__set__": true,
    "elements": [
      "openmm-torch"
    ]
  },
  "parsing_error": false,
  "platforms": [
    "linux_64",
    "linux_aarch64",
    "osx_64",
    "osx_arm64",
    "win_64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/openmm-torch.json"
  },
  "raw_meta_yaml": "{% set name = \"openmm-torch\" %}\n{% set version = \"1.5.1\" %}\n\n# see github.com/conda-forge/conda-forge.github.io/issues/1059 for naming discussion\n{% set torch_proc_type = \"cuda\" if cuda_compiler_version != \"None\" else \"cpu\" %}\n\n{% if cuda_compiler_version in (None, \"None\", True, False) %}\n{% set cuda_major = 0 %}\n{% else %}\n{% set cuda_major = environ.get(\"cuda_compiler_version\", \"11.8\").split(\".\")[0] | int %}\n{% endif %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  git_url: https://github.com/openmm/{{ name }}.git\n  git_rev: \"v1.5.1\"\nbuild:\n  number: 1\n  string: cuda{{ cuda_compiler_version | replace('.', '') }}py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version != \"None\"]\n  string: cpu_py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version == \"None\"]\n  skip: true  # [aarch64 and cuda_compiler_version not in (undefined, 'None')]\n  # pytorch in conda-forge does not support CUDA 11.8 anymore\n  skip: true  # [cuda_compiler_version == \"11.8\"]\n\nrequirements:\n  build:\n    - python                                 # [build_platform != target_platform]\n    - cross-python_{{ target_platform }}     # [build_platform != target_platform]\n    - numpy >=1.19                           # [build_platform != target_platform]\n    - swig                                   # [build_platform != target_platform]\n    - pytorch                                # [build_platform != target_platform]\n    - pytorch =*={{ torch_proc_type }}*      # [build_platform != target_platform]\n    - openmm >=8.3.0                         # [build_platform != target_platform]\n    - {{ compiler('c') }}\n    - {{ stdlib(\"c\") }}\n    - {{ compiler('cxx') }}\n    - {{ compiler('cuda') }}  # [cuda_compiler_version not in (undefined, 'None')]\n    - {{ cdt('mesa-libgl-devel') }}  # [linux]\n    {% if cuda_major >= 12 %}\n    - libcufft-dev\n    - cuda-driver-dev   # [linux]\n    - cuda-cudart-dev\n    - cuda-nvrtc-dev\n    - cuda-nvtx-dev\n    - cuda-nvml-dev\n    - libcublas-dev\n    - libcurand-dev\n    {% endif %}\n    - cuda-version {{ cuda_compiler_version }}  # [cuda_compiler_version not in (undefined, 'None')]\n    - cmake\n    - make\n  host:\n    - python\n    - setuptools\n    - pip\n    - swig\n    - openmm >=8.3.0\n    - ocl-icd  # [linux]\n    - khronos-opencl-icd-loader  # [osx]\n    - pytorch\n    - pytorch =*={{ torch_proc_type }}*\n    - cuda-version {{ cuda_compiler_version }}  # [cuda_compiler_version not in (undefined, 'None')]\n    - nvtx-c                                    # [cuda_compiler_version not in (undefined, 'None') and win]\n  run:\n    - python\n    - {{ pin_compatible('openmm', max_pin='x.x') }}\n    - ocl-icd  # [linux]\n    - ocl-icd-system  # [linux]\n    - khronos-opencl-icd-loader  # [osx]\n    - ocl_icd_wrapper_apple      # [osx]\n  run_constrained:\n    # 2022/02/05 hmaarrfk\n    # While conda packaging seems to allow us to specify\n    # constraints on the same package in different lines\n    # the resulting package doesn't have the ability to\n    # be specified in multiples lines\n    # This makes it tricky to use run_exports\n    # we add the GPU constraint in the run_constrained\n    # to allow us to have \"two\" constraints on the\n    # running package\n    - pytorch =*={{ torch_proc_type }}*\n\ntest:\n  imports:\n    - openmmtorch\n\nabout:\n  home: https://github.com/openmm/openmm-torch\n  license: MIT\n  license_family: MIT\n  license_file: README.md\n  summary: OpenMM plugin to define forces with neural networks\n  description: |\n    This is a plugin for OpenMM that allows neural networks to be\n    used for defining forces. It is implemented with PyTorch.\n    To use it, you create a PyTorch model that takes particle\n    positions as input and produces energy as output. This plugin\n    uses the model to apply forces to particles during a simulation.\n  doc_url: https://github.com/openmm/openmm-torch\n  dev_url: https://github.com/openmm/openmm-torch\n\nextra:\n  recipe-maintainers:\n    - raimis\n    - jaimergp\n    - peastman\n    - mikemhenry\n    - RaulPPelaez\n",
  "req": {
    "__set__": true,
    "elements": [
      "c_compiler_stub",
      "c_stdlib_stub",
      "cdt_stub",
      "cmake",
      "cuda-version",
      "cuda_compiler_stub",
      "cxx_compiler_stub",
      "khronos-opencl-icd-loader",
      "make",
      "nvtx-c",
      "ocl-icd",
      "ocl-icd-system",
      "ocl_icd_wrapper_apple",
      "openmm",
      "pip",
      "python",
      "pytorch",
      "setuptools",
      "swig"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cdt_stub",
        "cmake",
        "cuda-version",
        "cuda_compiler_stub",
        "cxx_compiler_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cuda-version",
        "cuda_compiler_stub",
        "cxx_compiler_stub",
        "khronos-opencl-icd-loader",
        "nvtx-c",
        "ocl-icd",
        "openmm",
        "pip",
        "python",
        "pytorch",
        "setuptools",
        "swig"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cuda_compiler_stub",
        "cxx_compiler_stub",
        "khronos-opencl-icd-loader",
        "ocl-icd",
        "ocl-icd-system",
        "ocl_icd_wrapper_apple",
        "openmm",
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cdt_stub",
        "cmake",
        "cuda-version 12.6",
        "cuda_compiler_stub",
        "cxx_compiler_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "cuda-version 12.6",
        "khronos-opencl-icd-loader",
        "nvtx-c",
        "ocl-icd",
        "openmm >=8.3.0",
        "pip",
        "python",
        "pytorch",
        "pytorch =*=cpu*",
        "pytorch =*=cuda*",
        "setuptools",
        "swig"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "khronos-opencl-icd-loader",
        "ocl-icd",
        "ocl-icd-system",
        "ocl_icd_wrapper_apple",
        "openmm",
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "url": null,
  "version": "1.5.1",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/openmm-torch.json"
  },
  "win_64_meta_yaml": {
    "about": {
      "description": "This is a plugin for OpenMM that allows neural networks to be\nused for defining forces. It is implemented with PyTorch.\nTo use it, you create a PyTorch model that takes particle\npositions as input and produces energy as output. This plugin\nuses the model to apply forces to particles during a simulation.\n",
      "dev_url": "https://github.com/openmm/openmm-torch",
      "doc_url": "https://github.com/openmm/openmm-torch",
      "home": "https://github.com/openmm/openmm-torch",
      "license": "MIT",
      "license_family": "MIT",
      "license_file": "README.md",
      "summary": "OpenMM plugin to define forces with neural networks"
    },
    "build": {
      "number": "1",
      "string": "cuda126py39h1234567_1"
    },
    "extra": {
      "recipe-maintainers": [
        "raimis",
        "jaimergp",
        "peastman",
        "mikemhenry",
        "RaulPPelaez"
      ]
    },
    "package": {
      "name": "openmm-torch",
      "version": "1.5.1"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "cmake",
        "make",
        "cuda_compiler_stub",
        "cuda-version 12.6"
      ],
      "host": [
        "python",
        "setuptools",
        "pip",
        "swig",
        "openmm >=8.3.0",
        "pytorch",
        "pytorch =*=cpu*",
        "pytorch =*=cuda*",
        "cuda-version 12.6",
        "nvtx-c"
      ],
      "run": [
        "python",
        "openmm"
      ],
      "run_constrained": [
        "pytorch =*=cpu*",
        "pytorch =*=cuda*"
      ]
    },
    "schema_version": 0,
    "source": {
      "git_rev": "v1.5.1",
      "git_url": "https://github.com/openmm/openmm-torch.git"
    },
    "test": {
      "imports": [
        "openmmtorch"
      ]
    }
  },
  "win_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cuda-version",
        "cuda_compiler_stub",
        "cxx_compiler_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "cuda-version",
        "nvtx-c",
        "openmm",
        "pip",
        "python",
        "pytorch",
        "setuptools",
        "swig"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "openmm",
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  }
}