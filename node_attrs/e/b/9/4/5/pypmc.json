{
  "archived": false,
  "branch": "main",
  "conda-forge.yml": {
    "bot": {
      "automerge": true
    },
    "conda_build": {
      "pkg_format": "2"
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    }
  },
  "feedstock_name": "pypmc",
  "hash_type": "sha256",
  "linux_64_meta_yaml": {
    "about": {
      "description": "pypmc is a python package focusing on adaptive importance sampling. It can be used for integration and sampling from a user-defined target density. A typical application is Bayesian inference, where one wants to sample from the posterior to marginalize over parameters and to compute the evidence. The key idea is to create a good proposal density by adapting a mixture of Gaussian or student’s t components to the target density. The package is able to efficiently integrate multimodal functions in up to about 30-40 dimensions at the level of 1% accuracy or less. For many problems, this is achieved without requiring any manual input from the user about details of the function. Importance sampling supports parallelization on multiple machines via mpi4py.\n\nUseful tools that can be used stand-alone include:\n\n* importance sampling (sampling & integration)\n* adaptive Markov chain Monte Carlo (sampling)\n* variational Bayes (clustering)\n* population Monte Carlo (clustering)\n",
      "dev_url": "https://github.com/pypmc/pypmc/",
      "doc_url": "https://pypmc.github.io/",
      "home": "https://pypmc.github.io/",
      "license": "GPL-2.0-or-later",
      "license_family": "GPL",
      "license_file": "LICENSE",
      "summary": "pypmc is a python package focusing on adaptive importance sampling"
    },
    "build": {
      "number": "1",
      "script": "PYTHON -m pip install .[plotting,parallelization] -vv"
    },
    "extra": {
      "recipe-maintainers": [
        "JohannesBuchner"
      ]
    },
    "package": {
      "name": "pypmc",
      "version": "1.2.2"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cython >=0.21"
      ],
      "host": [
        "python",
        "pip",
        "cython >=0.21",
        "numpy >=1.6,<2.0",
        "mpi4py",
        "scipy"
      ],
      "run": [
        "python",
        "mpi4py",
        "numpy",
        "scipy",
        "matplotlib-base"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "bcfee5131607c3e55dd5d6e4711b9e392174d317e9c22af051cd613bf16c348a",
      "url": "https://pypi.io/packages/source/p/pypmc/pypmc-1.2.2.tar.gz"
    },
    "test": {
      "imports": [
        "pypmc"
      ]
    }
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cython"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "cython",
        "mpi4py",
        "numpy",
        "pip",
        "python",
        "scipy"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "matplotlib-base",
        "mpi4py",
        "numpy",
        "python",
        "scipy"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "meta_yaml": {
    "about": {
      "description": "pypmc is a python package focusing on adaptive importance sampling. It can be used for integration and sampling from a user-defined target density. A typical application is Bayesian inference, where one wants to sample from the posterior to marginalize over parameters and to compute the evidence. The key idea is to create a good proposal density by adapting a mixture of Gaussian or student’s t components to the target density. The package is able to efficiently integrate multimodal functions in up to about 30-40 dimensions at the level of 1% accuracy or less. For many problems, this is achieved without requiring any manual input from the user about details of the function. Importance sampling supports parallelization on multiple machines via mpi4py.\n\nUseful tools that can be used stand-alone include:\n\n* importance sampling (sampling & integration)\n* adaptive Markov chain Monte Carlo (sampling)\n* variational Bayes (clustering)\n* population Monte Carlo (clustering)\n",
      "dev_url": "https://github.com/pypmc/pypmc/",
      "doc_url": "https://pypmc.github.io/",
      "home": "https://pypmc.github.io/",
      "license": "GPL-2.0-or-later",
      "license_family": "GPL",
      "license_file": "LICENSE",
      "summary": "pypmc is a python package focusing on adaptive importance sampling"
    },
    "build": {
      "number": "1",
      "script": "PYTHON -m pip install .[plotting,parallelization] -vv"
    },
    "extra": {
      "recipe-maintainers": [
        "JohannesBuchner"
      ]
    },
    "package": {
      "name": "pypmc",
      "version": "1.2.2"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cython >=0.21"
      ],
      "host": [
        "python",
        "pip",
        "cython >=0.21",
        "numpy >=1.6,<2.0",
        "mpi4py",
        "scipy"
      ],
      "run": [
        "python",
        "mpi4py",
        "numpy",
        "scipy",
        "matplotlib-base"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "bcfee5131607c3e55dd5d6e4711b9e392174d317e9c22af051cd613bf16c348a",
      "url": "https://pypi.io/packages/source/p/pypmc/pypmc-1.2.2.tar.gz"
    },
    "test": {
      "imports": [
        "pypmc"
      ]
    }
  },
  "name": "pypmc",
  "osx_64_meta_yaml": {
    "about": {
      "description": "pypmc is a python package focusing on adaptive importance sampling. It can be used for integration and sampling from a user-defined target density. A typical application is Bayesian inference, where one wants to sample from the posterior to marginalize over parameters and to compute the evidence. The key idea is to create a good proposal density by adapting a mixture of Gaussian or student’s t components to the target density. The package is able to efficiently integrate multimodal functions in up to about 30-40 dimensions at the level of 1% accuracy or less. For many problems, this is achieved without requiring any manual input from the user about details of the function. Importance sampling supports parallelization on multiple machines via mpi4py.\n\nUseful tools that can be used stand-alone include:\n\n* importance sampling (sampling & integration)\n* adaptive Markov chain Monte Carlo (sampling)\n* variational Bayes (clustering)\n* population Monte Carlo (clustering)\n",
      "dev_url": "https://github.com/pypmc/pypmc/",
      "doc_url": "https://pypmc.github.io/",
      "home": "https://pypmc.github.io/",
      "license": "GPL-2.0-or-later",
      "license_family": "GPL",
      "license_file": "LICENSE",
      "summary": "pypmc is a python package focusing on adaptive importance sampling"
    },
    "build": {
      "number": "1",
      "script": "PYTHON -m pip install .[plotting,parallelization] -vv"
    },
    "extra": {
      "recipe-maintainers": [
        "JohannesBuchner"
      ]
    },
    "package": {
      "name": "pypmc",
      "version": "1.2.2"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cython >=0.21"
      ],
      "host": [
        "python",
        "pip",
        "cython >=0.21",
        "numpy >=1.6,<2.0",
        "mpi4py",
        "scipy"
      ],
      "run": [
        "python",
        "mpi4py",
        "numpy",
        "scipy",
        "matplotlib-base"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "bcfee5131607c3e55dd5d6e4711b9e392174d317e9c22af051cd613bf16c348a",
      "url": "https://pypi.io/packages/source/p/pypmc/pypmc-1.2.2.tar.gz"
    },
    "test": {
      "imports": [
        "pypmc"
      ]
    }
  },
  "osx_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cython"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "cython",
        "mpi4py",
        "numpy",
        "pip",
        "python",
        "scipy"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "matplotlib-base",
        "mpi4py",
        "numpy",
        "python",
        "scipy"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "outputs_names": {
    "__set__": true,
    "elements": [
      "pypmc"
    ]
  },
  "parsing_error": false,
  "platforms": [
    "linux_64",
    "osx_64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/pypmc.json"
  },
  "raw_meta_yaml": "{% set name = \"pypmc\" %}\n{% set version = \"1.2.2\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: bcfee5131607c3e55dd5d6e4711b9e392174d317e9c22af051cd613bf16c348a\n\nbuild:\n  number: 1\n  skip: true  # [py<30 or python_impl == \"pypy\" or win]\n  script: {{ PYTHON }} -m pip install .[plotting,parallelization] -vv\n\nrequirements:\n  build:\n    # cython project, so need a compiler\n    - {{ compiler('c') }}\n    - {{ stdlib(\"c\") }}\n    - cython >=0.21\n  host:\n    - python\n    - pip\n    - cython >=0.21\n    - numpy >=1.6,<2.0\n    - mpi4py\n    - scipy\n\n  run:\n    - python\n    - mpi4py\n    - numpy\n    - scipy\n    - matplotlib-base\n\n\ntest:\n  imports:\n    - pypmc\n\nabout:\n  home: https://pypmc.github.io/\n  license: GPL-2.0-or-later\n  license_family: GPL\n  license_file: LICENSE\n  summary: pypmc is a python package focusing on adaptive importance sampling\n\n  description: |\n    pypmc is a python package focusing on adaptive importance sampling. It can be used for integration and sampling from a user-defined target density. A typical application is Bayesian inference, where one wants to sample from the posterior to marginalize over parameters and to compute the evidence. The key idea is to create a good proposal density by adapting a mixture of Gaussian or student’s t components to the target density. The package is able to efficiently integrate multimodal functions in up to about 30-40 dimensions at the level of 1% accuracy or less. For many problems, this is achieved without requiring any manual input from the user about details of the function. Importance sampling supports parallelization on multiple machines via mpi4py.\n\n    Useful tools that can be used stand-alone include:\n\n    * importance sampling (sampling & integration)\n    * adaptive Markov chain Monte Carlo (sampling)\n    * variational Bayes (clustering)\n    * population Monte Carlo (clustering)\n\n  doc_url: https://pypmc.github.io/\n  dev_url: https://github.com/pypmc/pypmc/\n\nextra:\n  recipe-maintainers:\n    - JohannesBuchner\n",
  "req": {
    "__set__": true,
    "elements": [
      "c_compiler_stub",
      "c_stdlib_stub",
      "cython",
      "matplotlib-base",
      "mpi4py",
      "numpy",
      "pip",
      "python",
      "scipy"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cython"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cython",
        "mpi4py",
        "numpy",
        "pip",
        "python",
        "scipy"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "matplotlib-base",
        "mpi4py",
        "numpy",
        "python",
        "scipy"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cython >=0.21"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "cython >=0.21",
        "mpi4py",
        "numpy >=1.6,<2.0",
        "pip",
        "python",
        "scipy"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "matplotlib-base",
        "mpi4py",
        "numpy",
        "python",
        "scipy"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "url": "https://pypi.io/packages/source/p/pypmc/pypmc-1.2.2.tar.gz",
  "version": "1.2.2",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/pypmc.json"
  }
}