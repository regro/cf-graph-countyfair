{
  "archived": true,
  "branch": "main",
  "conda-forge.yml": {},
  "feedstock_name": "openmm-atmmetaforce-plugin",
  "hash_type": "sha256",
  "linux_64_meta_yaml": {
    "about": {
      "description": "This plugin implements the Alchemical Transfer Potential (ATM) for the calculation\nof absolute and relative binding free energies of molecular complexes\nin OpenMM, a high performance toolkit for molecular simulation.\n",
      "dev_url": "https://github.com/Gallicchio-Lab/openmm-atmmetaforce-plugin.git",
      "doc_url": "https://github.com/Gallicchio-Lab/async_re-openmm/tree/master/examples",
      "home": "https://github.com/Gallicchio-Lab/openmm-atmmetaforce-plugin.git",
      "license": "LGPL-2.0-only",
      "license_family": "LGPL",
      "license_file": [
        "LICENSE",
        "LICENSE",
        "LICENSE",
        "LICENSE",
        "LICENSE",
        "LICENSE",
        "LICENSE",
        "LICENSE"
      ],
      "summary": "The Alchemical Transfer Method Plugin for OpenMM"
    },
    "build": {
      "number": "1",
      "rpaths": [
        "lib/",
        "lib/plugins/",
        "lib/",
        "lib/plugins/",
        "lib/",
        "lib/plugins/",
        "lib/",
        "lib/plugins/",
        "lib/",
        "lib/plugins/",
        "lib/",
        "lib/plugins/",
        "lib/",
        "lib/plugins/",
        "lib/",
        "lib/plugins/"
      ],
      "run_exports": [
        "openmm-atmmetaforce-plugin",
        "openmm-atmmetaforce-plugin",
        "openmm-atmmetaforce-plugin",
        "openmm-atmmetaforce-plugin",
        "openmm-atmmetaforce-plugin",
        "openmm-atmmetaforce-plugin",
        "openmm-atmmetaforce-plugin",
        "openmm-atmmetaforce-plugin"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "egallicc",
        "egallicc",
        "egallicc",
        "egallicc",
        "egallicc",
        "egallicc",
        "egallicc",
        "egallicc"
      ]
    },
    "package": {
      "name": "openmm-atmmetaforce-plugin",
      "version": "0.3.5"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "cxx_compiler_stub",
        "cuda_compiler_stub",
        "make",
        "cmake",
        "swig",
        "c_compiler_stub",
        "cxx_compiler_stub",
        "cuda_compiler_stub",
        "make",
        "cmake",
        "swig",
        "c_compiler_stub",
        "cxx_compiler_stub",
        "cuda_compiler_stub",
        "make",
        "cmake",
        "swig",
        "c_compiler_stub",
        "cxx_compiler_stub",
        "cuda_compiler_stub",
        "make",
        "cmake",
        "swig",
        "c_compiler_stub",
        "cxx_compiler_stub",
        "cuda_compiler_stub",
        "make",
        "cmake",
        "swig",
        "c_compiler_stub",
        "cxx_compiler_stub",
        "cuda_compiler_stub",
        "make",
        "cmake",
        "swig",
        "c_compiler_stub",
        "cxx_compiler_stub",
        "cuda_compiler_stub",
        "make",
        "cmake",
        "swig",
        "c_compiler_stub",
        "cxx_compiler_stub",
        "cuda_compiler_stub",
        "make",
        "cmake",
        "swig"
      ],
      "host": [
        "openmm",
        "python",
        "pip",
        "setuptools",
        "openmm",
        "python",
        "pip",
        "setuptools",
        "openmm",
        "python",
        "pip",
        "setuptools",
        "openmm",
        "python",
        "pip",
        "setuptools",
        "openmm",
        "python",
        "pip",
        "setuptools",
        "openmm",
        "python",
        "pip",
        "setuptools",
        "openmm",
        "python",
        "pip",
        "setuptools",
        "openmm",
        "python",
        "pip",
        "setuptools"
      ],
      "run": [
        "openmm",
        "python",
        "openmm",
        "python",
        "openmm",
        "python",
        "openmm",
        "python",
        "openmm",
        "python",
        "openmm",
        "python",
        "openmm",
        "python",
        "openmm",
        "python"
      ]
    },
    "source": {
      "sha256": "a6e96971d9d235a821653513123d3bd9876ad2bf540700e42327f668e96502ab",
      "url": "https://github.com/Gallicchio-Lab/openmm-atmmetaforce-plugin/archive/refs/tags/v0.3.5.tar.gz"
    },
    "test": {
      "imports": [
        "atmmetaforce",
        "atmmetaforce",
        "atmmetaforce",
        "atmmetaforce",
        "atmmetaforce",
        "atmmetaforce",
        "atmmetaforce",
        "atmmetaforce"
      ]
    }
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "cmake",
        "cuda_compiler_stub",
        "cxx_compiler_stub",
        "make",
        "swig"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "openmm",
        "pip",
        "python",
        "setuptools"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "openmm",
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "meta_yaml": {
    "about": {
      "description": "This plugin implements the Alchemical Transfer Potential (ATM) for the calculation\nof absolute and relative binding free energies of molecular complexes\nin OpenMM, a high performance toolkit for molecular simulation.\n",
      "dev_url": "https://github.com/Gallicchio-Lab/openmm-atmmetaforce-plugin.git",
      "doc_url": "https://github.com/Gallicchio-Lab/async_re-openmm/tree/master/examples",
      "home": "https://github.com/Gallicchio-Lab/openmm-atmmetaforce-plugin.git",
      "license": "LGPL-2.0-only",
      "license_family": "LGPL",
      "license_file": [
        "LICENSE",
        "LICENSE",
        "LICENSE",
        "LICENSE",
        "LICENSE",
        "LICENSE",
        "LICENSE",
        "LICENSE",
        "LICENSE",
        "LICENSE",
        "LICENSE",
        "LICENSE",
        "LICENSE"
      ],
      "summary": "The Alchemical Transfer Method Plugin for OpenMM"
    },
    "build": {
      "number": "1",
      "rpaths": [
        "lib/",
        "lib/plugins/",
        "lib/",
        "lib/plugins/",
        "lib/",
        "lib/plugins/",
        "lib/",
        "lib/plugins/",
        "lib/",
        "lib/plugins/",
        "lib/",
        "lib/plugins/",
        "lib/",
        "lib/plugins/",
        "lib/",
        "lib/plugins/",
        "lib/",
        "lib/plugins/",
        "lib/",
        "lib/plugins/",
        "lib/",
        "lib/plugins/",
        "lib/",
        "lib/plugins/",
        "lib/",
        "lib/plugins/"
      ],
      "run_exports": [
        "openmm-atmmetaforce-plugin",
        "openmm-atmmetaforce-plugin",
        "openmm-atmmetaforce-plugin",
        "openmm-atmmetaforce-plugin",
        "openmm-atmmetaforce-plugin",
        "openmm-atmmetaforce-plugin",
        "openmm-atmmetaforce-plugin",
        "openmm-atmmetaforce-plugin",
        "openmm-atmmetaforce-plugin",
        "openmm-atmmetaforce-plugin",
        "openmm-atmmetaforce-plugin",
        "openmm-atmmetaforce-plugin",
        "openmm-atmmetaforce-plugin"
      ],
      "skip": true
    },
    "extra": {
      "recipe-maintainers": [
        "egallicc",
        "egallicc",
        "egallicc",
        "egallicc",
        "egallicc",
        "egallicc",
        "egallicc",
        "egallicc",
        "egallicc",
        "egallicc",
        "egallicc",
        "egallicc",
        "egallicc"
      ]
    },
    "package": {
      "name": "openmm-atmmetaforce-plugin",
      "version": "0.3.5"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "cxx_compiler_stub",
        "cuda_compiler_stub",
        "make",
        "cmake",
        "swig",
        "c_compiler_stub",
        "cxx_compiler_stub",
        "cuda_compiler_stub",
        "make",
        "cmake",
        "swig",
        "c_compiler_stub",
        "cxx_compiler_stub",
        "cuda_compiler_stub",
        "make",
        "cmake",
        "swig",
        "c_compiler_stub",
        "cxx_compiler_stub",
        "cuda_compiler_stub",
        "make",
        "cmake",
        "swig",
        "c_compiler_stub",
        "cxx_compiler_stub",
        "cuda_compiler_stub",
        "make",
        "cmake",
        "swig",
        "c_compiler_stub",
        "cxx_compiler_stub",
        "cuda_compiler_stub",
        "make",
        "cmake",
        "swig",
        "c_compiler_stub",
        "cxx_compiler_stub",
        "cuda_compiler_stub",
        "make",
        "cmake",
        "swig",
        "c_compiler_stub",
        "cxx_compiler_stub",
        "cuda_compiler_stub",
        "make",
        "cmake",
        "swig",
        "c_compiler_stub",
        "cxx_compiler_stub",
        "make",
        "cmake",
        "swig",
        "c_compiler_stub",
        "cxx_compiler_stub",
        "make",
        "cmake",
        "swig",
        "c_compiler_stub",
        "cxx_compiler_stub",
        "make",
        "cmake",
        "swig",
        "c_compiler_stub",
        "cxx_compiler_stub",
        "make",
        "cmake",
        "swig",
        "c_compiler_stub",
        "cxx_compiler_stub",
        "cuda_compiler_stub",
        "ninja",
        "cmake",
        "swig"
      ],
      "host": [
        "openmm",
        "python",
        "pip",
        "setuptools",
        "openmm",
        "python",
        "pip",
        "setuptools",
        "openmm",
        "python",
        "pip",
        "setuptools",
        "openmm",
        "python",
        "pip",
        "setuptools",
        "openmm",
        "python",
        "pip",
        "setuptools",
        "openmm",
        "python",
        "pip",
        "setuptools",
        "openmm",
        "python",
        "pip",
        "setuptools",
        "openmm",
        "python",
        "pip",
        "setuptools",
        "openmm",
        "python",
        "pip",
        "setuptools",
        "openmm",
        "python",
        "pip",
        "setuptools",
        "openmm",
        "python",
        "pip",
        "setuptools",
        "openmm",
        "python",
        "pip",
        "setuptools",
        "openmm",
        "python",
        "pip",
        "setuptools"
      ],
      "run": [
        "openmm",
        "python",
        "openmm",
        "python",
        "openmm",
        "python",
        "openmm",
        "python",
        "openmm",
        "python",
        "openmm",
        "python",
        "openmm",
        "python",
        "openmm",
        "python",
        "openmm",
        "python",
        "openmm",
        "python",
        "openmm",
        "python",
        "openmm",
        "python",
        "openmm",
        "python"
      ]
    },
    "source": {
      "sha256": "a6e96971d9d235a821653513123d3bd9876ad2bf540700e42327f668e96502ab",
      "url": "https://github.com/Gallicchio-Lab/openmm-atmmetaforce-plugin/archive/refs/tags/v0.3.5.tar.gz"
    },
    "test": {
      "imports": [
        "atmmetaforce",
        "atmmetaforce",
        "atmmetaforce",
        "atmmetaforce",
        "atmmetaforce",
        "atmmetaforce",
        "atmmetaforce",
        "atmmetaforce",
        "atmmetaforce",
        "atmmetaforce",
        "atmmetaforce",
        "atmmetaforce",
        "atmmetaforce"
      ]
    }
  },
  "name": "openmm-atmmetaforce-plugin",
  "osx_64_meta_yaml": {
    "about": {
      "description": "This plugin implements the Alchemical Transfer Potential (ATM) for the calculation\nof absolute and relative binding free energies of molecular complexes\nin OpenMM, a high performance toolkit for molecular simulation.\n",
      "dev_url": "https://github.com/Gallicchio-Lab/openmm-atmmetaforce-plugin.git",
      "doc_url": "https://github.com/Gallicchio-Lab/async_re-openmm/tree/master/examples",
      "home": "https://github.com/Gallicchio-Lab/openmm-atmmetaforce-plugin.git",
      "license": "LGPL-2.0-only",
      "license_family": "LGPL",
      "license_file": [
        "LICENSE",
        "LICENSE",
        "LICENSE",
        "LICENSE"
      ],
      "summary": "The Alchemical Transfer Method Plugin for OpenMM"
    },
    "build": {
      "number": "1",
      "rpaths": [
        "lib/",
        "lib/plugins/",
        "lib/",
        "lib/plugins/",
        "lib/",
        "lib/plugins/",
        "lib/",
        "lib/plugins/"
      ],
      "run_exports": [
        "openmm-atmmetaforce-plugin",
        "openmm-atmmetaforce-plugin",
        "openmm-atmmetaforce-plugin",
        "openmm-atmmetaforce-plugin"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "egallicc",
        "egallicc",
        "egallicc",
        "egallicc"
      ]
    },
    "package": {
      "name": "openmm-atmmetaforce-plugin",
      "version": "0.3.5"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "cxx_compiler_stub",
        "make",
        "cmake",
        "swig",
        "c_compiler_stub",
        "cxx_compiler_stub",
        "make",
        "cmake",
        "swig",
        "c_compiler_stub",
        "cxx_compiler_stub",
        "make",
        "cmake",
        "swig",
        "c_compiler_stub",
        "cxx_compiler_stub",
        "make",
        "cmake",
        "swig"
      ],
      "host": [
        "openmm",
        "python",
        "pip",
        "setuptools",
        "openmm",
        "python",
        "pip",
        "setuptools",
        "openmm",
        "python",
        "pip",
        "setuptools",
        "openmm",
        "python",
        "pip",
        "setuptools"
      ],
      "run": [
        "openmm",
        "python",
        "openmm",
        "python",
        "openmm",
        "python",
        "openmm",
        "python"
      ]
    },
    "source": {
      "sha256": "a6e96971d9d235a821653513123d3bd9876ad2bf540700e42327f668e96502ab",
      "url": "https://github.com/Gallicchio-Lab/openmm-atmmetaforce-plugin/archive/refs/tags/v0.3.5.tar.gz"
    },
    "test": {
      "imports": [
        "atmmetaforce",
        "atmmetaforce",
        "atmmetaforce",
        "atmmetaforce"
      ]
    }
  },
  "osx_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "cmake",
        "cxx_compiler_stub",
        "make",
        "swig"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "openmm",
        "pip",
        "python",
        "setuptools"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "openmm",
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "outputs_names": {
    "__set__": true,
    "elements": [
      "openmm-atmmetaforce-plugin"
    ]
  },
  "parsing_error": false,
  "platforms": [
    "linux_64",
    "osx_64",
    "win_64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/openmm-atmmetaforce-plugin.json"
  },
  "raw_meta_yaml": "{% set name = \"openmm-atmmetaforce-plugin\" %}\n{% set version = \"0.3.5\" %}\n\npackage:\n  name: {{ name }}\n  version: {{ version }}\n\nsource:\n  url: https://github.com/Gallicchio-Lab/{{ name }}/archive/refs/tags/v{{ version }}.tar.gz\n  sha256: a6e96971d9d235a821653513123d3bd9876ad2bf540700e42327f668e96502ab\n\nbuild:\n  number: 1\n  skip: true  # [(cuda_compiler_version in (undefined, 'None') and (linux64 or win))]\n  # Skip broken OpenMM packages for Windows\n  skip: true  # [win and py==38]\n  skip: true  # [win and py==310]\n  skip: true  # [win and py==311]\n  rpaths:\n    - lib/\n    - lib/plugins/\n  run_exports:\n    # TODO: Relax max_pin at version 1.0 / stable API\n    - {{ pin_subpackage(name, max_pin='x.x.x') }}\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n    - {{ compiler('cuda') }}  # [linux64 or win64]\n    - make  # [unix]\n    - ninja  # [win]\n    - cmake\n    - swig\n\n  host:\n    - openmm\n    - python\n    - pip\n    - setuptools\n\n  run:\n    # openmm package is missing a run_export as of 9 June 2022\n    - {{ pin_compatible('openmm', min_pin='x.x', max_pin='x.x') }}\n    - python\n\ntest:\n  imports:\n    - atmmetaforce\n\nabout:\n  home: https://github.com/Gallicchio-Lab/openmm-atmmetaforce-plugin.git\n  license: LGPL-2.0-only\n  license_family: LGPL\n  license_file:\n    - LICENSE\n  summary: The Alchemical Transfer Method Plugin for OpenMM\n  description: |\n    This plugin implements the Alchemical Transfer Potential (ATM) for the calculation\n    of absolute and relative binding free energies of molecular complexes\n    in OpenMM, a high performance toolkit for molecular simulation.\n  doc_url: https://github.com/Gallicchio-Lab/async_re-openmm/tree/master/examples\n  dev_url: https://github.com/Gallicchio-Lab/openmm-atmmetaforce-plugin.git\n\nextra:\n  recipe-maintainers:\n    - egallicc\n",
  "req": {
    "__set__": true,
    "elements": [
      "c_compiler_stub",
      "cmake",
      "cuda_compiler_stub",
      "cxx_compiler_stub",
      "make",
      "ninja",
      "openmm",
      "pip",
      "python",
      "setuptools",
      "swig"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "cmake",
        "cuda_compiler_stub",
        "cxx_compiler_stub",
        "make",
        "ninja",
        "swig"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "cuda_compiler_stub",
        "cxx_compiler_stub",
        "openmm",
        "pip",
        "python",
        "setuptools"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "cuda_compiler_stub",
        "cxx_compiler_stub",
        "openmm",
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "cmake",
        "cuda_compiler_stub",
        "cxx_compiler_stub",
        "make",
        "ninja",
        "swig"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "openmm",
        "pip",
        "python",
        "setuptools"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "openmm",
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "url": "https://github.com/Gallicchio-Lab/openmm-atmmetaforce-plugin/archive/refs/tags/v0.3.5.tar.gz",
  "version": "0.3.5",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/openmm-atmmetaforce-plugin.json"
  },
  "win_64_meta_yaml": {
    "about": {
      "description": "This plugin implements the Alchemical Transfer Potential (ATM) for the calculation\nof absolute and relative binding free energies of molecular complexes\nin OpenMM, a high performance toolkit for molecular simulation.\n",
      "dev_url": "https://github.com/Gallicchio-Lab/openmm-atmmetaforce-plugin.git",
      "doc_url": "https://github.com/Gallicchio-Lab/async_re-openmm/tree/master/examples",
      "home": "https://github.com/Gallicchio-Lab/openmm-atmmetaforce-plugin.git",
      "license": "LGPL-2.0-only",
      "license_family": "LGPL",
      "license_file": [
        "LICENSE"
      ],
      "summary": "The Alchemical Transfer Method Plugin for OpenMM"
    },
    "build": {
      "number": "1",
      "rpaths": [
        "lib/",
        "lib/plugins/"
      ],
      "run_exports": [
        "openmm-atmmetaforce-plugin"
      ],
      "skip": true
    },
    "extra": {
      "recipe-maintainers": [
        "egallicc"
      ]
    },
    "package": {
      "name": "openmm-atmmetaforce-plugin",
      "version": "0.3.5"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "cxx_compiler_stub",
        "cuda_compiler_stub",
        "ninja",
        "cmake",
        "swig"
      ],
      "host": [
        "openmm",
        "python",
        "pip",
        "setuptools"
      ],
      "run": [
        "openmm",
        "python"
      ]
    },
    "source": {
      "sha256": "a6e96971d9d235a821653513123d3bd9876ad2bf540700e42327f668e96502ab",
      "url": "https://github.com/Gallicchio-Lab/openmm-atmmetaforce-plugin/archive/refs/tags/v0.3.5.tar.gz"
    },
    "test": {
      "imports": [
        "atmmetaforce"
      ]
    }
  },
  "win_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "cmake",
        "cuda_compiler_stub",
        "cxx_compiler_stub",
        "ninja",
        "swig"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "openmm",
        "pip",
        "python",
        "setuptools"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "openmm",
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  }
}