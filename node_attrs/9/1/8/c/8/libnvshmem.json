{
  "archived": false,
  "branch": "main",
  "conda-forge.yml": {
    "build_platform": {
      "linux_aarch64": "linux_64"
    },
    "conda_build": {
      "error_overlinking": true
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    },
    "provider": {
      "linux_aarch64": "default"
    }
  },
  "feedstock_name": "libnvshmem",
  "hash_type": "sha256",
  "linux_64_meta_yaml": {
    "about": {
      "description": "NVIDIA NVSHMEM is an NVIDIA based \"shared memory\" library that provides an easy-to-use CPU-side interface to allocate pinned memory that is symmetrically distributed across a cluster of NVIDIA GPUs.\nNVSHMEM can significantly reduce communication and coordination overheads by allowing programmers to perform these operations from within CUDA kernels and on CUDA streams.\n",
      "doc_url": "https://docs.nvidia.com/nvshmem/api/index.html",
      "home": "https://docs.nvidia.com/nvshmem/index.html",
      "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
      "license_file": "LICENSE",
      "license_url": "https://docs.nvidia.com/nvshmem/api/sla.html",
      "summary": "NVIDIA NVSHMEM is an NVIDIA based \"shared memory\" library that provides an easy-to-use CPU-side interface to allocate pinned memory that is symmetrically distributed across a cluster of NVIDIA GPUs."
    },
    "build": {
      "number": "0"
    },
    "extra": {
      "feedstock-name": "libnvshmem",
      "recipe-maintainers": [
        "conda-forge/cuda"
      ]
    },
    "outputs": [
      {
        "build": {
          "ignore_run_exports": [
            "cuda-version"
          ],
          "ignore_run_exports_from": [
            "cuda-cudart-dev"
          ],
          "missing_dso_whitelist": [
            "*libcuda.so*",
            "*openmpi*",
            "*libfabric*",
            "*libfabric1*",
            "*libmlx5*",
            "*libmpi*",
            "*libpmix*",
            "*liboshmem*",
            "*rdma-core*"
          ]
        },
        "files": [
          "lib/*nvshmem*.so.*",
          "lib/*nvshmem*.bc"
        ],
        "name": "libnvshmem3",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cuda_compiler_stub",
            "c_stdlib_stub"
          ],
          "host": [
            "cuda-version 12.9",
            "cuda-cudart-dev",
            "ucx"
          ],
          "run": [
            "cuda-version",
            "cuda-cudart",
            "libpciaccess",
            "nccl",
            "ucx"
          ]
        },
        "test": {
          "commands": [
            "test -L $PREFIX/lib/libnvshmem_host.so.3",
            "test -f $PREFIX/lib/libnvshmem_host.so.3.3.20",
            "test -L $PREFIX/lib/nvshmem_bootstrap_mpi.so.3",
            "test -f $PREFIX/lib/nvshmem_bootstrap_mpi.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_bootstrap_pmi.so.3",
            "test -f $PREFIX/lib/nvshmem_bootstrap_pmi.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_bootstrap_pmi2.so.3",
            "test -f $PREFIX/lib/nvshmem_bootstrap_pmi2.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_bootstrap_pmix.so.3",
            "test -f $PREFIX/lib/nvshmem_bootstrap_pmix.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_bootstrap_shmem.so.3",
            "test -f $PREFIX/lib/nvshmem_bootstrap_shmem.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_bootstrap_uid.so.3",
            "test -f $PREFIX/lib/nvshmem_bootstrap_uid.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_transport_ibdevx.so.3",
            "test -f $PREFIX/lib/nvshmem_transport_ibdevx.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_transport_ibgda.so.3",
            "test -f $PREFIX/lib/nvshmem_transport_ibgda.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_transport_ibrc.so.3",
            "test -f $PREFIX/lib/nvshmem_transport_ibrc.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_transport_libfabric.so.3",
            "test -f $PREFIX/lib/nvshmem_transport_libfabric.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_transport_ucx.so.3",
            "test -f $PREFIX/lib/nvshmem_transport_ucx.so.3.0.0"
          ]
        }
      },
      {
        "build": {
          "ignore_run_exports": [
            "cuda-version"
          ],
          "ignore_run_exports_from": [
            "cuda-cudart-dev"
          ],
          "missing_dso_whitelist": [
            "*libcuda.so*",
            "*libnvshmem_host.so.3",
            "*libmpi*",
            "*libpmix*",
            "*liboshmem*"
          ],
          "run_exports": [
            "libnvshmem3"
          ]
        },
        "files": [
          "bin/examples",
          "bin/perftest",
          "bin/nvshm*",
          "bin/hydra_pmi_proxy",
          "bin/hydra_nameserver",
          "bin/hydra_persist",
          "include/nvshmem*.h",
          "include/bootstrap_device_host",
          "include/device",
          "include/device_host",
          "include/device_host_transport",
          "include/host",
          "include/non_abi",
          "lib/cmake/nvshmem",
          "lib/*nvshmem*.so",
          "share/src"
        ],
        "name": "libnvshmem-dev",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "cuda_compiler_stub",
            "cxx_compiler_stub",
            "c_stdlib_stub"
          ],
          "host": [
            "cuda-version 12.9",
            "cuda-cudart-dev",
            "libpciaccess"
          ],
          "run": [
            "cuda-version",
            "libnvshmem3",
            "cuda-cudart"
          ]
        },
        "test": {
          "commands": [
            "test -f $PREFIX/bin/hydra_pmi_proxy",
            "test -f $PREFIX/bin/nvshmem-info",
            "test -f $PREFIX/bin/nvshmrun.hydra",
            "test -f $PREFIX/bin/hydra_nameserver",
            "test -f $PREFIX/bin/nvshmrun",
            "test -f $PREFIX/bin/hydra_persist",
            "test -f $PREFIX/bin/examples/collective-launch",
            "test -f $PREFIX/bin/examples/on-stream",
            "test -f $PREFIX/bin/perftest/device/pt-to-pt/shmem_p_latency",
            "test -f $PREFIX/bin/perftest/device/coll/reduction_latency",
            "test -f $PREFIX/bin/perftest/host/init/malloc",
            "test -f $PREFIX/bin/perftest/host/pt-to-pt/bw",
            "test -f $PREFIX/bin/perftest/host/coll/broadcast_on_stream",
            "test -f $PREFIX/include/bootstrap_device_host/nvshmem_uniqueid.h",
            "test -f $PREFIX/include/device/nvshmem_defines.h",
            "test -f $PREFIX/include/device_host/nvshmem_types.h",
            "test -f $PREFIX/include/host/nvshmem_api.h",
            "test -f $PREFIX/include/non_abi/device/coll/defines.cuh",
            "test -f $PREFIX/include/device_host_transport/nvshmem_constants.h",
            "test -f $PREFIX/include/nvshmem.h",
            "test -f $PREFIX/include/nvshmemx.h",
            "test -f $PREFIX/lib/cmake/nvshmem/NVSHMEMConfig.cmake",
            "test -f $PREFIX/lib/cmake/nvshmem/NVSHMEMDeviceTargets-release.cmake",
            "test -f $PREFIX/lib/cmake/nvshmem/NVSHMEMDeviceTargets.cmake",
            "test -f $PREFIX/lib/cmake/nvshmem/NVSHMEMTargets-release.cmake",
            "test -f $PREFIX/lib/cmake/nvshmem/NVSHMEMTargets.cmake",
            "test -f $PREFIX/lib/cmake/nvshmem/NVSHMEMVersion.cmake",
            "test -L $PREFIX/lib/libnvshmem_host.so",
            "test -L $PREFIX/lib/nvshmem_bootstrap_mpi.so",
            "test -L $PREFIX/lib/nvshmem_bootstrap_pmi.so",
            "test -L $PREFIX/lib/nvshmem_bootstrap_pmi2.so",
            "test -L $PREFIX/lib/nvshmem_bootstrap_pmix.so",
            "test -L $PREFIX/lib/nvshmem_bootstrap_shmem.so",
            "test -L $PREFIX/lib/nvshmem_bootstrap_uid.so",
            "test -L $PREFIX/lib/nvshmem_transport_ibdevx.so",
            "test -L $PREFIX/lib/nvshmem_transport_ibgda.so",
            "test -L $PREFIX/lib/nvshmem_transport_ibrc.so",
            "test -L $PREFIX/lib/nvshmem_transport_libfabric.so",
            "test -L $PREFIX/lib/nvshmem_transport_ucx.so"
          ]
        }
      },
      {
        "files": [
          "lib/libnvshmem*.a"
        ],
        "name": "libnvshmem-static",
        "requirements": {
          "run": [
            "libnvshmem-dev"
          ]
        },
        "test": {
          "commands": [
            "test -f $PREFIX/lib/libnvshmem_device.a",
            "test -f $PREFIX/lib/libnvshmem.a",
            "bash compile_perf_test.sh"
          ],
          "files": [
            "compile_perf_test.sh"
          ],
          "requires": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "c_stdlib_stub",
            "cmake",
            "make",
            "cuda-version 12.9",
            "cuda_compiler_stub"
          ]
        }
      },
      {
        "about": {
          "description": "C++ accelerated Python bindings for NVIDIA NVSHMEM built with Cython. NVIDIA NVSHMEM is an NVIDIA based \"shared memory\" library that provides an easy-to-use CPU-side interface to allocate pinned memory that is symmetrically distributed across a cluster of NVIDIA GPUs.\n",
          "doc_url": "https://docs.nvidia.com/nvshmem/api/index.html",
          "home": "https://docs.nvidia.com/nvshmem/index.html",
          "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
          "license_file": "LICENSE",
          "license_url": "https://docs.nvidia.com/nvshmem/api/sla.html",
          "summary": "C++ accelerated Python bindings for NVIDIA NVSHMEM built with Cython"
        },
        "build": {
          "ignore_run_exports": [
            "cuda-version"
          ],
          "ignore_run_exports_from": [
            "cxx_compiler_stub",
            "cuda-cudart-dev"
          ],
          "script": "bash ${RECIPE_DIR}/nvshmem4py-build.sh",
          "skip": true,
          "string": "pyh1234567_0"
        },
        "name": "nvshmem4py",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "cuda_compiler_stub",
            "cxx_compiler_stub",
            "c_stdlib_stub"
          ],
          "host": [
            "cuda-version 12.9",
            "cython >=0.29.24",
            "pip",
            "python",
            "setuptools >=62"
          ],
          "run": [
            "libnvshmem-dev",
            "cuda-core 0.3.2",
            "cuda-python 13",
            "numpy",
            "python"
          ]
        },
        "test": {
          "commands": [
            "python - <<EOF\nimport nvshmem, sys\nprint(\"nvshmem.__version__ =\", nvshmem.__version__)\nEOF\n"
          ],
          "imports": [
            "nvshmem",
            "nvshmem.core",
            "nvshmem.bindings"
          ]
        },
        "version": "0.1.1.36309404"
      },
      {
        "build": {
          "ignore_run_exports": [
            "cuda-version"
          ],
          "ignore_run_exports_from": [
            "cuda-cudart-dev"
          ],
          "missing_dso_whitelist": [
            "*libcuda.so*",
            "*openmpi*",
            "*libfabric*",
            "*libfabric1*",
            "*libmlx5*",
            "*libmpi*",
            "*libpmix*",
            "*liboshmem*",
            "*rdma-core*"
          ]
        },
        "files": [
          "lib/*nvshmem*.so.*",
          "lib/*nvshmem*.bc"
        ],
        "name": "libnvshmem3",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cuda_compiler_stub",
            "c_stdlib_stub"
          ],
          "host": [
            "cuda-version 13.0",
            "cuda-cudart-dev",
            "ucx"
          ],
          "run": [
            "cuda-version",
            "cuda-cudart",
            "libpciaccess",
            "nccl",
            "ucx"
          ]
        },
        "test": {
          "commands": [
            "test -L $PREFIX/lib/libnvshmem_host.so.3",
            "test -f $PREFIX/lib/libnvshmem_host.so.3.3.20",
            "test -L $PREFIX/lib/nvshmem_bootstrap_mpi.so.3",
            "test -f $PREFIX/lib/nvshmem_bootstrap_mpi.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_bootstrap_pmi.so.3",
            "test -f $PREFIX/lib/nvshmem_bootstrap_pmi.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_bootstrap_pmi2.so.3",
            "test -f $PREFIX/lib/nvshmem_bootstrap_pmi2.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_bootstrap_pmix.so.3",
            "test -f $PREFIX/lib/nvshmem_bootstrap_pmix.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_bootstrap_shmem.so.3",
            "test -f $PREFIX/lib/nvshmem_bootstrap_shmem.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_bootstrap_uid.so.3",
            "test -f $PREFIX/lib/nvshmem_bootstrap_uid.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_transport_ibdevx.so.3",
            "test -f $PREFIX/lib/nvshmem_transport_ibdevx.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_transport_ibgda.so.3",
            "test -f $PREFIX/lib/nvshmem_transport_ibgda.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_transport_ibrc.so.3",
            "test -f $PREFIX/lib/nvshmem_transport_ibrc.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_transport_libfabric.so.3",
            "test -f $PREFIX/lib/nvshmem_transport_libfabric.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_transport_ucx.so.3",
            "test -f $PREFIX/lib/nvshmem_transport_ucx.so.3.0.0"
          ]
        }
      },
      {
        "build": {
          "ignore_run_exports": [
            "cuda-version"
          ],
          "ignore_run_exports_from": [
            "cuda-cudart-dev"
          ],
          "missing_dso_whitelist": [
            "*libcuda.so*",
            "*libnvshmem_host.so.3",
            "*libmpi*",
            "*libpmix*",
            "*liboshmem*"
          ],
          "run_exports": [
            "libnvshmem3"
          ]
        },
        "files": [
          "bin/examples",
          "bin/perftest",
          "bin/nvshm*",
          "bin/hydra_pmi_proxy",
          "bin/hydra_nameserver",
          "bin/hydra_persist",
          "include/nvshmem*.h",
          "include/bootstrap_device_host",
          "include/device",
          "include/device_host",
          "include/device_host_transport",
          "include/host",
          "include/non_abi",
          "lib/cmake/nvshmem",
          "lib/*nvshmem*.so",
          "share/src"
        ],
        "name": "libnvshmem-dev",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "cuda_compiler_stub",
            "cxx_compiler_stub",
            "c_stdlib_stub"
          ],
          "host": [
            "cuda-version 13.0",
            "cuda-cudart-dev",
            "libpciaccess"
          ],
          "run": [
            "cuda-version",
            "libnvshmem3",
            "cuda-cudart"
          ]
        },
        "test": {
          "commands": [
            "test -f $PREFIX/bin/hydra_pmi_proxy",
            "test -f $PREFIX/bin/nvshmem-info",
            "test -f $PREFIX/bin/nvshmrun.hydra",
            "test -f $PREFIX/bin/hydra_nameserver",
            "test -f $PREFIX/bin/nvshmrun",
            "test -f $PREFIX/bin/hydra_persist",
            "test -f $PREFIX/bin/examples/collective-launch",
            "test -f $PREFIX/bin/examples/on-stream",
            "test -f $PREFIX/bin/perftest/device/pt-to-pt/shmem_p_latency",
            "test -f $PREFIX/bin/perftest/device/coll/reduction_latency",
            "test -f $PREFIX/bin/perftest/host/init/malloc",
            "test -f $PREFIX/bin/perftest/host/pt-to-pt/bw",
            "test -f $PREFIX/bin/perftest/host/coll/broadcast_on_stream",
            "test -f $PREFIX/include/bootstrap_device_host/nvshmem_uniqueid.h",
            "test -f $PREFIX/include/device/nvshmem_defines.h",
            "test -f $PREFIX/include/device_host/nvshmem_types.h",
            "test -f $PREFIX/include/host/nvshmem_api.h",
            "test -f $PREFIX/include/non_abi/device/coll/defines.cuh",
            "test -f $PREFIX/include/device_host_transport/nvshmem_constants.h",
            "test -f $PREFIX/include/nvshmem.h",
            "test -f $PREFIX/include/nvshmemx.h",
            "test -f $PREFIX/lib/cmake/nvshmem/NVSHMEMConfig.cmake",
            "test -f $PREFIX/lib/cmake/nvshmem/NVSHMEMDeviceTargets-release.cmake",
            "test -f $PREFIX/lib/cmake/nvshmem/NVSHMEMDeviceTargets.cmake",
            "test -f $PREFIX/lib/cmake/nvshmem/NVSHMEMTargets-release.cmake",
            "test -f $PREFIX/lib/cmake/nvshmem/NVSHMEMTargets.cmake",
            "test -f $PREFIX/lib/cmake/nvshmem/NVSHMEMVersion.cmake",
            "test -L $PREFIX/lib/libnvshmem_host.so",
            "test -L $PREFIX/lib/nvshmem_bootstrap_mpi.so",
            "test -L $PREFIX/lib/nvshmem_bootstrap_pmi.so",
            "test -L $PREFIX/lib/nvshmem_bootstrap_pmi2.so",
            "test -L $PREFIX/lib/nvshmem_bootstrap_pmix.so",
            "test -L $PREFIX/lib/nvshmem_bootstrap_shmem.so",
            "test -L $PREFIX/lib/nvshmem_bootstrap_uid.so",
            "test -L $PREFIX/lib/nvshmem_transport_ibdevx.so",
            "test -L $PREFIX/lib/nvshmem_transport_ibgda.so",
            "test -L $PREFIX/lib/nvshmem_transport_ibrc.so",
            "test -L $PREFIX/lib/nvshmem_transport_libfabric.so",
            "test -L $PREFIX/lib/nvshmem_transport_ucx.so"
          ]
        }
      },
      {
        "files": [
          "lib/libnvshmem*.a"
        ],
        "name": "libnvshmem-static",
        "requirements": {
          "run": [
            "libnvshmem-dev"
          ]
        },
        "test": {
          "commands": [
            "test -f $PREFIX/lib/libnvshmem_device.a",
            "test -f $PREFIX/lib/libnvshmem.a",
            "bash compile_perf_test.sh"
          ],
          "files": [
            "compile_perf_test.sh"
          ],
          "requires": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "c_stdlib_stub",
            "cmake",
            "make",
            "cuda-version 13.0",
            "cuda_compiler_stub"
          ]
        }
      },
      {
        "about": {
          "description": "C++ accelerated Python bindings for NVIDIA NVSHMEM built with Cython. NVIDIA NVSHMEM is an NVIDIA based \"shared memory\" library that provides an easy-to-use CPU-side interface to allocate pinned memory that is symmetrically distributed across a cluster of NVIDIA GPUs.\n",
          "doc_url": "https://docs.nvidia.com/nvshmem/api/index.html",
          "home": "https://docs.nvidia.com/nvshmem/index.html",
          "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
          "license_file": "LICENSE",
          "license_url": "https://docs.nvidia.com/nvshmem/api/sla.html",
          "summary": "C++ accelerated Python bindings for NVIDIA NVSHMEM built with Cython"
        },
        "build": {
          "ignore_run_exports": [
            "cuda-version"
          ],
          "ignore_run_exports_from": [
            "cxx_compiler_stub",
            "cuda-cudart-dev"
          ],
          "script": "bash ${RECIPE_DIR}/nvshmem4py-build.sh",
          "skip": true,
          "string": "pyh1234567_0"
        },
        "name": "nvshmem4py",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "cuda_compiler_stub",
            "cxx_compiler_stub",
            "c_stdlib_stub"
          ],
          "host": [
            "cuda-version 13.0",
            "cython >=0.29.24",
            "pip",
            "python",
            "setuptools >=62"
          ],
          "run": [
            "libnvshmem-dev",
            "cuda-core 0.3.2",
            "cuda-python 13",
            "numpy",
            "python"
          ]
        },
        "test": {
          "commands": [
            "python - <<EOF\nimport nvshmem, sys\nprint(\"nvshmem.__version__ =\", nvshmem.__version__)\nEOF\n"
          ],
          "imports": [
            "nvshmem",
            "nvshmem.core",
            "nvshmem.bindings"
          ]
        },
        "version": "0.1.1.36309404"
      }
    ],
    "package": {
      "name": "libnvshmem-split",
      "version": "3.3.20"
    },
    "requirements": {
      "build": [
        "cf-nvidia-tools 1"
      ]
    },
    "schema_version": 0,
    "source": [
      {
        "sha256": "4a30f3746ea3d54844f2d9119298ac5437ed89ff8724f9b9bec1084af208edd5",
        "url": "https://developer.download.nvidia.com/compute/nvshmem/redist/libnvshmem/linux-sbsa/libnvshmem-linux-sbsa-3.3.20_cuda13-archive.tar.xz"
      },
      {
        "folder": "nvshmem4py",
        "sha256": "c4a4705a24978413542c8b04dfb8a0a4949c96db9c70c01305b2370160c791ab",
        "url": "https://developer.download.nvidia.com/compute/nvshmem/redist/nvshmem_python/source/nvshmem_python-source-0.1.1.36309404_cuda13-archive.tar.xz"
      },
      {
        "sha256": "4a30f3746ea3d54844f2d9119298ac5437ed89ff8724f9b9bec1084af208edd5",
        "url": "https://developer.download.nvidia.com/compute/nvshmem/redist/libnvshmem/linux-sbsa/libnvshmem-linux-sbsa-3.3.20_cuda13-archive.tar.xz"
      },
      {
        "folder": "nvshmem4py",
        "sha256": "c4a4705a24978413542c8b04dfb8a0a4949c96db9c70c01305b2370160c791ab",
        "url": "https://developer.download.nvidia.com/compute/nvshmem/redist/nvshmem_python/source/nvshmem_python-source-0.1.1.36309404_cuda13-archive.tar.xz"
      }
    ]
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cf-nvidia-tools",
        "cuda_compiler_stub",
        "cxx_compiler_stub"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "cuda-cudart-dev",
        "cuda-version",
        "cython",
        "libpciaccess",
        "pip",
        "python",
        "setuptools",
        "ucx"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "cuda-core",
        "cuda-cudart",
        "cuda-python",
        "cuda-version",
        "libnvshmem-dev",
        "libnvshmem3",
        "libpciaccess",
        "nccl",
        "numpy",
        "python",
        "ucx"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cuda-version",
        "cuda_compiler_stub",
        "cxx_compiler_stub",
        "make"
      ]
    }
  },
  "linux_aarch64_meta_yaml": {
    "about": {
      "description": "NVIDIA NVSHMEM is an NVIDIA based \"shared memory\" library that provides an easy-to-use CPU-side interface to allocate pinned memory that is symmetrically distributed across a cluster of NVIDIA GPUs.\nNVSHMEM can significantly reduce communication and coordination overheads by allowing programmers to perform these operations from within CUDA kernels and on CUDA streams.\n",
      "doc_url": "https://docs.nvidia.com/nvshmem/api/index.html",
      "home": "https://docs.nvidia.com/nvshmem/index.html",
      "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
      "license_file": "LICENSE",
      "license_url": "https://docs.nvidia.com/nvshmem/api/sla.html",
      "summary": "NVIDIA NVSHMEM is an NVIDIA based \"shared memory\" library that provides an easy-to-use CPU-side interface to allocate pinned memory that is symmetrically distributed across a cluster of NVIDIA GPUs."
    },
    "build": {
      "number": "0"
    },
    "extra": {
      "feedstock-name": "libnvshmem",
      "recipe-maintainers": [
        "conda-forge/cuda"
      ]
    },
    "outputs": [
      {
        "build": {
          "ignore_run_exports": [
            "cuda-version"
          ],
          "ignore_run_exports_from": [
            "cuda-cudart-dev"
          ],
          "missing_dso_whitelist": [
            "*libcuda.so*",
            "*openmpi*",
            "*libfabric*",
            "*libfabric1*",
            "*libmlx5*",
            "*libmpi*",
            "*libpmix*",
            "*liboshmem*",
            "*rdma-core*"
          ]
        },
        "files": [
          "lib/*nvshmem*.so.*",
          "lib/*nvshmem*.bc"
        ],
        "name": "libnvshmem3",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cuda_compiler_stub",
            "c_stdlib_stub"
          ],
          "host": [
            "cuda-version 12.9",
            "cuda-cudart-dev",
            "ucx"
          ],
          "run": [
            "cuda-version",
            "cuda-cudart",
            "libpciaccess",
            "nccl",
            "ucx"
          ]
        },
        "test": {
          "commands": [
            "test -L $PREFIX/lib/libnvshmem_host.so.3",
            "test -f $PREFIX/lib/libnvshmem_host.so.3.3.20",
            "test -L $PREFIX/lib/nvshmem_bootstrap_mpi.so.3",
            "test -f $PREFIX/lib/nvshmem_bootstrap_mpi.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_bootstrap_pmi.so.3",
            "test -f $PREFIX/lib/nvshmem_bootstrap_pmi.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_bootstrap_pmi2.so.3",
            "test -f $PREFIX/lib/nvshmem_bootstrap_pmi2.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_bootstrap_pmix.so.3",
            "test -f $PREFIX/lib/nvshmem_bootstrap_pmix.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_bootstrap_shmem.so.3",
            "test -f $PREFIX/lib/nvshmem_bootstrap_shmem.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_bootstrap_uid.so.3",
            "test -f $PREFIX/lib/nvshmem_bootstrap_uid.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_transport_ibdevx.so.3",
            "test -f $PREFIX/lib/nvshmem_transport_ibdevx.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_transport_ibgda.so.3",
            "test -f $PREFIX/lib/nvshmem_transport_ibgda.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_transport_ibrc.so.3",
            "test -f $PREFIX/lib/nvshmem_transport_ibrc.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_transport_libfabric.so.3",
            "test -f $PREFIX/lib/nvshmem_transport_libfabric.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_transport_ucx.so.3",
            "test -f $PREFIX/lib/nvshmem_transport_ucx.so.3.0.0"
          ]
        }
      },
      {
        "build": {
          "ignore_run_exports": [
            "cuda-version"
          ],
          "ignore_run_exports_from": [
            "cuda-cudart-dev"
          ],
          "missing_dso_whitelist": [
            "*libcuda.so*",
            "*libnvshmem_host.so.3",
            "*libmpi*",
            "*libpmix*",
            "*liboshmem*"
          ],
          "run_exports": [
            "libnvshmem3"
          ]
        },
        "files": [
          "bin/examples",
          "bin/perftest",
          "bin/nvshm*",
          "bin/hydra_pmi_proxy",
          "bin/hydra_nameserver",
          "bin/hydra_persist",
          "include/nvshmem*.h",
          "include/bootstrap_device_host",
          "include/device",
          "include/device_host",
          "include/device_host_transport",
          "include/host",
          "include/non_abi",
          "lib/cmake/nvshmem",
          "lib/*nvshmem*.so",
          "share/src"
        ],
        "name": "libnvshmem-dev",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "cuda_compiler_stub",
            "cxx_compiler_stub",
            "c_stdlib_stub"
          ],
          "host": [
            "cuda-version 12.9",
            "cuda-cudart-dev",
            "libpciaccess",
            "libhwloc"
          ],
          "run": [
            "cuda-version",
            "libnvshmem3",
            "cuda-cudart",
            "libhwloc"
          ]
        },
        "test": {
          "commands": [
            "test -f $PREFIX/bin/hydra_pmi_proxy",
            "test -f $PREFIX/bin/nvshmem-info",
            "test -f $PREFIX/bin/nvshmrun.hydra",
            "test -f $PREFIX/bin/hydra_nameserver",
            "test -f $PREFIX/bin/nvshmrun",
            "test -f $PREFIX/bin/hydra_persist",
            "test -f $PREFIX/bin/examples/collective-launch",
            "test -f $PREFIX/bin/examples/on-stream",
            "test -f $PREFIX/bin/perftest/device/pt-to-pt/shmem_p_latency",
            "test -f $PREFIX/bin/perftest/device/coll/reduction_latency",
            "test -f $PREFIX/bin/perftest/host/init/malloc",
            "test -f $PREFIX/bin/perftest/host/pt-to-pt/bw",
            "test -f $PREFIX/bin/perftest/host/coll/broadcast_on_stream",
            "test -f $PREFIX/include/bootstrap_device_host/nvshmem_uniqueid.h",
            "test -f $PREFIX/include/device/nvshmem_defines.h",
            "test -f $PREFIX/include/device_host/nvshmem_types.h",
            "test -f $PREFIX/include/host/nvshmem_api.h",
            "test -f $PREFIX/include/non_abi/device/coll/defines.cuh",
            "test -f $PREFIX/include/device_host_transport/nvshmem_constants.h",
            "test -f $PREFIX/include/nvshmem.h",
            "test -f $PREFIX/include/nvshmemx.h",
            "test -f $PREFIX/lib/cmake/nvshmem/NVSHMEMConfig.cmake",
            "test -f $PREFIX/lib/cmake/nvshmem/NVSHMEMDeviceTargets-release.cmake",
            "test -f $PREFIX/lib/cmake/nvshmem/NVSHMEMDeviceTargets.cmake",
            "test -f $PREFIX/lib/cmake/nvshmem/NVSHMEMTargets-release.cmake",
            "test -f $PREFIX/lib/cmake/nvshmem/NVSHMEMTargets.cmake",
            "test -f $PREFIX/lib/cmake/nvshmem/NVSHMEMVersion.cmake",
            "test -L $PREFIX/lib/libnvshmem_host.so",
            "test -L $PREFIX/lib/nvshmem_bootstrap_mpi.so",
            "test -L $PREFIX/lib/nvshmem_bootstrap_pmi.so",
            "test -L $PREFIX/lib/nvshmem_bootstrap_pmi2.so",
            "test -L $PREFIX/lib/nvshmem_bootstrap_pmix.so",
            "test -L $PREFIX/lib/nvshmem_bootstrap_shmem.so",
            "test -L $PREFIX/lib/nvshmem_bootstrap_uid.so",
            "test -L $PREFIX/lib/nvshmem_transport_ibdevx.so",
            "test -L $PREFIX/lib/nvshmem_transport_ibgda.so",
            "test -L $PREFIX/lib/nvshmem_transport_ibrc.so",
            "test -L $PREFIX/lib/nvshmem_transport_libfabric.so",
            "test -L $PREFIX/lib/nvshmem_transport_ucx.so"
          ]
        }
      },
      {
        "files": [
          "lib/libnvshmem*.a"
        ],
        "name": "libnvshmem-static",
        "requirements": {
          "run": [
            "libnvshmem-dev"
          ]
        },
        "test": {
          "commands": [
            "test -f $PREFIX/lib/libnvshmem_device.a",
            "test -f $PREFIX/lib/libnvshmem.a",
            "bash compile_perf_test.sh"
          ],
          "files": [
            "compile_perf_test.sh"
          ],
          "requires": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "c_stdlib_stub",
            "cmake",
            "make",
            "cuda-version 12.9",
            "cuda_compiler_stub"
          ]
        }
      },
      {
        "about": {
          "description": "C++ accelerated Python bindings for NVIDIA NVSHMEM built with Cython. NVIDIA NVSHMEM is an NVIDIA based \"shared memory\" library that provides an easy-to-use CPU-side interface to allocate pinned memory that is symmetrically distributed across a cluster of NVIDIA GPUs.\n",
          "doc_url": "https://docs.nvidia.com/nvshmem/api/index.html",
          "home": "https://docs.nvidia.com/nvshmem/index.html",
          "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
          "license_file": "LICENSE",
          "license_url": "https://docs.nvidia.com/nvshmem/api/sla.html",
          "summary": "C++ accelerated Python bindings for NVIDIA NVSHMEM built with Cython"
        },
        "build": {
          "ignore_run_exports": [
            "cuda-version"
          ],
          "ignore_run_exports_from": [
            "cxx_compiler_stub",
            "cuda-cudart-dev"
          ],
          "script": "bash ${RECIPE_DIR}/nvshmem4py-build.sh",
          "skip": true,
          "string": "pyh1234567_0"
        },
        "name": "nvshmem4py",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "cuda_compiler_stub",
            "cxx_compiler_stub",
            "c_stdlib_stub"
          ],
          "host": [
            "cuda-version 12.9",
            "cython >=0.29.24",
            "pip",
            "python",
            "setuptools >=62"
          ],
          "run": [
            "libnvshmem-dev",
            "cuda-core 0.3.2",
            "cuda-python 13",
            "numpy",
            "python"
          ]
        },
        "test": {
          "commands": [
            "python - <<EOF\nimport nvshmem, sys\nprint(\"nvshmem.__version__ =\", nvshmem.__version__)\nEOF\n"
          ],
          "imports": [
            "nvshmem",
            "nvshmem.core",
            "nvshmem.bindings"
          ]
        },
        "version": "0.1.1.36309404"
      },
      {
        "build": {
          "ignore_run_exports": [
            "cuda-version"
          ],
          "ignore_run_exports_from": [
            "cuda-cudart-dev"
          ],
          "missing_dso_whitelist": [
            "*libcuda.so*",
            "*openmpi*",
            "*libfabric*",
            "*libfabric1*",
            "*libmlx5*",
            "*libmpi*",
            "*libpmix*",
            "*liboshmem*",
            "*rdma-core*"
          ]
        },
        "files": [
          "lib/*nvshmem*.so.*",
          "lib/*nvshmem*.bc"
        ],
        "name": "libnvshmem3",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cuda_compiler_stub",
            "c_stdlib_stub"
          ],
          "host": [
            "cuda-version 13.0",
            "cuda-cudart-dev",
            "ucx"
          ],
          "run": [
            "cuda-version",
            "cuda-cudart",
            "libpciaccess",
            "nccl",
            "ucx"
          ]
        },
        "test": {
          "commands": [
            "test -L $PREFIX/lib/libnvshmem_host.so.3",
            "test -f $PREFIX/lib/libnvshmem_host.so.3.3.20",
            "test -L $PREFIX/lib/nvshmem_bootstrap_mpi.so.3",
            "test -f $PREFIX/lib/nvshmem_bootstrap_mpi.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_bootstrap_pmi.so.3",
            "test -f $PREFIX/lib/nvshmem_bootstrap_pmi.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_bootstrap_pmi2.so.3",
            "test -f $PREFIX/lib/nvshmem_bootstrap_pmi2.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_bootstrap_pmix.so.3",
            "test -f $PREFIX/lib/nvshmem_bootstrap_pmix.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_bootstrap_shmem.so.3",
            "test -f $PREFIX/lib/nvshmem_bootstrap_shmem.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_bootstrap_uid.so.3",
            "test -f $PREFIX/lib/nvshmem_bootstrap_uid.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_transport_ibdevx.so.3",
            "test -f $PREFIX/lib/nvshmem_transport_ibdevx.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_transport_ibgda.so.3",
            "test -f $PREFIX/lib/nvshmem_transport_ibgda.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_transport_ibrc.so.3",
            "test -f $PREFIX/lib/nvshmem_transport_ibrc.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_transport_libfabric.so.3",
            "test -f $PREFIX/lib/nvshmem_transport_libfabric.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_transport_ucx.so.3",
            "test -f $PREFIX/lib/nvshmem_transport_ucx.so.3.0.0"
          ]
        }
      },
      {
        "build": {
          "ignore_run_exports": [
            "cuda-version"
          ],
          "ignore_run_exports_from": [
            "cuda-cudart-dev"
          ],
          "missing_dso_whitelist": [
            "*libcuda.so*",
            "*libnvshmem_host.so.3",
            "*libmpi*",
            "*libpmix*",
            "*liboshmem*"
          ],
          "run_exports": [
            "libnvshmem3"
          ]
        },
        "files": [
          "bin/examples",
          "bin/perftest",
          "bin/nvshm*",
          "bin/hydra_pmi_proxy",
          "bin/hydra_nameserver",
          "bin/hydra_persist",
          "include/nvshmem*.h",
          "include/bootstrap_device_host",
          "include/device",
          "include/device_host",
          "include/device_host_transport",
          "include/host",
          "include/non_abi",
          "lib/cmake/nvshmem",
          "lib/*nvshmem*.so",
          "share/src"
        ],
        "name": "libnvshmem-dev",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "cuda_compiler_stub",
            "cxx_compiler_stub",
            "c_stdlib_stub"
          ],
          "host": [
            "cuda-version 13.0",
            "cuda-cudart-dev",
            "libpciaccess",
            "libhwloc"
          ],
          "run": [
            "cuda-version",
            "libnvshmem3",
            "cuda-cudart",
            "libhwloc"
          ]
        },
        "test": {
          "commands": [
            "test -f $PREFIX/bin/hydra_pmi_proxy",
            "test -f $PREFIX/bin/nvshmem-info",
            "test -f $PREFIX/bin/nvshmrun.hydra",
            "test -f $PREFIX/bin/hydra_nameserver",
            "test -f $PREFIX/bin/nvshmrun",
            "test -f $PREFIX/bin/hydra_persist",
            "test -f $PREFIX/bin/examples/collective-launch",
            "test -f $PREFIX/bin/examples/on-stream",
            "test -f $PREFIX/bin/perftest/device/pt-to-pt/shmem_p_latency",
            "test -f $PREFIX/bin/perftest/device/coll/reduction_latency",
            "test -f $PREFIX/bin/perftest/host/init/malloc",
            "test -f $PREFIX/bin/perftest/host/pt-to-pt/bw",
            "test -f $PREFIX/bin/perftest/host/coll/broadcast_on_stream",
            "test -f $PREFIX/include/bootstrap_device_host/nvshmem_uniqueid.h",
            "test -f $PREFIX/include/device/nvshmem_defines.h",
            "test -f $PREFIX/include/device_host/nvshmem_types.h",
            "test -f $PREFIX/include/host/nvshmem_api.h",
            "test -f $PREFIX/include/non_abi/device/coll/defines.cuh",
            "test -f $PREFIX/include/device_host_transport/nvshmem_constants.h",
            "test -f $PREFIX/include/nvshmem.h",
            "test -f $PREFIX/include/nvshmemx.h",
            "test -f $PREFIX/lib/cmake/nvshmem/NVSHMEMConfig.cmake",
            "test -f $PREFIX/lib/cmake/nvshmem/NVSHMEMDeviceTargets-release.cmake",
            "test -f $PREFIX/lib/cmake/nvshmem/NVSHMEMDeviceTargets.cmake",
            "test -f $PREFIX/lib/cmake/nvshmem/NVSHMEMTargets-release.cmake",
            "test -f $PREFIX/lib/cmake/nvshmem/NVSHMEMTargets.cmake",
            "test -f $PREFIX/lib/cmake/nvshmem/NVSHMEMVersion.cmake",
            "test -L $PREFIX/lib/libnvshmem_host.so",
            "test -L $PREFIX/lib/nvshmem_bootstrap_mpi.so",
            "test -L $PREFIX/lib/nvshmem_bootstrap_pmi.so",
            "test -L $PREFIX/lib/nvshmem_bootstrap_pmi2.so",
            "test -L $PREFIX/lib/nvshmem_bootstrap_pmix.so",
            "test -L $PREFIX/lib/nvshmem_bootstrap_shmem.so",
            "test -L $PREFIX/lib/nvshmem_bootstrap_uid.so",
            "test -L $PREFIX/lib/nvshmem_transport_ibdevx.so",
            "test -L $PREFIX/lib/nvshmem_transport_ibgda.so",
            "test -L $PREFIX/lib/nvshmem_transport_ibrc.so",
            "test -L $PREFIX/lib/nvshmem_transport_libfabric.so",
            "test -L $PREFIX/lib/nvshmem_transport_ucx.so"
          ]
        }
      },
      {
        "files": [
          "lib/libnvshmem*.a"
        ],
        "name": "libnvshmem-static",
        "requirements": {
          "run": [
            "libnvshmem-dev"
          ]
        },
        "test": {
          "commands": [
            "test -f $PREFIX/lib/libnvshmem_device.a",
            "test -f $PREFIX/lib/libnvshmem.a",
            "bash compile_perf_test.sh"
          ],
          "files": [
            "compile_perf_test.sh"
          ],
          "requires": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "c_stdlib_stub",
            "cmake",
            "make",
            "cuda-version 13.0",
            "cuda_compiler_stub"
          ]
        }
      },
      {
        "about": {
          "description": "C++ accelerated Python bindings for NVIDIA NVSHMEM built with Cython. NVIDIA NVSHMEM is an NVIDIA based \"shared memory\" library that provides an easy-to-use CPU-side interface to allocate pinned memory that is symmetrically distributed across a cluster of NVIDIA GPUs.\n",
          "doc_url": "https://docs.nvidia.com/nvshmem/api/index.html",
          "home": "https://docs.nvidia.com/nvshmem/index.html",
          "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
          "license_file": "LICENSE",
          "license_url": "https://docs.nvidia.com/nvshmem/api/sla.html",
          "summary": "C++ accelerated Python bindings for NVIDIA NVSHMEM built with Cython"
        },
        "build": {
          "ignore_run_exports": [
            "cuda-version"
          ],
          "ignore_run_exports_from": [
            "cxx_compiler_stub",
            "cuda-cudart-dev"
          ],
          "script": "bash ${RECIPE_DIR}/nvshmem4py-build.sh",
          "skip": true,
          "string": "pyh1234567_0"
        },
        "name": "nvshmem4py",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "cuda_compiler_stub",
            "cxx_compiler_stub",
            "c_stdlib_stub"
          ],
          "host": [
            "cuda-version 13.0",
            "cython >=0.29.24",
            "pip",
            "python",
            "setuptools >=62"
          ],
          "run": [
            "libnvshmem-dev",
            "cuda-core 0.3.2",
            "cuda-python 13",
            "numpy",
            "python"
          ]
        },
        "test": {
          "commands": [
            "python - <<EOF\nimport nvshmem, sys\nprint(\"nvshmem.__version__ =\", nvshmem.__version__)\nEOF\n"
          ],
          "imports": [
            "nvshmem",
            "nvshmem.core",
            "nvshmem.bindings"
          ]
        },
        "version": "0.1.1.36309404"
      }
    ],
    "package": {
      "name": "libnvshmem-split",
      "version": "3.3.20"
    },
    "requirements": {
      "build": [
        "cf-nvidia-tools 1"
      ]
    },
    "schema_version": 0,
    "source": [
      {
        "sha256": "4a30f3746ea3d54844f2d9119298ac5437ed89ff8724f9b9bec1084af208edd5",
        "url": "https://developer.download.nvidia.com/compute/nvshmem/redist/libnvshmem/linux-sbsa/libnvshmem-linux-sbsa-3.3.20_cuda13-archive.tar.xz"
      },
      {
        "folder": "nvshmem4py",
        "sha256": "c4a4705a24978413542c8b04dfb8a0a4949c96db9c70c01305b2370160c791ab",
        "url": "https://developer.download.nvidia.com/compute/nvshmem/redist/nvshmem_python/source/nvshmem_python-source-0.1.1.36309404_cuda13-archive.tar.xz"
      },
      {
        "sha256": "4a30f3746ea3d54844f2d9119298ac5437ed89ff8724f9b9bec1084af208edd5",
        "url": "https://developer.download.nvidia.com/compute/nvshmem/redist/libnvshmem/linux-sbsa/libnvshmem-linux-sbsa-3.3.20_cuda13-archive.tar.xz"
      },
      {
        "folder": "nvshmem4py",
        "sha256": "c4a4705a24978413542c8b04dfb8a0a4949c96db9c70c01305b2370160c791ab",
        "url": "https://developer.download.nvidia.com/compute/nvshmem/redist/nvshmem_python/source/nvshmem_python-source-0.1.1.36309404_cuda13-archive.tar.xz"
      }
    ]
  },
  "linux_aarch64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cf-nvidia-tools",
        "cuda_compiler_stub",
        "cxx_compiler_stub"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "cuda-cudart-dev",
        "cuda-version",
        "cython",
        "libhwloc",
        "libpciaccess",
        "pip",
        "python",
        "setuptools",
        "ucx"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "cuda-core",
        "cuda-cudart",
        "cuda-python",
        "cuda-version",
        "libhwloc",
        "libnvshmem-dev",
        "libnvshmem3",
        "libpciaccess",
        "nccl",
        "numpy",
        "python",
        "ucx"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cuda-version",
        "cuda_compiler_stub",
        "cxx_compiler_stub",
        "make"
      ]
    }
  },
  "meta_yaml": {
    "about": {
      "description": "NVIDIA NVSHMEM is an NVIDIA based \"shared memory\" library that provides an easy-to-use CPU-side interface to allocate pinned memory that is symmetrically distributed across a cluster of NVIDIA GPUs.\nNVSHMEM can significantly reduce communication and coordination overheads by allowing programmers to perform these operations from within CUDA kernels and on CUDA streams.\n",
      "doc_url": "https://docs.nvidia.com/nvshmem/api/index.html",
      "home": "https://docs.nvidia.com/nvshmem/index.html",
      "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
      "license_file": "LICENSE",
      "license_url": "https://docs.nvidia.com/nvshmem/api/sla.html",
      "summary": "NVIDIA NVSHMEM is an NVIDIA based \"shared memory\" library that provides an easy-to-use CPU-side interface to allocate pinned memory that is symmetrically distributed across a cluster of NVIDIA GPUs."
    },
    "build": {
      "number": "0"
    },
    "extra": {
      "feedstock-name": "libnvshmem",
      "recipe-maintainers": [
        "conda-forge/cuda"
      ]
    },
    "outputs": [
      {
        "build": {
          "ignore_run_exports": [
            "cuda-version"
          ],
          "ignore_run_exports_from": [
            "cuda-cudart-dev"
          ],
          "missing_dso_whitelist": [
            "*libcuda.so*",
            "*openmpi*",
            "*libfabric*",
            "*libfabric1*",
            "*libmlx5*",
            "*libmpi*",
            "*libpmix*",
            "*liboshmem*",
            "*rdma-core*"
          ]
        },
        "files": [
          "lib/*nvshmem*.so.*",
          "lib/*nvshmem*.bc"
        ],
        "name": "libnvshmem3",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cuda_compiler_stub",
            "c_stdlib_stub"
          ],
          "host": [
            "cuda-version 12.9",
            "cuda-cudart-dev",
            "ucx"
          ],
          "run": [
            "cuda-version",
            "cuda-cudart",
            "libpciaccess",
            "nccl",
            "ucx"
          ]
        },
        "test": {
          "commands": [
            "test -L $PREFIX/lib/libnvshmem_host.so.3",
            "test -f $PREFIX/lib/libnvshmem_host.so.3.3.20",
            "test -L $PREFIX/lib/nvshmem_bootstrap_mpi.so.3",
            "test -f $PREFIX/lib/nvshmem_bootstrap_mpi.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_bootstrap_pmi.so.3",
            "test -f $PREFIX/lib/nvshmem_bootstrap_pmi.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_bootstrap_pmi2.so.3",
            "test -f $PREFIX/lib/nvshmem_bootstrap_pmi2.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_bootstrap_pmix.so.3",
            "test -f $PREFIX/lib/nvshmem_bootstrap_pmix.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_bootstrap_shmem.so.3",
            "test -f $PREFIX/lib/nvshmem_bootstrap_shmem.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_bootstrap_uid.so.3",
            "test -f $PREFIX/lib/nvshmem_bootstrap_uid.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_transport_ibdevx.so.3",
            "test -f $PREFIX/lib/nvshmem_transport_ibdevx.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_transport_ibgda.so.3",
            "test -f $PREFIX/lib/nvshmem_transport_ibgda.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_transport_ibrc.so.3",
            "test -f $PREFIX/lib/nvshmem_transport_ibrc.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_transport_libfabric.so.3",
            "test -f $PREFIX/lib/nvshmem_transport_libfabric.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_transport_ucx.so.3",
            "test -f $PREFIX/lib/nvshmem_transport_ucx.so.3.0.0"
          ]
        }
      },
      {
        "build": {
          "ignore_run_exports": [
            "cuda-version"
          ],
          "ignore_run_exports_from": [
            "cuda-cudart-dev"
          ],
          "missing_dso_whitelist": [
            "*libcuda.so*",
            "*libnvshmem_host.so.3",
            "*libmpi*",
            "*libpmix*",
            "*liboshmem*"
          ],
          "run_exports": [
            "libnvshmem3"
          ]
        },
        "files": [
          "bin/examples",
          "bin/perftest",
          "bin/nvshm*",
          "bin/hydra_pmi_proxy",
          "bin/hydra_nameserver",
          "bin/hydra_persist",
          "include/nvshmem*.h",
          "include/bootstrap_device_host",
          "include/device",
          "include/device_host",
          "include/device_host_transport",
          "include/host",
          "include/non_abi",
          "lib/cmake/nvshmem",
          "lib/*nvshmem*.so",
          "share/src"
        ],
        "name": "libnvshmem-dev",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "cuda_compiler_stub",
            "cxx_compiler_stub",
            "c_stdlib_stub"
          ],
          "host": [
            "cuda-version 12.9",
            "cuda-cudart-dev",
            "libpciaccess"
          ],
          "run": [
            "cuda-version",
            "libnvshmem3",
            "cuda-cudart"
          ]
        },
        "test": {
          "commands": [
            "test -f $PREFIX/bin/hydra_pmi_proxy",
            "test -f $PREFIX/bin/nvshmem-info",
            "test -f $PREFIX/bin/nvshmrun.hydra",
            "test -f $PREFIX/bin/hydra_nameserver",
            "test -f $PREFIX/bin/nvshmrun",
            "test -f $PREFIX/bin/hydra_persist",
            "test -f $PREFIX/bin/examples/collective-launch",
            "test -f $PREFIX/bin/examples/on-stream",
            "test -f $PREFIX/bin/perftest/device/pt-to-pt/shmem_p_latency",
            "test -f $PREFIX/bin/perftest/device/coll/reduction_latency",
            "test -f $PREFIX/bin/perftest/host/init/malloc",
            "test -f $PREFIX/bin/perftest/host/pt-to-pt/bw",
            "test -f $PREFIX/bin/perftest/host/coll/broadcast_on_stream",
            "test -f $PREFIX/include/bootstrap_device_host/nvshmem_uniqueid.h",
            "test -f $PREFIX/include/device/nvshmem_defines.h",
            "test -f $PREFIX/include/device_host/nvshmem_types.h",
            "test -f $PREFIX/include/host/nvshmem_api.h",
            "test -f $PREFIX/include/non_abi/device/coll/defines.cuh",
            "test -f $PREFIX/include/device_host_transport/nvshmem_constants.h",
            "test -f $PREFIX/include/nvshmem.h",
            "test -f $PREFIX/include/nvshmemx.h",
            "test -f $PREFIX/lib/cmake/nvshmem/NVSHMEMConfig.cmake",
            "test -f $PREFIX/lib/cmake/nvshmem/NVSHMEMDeviceTargets-release.cmake",
            "test -f $PREFIX/lib/cmake/nvshmem/NVSHMEMDeviceTargets.cmake",
            "test -f $PREFIX/lib/cmake/nvshmem/NVSHMEMTargets-release.cmake",
            "test -f $PREFIX/lib/cmake/nvshmem/NVSHMEMTargets.cmake",
            "test -f $PREFIX/lib/cmake/nvshmem/NVSHMEMVersion.cmake",
            "test -L $PREFIX/lib/libnvshmem_host.so",
            "test -L $PREFIX/lib/nvshmem_bootstrap_mpi.so",
            "test -L $PREFIX/lib/nvshmem_bootstrap_pmi.so",
            "test -L $PREFIX/lib/nvshmem_bootstrap_pmi2.so",
            "test -L $PREFIX/lib/nvshmem_bootstrap_pmix.so",
            "test -L $PREFIX/lib/nvshmem_bootstrap_shmem.so",
            "test -L $PREFIX/lib/nvshmem_bootstrap_uid.so",
            "test -L $PREFIX/lib/nvshmem_transport_ibdevx.so",
            "test -L $PREFIX/lib/nvshmem_transport_ibgda.so",
            "test -L $PREFIX/lib/nvshmem_transport_ibrc.so",
            "test -L $PREFIX/lib/nvshmem_transport_libfabric.so",
            "test -L $PREFIX/lib/nvshmem_transport_ucx.so"
          ]
        }
      },
      {
        "files": [
          "lib/libnvshmem*.a"
        ],
        "name": "libnvshmem-static",
        "requirements": {
          "run": [
            "libnvshmem-dev"
          ]
        },
        "test": {
          "commands": [
            "test -f $PREFIX/lib/libnvshmem_device.a",
            "test -f $PREFIX/lib/libnvshmem.a",
            "bash compile_perf_test.sh"
          ],
          "files": [
            "compile_perf_test.sh"
          ],
          "requires": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "c_stdlib_stub",
            "cmake",
            "make",
            "cuda-version 12.9",
            "cuda_compiler_stub"
          ]
        }
      },
      {
        "about": {
          "description": "C++ accelerated Python bindings for NVIDIA NVSHMEM built with Cython. NVIDIA NVSHMEM is an NVIDIA based \"shared memory\" library that provides an easy-to-use CPU-side interface to allocate pinned memory that is symmetrically distributed across a cluster of NVIDIA GPUs.\n",
          "doc_url": "https://docs.nvidia.com/nvshmem/api/index.html",
          "home": "https://docs.nvidia.com/nvshmem/index.html",
          "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
          "license_file": "LICENSE",
          "license_url": "https://docs.nvidia.com/nvshmem/api/sla.html",
          "summary": "C++ accelerated Python bindings for NVIDIA NVSHMEM built with Cython"
        },
        "build": {
          "ignore_run_exports": [
            "cuda-version"
          ],
          "ignore_run_exports_from": [
            "cxx_compiler_stub",
            "cuda-cudart-dev"
          ],
          "script": "bash ${RECIPE_DIR}/nvshmem4py-build.sh",
          "skip": true,
          "string": "pyh1234567_0"
        },
        "name": "nvshmem4py",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "cuda_compiler_stub",
            "cxx_compiler_stub",
            "c_stdlib_stub"
          ],
          "host": [
            "cuda-version 12.9",
            "cython >=0.29.24",
            "pip",
            "python",
            "setuptools >=62"
          ],
          "run": [
            "libnvshmem-dev",
            "cuda-core 0.3.2",
            "cuda-python 13",
            "numpy",
            "python"
          ]
        },
        "test": {
          "commands": [
            "python - <<EOF\nimport nvshmem, sys\nprint(\"nvshmem.__version__ =\", nvshmem.__version__)\nEOF\n"
          ],
          "imports": [
            "nvshmem",
            "nvshmem.core",
            "nvshmem.bindings"
          ]
        },
        "version": "0.1.1.36309404"
      },
      {
        "build": {
          "ignore_run_exports": [
            "cuda-version"
          ],
          "ignore_run_exports_from": [
            "cuda-cudart-dev"
          ],
          "missing_dso_whitelist": [
            "*libcuda.so*",
            "*openmpi*",
            "*libfabric*",
            "*libfabric1*",
            "*libmlx5*",
            "*libmpi*",
            "*libpmix*",
            "*liboshmem*",
            "*rdma-core*"
          ]
        },
        "files": [
          "lib/*nvshmem*.so.*",
          "lib/*nvshmem*.bc"
        ],
        "name": "libnvshmem3",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cuda_compiler_stub",
            "c_stdlib_stub"
          ],
          "host": [
            "cuda-version 13.0",
            "cuda-cudart-dev",
            "ucx"
          ],
          "run": [
            "cuda-version",
            "cuda-cudart",
            "libpciaccess",
            "nccl",
            "ucx"
          ]
        },
        "test": {
          "commands": [
            "test -L $PREFIX/lib/libnvshmem_host.so.3",
            "test -f $PREFIX/lib/libnvshmem_host.so.3.3.20",
            "test -L $PREFIX/lib/nvshmem_bootstrap_mpi.so.3",
            "test -f $PREFIX/lib/nvshmem_bootstrap_mpi.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_bootstrap_pmi.so.3",
            "test -f $PREFIX/lib/nvshmem_bootstrap_pmi.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_bootstrap_pmi2.so.3",
            "test -f $PREFIX/lib/nvshmem_bootstrap_pmi2.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_bootstrap_pmix.so.3",
            "test -f $PREFIX/lib/nvshmem_bootstrap_pmix.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_bootstrap_shmem.so.3",
            "test -f $PREFIX/lib/nvshmem_bootstrap_shmem.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_bootstrap_uid.so.3",
            "test -f $PREFIX/lib/nvshmem_bootstrap_uid.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_transport_ibdevx.so.3",
            "test -f $PREFIX/lib/nvshmem_transport_ibdevx.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_transport_ibgda.so.3",
            "test -f $PREFIX/lib/nvshmem_transport_ibgda.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_transport_ibrc.so.3",
            "test -f $PREFIX/lib/nvshmem_transport_ibrc.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_transport_libfabric.so.3",
            "test -f $PREFIX/lib/nvshmem_transport_libfabric.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_transport_ucx.so.3",
            "test -f $PREFIX/lib/nvshmem_transport_ucx.so.3.0.0"
          ]
        }
      },
      {
        "build": {
          "ignore_run_exports": [
            "cuda-version"
          ],
          "ignore_run_exports_from": [
            "cuda-cudart-dev"
          ],
          "missing_dso_whitelist": [
            "*libcuda.so*",
            "*libnvshmem_host.so.3",
            "*libmpi*",
            "*libpmix*",
            "*liboshmem*"
          ],
          "run_exports": [
            "libnvshmem3"
          ]
        },
        "files": [
          "bin/examples",
          "bin/perftest",
          "bin/nvshm*",
          "bin/hydra_pmi_proxy",
          "bin/hydra_nameserver",
          "bin/hydra_persist",
          "include/nvshmem*.h",
          "include/bootstrap_device_host",
          "include/device",
          "include/device_host",
          "include/device_host_transport",
          "include/host",
          "include/non_abi",
          "lib/cmake/nvshmem",
          "lib/*nvshmem*.so",
          "share/src"
        ],
        "name": "libnvshmem-dev",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "cuda_compiler_stub",
            "cxx_compiler_stub",
            "c_stdlib_stub"
          ],
          "host": [
            "cuda-version 13.0",
            "cuda-cudart-dev",
            "libpciaccess"
          ],
          "run": [
            "cuda-version",
            "libnvshmem3",
            "cuda-cudart"
          ]
        },
        "test": {
          "commands": [
            "test -f $PREFIX/bin/hydra_pmi_proxy",
            "test -f $PREFIX/bin/nvshmem-info",
            "test -f $PREFIX/bin/nvshmrun.hydra",
            "test -f $PREFIX/bin/hydra_nameserver",
            "test -f $PREFIX/bin/nvshmrun",
            "test -f $PREFIX/bin/hydra_persist",
            "test -f $PREFIX/bin/examples/collective-launch",
            "test -f $PREFIX/bin/examples/on-stream",
            "test -f $PREFIX/bin/perftest/device/pt-to-pt/shmem_p_latency",
            "test -f $PREFIX/bin/perftest/device/coll/reduction_latency",
            "test -f $PREFIX/bin/perftest/host/init/malloc",
            "test -f $PREFIX/bin/perftest/host/pt-to-pt/bw",
            "test -f $PREFIX/bin/perftest/host/coll/broadcast_on_stream",
            "test -f $PREFIX/include/bootstrap_device_host/nvshmem_uniqueid.h",
            "test -f $PREFIX/include/device/nvshmem_defines.h",
            "test -f $PREFIX/include/device_host/nvshmem_types.h",
            "test -f $PREFIX/include/host/nvshmem_api.h",
            "test -f $PREFIX/include/non_abi/device/coll/defines.cuh",
            "test -f $PREFIX/include/device_host_transport/nvshmem_constants.h",
            "test -f $PREFIX/include/nvshmem.h",
            "test -f $PREFIX/include/nvshmemx.h",
            "test -f $PREFIX/lib/cmake/nvshmem/NVSHMEMConfig.cmake",
            "test -f $PREFIX/lib/cmake/nvshmem/NVSHMEMDeviceTargets-release.cmake",
            "test -f $PREFIX/lib/cmake/nvshmem/NVSHMEMDeviceTargets.cmake",
            "test -f $PREFIX/lib/cmake/nvshmem/NVSHMEMTargets-release.cmake",
            "test -f $PREFIX/lib/cmake/nvshmem/NVSHMEMTargets.cmake",
            "test -f $PREFIX/lib/cmake/nvshmem/NVSHMEMVersion.cmake",
            "test -L $PREFIX/lib/libnvshmem_host.so",
            "test -L $PREFIX/lib/nvshmem_bootstrap_mpi.so",
            "test -L $PREFIX/lib/nvshmem_bootstrap_pmi.so",
            "test -L $PREFIX/lib/nvshmem_bootstrap_pmi2.so",
            "test -L $PREFIX/lib/nvshmem_bootstrap_pmix.so",
            "test -L $PREFIX/lib/nvshmem_bootstrap_shmem.so",
            "test -L $PREFIX/lib/nvshmem_bootstrap_uid.so",
            "test -L $PREFIX/lib/nvshmem_transport_ibdevx.so",
            "test -L $PREFIX/lib/nvshmem_transport_ibgda.so",
            "test -L $PREFIX/lib/nvshmem_transport_ibrc.so",
            "test -L $PREFIX/lib/nvshmem_transport_libfabric.so",
            "test -L $PREFIX/lib/nvshmem_transport_ucx.so"
          ]
        }
      },
      {
        "files": [
          "lib/libnvshmem*.a"
        ],
        "name": "libnvshmem-static",
        "requirements": {
          "run": [
            "libnvshmem-dev"
          ]
        },
        "test": {
          "commands": [
            "test -f $PREFIX/lib/libnvshmem_device.a",
            "test -f $PREFIX/lib/libnvshmem.a",
            "bash compile_perf_test.sh"
          ],
          "files": [
            "compile_perf_test.sh"
          ],
          "requires": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "c_stdlib_stub",
            "cmake",
            "make",
            "cuda-version 13.0",
            "cuda_compiler_stub"
          ]
        }
      },
      {
        "about": {
          "description": "C++ accelerated Python bindings for NVIDIA NVSHMEM built with Cython. NVIDIA NVSHMEM is an NVIDIA based \"shared memory\" library that provides an easy-to-use CPU-side interface to allocate pinned memory that is symmetrically distributed across a cluster of NVIDIA GPUs.\n",
          "doc_url": "https://docs.nvidia.com/nvshmem/api/index.html",
          "home": "https://docs.nvidia.com/nvshmem/index.html",
          "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
          "license_file": "LICENSE",
          "license_url": "https://docs.nvidia.com/nvshmem/api/sla.html",
          "summary": "C++ accelerated Python bindings for NVIDIA NVSHMEM built with Cython"
        },
        "build": {
          "ignore_run_exports": [
            "cuda-version"
          ],
          "ignore_run_exports_from": [
            "cxx_compiler_stub",
            "cuda-cudart-dev"
          ],
          "script": "bash ${RECIPE_DIR}/nvshmem4py-build.sh",
          "skip": true,
          "string": "pyh1234567_0"
        },
        "name": "nvshmem4py",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "cuda_compiler_stub",
            "cxx_compiler_stub",
            "c_stdlib_stub"
          ],
          "host": [
            "cuda-version 13.0",
            "cython >=0.29.24",
            "pip",
            "python",
            "setuptools >=62"
          ],
          "run": [
            "libnvshmem-dev",
            "cuda-core 0.3.2",
            "cuda-python 13",
            "numpy",
            "python"
          ]
        },
        "test": {
          "commands": [
            "python - <<EOF\nimport nvshmem, sys\nprint(\"nvshmem.__version__ =\", nvshmem.__version__)\nEOF\n"
          ],
          "imports": [
            "nvshmem",
            "nvshmem.core",
            "nvshmem.bindings"
          ]
        },
        "version": "0.1.1.36309404"
      },
      {
        "build": {
          "ignore_run_exports": [
            "cuda-version"
          ],
          "ignore_run_exports_from": [
            "cuda-cudart-dev"
          ],
          "missing_dso_whitelist": [
            "*libcuda.so*",
            "*openmpi*",
            "*libfabric*",
            "*libfabric1*",
            "*libmlx5*",
            "*libmpi*",
            "*libpmix*",
            "*liboshmem*",
            "*rdma-core*"
          ]
        },
        "files": [
          "lib/*nvshmem*.so.*",
          "lib/*nvshmem*.bc"
        ],
        "name": "libnvshmem3",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cuda_compiler_stub",
            "c_stdlib_stub"
          ],
          "host": [
            "cuda-version 12.9",
            "cuda-cudart-dev",
            "ucx"
          ],
          "run": [
            "cuda-version",
            "cuda-cudart",
            "libpciaccess",
            "nccl",
            "ucx"
          ]
        },
        "test": {
          "commands": [
            "test -L $PREFIX/lib/libnvshmem_host.so.3",
            "test -f $PREFIX/lib/libnvshmem_host.so.3.3.20",
            "test -L $PREFIX/lib/nvshmem_bootstrap_mpi.so.3",
            "test -f $PREFIX/lib/nvshmem_bootstrap_mpi.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_bootstrap_pmi.so.3",
            "test -f $PREFIX/lib/nvshmem_bootstrap_pmi.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_bootstrap_pmi2.so.3",
            "test -f $PREFIX/lib/nvshmem_bootstrap_pmi2.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_bootstrap_pmix.so.3",
            "test -f $PREFIX/lib/nvshmem_bootstrap_pmix.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_bootstrap_shmem.so.3",
            "test -f $PREFIX/lib/nvshmem_bootstrap_shmem.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_bootstrap_uid.so.3",
            "test -f $PREFIX/lib/nvshmem_bootstrap_uid.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_transport_ibdevx.so.3",
            "test -f $PREFIX/lib/nvshmem_transport_ibdevx.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_transport_ibgda.so.3",
            "test -f $PREFIX/lib/nvshmem_transport_ibgda.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_transport_ibrc.so.3",
            "test -f $PREFIX/lib/nvshmem_transport_ibrc.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_transport_libfabric.so.3",
            "test -f $PREFIX/lib/nvshmem_transport_libfabric.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_transport_ucx.so.3",
            "test -f $PREFIX/lib/nvshmem_transport_ucx.so.3.0.0"
          ]
        }
      },
      {
        "build": {
          "ignore_run_exports": [
            "cuda-version"
          ],
          "ignore_run_exports_from": [
            "cuda-cudart-dev"
          ],
          "missing_dso_whitelist": [
            "*libcuda.so*",
            "*libnvshmem_host.so.3",
            "*libmpi*",
            "*libpmix*",
            "*liboshmem*"
          ],
          "run_exports": [
            "libnvshmem3"
          ]
        },
        "files": [
          "bin/examples",
          "bin/perftest",
          "bin/nvshm*",
          "bin/hydra_pmi_proxy",
          "bin/hydra_nameserver",
          "bin/hydra_persist",
          "include/nvshmem*.h",
          "include/bootstrap_device_host",
          "include/device",
          "include/device_host",
          "include/device_host_transport",
          "include/host",
          "include/non_abi",
          "lib/cmake/nvshmem",
          "lib/*nvshmem*.so",
          "share/src"
        ],
        "name": "libnvshmem-dev",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "cuda_compiler_stub",
            "cxx_compiler_stub",
            "c_stdlib_stub"
          ],
          "host": [
            "cuda-version 12.9",
            "cuda-cudart-dev",
            "libpciaccess",
            "libhwloc"
          ],
          "run": [
            "cuda-version",
            "libnvshmem3",
            "cuda-cudart",
            "libhwloc"
          ]
        },
        "test": {
          "commands": [
            "test -f $PREFIX/bin/hydra_pmi_proxy",
            "test -f $PREFIX/bin/nvshmem-info",
            "test -f $PREFIX/bin/nvshmrun.hydra",
            "test -f $PREFIX/bin/hydra_nameserver",
            "test -f $PREFIX/bin/nvshmrun",
            "test -f $PREFIX/bin/hydra_persist",
            "test -f $PREFIX/bin/examples/collective-launch",
            "test -f $PREFIX/bin/examples/on-stream",
            "test -f $PREFIX/bin/perftest/device/pt-to-pt/shmem_p_latency",
            "test -f $PREFIX/bin/perftest/device/coll/reduction_latency",
            "test -f $PREFIX/bin/perftest/host/init/malloc",
            "test -f $PREFIX/bin/perftest/host/pt-to-pt/bw",
            "test -f $PREFIX/bin/perftest/host/coll/broadcast_on_stream",
            "test -f $PREFIX/include/bootstrap_device_host/nvshmem_uniqueid.h",
            "test -f $PREFIX/include/device/nvshmem_defines.h",
            "test -f $PREFIX/include/device_host/nvshmem_types.h",
            "test -f $PREFIX/include/host/nvshmem_api.h",
            "test -f $PREFIX/include/non_abi/device/coll/defines.cuh",
            "test -f $PREFIX/include/device_host_transport/nvshmem_constants.h",
            "test -f $PREFIX/include/nvshmem.h",
            "test -f $PREFIX/include/nvshmemx.h",
            "test -f $PREFIX/lib/cmake/nvshmem/NVSHMEMConfig.cmake",
            "test -f $PREFIX/lib/cmake/nvshmem/NVSHMEMDeviceTargets-release.cmake",
            "test -f $PREFIX/lib/cmake/nvshmem/NVSHMEMDeviceTargets.cmake",
            "test -f $PREFIX/lib/cmake/nvshmem/NVSHMEMTargets-release.cmake",
            "test -f $PREFIX/lib/cmake/nvshmem/NVSHMEMTargets.cmake",
            "test -f $PREFIX/lib/cmake/nvshmem/NVSHMEMVersion.cmake",
            "test -L $PREFIX/lib/libnvshmem_host.so",
            "test -L $PREFIX/lib/nvshmem_bootstrap_mpi.so",
            "test -L $PREFIX/lib/nvshmem_bootstrap_pmi.so",
            "test -L $PREFIX/lib/nvshmem_bootstrap_pmi2.so",
            "test -L $PREFIX/lib/nvshmem_bootstrap_pmix.so",
            "test -L $PREFIX/lib/nvshmem_bootstrap_shmem.so",
            "test -L $PREFIX/lib/nvshmem_bootstrap_uid.so",
            "test -L $PREFIX/lib/nvshmem_transport_ibdevx.so",
            "test -L $PREFIX/lib/nvshmem_transport_ibgda.so",
            "test -L $PREFIX/lib/nvshmem_transport_ibrc.so",
            "test -L $PREFIX/lib/nvshmem_transport_libfabric.so",
            "test -L $PREFIX/lib/nvshmem_transport_ucx.so"
          ]
        }
      },
      {
        "files": [
          "lib/libnvshmem*.a"
        ],
        "name": "libnvshmem-static",
        "requirements": {
          "run": [
            "libnvshmem-dev"
          ]
        },
        "test": {
          "commands": [
            "test -f $PREFIX/lib/libnvshmem_device.a",
            "test -f $PREFIX/lib/libnvshmem.a",
            "bash compile_perf_test.sh"
          ],
          "files": [
            "compile_perf_test.sh"
          ],
          "requires": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "c_stdlib_stub",
            "cmake",
            "make",
            "cuda-version 12.9",
            "cuda_compiler_stub"
          ]
        }
      },
      {
        "about": {
          "description": "C++ accelerated Python bindings for NVIDIA NVSHMEM built with Cython. NVIDIA NVSHMEM is an NVIDIA based \"shared memory\" library that provides an easy-to-use CPU-side interface to allocate pinned memory that is symmetrically distributed across a cluster of NVIDIA GPUs.\n",
          "doc_url": "https://docs.nvidia.com/nvshmem/api/index.html",
          "home": "https://docs.nvidia.com/nvshmem/index.html",
          "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
          "license_file": "LICENSE",
          "license_url": "https://docs.nvidia.com/nvshmem/api/sla.html",
          "summary": "C++ accelerated Python bindings for NVIDIA NVSHMEM built with Cython"
        },
        "build": {
          "ignore_run_exports": [
            "cuda-version"
          ],
          "ignore_run_exports_from": [
            "cxx_compiler_stub",
            "cuda-cudart-dev"
          ],
          "script": "bash ${RECIPE_DIR}/nvshmem4py-build.sh",
          "skip": true,
          "string": "pyh1234567_0"
        },
        "name": "nvshmem4py",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "cuda_compiler_stub",
            "cxx_compiler_stub",
            "c_stdlib_stub"
          ],
          "host": [
            "cuda-version 12.9",
            "cython >=0.29.24",
            "pip",
            "python",
            "setuptools >=62"
          ],
          "run": [
            "libnvshmem-dev",
            "cuda-core 0.3.2",
            "cuda-python 13",
            "numpy",
            "python"
          ]
        },
        "test": {
          "commands": [
            "python - <<EOF\nimport nvshmem, sys\nprint(\"nvshmem.__version__ =\", nvshmem.__version__)\nEOF\n"
          ],
          "imports": [
            "nvshmem",
            "nvshmem.core",
            "nvshmem.bindings"
          ]
        },
        "version": "0.1.1.36309404"
      },
      {
        "build": {
          "ignore_run_exports": [
            "cuda-version"
          ],
          "ignore_run_exports_from": [
            "cuda-cudart-dev"
          ],
          "missing_dso_whitelist": [
            "*libcuda.so*",
            "*openmpi*",
            "*libfabric*",
            "*libfabric1*",
            "*libmlx5*",
            "*libmpi*",
            "*libpmix*",
            "*liboshmem*",
            "*rdma-core*"
          ]
        },
        "files": [
          "lib/*nvshmem*.so.*",
          "lib/*nvshmem*.bc"
        ],
        "name": "libnvshmem3",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cuda_compiler_stub",
            "c_stdlib_stub"
          ],
          "host": [
            "cuda-version 13.0",
            "cuda-cudart-dev",
            "ucx"
          ],
          "run": [
            "cuda-version",
            "cuda-cudart",
            "libpciaccess",
            "nccl",
            "ucx"
          ]
        },
        "test": {
          "commands": [
            "test -L $PREFIX/lib/libnvshmem_host.so.3",
            "test -f $PREFIX/lib/libnvshmem_host.so.3.3.20",
            "test -L $PREFIX/lib/nvshmem_bootstrap_mpi.so.3",
            "test -f $PREFIX/lib/nvshmem_bootstrap_mpi.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_bootstrap_pmi.so.3",
            "test -f $PREFIX/lib/nvshmem_bootstrap_pmi.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_bootstrap_pmi2.so.3",
            "test -f $PREFIX/lib/nvshmem_bootstrap_pmi2.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_bootstrap_pmix.so.3",
            "test -f $PREFIX/lib/nvshmem_bootstrap_pmix.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_bootstrap_shmem.so.3",
            "test -f $PREFIX/lib/nvshmem_bootstrap_shmem.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_bootstrap_uid.so.3",
            "test -f $PREFIX/lib/nvshmem_bootstrap_uid.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_transport_ibdevx.so.3",
            "test -f $PREFIX/lib/nvshmem_transport_ibdevx.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_transport_ibgda.so.3",
            "test -f $PREFIX/lib/nvshmem_transport_ibgda.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_transport_ibrc.so.3",
            "test -f $PREFIX/lib/nvshmem_transport_ibrc.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_transport_libfabric.so.3",
            "test -f $PREFIX/lib/nvshmem_transport_libfabric.so.3.0.0",
            "test -L $PREFIX/lib/nvshmem_transport_ucx.so.3",
            "test -f $PREFIX/lib/nvshmem_transport_ucx.so.3.0.0"
          ]
        }
      },
      {
        "build": {
          "ignore_run_exports": [
            "cuda-version"
          ],
          "ignore_run_exports_from": [
            "cuda-cudart-dev"
          ],
          "missing_dso_whitelist": [
            "*libcuda.so*",
            "*libnvshmem_host.so.3",
            "*libmpi*",
            "*libpmix*",
            "*liboshmem*"
          ],
          "run_exports": [
            "libnvshmem3"
          ]
        },
        "files": [
          "bin/examples",
          "bin/perftest",
          "bin/nvshm*",
          "bin/hydra_pmi_proxy",
          "bin/hydra_nameserver",
          "bin/hydra_persist",
          "include/nvshmem*.h",
          "include/bootstrap_device_host",
          "include/device",
          "include/device_host",
          "include/device_host_transport",
          "include/host",
          "include/non_abi",
          "lib/cmake/nvshmem",
          "lib/*nvshmem*.so",
          "share/src"
        ],
        "name": "libnvshmem-dev",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "cuda_compiler_stub",
            "cxx_compiler_stub",
            "c_stdlib_stub"
          ],
          "host": [
            "cuda-version 13.0",
            "cuda-cudart-dev",
            "libpciaccess",
            "libhwloc"
          ],
          "run": [
            "cuda-version",
            "libnvshmem3",
            "cuda-cudart",
            "libhwloc"
          ]
        },
        "test": {
          "commands": [
            "test -f $PREFIX/bin/hydra_pmi_proxy",
            "test -f $PREFIX/bin/nvshmem-info",
            "test -f $PREFIX/bin/nvshmrun.hydra",
            "test -f $PREFIX/bin/hydra_nameserver",
            "test -f $PREFIX/bin/nvshmrun",
            "test -f $PREFIX/bin/hydra_persist",
            "test -f $PREFIX/bin/examples/collective-launch",
            "test -f $PREFIX/bin/examples/on-stream",
            "test -f $PREFIX/bin/perftest/device/pt-to-pt/shmem_p_latency",
            "test -f $PREFIX/bin/perftest/device/coll/reduction_latency",
            "test -f $PREFIX/bin/perftest/host/init/malloc",
            "test -f $PREFIX/bin/perftest/host/pt-to-pt/bw",
            "test -f $PREFIX/bin/perftest/host/coll/broadcast_on_stream",
            "test -f $PREFIX/include/bootstrap_device_host/nvshmem_uniqueid.h",
            "test -f $PREFIX/include/device/nvshmem_defines.h",
            "test -f $PREFIX/include/device_host/nvshmem_types.h",
            "test -f $PREFIX/include/host/nvshmem_api.h",
            "test -f $PREFIX/include/non_abi/device/coll/defines.cuh",
            "test -f $PREFIX/include/device_host_transport/nvshmem_constants.h",
            "test -f $PREFIX/include/nvshmem.h",
            "test -f $PREFIX/include/nvshmemx.h",
            "test -f $PREFIX/lib/cmake/nvshmem/NVSHMEMConfig.cmake",
            "test -f $PREFIX/lib/cmake/nvshmem/NVSHMEMDeviceTargets-release.cmake",
            "test -f $PREFIX/lib/cmake/nvshmem/NVSHMEMDeviceTargets.cmake",
            "test -f $PREFIX/lib/cmake/nvshmem/NVSHMEMTargets-release.cmake",
            "test -f $PREFIX/lib/cmake/nvshmem/NVSHMEMTargets.cmake",
            "test -f $PREFIX/lib/cmake/nvshmem/NVSHMEMVersion.cmake",
            "test -L $PREFIX/lib/libnvshmem_host.so",
            "test -L $PREFIX/lib/nvshmem_bootstrap_mpi.so",
            "test -L $PREFIX/lib/nvshmem_bootstrap_pmi.so",
            "test -L $PREFIX/lib/nvshmem_bootstrap_pmi2.so",
            "test -L $PREFIX/lib/nvshmem_bootstrap_pmix.so",
            "test -L $PREFIX/lib/nvshmem_bootstrap_shmem.so",
            "test -L $PREFIX/lib/nvshmem_bootstrap_uid.so",
            "test -L $PREFIX/lib/nvshmem_transport_ibdevx.so",
            "test -L $PREFIX/lib/nvshmem_transport_ibgda.so",
            "test -L $PREFIX/lib/nvshmem_transport_ibrc.so",
            "test -L $PREFIX/lib/nvshmem_transport_libfabric.so",
            "test -L $PREFIX/lib/nvshmem_transport_ucx.so"
          ]
        }
      },
      {
        "files": [
          "lib/libnvshmem*.a"
        ],
        "name": "libnvshmem-static",
        "requirements": {
          "run": [
            "libnvshmem-dev"
          ]
        },
        "test": {
          "commands": [
            "test -f $PREFIX/lib/libnvshmem_device.a",
            "test -f $PREFIX/lib/libnvshmem.a",
            "bash compile_perf_test.sh"
          ],
          "files": [
            "compile_perf_test.sh"
          ],
          "requires": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "c_stdlib_stub",
            "cmake",
            "make",
            "cuda-version 13.0",
            "cuda_compiler_stub"
          ]
        }
      },
      {
        "about": {
          "description": "C++ accelerated Python bindings for NVIDIA NVSHMEM built with Cython. NVIDIA NVSHMEM is an NVIDIA based \"shared memory\" library that provides an easy-to-use CPU-side interface to allocate pinned memory that is symmetrically distributed across a cluster of NVIDIA GPUs.\n",
          "doc_url": "https://docs.nvidia.com/nvshmem/api/index.html",
          "home": "https://docs.nvidia.com/nvshmem/index.html",
          "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
          "license_file": "LICENSE",
          "license_url": "https://docs.nvidia.com/nvshmem/api/sla.html",
          "summary": "C++ accelerated Python bindings for NVIDIA NVSHMEM built with Cython"
        },
        "build": {
          "ignore_run_exports": [
            "cuda-version"
          ],
          "ignore_run_exports_from": [
            "cxx_compiler_stub",
            "cuda-cudart-dev"
          ],
          "script": "bash ${RECIPE_DIR}/nvshmem4py-build.sh",
          "skip": true,
          "string": "pyh1234567_0"
        },
        "name": "nvshmem4py",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "cuda_compiler_stub",
            "cxx_compiler_stub",
            "c_stdlib_stub"
          ],
          "host": [
            "cuda-version 13.0",
            "cython >=0.29.24",
            "pip",
            "python",
            "setuptools >=62"
          ],
          "run": [
            "libnvshmem-dev",
            "cuda-core 0.3.2",
            "cuda-python 13",
            "numpy",
            "python"
          ]
        },
        "test": {
          "commands": [
            "python - <<EOF\nimport nvshmem, sys\nprint(\"nvshmem.__version__ =\", nvshmem.__version__)\nEOF\n"
          ],
          "imports": [
            "nvshmem",
            "nvshmem.core",
            "nvshmem.bindings"
          ]
        },
        "version": "0.1.1.36309404"
      }
    ],
    "package": {
      "name": "libnvshmem-split",
      "version": "3.3.20"
    },
    "requirements": {
      "build": [
        "cf-nvidia-tools 1"
      ]
    },
    "schema_version": 0,
    "source": [
      {
        "sha256": "4a30f3746ea3d54844f2d9119298ac5437ed89ff8724f9b9bec1084af208edd5",
        "url": "https://developer.download.nvidia.com/compute/nvshmem/redist/libnvshmem/linux-sbsa/libnvshmem-linux-sbsa-3.3.20_cuda13-archive.tar.xz"
      },
      {
        "folder": "nvshmem4py",
        "sha256": "c4a4705a24978413542c8b04dfb8a0a4949c96db9c70c01305b2370160c791ab",
        "url": "https://developer.download.nvidia.com/compute/nvshmem/redist/nvshmem_python/source/nvshmem_python-source-0.1.1.36309404_cuda13-archive.tar.xz"
      },
      {
        "sha256": "4a30f3746ea3d54844f2d9119298ac5437ed89ff8724f9b9bec1084af208edd5",
        "url": "https://developer.download.nvidia.com/compute/nvshmem/redist/libnvshmem/linux-sbsa/libnvshmem-linux-sbsa-3.3.20_cuda13-archive.tar.xz"
      },
      {
        "folder": "nvshmem4py",
        "sha256": "c4a4705a24978413542c8b04dfb8a0a4949c96db9c70c01305b2370160c791ab",
        "url": "https://developer.download.nvidia.com/compute/nvshmem/redist/nvshmem_python/source/nvshmem_python-source-0.1.1.36309404_cuda13-archive.tar.xz"
      },
      {
        "sha256": "4a30f3746ea3d54844f2d9119298ac5437ed89ff8724f9b9bec1084af208edd5",
        "url": "https://developer.download.nvidia.com/compute/nvshmem/redist/libnvshmem/linux-sbsa/libnvshmem-linux-sbsa-3.3.20_cuda13-archive.tar.xz"
      },
      {
        "folder": "nvshmem4py",
        "sha256": "c4a4705a24978413542c8b04dfb8a0a4949c96db9c70c01305b2370160c791ab",
        "url": "https://developer.download.nvidia.com/compute/nvshmem/redist/nvshmem_python/source/nvshmem_python-source-0.1.1.36309404_cuda13-archive.tar.xz"
      },
      {
        "sha256": "4a30f3746ea3d54844f2d9119298ac5437ed89ff8724f9b9bec1084af208edd5",
        "url": "https://developer.download.nvidia.com/compute/nvshmem/redist/libnvshmem/linux-sbsa/libnvshmem-linux-sbsa-3.3.20_cuda13-archive.tar.xz"
      },
      {
        "folder": "nvshmem4py",
        "sha256": "c4a4705a24978413542c8b04dfb8a0a4949c96db9c70c01305b2370160c791ab",
        "url": "https://developer.download.nvidia.com/compute/nvshmem/redist/nvshmem_python/source/nvshmem_python-source-0.1.1.36309404_cuda13-archive.tar.xz"
      }
    ]
  },
  "name": "libnvshmem-split",
  "outputs_names": {
    "__set__": true,
    "elements": [
      "libnvshmem-dev",
      "libnvshmem-static",
      "libnvshmem3",
      "nvshmem4py"
    ]
  },
  "parsing_error": false,
  "platforms": [
    "linux_64",
    "linux_aarch64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/libnvshmem.json"
  },
  "raw_meta_yaml": "{% set version = \"3.3.20\" %}\n{% set nvshmem4py_version = \"0.1.1.36309404\" %}\n\n{% set platform = \"linux-x86_64\" %}  # [linux64]\n{% set platform = \"linux-sbsa\" %}    # [aarch64]\n{% set extension = \"tar.xz\" %}\n\n{% set soname = version.split(\".\")[0] %}\n{% set cuda_major = environ.get(\"cuda_compiler_version\", \"13.0\").split(\".\")[0] %}\n\n{% set libnvshmem_sha256 = \"75746cb42eb5d5abaf44e128d9238a1623b64cd4d49bc2c4d8ef9c608d46c7e1\" %}  # [linux64 and (cuda_compiler_version or \"\").startswith(\"12\")]\n{% set libnvshmem_sha256 = \"0096066267c4511f1a57e77305e2d5128703d6901672271d516dc9a54cf29596\" %}  # [linux64 and (cuda_compiler_version or \"\").startswith(\"13\")]\n{% set libnvshmem_sha256 = \"59001f18bcf15fab6c0225b219865c4c2c2aba8f767dce0aa3211a982d16f8a6\" %}  # [aarch64 and (cuda_compiler_version or \"\").startswith(\"12\")]\n{% set libnvshmem_sha256 = \"4a30f3746ea3d54844f2d9119298ac5437ed89ff8724f9b9bec1084af208edd5\" %}  # [aarch64 and (cuda_compiler_version or \"\").startswith(\"13\")]\n{% set nvshmem_python_sha256 = \"c4a4705a24978413542c8b04dfb8a0a4949c96db9c70c01305b2370160c791ab\" %}  # [linux and (cuda_compiler_version or \"\").startswith((\"12\", \"13\"))]\n\npackage:\n  name: libnvshmem-split\n  version: {{ version }}\n\nsource:\n  - url: https://developer.download.nvidia.com/compute/nvshmem/redist/libnvshmem/{{ platform }}/libnvshmem-{{ platform }}-{{ version }}_cuda{{ cuda_major }}-archive.{{ extension }}\n    sha256: {{ libnvshmem_sha256 }}\n  - url: https://developer.download.nvidia.com/compute/nvshmem/redist/nvshmem_python/source/nvshmem_python-source-{{ nvshmem4py_version }}_cuda13-archive.{{ extension }}\n    folder: nvshmem4py\n    sha256: {{ nvshmem_python_sha256 }}\n\nbuild:\n  number: 0\n  skip: true  # [not (linux64 or aarch64)]\n  skip: true  # [cuda_compiler_version in (None, \"None\") or (cuda_compiler_version or \"\").startswith(\"11\")]\n\nrequirements:\n  build:\n    - cf-nvidia-tools 1  # [linux]\n\noutputs:\n  - name: libnvshmem{{ soname }}\n    build:\n      ignore_run_exports_from:\n        - cuda-cudart-dev\n      ignore_run_exports:\n        - cuda-version\n      missing_dso_whitelist:\n        - \"*libcuda.so*\" # driver\n        - \"*openmpi*\"    # omitted as dependency - customer HPC systems have own versions of MPI installed already\n        - \"*libfabric*\"  # omitted as dependency - used for both Slingshot and EFA NICs. They have a custom libfabric installation and plugin\n        - \"*libfabric1*\" # omitted as dependency - used for both Slingshot and EFA NICs. They have a custom libfabric installation and plugin\n        - \"*libmlx5*\"    # omitted as dependency - needed for ibgda and ibdevx transport, installed as part of the Mellanox OFED\n        - \"*libmpi*\"     # omitted as dependency - part of openmpi\n        - \"*libpmix*\"    # omitted as dependency - part of openmpi\n        - \"*liboshmem*\"  # omitted as dependency - part of openmpi\n        - \"*rdma-core*\"  # omitted as dependency - MOFED replaces rdma-core\n    files:\n      - lib/*nvshmem*.so.*\n      - lib/*nvshmem*.bc\n    requirements:\n      build:\n        - {{ compiler('c') }}\n        - {{ compiler('cxx') }}\n        - {{ compiler('cuda') }}\n        - {{ stdlib(\"c\") }}\n      host:\n        - cuda-version {{ cuda_compiler_version }}  # [cuda_compiler_version != \"None\"]\n        - cuda-cudart-dev\n        - ucx\n      run:\n        - {{ pin_compatible(\"cuda-version\", min_pin=\"x\", max_pin=\"x\") }}\n        - cuda-cudart\n        - libpciaccess\n        - nccl\n        - ucx\n    test:\n      commands:\n        - test -L $PREFIX/lib/libnvshmem_host.so.{{ soname }}\n        - test -f $PREFIX/lib/libnvshmem_host.so.{{ version }}\n        - test -L $PREFIX/lib/nvshmem_bootstrap_mpi.so.{{ soname }}\n        - test -f $PREFIX/lib/nvshmem_bootstrap_mpi.so.{{ soname }}.0.0\n        - test -L $PREFIX/lib/nvshmem_bootstrap_pmi.so.{{ soname }}\n        - test -f $PREFIX/lib/nvshmem_bootstrap_pmi.so.{{ soname }}.0.0\n        - test -L $PREFIX/lib/nvshmem_bootstrap_pmi2.so.{{ soname }}\n        - test -f $PREFIX/lib/nvshmem_bootstrap_pmi2.so.{{ soname }}.0.0\n        - test -L $PREFIX/lib/nvshmem_bootstrap_pmix.so.{{ soname }}\n        - test -f $PREFIX/lib/nvshmem_bootstrap_pmix.so.{{ soname }}.0.0\n        - test -L $PREFIX/lib/nvshmem_bootstrap_shmem.so.{{ soname }}\n        - test -f $PREFIX/lib/nvshmem_bootstrap_shmem.so.{{ soname }}.0.0\n        - test -L $PREFIX/lib/nvshmem_bootstrap_uid.so.{{ soname }}\n        - test -f $PREFIX/lib/nvshmem_bootstrap_uid.so.{{ soname }}.0.0\n        - test -L $PREFIX/lib/nvshmem_transport_ibdevx.so.{{ soname }}\n        - test -f $PREFIX/lib/nvshmem_transport_ibdevx.so.{{ soname }}.0.0\n        - test -L $PREFIX/lib/nvshmem_transport_ibgda.so.{{ soname }}\n        - test -f $PREFIX/lib/nvshmem_transport_ibgda.so.{{ soname }}.0.0\n        - test -L $PREFIX/lib/nvshmem_transport_ibrc.so.{{ soname }}\n        - test -f $PREFIX/lib/nvshmem_transport_ibrc.so.{{ soname }}.0.0\n        - test -L $PREFIX/lib/nvshmem_transport_libfabric.so.{{ soname }}\n        - test -f $PREFIX/lib/nvshmem_transport_libfabric.so.{{ soname }}.0.0\n        - test -L $PREFIX/lib/nvshmem_transport_ucx.so.{{ soname }}\n        - test -f $PREFIX/lib/nvshmem_transport_ucx.so.{{ soname }}.0.0\n\n  - name: libnvshmem-dev\n    build:\n      ignore_run_exports_from:\n        - cuda-cudart-dev\n      ignore_run_exports:\n        - cuda-version\n      missing_dso_whitelist:\n        - \"*libcuda.so*\" # driver\n        - \"*libnvshmem_host.so.{{ soname }}\" # avoids: ERROR (libnvshmem-dev,bin/perftest/device/pt-to-pt/shmem_put_bw): lib/libnvshmem_host.so.3 not found in any packages. We DO test for its existence though.\n        - \"*libmpi*\"\n        - \"*libpmix*\"\n        - \"*liboshmem*\"\n      run_exports:\n        - {{ pin_subpackage(\"libnvshmem\" ~ soname, max_pin=None) }}\n    files:\n      - bin/examples\n      - bin/perftest\n      - bin/nvshm*\n      - bin/hydra_pmi_proxy\n      - bin/hydra_nameserver\n      - bin/hydra_persist\n      - include/nvshmem*.h\n      - include/bootstrap_device_host\n      - include/device\n      - include/device_host\n      - include/device_host_transport\n      - include/host\n      - include/non_abi\n      - lib/cmake/nvshmem\n      - lib/*nvshmem*.so\n      - share/src\n    requirements:\n      build:\n        - {{ compiler(\"c\") }}\n        - {{ compiler('cuda') }}\n        - {{ compiler(\"cxx\") }}\n        - {{ stdlib(\"c\") }}\n      host:\n        - cuda-version {{ cuda_compiler_version }}  # [cuda_compiler_version != \"None\"]\n        - cuda-cudart-dev\n        - libpciaccess\n        - libhwloc          # [aarch64]\n      run:\n        - {{ pin_compatible(\"cuda-version\", min_pin=\"x\", max_pin=\"x\") }}\n        - {{ pin_subpackage(\"libnvshmem\" ~ soname, exact=True) }}\n        - cuda-cudart\n        - libhwloc          # [aarch64]\n    test:\n      commands:\n        - test -f $PREFIX/bin/hydra_pmi_proxy\n        - test -f $PREFIX/bin/nvshmem-info\n        - test -f $PREFIX/bin/nvshmrun.hydra\n        - test -f $PREFIX/bin/hydra_nameserver\n        - test -f $PREFIX/bin/nvshmrun\n        - test -f $PREFIX/bin/hydra_persist\n        - test -f $PREFIX/bin/examples/collective-launch\n        - test -f $PREFIX/bin/examples/on-stream\n        - test -f $PREFIX/bin/perftest/device/pt-to-pt/shmem_p_latency\n        - test -f $PREFIX/bin/perftest/device/coll/reduction_latency\n        - test -f $PREFIX/bin/perftest/host/init/malloc\n        - test -f $PREFIX/bin/perftest/host/pt-to-pt/bw\n        - test -f $PREFIX/bin/perftest/host/coll/broadcast_on_stream\n        - test -f $PREFIX/include/bootstrap_device_host/nvshmem_uniqueid.h\n        - test -f $PREFIX/include/device/nvshmem_defines.h\n        - test -f $PREFIX/include/device_host/nvshmem_types.h\n        - test -f $PREFIX/include/host/nvshmem_api.h\n        - test -f $PREFIX/include/non_abi/device/coll/defines.cuh\n        - test -f $PREFIX/include/device_host_transport/nvshmem_constants.h\n        - test -f $PREFIX/include/nvshmem.h\n        - test -f $PREFIX/include/nvshmemx.h\n        - test -f $PREFIX/lib/cmake/nvshmem/NVSHMEMConfig.cmake\n        - test -f $PREFIX/lib/cmake/nvshmem/NVSHMEMDeviceTargets-release.cmake\n        - test -f $PREFIX/lib/cmake/nvshmem/NVSHMEMDeviceTargets.cmake\n        - test -f $PREFIX/lib/cmake/nvshmem/NVSHMEMTargets-release.cmake\n        - test -f $PREFIX/lib/cmake/nvshmem/NVSHMEMTargets.cmake\n        - test -f $PREFIX/lib/cmake/nvshmem/NVSHMEMVersion.cmake\n        - test -L $PREFIX/lib/libnvshmem_host.so\n        - test -L $PREFIX/lib/nvshmem_bootstrap_mpi.so\n        - test -L $PREFIX/lib/nvshmem_bootstrap_pmi.so\n        - test -L $PREFIX/lib/nvshmem_bootstrap_pmi2.so\n        - test -L $PREFIX/lib/nvshmem_bootstrap_pmix.so\n        - test -L $PREFIX/lib/nvshmem_bootstrap_shmem.so\n        - test -L $PREFIX/lib/nvshmem_bootstrap_uid.so\n        - test -L $PREFIX/lib/nvshmem_transport_ibdevx.so\n        - test -L $PREFIX/lib/nvshmem_transport_ibgda.so\n        - test -L $PREFIX/lib/nvshmem_transport_ibrc.so\n        - test -L $PREFIX/lib/nvshmem_transport_libfabric.so\n        - test -L $PREFIX/lib/nvshmem_transport_ucx.so\n\n  - name: libnvshmem-static\n    files:\n      - lib/libnvshmem*.a\n    requirements:\n      run:\n        - {{ pin_subpackage(\"libnvshmem-dev\", exact=True) }}\n    test:\n      requires:\n        - {{ compiler('c') }}\n        - {{ compiler('cxx') }}\n        - {{ stdlib(\"c\") }}\n        - cmake\n        - make\n        - cuda-version {{ cuda_compiler_version }}                     # [cuda_compiler_version != \"None\"]\n        - {{ compiler('cuda') }}\n      files:\n        - compile_perf_test.sh\n      commands:\n        - test -f $PREFIX/lib/libnvshmem_device.a\n        - test -f $PREFIX/lib/libnvshmem.a\n        - bash compile_perf_test.sh\n\n  - name: nvshmem4py\n    version: {{ nvshmem4py_version }}\n    build:\n      ignore_run_exports_from:\n        - {{ compiler(\"cxx\") }}\n        - cuda-cudart-dev\n      ignore_run_exports:\n        - cuda-version\n      string: \"py{{ py }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}\"\n      skip: true  # [py<310 or py>313]\n      skip: true  # [cuda_compiler_version != \"None\"]\n      script: bash ${RECIPE_DIR}/nvshmem4py-build.sh\n    requirements:\n      build:\n        - {{ compiler(\"c\") }}\n        - {{ compiler(\"cuda\") }}\n        - {{ compiler(\"cxx\") }}\n        - {{ stdlib(\"c\") }}\n      host:\n        - cuda-version {{ cuda_compiler_version }}  # [cuda_compiler_version != \"None\"]\n        - cython >=0.29.24                          # needed by pyproject.toml\n        - pip\n        - python {{ python }}\n        - setuptools >=62                           # needed by pyproject.toml\n      run:\n        - {{ pin_subpackage(\"libnvshmem-dev\", exact=True) }}\n        - cuda-core 0.3.2\n        - cuda-python {{ cuda_major }}\n        - numpy\n        - python {{ python }}\n    test:\n      imports:\n        - nvshmem\n        - nvshmem.core\n        - nvshmem.bindings\n      commands:\n        - |\n          python - <<EOF\n          import nvshmem, sys\n          print(\"nvshmem.__version__ =\", nvshmem.__version__)\n          EOF\n    about:\n      home: https://docs.nvidia.com/nvshmem/index.html\n      license: LicenseRef-NVIDIA-End-User-License-Agreement\n      license_file: LICENSE\n      license_url: https://docs.nvidia.com/nvshmem/api/sla.html\n      summary: C++ accelerated Python bindings for NVIDIA NVSHMEM built with Cython\n      description: |\n        C++ accelerated Python bindings for NVIDIA NVSHMEM built with Cython. NVIDIA NVSHMEM is an NVIDIA based \"shared memory\" library that provides an easy-to-use CPU-side interface to allocate pinned memory that is symmetrically distributed across a cluster of NVIDIA GPUs.\n      doc_url: https://docs.nvidia.com/nvshmem/api/index.html\n\nabout:\n  home: https://docs.nvidia.com/nvshmem/index.html\n  license: LicenseRef-NVIDIA-End-User-License-Agreement\n  license_file: LICENSE\n  license_url: https://docs.nvidia.com/nvshmem/api/sla.html\n  summary: NVIDIA NVSHMEM is an NVIDIA based \"shared memory\" library that provides an easy-to-use CPU-side interface to allocate pinned memory that is symmetrically distributed across a cluster of NVIDIA GPUs.\n  description: |\n    NVIDIA NVSHMEM is an NVIDIA based \"shared memory\" library that provides an easy-to-use CPU-side interface to allocate pinned memory that is symmetrically distributed across a cluster of NVIDIA GPUs.\n    NVSHMEM can significantly reduce communication and coordination overheads by allowing programmers to perform these operations from within CUDA kernels and on CUDA streams.\n  doc_url: https://docs.nvidia.com/nvshmem/api/index.html\n\nextra:\n  feedstock-name: libnvshmem\n  recipe-maintainers:\n    - conda-forge/cuda\n",
  "req": {
    "__set__": true,
    "elements": [
      "c_compiler_stub",
      "c_stdlib_stub",
      "cf-nvidia-tools",
      "cuda-core",
      "cuda-cudart",
      "cuda-cudart-dev",
      "cuda-python",
      "cuda-version",
      "cuda_compiler_stub",
      "cxx_compiler_stub",
      "cython",
      "libhwloc",
      "libnvshmem-dev",
      "libnvshmem3",
      "libpciaccess",
      "nccl",
      "numpy",
      "pip",
      "python",
      "setuptools",
      "ucx"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cf-nvidia-tools",
        "cuda_compiler_stub",
        "cxx_compiler_stub"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cuda-cudart-dev",
        "cuda-version",
        "cuda_compiler_stub",
        "cxx_compiler_stub",
        "cython",
        "libhwloc",
        "libpciaccess",
        "pip",
        "python",
        "setuptools",
        "ucx"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cuda-core",
        "cuda-cudart",
        "cuda-python",
        "cuda-version",
        "cuda_compiler_stub",
        "cxx_compiler_stub",
        "libhwloc",
        "libnvshmem-dev",
        "libnvshmem3",
        "libpciaccess",
        "nccl",
        "numpy",
        "python",
        "ucx"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cuda-version",
        "cuda_compiler_stub",
        "cxx_compiler_stub",
        "make"
      ]
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cf-nvidia-tools 1",
        "cuda_compiler_stub",
        "cxx_compiler_stub"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "cuda-cudart-dev",
        "cuda-version 12.9",
        "cuda-version 13.0",
        "cython >=0.29.24",
        "libhwloc",
        "libpciaccess",
        "pip",
        "python",
        "setuptools >=62",
        "ucx"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "cuda-core 0.3.2",
        "cuda-cudart",
        "cuda-python 13",
        "cuda-version",
        "libhwloc",
        "libnvshmem-dev",
        "libnvshmem3",
        "libpciaccess",
        "nccl",
        "numpy",
        "python",
        "ucx"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cuda-version 12.9",
        "cuda-version 13.0",
        "cuda_compiler_stub",
        "cxx_compiler_stub",
        "make"
      ]
    }
  },
  "url": "https://developer.download.nvidia.com/compute/nvshmem/redist/libnvshmem/linux-sbsa/libnvshmem-linux-sbsa-3.3.20_cuda13-archive.tar.xz",
  "version": "3.3.20",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/libnvshmem.json"
  }
}