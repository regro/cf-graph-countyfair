{
  "archived": false,
  "branch": "main",
  "conda-forge.yml": {
    "bot": {
      "check_solvable": true
    },
    "build_platform": {
      "linux_aarch64": "linux_aarch64"
    },
    "conda_build": {
      "error_overlinking": true
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    },
    "provider": {
      "linux_aarch64": "default"
    },
    "test": "native_and_emulated"
  },
  "feedstock_name": "libnvpl-fft",
  "hash_type": "sha256",
  "linux_aarch64_meta_yaml": {
    "about": {
      "description": "The NVIDIA Performance Libraries (NVPL) are a collection of high performance mathematical libraries optimized for the NVIDIA Grace Armv9.0 architecture.\nThese CPU-only libraries have no dependencies on CUDA or CTK, and are drop in replacements for standard C and Fortran mathematical APIs allowing HPC applications to achieve maximum performance on the Grace platform.",
      "doc_url": "https://docs.nvidia.com/nvpl/",
      "home": "https://developer.nvidia.com/nvpl",
      "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
      "license_file": "LICENSE",
      "license_url": "https://docs.nvidia.com/nvpl/license.html",
      "summary": "The NVIDIA Performance Libraries (NVPL) are a collection of high performance mathematical libraries optimized for the NVIDIA Grace Armv9.0 architecture."
    },
    "build": {
      "number": "0",
      "script": [
        "cp -rv include $PREFIX",
        "cp -rv lib $PREFIX",
        "check-glibc \"$PREFIX\"/lib*/*.so.* \"$PREFIX\"/bin/* \"$PREFIX\"/targets/*/lib*/*.so.* \"$PREFIX\"/targets/*/bin/*"
      ]
    },
    "extra": {
      "feedstock-name": "libnvpl-fft",
      "recipe-maintainers": [
        "conda-forge/cuda"
      ]
    },
    "outputs": [
      {
        "build": {
          "run_exports": [
            "libnvpl-fft0"
          ]
        },
        "files": [
          "include/nvpl_fft*",
          "include/nvpl_fft*/**",
          "lib/cmake/nvpl_fft*/**",
          "lib/libnvpl_fft*.so"
        ],
        "name": "libnvpl-fft-dev",
        "requirements": {
          "host": [
            "libnvpl-fft0",
            "_nvpl_dev_mutex",
            "libnvpl-common-dev"
          ],
          "run": [
            "_nvpl_dev_mutex",
            "libnvpl-common-dev",
            "libnvpl-fft0"
          ],
          "run_constrained": [
            "arm-variant * sbsa"
          ]
        },
        "test": {
          "commands": [
            "cmake ${CMAKE_ARGS} -GNinja test",
            "cmake --build .",
            "test -f $PREFIX/include/nvpl_fftw.h",
            "test -f $PREFIX/lib/cmake/nvpl_fft/nvpl_fft-config.cmake",
            "test -f $PREFIX/lib/libnvpl_fftw.so"
          ],
          "files": [
            "test"
          ],
          "requires": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "c_stdlib_stub",
            "cmake",
            "ninja"
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "libnvpl-fft0"
          ]
        },
        "files": [
          "lib/libnvpl_fft*.so.*"
        ],
        "name": "libnvpl-fft0",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "c_stdlib_stub",
            "arm-variant * sbsa"
          ],
          "run_constrained": [
            "arm-variant * sbsa"
          ]
        },
        "test": {
          "commands": [
            "test -f $PREFIX/lib/libnvpl_fftw.so.0",
            "test -f $PREFIX/lib/libnvpl_fftw.so.0.4.2"
          ]
        }
      }
    ],
    "package": {
      "name": "libnvpl-fft-split",
      "version": "0.4.2.1"
    },
    "requirements": {
      "build": [
        "cf-nvidia-tools 1.*"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "ebb9d98abc23ddee5c492e0bbf2c534570a38d7df1863a0630da2c6d7f5cca3d",
      "url": "https://developer.download.nvidia.com/compute/nvpl/redist/nvpl_fft/linux-sbsa/nvpl_fft-linux-sbsa-0.4.2.1-archive.tar.xz"
    }
  },
  "linux_aarch64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "arm-variant",
        "c_compiler_stub",
        "c_stdlib_stub",
        "cf-nvidia-tools"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "_nvpl_dev_mutex",
        "libnvpl-common-dev",
        "libnvpl-fft0"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "_nvpl_dev_mutex",
        "libnvpl-common-dev",
        "libnvpl-fft0"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "ninja"
      ]
    }
  },
  "meta_yaml": {
    "about": {
      "description": "The NVIDIA Performance Libraries (NVPL) are a collection of high performance mathematical libraries optimized for the NVIDIA Grace Armv9.0 architecture.\nThese CPU-only libraries have no dependencies on CUDA or CTK, and are drop in replacements for standard C and Fortran mathematical APIs allowing HPC applications to achieve maximum performance on the Grace platform.",
      "doc_url": "https://docs.nvidia.com/nvpl/",
      "home": "https://developer.nvidia.com/nvpl",
      "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
      "license_file": "LICENSE",
      "license_url": "https://docs.nvidia.com/nvpl/license.html",
      "summary": "The NVIDIA Performance Libraries (NVPL) are a collection of high performance mathematical libraries optimized for the NVIDIA Grace Armv9.0 architecture."
    },
    "build": {
      "number": "0",
      "script": [
        "cp -rv include $PREFIX",
        "cp -rv lib $PREFIX",
        "check-glibc \"$PREFIX\"/lib*/*.so.* \"$PREFIX\"/bin/* \"$PREFIX\"/targets/*/lib*/*.so.* \"$PREFIX\"/targets/*/bin/*"
      ]
    },
    "extra": {
      "feedstock-name": "libnvpl-fft",
      "recipe-maintainers": [
        "conda-forge/cuda"
      ]
    },
    "outputs": [
      {
        "build": {
          "run_exports": [
            "libnvpl-fft0"
          ]
        },
        "files": [
          "include/nvpl_fft*",
          "include/nvpl_fft*/**",
          "lib/cmake/nvpl_fft*/**",
          "lib/libnvpl_fft*.so"
        ],
        "name": "libnvpl-fft-dev",
        "requirements": {
          "host": [
            "libnvpl-fft0",
            "_nvpl_dev_mutex",
            "libnvpl-common-dev"
          ],
          "run": [
            "_nvpl_dev_mutex",
            "libnvpl-common-dev",
            "libnvpl-fft0"
          ],
          "run_constrained": [
            "arm-variant * sbsa"
          ]
        },
        "test": {
          "commands": [
            "cmake ${CMAKE_ARGS} -GNinja test",
            "cmake --build .",
            "test -f $PREFIX/include/nvpl_fftw.h",
            "test -f $PREFIX/lib/cmake/nvpl_fft/nvpl_fft-config.cmake",
            "test -f $PREFIX/lib/libnvpl_fftw.so"
          ],
          "files": [
            "test"
          ],
          "requires": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "c_stdlib_stub",
            "cmake",
            "ninja"
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "libnvpl-fft0"
          ]
        },
        "files": [
          "lib/libnvpl_fft*.so.*"
        ],
        "name": "libnvpl-fft0",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "c_stdlib_stub",
            "arm-variant * sbsa"
          ],
          "run_constrained": [
            "arm-variant * sbsa"
          ]
        },
        "test": {
          "commands": [
            "test -f $PREFIX/lib/libnvpl_fftw.so.0",
            "test -f $PREFIX/lib/libnvpl_fftw.so.0.4.2"
          ]
        }
      }
    ],
    "package": {
      "name": "libnvpl-fft-split",
      "version": "0.4.2.1"
    },
    "requirements": {
      "build": [
        "cf-nvidia-tools 1.*"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "ebb9d98abc23ddee5c492e0bbf2c534570a38d7df1863a0630da2c6d7f5cca3d",
      "url": "https://developer.download.nvidia.com/compute/nvpl/redist/nvpl_fft/linux-sbsa/nvpl_fft-linux-sbsa-0.4.2.1-archive.tar.xz"
    }
  },
  "name": "libnvpl-fft-split",
  "outputs_names": {
    "__set__": true,
    "elements": [
      "libnvpl-fft-dev",
      "libnvpl-fft0"
    ]
  },
  "parsing_error": false,
  "platforms": [
    "linux_aarch64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/libnvpl-fft.json"
  },
  "raw_meta_yaml": "{% set version = \"0.4.2.1\" %}\n{% set soversion = \".\".join(version.split(\".\")[:3]) %}\n{% set somajor = version.split(\".\")[0] %}\n{% set arm_variant_type = arm_variant_type|default(\"sbsa\") %}\n\npackage:\n  name: libnvpl-fft-split\n  version: {{ version }}\n\nsource:\n  url: https://developer.download.nvidia.com/compute/nvpl/redist/nvpl_fft/linux-sbsa/nvpl_fft-linux-sbsa-{{ version }}-archive.tar.xz\n  sha256: ebb9d98abc23ddee5c492e0bbf2c534570a38d7df1863a0630da2c6d7f5cca3d\n\nbuild:\n  number: 0\n  # nvpl is only for ARM architecture\n  skip: true  # [not aarch64]\n  script:\n    - cp -rv include $PREFIX\n    - cp -rv lib $PREFIX\n    - check-glibc \"$PREFIX\"/lib*/*.so.* \"$PREFIX\"/bin/* \"$PREFIX\"/targets/*/lib*/*.so.* \"$PREFIX\"/targets/*/bin/*  # [linux]\n\nrequirements:\n  build:\n    - cf-nvidia-tools 1.*  # [linux]\n\noutputs:\n\n  - name: libnvpl-fft-dev\n    build:\n      run_exports:\n        - {{ pin_subpackage(\"libnvpl-fft\" ~ somajor ) }}\n    files:\n      - include/nvpl_fft*\n      - include/nvpl_fft*/**\n      - lib/cmake/nvpl_fft*/**\n      - lib/libnvpl_fft*.so\n    requirements:\n      host:\n        - {{ pin_subpackage(\"libnvpl-fft\" ~ somajor, exact=True) }}\n        - _nvpl_dev_mutex\n        - libnvpl-common-dev\n      run:\n        - _nvpl_dev_mutex\n        - {{ pin_compatible(\"libnvpl-common-dev\", exact=True) }}\n        - {{ pin_subpackage(\"libnvpl-fft\" ~ somajor, exact=True) }}\n      run_constrained:\n        - arm-variant * {{ arm_variant_type }}\n    test:\n      files:\n        - test\n      requires:   # [build_platform == target_platform]\n        - {{ compiler(\"c\") }}  # [build_platform == target_platform]\n        - {{ compiler(\"cxx\") }}  # [build_platform == target_platform]\n        - {{ stdlib(\"c\") }}  # [build_platform == target_platform]\n        - cmake   # [build_platform == target_platform]\n        - ninja  # [build_platform == target_platform]\n      commands:\n        - cmake ${CMAKE_ARGS} -GNinja test  # [build_platform == target_platform]\n        - cmake --build .  # [build_platform == target_platform]\n        - test -f $PREFIX/include/nvpl_fftw.h\n        - test -f $PREFIX/lib/cmake/nvpl_fft/nvpl_fft-config.cmake\n        - test -f $PREFIX/lib/libnvpl_fftw.so\n\n  - name: libnvpl-fft{{ somajor }}\n    build:\n      run_exports:\n        - {{ pin_subpackage(\"libnvpl-fft\" ~ somajor ) }}\n    files:\n      - lib/libnvpl_fft*.so.*\n    requirements:\n      build:\n        - {{ compiler(\"c\") }}\n        - {{ stdlib(\"c\") }}\n        - arm-variant * {{ arm_variant_type }}\n      run_constrained:\n        - arm-variant * {{ arm_variant_type }}\n    test:\n      commands:\n        - test -f $PREFIX/lib/libnvpl_fftw.so.{{ somajor }}\n        - test -f $PREFIX/lib/libnvpl_fftw.so.{{ soversion }}\n\nabout:\n  home: https://developer.nvidia.com/nvpl\n  license: LicenseRef-NVIDIA-End-User-License-Agreement\n  license_file: LICENSE\n  license_url: https://docs.nvidia.com/nvpl/license.html\n  summary: >-\n    The NVIDIA Performance Libraries (NVPL) are a collection of high performance mathematical libraries optimized for the NVIDIA Grace Armv9.0 architecture.\n  description: >-\n    The NVIDIA Performance Libraries (NVPL) are a collection of high performance mathematical libraries optimized for the NVIDIA Grace Armv9.0 architecture.\n\n    These CPU-only libraries have no dependencies on CUDA or CTK, and are drop in replacements for standard C and Fortran mathematical APIs allowing HPC applications to achieve maximum performance on the Grace platform.\n  doc_url: https://docs.nvidia.com/nvpl/\n\nextra:\n  recipe-maintainers:\n    - conda-forge/cuda\n  feedstock-name: libnvpl-fft\n",
  "req": {
    "__set__": true,
    "elements": [
      "_nvpl_dev_mutex",
      "arm-variant",
      "c_compiler_stub",
      "c_stdlib_stub",
      "cf-nvidia-tools",
      "libnvpl-common-dev",
      "libnvpl-fft0"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "arm-variant",
        "c_compiler_stub",
        "c_stdlib_stub",
        "cf-nvidia-tools"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "_nvpl_dev_mutex",
        "arm-variant",
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "libnvpl-common-dev",
        "libnvpl-fft0"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "_nvpl_dev_mutex",
        "arm-variant",
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "libnvpl-common-dev",
        "libnvpl-fft0"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "ninja"
      ]
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "arm-variant * sbsa",
        "c_compiler_stub",
        "c_stdlib_stub",
        "cf-nvidia-tools 1.*"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "_nvpl_dev_mutex",
        "libnvpl-common-dev",
        "libnvpl-fft0"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "_nvpl_dev_mutex",
        "libnvpl-common-dev",
        "libnvpl-fft0"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "ninja"
      ]
    }
  },
  "url": "https://developer.download.nvidia.com/compute/nvpl/redist/nvpl_fft/linux-sbsa/nvpl_fft-linux-sbsa-0.4.2.1-archive.tar.xz",
  "version": "0.4.2.1",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/libnvpl-fft.json"
  }
}