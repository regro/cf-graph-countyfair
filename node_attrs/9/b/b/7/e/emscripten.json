{
  "archived": false,
  "branch": "main",
  "conda-forge.yml": {
    "build_platform": {
      "osx_arm64": "osx_arm64"
    },
    "conda_build": {
      "pkg_format": "2"
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    },
    "provider": {
      "osx_arm64": "azure"
    },
    "test": "native_and_emulated"
  },
  "feedstock_name": "emscripten",
  "hash_type": "sha256",
  "linux_64_meta_yaml": {
    "about": {
      "dev_url": "https://github.com/emscripten-core/emscripten",
      "home": "https://emscripten.org/",
      "license": "MIT OR NCSA OR MPL-2.0",
      "license_file": "LICENSE",
      "summary": "Emscripten compiles C and C++ to WebAssembly using LLVM and Binaryen. Emscripten output can run on the Web, in Node.js, and in wasm runtimes."
    },
    "build": {
      "ignore_run_exports_from": [
        "python *",
        "nodejs *"
      ],
      "number": "4",
      "string": "h1234567_4"
    },
    "extra": {
      "recipe-maintainers": [
        "wolfv",
        "h-vetinari"
      ]
    },
    "package": {
      "name": "emscripten",
      "version": "3.1.58"
    },
    "requirements": {
      "build": [
        "cxx_compiler_stub",
        "c_stdlib_stub",
        "python",
        "nodejs 20",
        "file"
      ],
      "host": [
        "binaryen  117.*",
        "lld 19.*",
        "clang 19.*",
        "clangxx 19.*",
        "llvm-tools 19.*"
      ],
      "run": [
        "python *",
        "binaryen",
        "nodejs >=20",
        "lld 19.*",
        "clang 19.*",
        "clangxx 19.*",
        "llvm-tools 19.*",
        "zlib"
      ]
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "patches/0001-Add-back-fs.findObject-and-fs.readFile-in-loadLibDat.patch",
        "patches/0002-Add-useful-error-when-symbol-resolution-fails.patch",
        "patches/0003-Changes-for-JSPI.patch",
        "patches/0004-Upstream-PR-https-github.com-emscripten-core-emscrip.patch",
        "patches/0005-Raise-when-no-argument-is-given.patch",
        "patches/0006-Make-RTLD_LOCAL-work-correctly-for-preloaded-DSOs-21.patch"
      ],
      "sha256": "45a6536b25df8f3bf62e0f415e389671108b02a49b33bd91134b2da7e87bab65",
      "url": "https://github.com/emscripten-core/emscripten/archive/3.1.58.tar.gz"
    },
    "test": {
      "commands": [
        "emcc --help",
        "emcc ./testfile.c",
        "node a.out.js"
      ],
      "files": [
        "testfile.c"
      ]
    }
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "file",
        "nodejs",
        "python"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "binaryen",
        "clang",
        "clangxx",
        "lld",
        "llvm-tools"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "binaryen",
        "clang",
        "clangxx",
        "lld",
        "llvm-tools",
        "nodejs",
        "python",
        "zlib"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "meta_yaml": {
    "about": {
      "dev_url": "https://github.com/emscripten-core/emscripten",
      "home": "https://emscripten.org/",
      "license": "MIT OR NCSA OR MPL-2.0",
      "license_file": "LICENSE",
      "summary": "Emscripten compiles C and C++ to WebAssembly using LLVM and Binaryen. Emscripten output can run on the Web, in Node.js, and in wasm runtimes."
    },
    "build": {
      "ignore_run_exports_from": [
        "python *",
        "nodejs *"
      ],
      "number": "4",
      "string": "h1234567_4"
    },
    "extra": {
      "recipe-maintainers": [
        "wolfv",
        "h-vetinari"
      ]
    },
    "package": {
      "name": "emscripten",
      "version": "3.1.58"
    },
    "requirements": {
      "build": [
        "cxx_compiler_stub",
        "c_stdlib_stub",
        "python",
        "nodejs 20",
        "file"
      ],
      "host": [
        "binaryen  117.*",
        "lld 19.*",
        "clang 19.*",
        "clangxx 19.*",
        "llvm-tools 19.*"
      ],
      "run": [
        "python *",
        "binaryen",
        "nodejs >=20",
        "lld 19.*",
        "clang 19.*",
        "clangxx 19.*",
        "llvm-tools 19.*",
        "zlib"
      ]
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "patches/0001-Add-back-fs.findObject-and-fs.readFile-in-loadLibDat.patch",
        "patches/0002-Add-useful-error-when-symbol-resolution-fails.patch",
        "patches/0003-Changes-for-JSPI.patch",
        "patches/0004-Upstream-PR-https-github.com-emscripten-core-emscrip.patch",
        "patches/0005-Raise-when-no-argument-is-given.patch",
        "patches/0006-Make-RTLD_LOCAL-work-correctly-for-preloaded-DSOs-21.patch"
      ],
      "sha256": "45a6536b25df8f3bf62e0f415e389671108b02a49b33bd91134b2da7e87bab65",
      "url": "https://github.com/emscripten-core/emscripten/archive/3.1.58.tar.gz"
    },
    "test": {
      "commands": [
        "emcc --help",
        "emcc ./testfile.c",
        "node a.out.js"
      ],
      "files": [
        "testfile.c"
      ]
    }
  },
  "name": "emscripten",
  "osx_64_meta_yaml": {
    "about": {
      "dev_url": "https://github.com/emscripten-core/emscripten",
      "home": "https://emscripten.org/",
      "license": "MIT OR NCSA OR MPL-2.0",
      "license_file": "LICENSE",
      "summary": "Emscripten compiles C and C++ to WebAssembly using LLVM and Binaryen. Emscripten output can run on the Web, in Node.js, and in wasm runtimes."
    },
    "build": {
      "ignore_run_exports_from": [
        "python *",
        "nodejs *"
      ],
      "number": "4",
      "string": "h1234567_4"
    },
    "extra": {
      "recipe-maintainers": [
        "wolfv",
        "h-vetinari"
      ]
    },
    "package": {
      "name": "emscripten",
      "version": "3.1.58"
    },
    "requirements": {
      "build": [
        "cxx_compiler_stub",
        "c_stdlib_stub",
        "python",
        "nodejs 20",
        "file"
      ],
      "host": [
        "binaryen  117.*",
        "lld 19.*",
        "clang 19.*",
        "clangxx 19.*",
        "llvm-tools 19.*"
      ],
      "run": [
        "python *",
        "binaryen",
        "nodejs >=20",
        "lld 19.*",
        "clang 19.*",
        "clangxx 19.*",
        "llvm-tools 19.*",
        "zlib"
      ]
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "patches/0001-Add-back-fs.findObject-and-fs.readFile-in-loadLibDat.patch",
        "patches/0002-Add-useful-error-when-symbol-resolution-fails.patch",
        "patches/0003-Changes-for-JSPI.patch",
        "patches/0004-Upstream-PR-https-github.com-emscripten-core-emscrip.patch",
        "patches/0005-Raise-when-no-argument-is-given.patch",
        "patches/0006-Make-RTLD_LOCAL-work-correctly-for-preloaded-DSOs-21.patch"
      ],
      "sha256": "45a6536b25df8f3bf62e0f415e389671108b02a49b33bd91134b2da7e87bab65",
      "url": "https://github.com/emscripten-core/emscripten/archive/3.1.58.tar.gz"
    },
    "test": {
      "commands": [
        "emcc --help",
        "emcc ./testfile.c",
        "node a.out.js"
      ],
      "files": [
        "testfile.c"
      ]
    }
  },
  "osx_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "file",
        "nodejs",
        "python"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "binaryen",
        "clang",
        "clangxx",
        "lld",
        "llvm-tools"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "binaryen",
        "clang",
        "clangxx",
        "lld",
        "llvm-tools",
        "nodejs",
        "python",
        "zlib"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "osx_arm64_meta_yaml": {
    "about": {
      "dev_url": "https://github.com/emscripten-core/emscripten",
      "home": "https://emscripten.org/",
      "license": "MIT OR NCSA OR MPL-2.0",
      "license_file": "LICENSE",
      "summary": "Emscripten compiles C and C++ to WebAssembly using LLVM and Binaryen. Emscripten output can run on the Web, in Node.js, and in wasm runtimes."
    },
    "build": {
      "ignore_run_exports_from": [
        "python *",
        "nodejs *"
      ],
      "number": "4",
      "string": "h1234567_4"
    },
    "extra": {
      "recipe-maintainers": [
        "wolfv",
        "h-vetinari"
      ]
    },
    "package": {
      "name": "emscripten",
      "version": "3.1.58"
    },
    "requirements": {
      "build": [
        "cxx_compiler_stub",
        "c_stdlib_stub",
        "python",
        "nodejs 20",
        "file"
      ],
      "host": [
        "binaryen  117.*",
        "lld 19.*",
        "clang 19.*",
        "clangxx 19.*",
        "llvm-tools 19.*"
      ],
      "run": [
        "python *",
        "binaryen",
        "nodejs >=20",
        "lld 19.*",
        "clang 19.*",
        "clangxx 19.*",
        "llvm-tools 19.*",
        "zlib"
      ]
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "patches/0001-Add-back-fs.findObject-and-fs.readFile-in-loadLibDat.patch",
        "patches/0002-Add-useful-error-when-symbol-resolution-fails.patch",
        "patches/0003-Changes-for-JSPI.patch",
        "patches/0004-Upstream-PR-https-github.com-emscripten-core-emscrip.patch",
        "patches/0005-Raise-when-no-argument-is-given.patch",
        "patches/0006-Make-RTLD_LOCAL-work-correctly-for-preloaded-DSOs-21.patch"
      ],
      "sha256": "45a6536b25df8f3bf62e0f415e389671108b02a49b33bd91134b2da7e87bab65",
      "url": "https://github.com/emscripten-core/emscripten/archive/3.1.58.tar.gz"
    },
    "test": {
      "commands": [
        "emcc --help",
        "emcc ./testfile.c",
        "node a.out.js"
      ],
      "files": [
        "testfile.c"
      ]
    }
  },
  "osx_arm64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "file",
        "nodejs",
        "python"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "binaryen",
        "clang",
        "clangxx",
        "lld",
        "llvm-tools"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "binaryen",
        "clang",
        "clangxx",
        "lld",
        "llvm-tools",
        "nodejs",
        "python",
        "zlib"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "outputs_names": {
    "__set__": true,
    "elements": [
      "emscripten"
    ]
  },
  "parsing_error": false,
  "platforms": [
    "linux_64",
    "osx_64",
    "osx_arm64",
    "win_64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/emscripten.json"
  },
  "raw_meta_yaml": "{% set version = \"3.1.58\" %}\n{% set llvm_version = \"19\" %}\n# TODO: check what LLVM hash emscripten requires later on\n\n# we just use a version here; doesn't seem to have much impact\n{% set min_nodejs = \"20\" %}\n\npackage:\n  name: emscripten\n  version: {{ version }}\n\nsource:\n  url: https://github.com/emscripten-core/emscripten/archive/{{ version }}.tar.gz\n  sha256: 45a6536b25df8f3bf62e0f415e389671108b02a49b33bd91134b2da7e87bab65\n  patches:\n    # from https://github.com/pyodide/pyodide/tree/main/emsdk/patches\n    - patches/0001-Add-back-fs.findObject-and-fs.readFile-in-loadLibDat.patch\n    - patches/0002-Add-useful-error-when-symbol-resolution-fails.patch\n    - patches/0003-Changes-for-JSPI.patch\n    - patches/0004-Upstream-PR-https-github.com-emscripten-core-emscrip.patch\n    - patches/0005-Raise-when-no-argument-is-given.patch\n    - patches/0006-Make-RTLD_LOCAL-work-correctly-for-preloaded-DSOs-21.patch\n\nbuild:\n  number: 4\n  string: h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}\n  ignore_run_exports_from:\n    - python *\n    - nodejs *\n\nrequirements:\n  build:\n    - {{ compiler('cxx') }}  # node modules need to compile native extensions\n    - {{ stdlib(\"c\") }}\n    - python\n    - nodejs {{ min_nodejs }}\n    - file  # [unix]\n  host:\n    # Each emscripten version expects a particular version of binaryen.\n    # If the binaryen version is different, emscripten issues a warning.\n    - binaryen  117.*\n    - lld {{ llvm_version }}.*\n    - clang {{ llvm_version }}.*\n    - clangxx {{ llvm_version }}.*\n    - llvm-tools {{ llvm_version }}.*\n  run:\n    - python *\n    - {{ pin_compatible(\"binaryen\", max_pin=\"x\") }}\n    - nodejs >={{ min_nodejs }}\n    - lld {{ llvm_version }}.*\n    - clang {{ llvm_version }}.*\n    - clangxx {{ llvm_version }}.*\n    - llvm-tools {{ llvm_version }}.*\n    # for google closure compiler\n    - zlib\n\ntest:\n  # disabled due to https://github.com/conda/conda-libmamba-solver/issues/677\n  # requires:\n  #   # test that we can still use python_min (i.e. haven't picked up too-tight constraint somehow)\n  #   - python {{ python_min }}.*\n  files:\n    - testfile.c\n  commands:\n    - emcc --help\n    - emcc ./testfile.c\n    - node a.out.js\n\nabout:\n  home: https://emscripten.org/\n  license: MIT OR NCSA OR MPL-2.0\n  license_file: LICENSE\n  summary: Emscripten compiles C and C++ to WebAssembly using LLVM and Binaryen. Emscripten output can run on the Web, in Node.js, and in wasm runtimes.\n  dev_url: https://github.com/emscripten-core/emscripten\n\nextra:\n  recipe-maintainers:\n    - wolfv\n    - h-vetinari\n",
  "req": {
    "__set__": true,
    "elements": [
      "binaryen",
      "c_stdlib_stub",
      "clang",
      "clangxx",
      "cxx_compiler_stub",
      "file",
      "lld",
      "llvm-tools",
      "nodejs",
      "python",
      "zlib"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "file",
        "nodejs",
        "python"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "binaryen",
        "c_stdlib_stub",
        "clang",
        "clangxx",
        "cxx_compiler_stub",
        "lld",
        "llvm-tools"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "binaryen",
        "c_stdlib_stub",
        "clang",
        "clangxx",
        "cxx_compiler_stub",
        "lld",
        "llvm-tools",
        "nodejs",
        "python",
        "zlib"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "file",
        "nodejs 20",
        "python"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "binaryen  117.*",
        "clang 19.*",
        "clangxx 19.*",
        "lld 19.*",
        "llvm-tools 19.*"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "binaryen",
        "clang 19.*",
        "clangxx 19.*",
        "lld 19.*",
        "llvm-tools 19.*",
        "nodejs >=20",
        "python *",
        "zlib"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "url": "https://github.com/emscripten-core/emscripten/archive/3.1.58.tar.gz",
  "version": "3.1.58",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/emscripten.json"
  },
  "win_64_meta_yaml": {
    "about": {
      "dev_url": "https://github.com/emscripten-core/emscripten",
      "home": "https://emscripten.org/",
      "license": "MIT OR NCSA OR MPL-2.0",
      "license_file": "LICENSE",
      "summary": "Emscripten compiles C and C++ to WebAssembly using LLVM and Binaryen. Emscripten output can run on the Web, in Node.js, and in wasm runtimes."
    },
    "build": {
      "ignore_run_exports_from": [
        "python *",
        "nodejs *"
      ],
      "number": "4",
      "string": "h1234567_4"
    },
    "extra": {
      "recipe-maintainers": [
        "wolfv",
        "h-vetinari"
      ]
    },
    "package": {
      "name": "emscripten",
      "version": "3.1.58"
    },
    "requirements": {
      "build": [
        "cxx_compiler_stub",
        "c_stdlib_stub",
        "python",
        "nodejs 20"
      ],
      "host": [
        "binaryen  117.*",
        "lld 19.*",
        "clang 19.*",
        "clangxx 19.*",
        "llvm-tools 19.*"
      ],
      "run": [
        "python *",
        "binaryen",
        "nodejs >=20",
        "lld 19.*",
        "clang 19.*",
        "clangxx 19.*",
        "llvm-tools 19.*",
        "zlib"
      ]
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "patches/0001-Add-back-fs.findObject-and-fs.readFile-in-loadLibDat.patch",
        "patches/0002-Add-useful-error-when-symbol-resolution-fails.patch",
        "patches/0003-Changes-for-JSPI.patch",
        "patches/0004-Upstream-PR-https-github.com-emscripten-core-emscrip.patch",
        "patches/0005-Raise-when-no-argument-is-given.patch",
        "patches/0006-Make-RTLD_LOCAL-work-correctly-for-preloaded-DSOs-21.patch"
      ],
      "sha256": "45a6536b25df8f3bf62e0f415e389671108b02a49b33bd91134b2da7e87bab65",
      "url": "https://github.com/emscripten-core/emscripten/archive/3.1.58.tar.gz"
    },
    "test": {
      "commands": [
        "emcc --help",
        "emcc ./testfile.c",
        "node a.out.js"
      ],
      "files": [
        "testfile.c"
      ]
    }
  },
  "win_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "nodejs",
        "python"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "binaryen",
        "clang",
        "clangxx",
        "lld",
        "llvm-tools"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "binaryen",
        "clang",
        "clangxx",
        "lld",
        "llvm-tools",
        "nodejs",
        "python",
        "zlib"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  }
}