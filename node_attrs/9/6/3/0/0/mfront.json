{
  "archived": false,
  "branch": "main",
  "conda-forge.yml": {
    "build_platform": {
      "osx_arm64": "osx_64"
    },
    "conda_build": {
      "error_overlinking": true
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    },
    "osx": {
      "fortran_compiler_version": [
        12
      ]
    },
    "provider": {
      "osx": "github_actions"
    },
    "test": "native_and_emulated"
  },
  "feedstock_name": "mfront",
  "hash_type": "sha256",
  "linux_64_meta_yaml": {
    "about": {
      "description": "MFront is a code generator which translates a set of closely related domain specific languages into plain C++ on top of the TFEL library. Those languages cover three kinds of material knowledge:\nmaterial properties (for instance the Young modulus, the thermal conductivity, etc.)\nmechanical behaviours. Numerical performances of generated mechanical behaviours were given a particular attention. Various benchmarks show that MFront implementations are competitive with native implementations available in the Cast3M, Code-Aster, Abaqus Standard and Cyrano3 solvers.\nsimple point-wise models, such as material swelling used in fuel performance codes.\n",
      "dev_url": "https://thelfer.github.io/tfel/web/contributing.html",
      "doc_url": "https://thelfer.github.io/tfel/web/index.html",
      "home": "https://github.com/thelfer/tfel",
      "license": "GPL-3.0-only",
      "license_family": "GPL",
      "license_file": "LICENCE-GNU-GPL",
      "summary": "MFront, a code generation tool dedicated to material knowledge"
    },
    "build": {
      "detect_binary_files_with_prefix": true,
      "number": "5",
      "run_exports": [
        "mfront"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "Krande",
        "ldallolio"
      ]
    },
    "package": {
      "name": "mfront",
      "version": "5.0.0"
    },
    "requirements": {
      "build": [
        "fortran_compiler_stub",
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "cmake <4",
        "make",
        "libgomp"
      ],
      "host": [
        "libboost-python-devel",
        "numpy",
        "python",
        "zlib"
      ],
      "run": [
        "python",
        "libboost"
      ]
    },
    "schema_version": 0,
    "source": {
      "fn": "mfront_5.0.0.tar.gz",
      "patches": [
        "patches/fix_Issue_703.patch",
        "patches/remove_numpy_init_wrap.patch"
      ],
      "sha256": "fe1ec39eba7f23571c2b0c773dab1cc274fee4512c5b2f2fc54b231da4502e87",
      "url": "https://github.com/thelfer/tfel/archive/refs/tags/TFEL-5.0.0.tar.gz"
    },
    "test": {
      "commands": [
        "tfel-config --version",
        "tfel-doc --version",
        "tfel-check --version",
        "mtest --version",
        "mfront --list-stress-criteria",
        "mfront-doc --version",
        "mfront-query --version",
        "mfm --version",
        "test -f $PREFIX/lib/libTFELConfig.so",
        "test -f $PREFIX/lib/libTFELUnicodeSupport.so",
        "test -f $PREFIX/lib/libTFELGlossary.so",
        "test -f $PREFIX/lib/libTFELException.so",
        "test -f $PREFIX/lib/libTFELUtilities.so"
      ],
      "imports": [
        "tfel",
        "tfel.math",
        "tfel.material"
      ]
    }
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "fortran_compiler_stub",
        "libgomp",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "libboost-python-devel",
        "numpy",
        "python",
        "zlib"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "libboost",
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "meta_yaml": {
    "about": {
      "description": "MFront is a code generator which translates a set of closely related domain specific languages into plain C++ on top of the TFEL library. Those languages cover three kinds of material knowledge:\nmaterial properties (for instance the Young modulus, the thermal conductivity, etc.)\nmechanical behaviours. Numerical performances of generated mechanical behaviours were given a particular attention. Various benchmarks show that MFront implementations are competitive with native implementations available in the Cast3M, Code-Aster, Abaqus Standard and Cyrano3 solvers.\nsimple point-wise models, such as material swelling used in fuel performance codes.\n",
      "dev_url": "https://thelfer.github.io/tfel/web/contributing.html",
      "doc_url": "https://thelfer.github.io/tfel/web/index.html",
      "home": "https://github.com/thelfer/tfel",
      "license": "GPL-3.0-only",
      "license_family": "GPL",
      "license_file": "LICENCE-GNU-GPL",
      "summary": "MFront, a code generation tool dedicated to material knowledge"
    },
    "build": {
      "detect_binary_files_with_prefix": true,
      "number": "5",
      "run_exports": [
        "mfront"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "Krande",
        "ldallolio"
      ]
    },
    "package": {
      "name": "mfront",
      "version": "5.0.0"
    },
    "requirements": {
      "build": [
        "fortran_compiler_stub",
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "cmake <4",
        "make",
        "libgomp",
        "llvm-openmp",
        "ninja",
        "clang",
        "lld"
      ],
      "host": [
        "libboost-python-devel",
        "numpy",
        "python",
        "zlib"
      ],
      "run": [
        "python",
        "libboost"
      ]
    },
    "schema_version": 0,
    "source": {
      "fn": "mfront_5.0.0.tar.gz",
      "patches": [
        "patches/fix_Issue_703.patch",
        "patches/remove_numpy_init_wrap.patch",
        "patches/support_llvm-flang.patch"
      ],
      "sha256": "fe1ec39eba7f23571c2b0c773dab1cc274fee4512c5b2f2fc54b231da4502e87",
      "url": "https://github.com/thelfer/tfel/archive/refs/tags/TFEL-5.0.0.tar.gz"
    },
    "test": {
      "commands": [
        "tfel-config --version",
        "tfel-doc --version",
        "tfel-check --version",
        "mtest --version",
        "mfront --list-stress-criteria",
        "mfront-doc --version",
        "mfront-query --version",
        "mfm --version",
        "test -f $PREFIX/lib/libTFELConfig.so",
        "test -f $PREFIX/lib/libTFELUnicodeSupport.so",
        "test -f $PREFIX/lib/libTFELGlossary.so",
        "test -f $PREFIX/lib/libTFELException.so",
        "test -f $PREFIX/lib/libTFELUtilities.so"
      ],
      "imports": [
        "tfel",
        "tfel.math",
        "tfel.material"
      ]
    }
  },
  "name": "mfront",
  "osx_64_meta_yaml": {
    "about": {
      "description": "MFront is a code generator which translates a set of closely related domain specific languages into plain C++ on top of the TFEL library. Those languages cover three kinds of material knowledge:\nmaterial properties (for instance the Young modulus, the thermal conductivity, etc.)\nmechanical behaviours. Numerical performances of generated mechanical behaviours were given a particular attention. Various benchmarks show that MFront implementations are competitive with native implementations available in the Cast3M, Code-Aster, Abaqus Standard and Cyrano3 solvers.\nsimple point-wise models, such as material swelling used in fuel performance codes.\n",
      "dev_url": "https://thelfer.github.io/tfel/web/contributing.html",
      "doc_url": "https://thelfer.github.io/tfel/web/index.html",
      "home": "https://github.com/thelfer/tfel",
      "license": "GPL-3.0-only",
      "license_family": "GPL",
      "license_file": "LICENCE-GNU-GPL",
      "summary": "MFront, a code generation tool dedicated to material knowledge"
    },
    "build": {
      "detect_binary_files_with_prefix": true,
      "number": "5",
      "run_exports": [
        "mfront"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "Krande",
        "ldallolio"
      ]
    },
    "package": {
      "name": "mfront",
      "version": "5.0.0"
    },
    "requirements": {
      "build": [
        "fortran_compiler_stub",
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "cmake <4",
        "make",
        "llvm-openmp"
      ],
      "host": [
        "libboost-python-devel",
        "numpy",
        "python"
      ],
      "run": [
        "python",
        "libboost"
      ]
    },
    "schema_version": 0,
    "source": {
      "fn": "mfront_5.0.0.tar.gz",
      "patches": [
        "patches/fix_Issue_703.patch",
        "patches/remove_numpy_init_wrap.patch"
      ],
      "sha256": "fe1ec39eba7f23571c2b0c773dab1cc274fee4512c5b2f2fc54b231da4502e87",
      "url": "https://github.com/thelfer/tfel/archive/refs/tags/TFEL-5.0.0.tar.gz"
    },
    "test": {
      "commands": [
        "tfel-config --version",
        "mtest --version",
        "mfront --list-stress-criteria",
        "mfront-doc --version",
        "mfront-query --version",
        "mfm --version"
      ],
      "imports": [
        "tfel",
        "tfel.math",
        "tfel.material"
      ]
    }
  },
  "osx_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "fortran_compiler_stub",
        "llvm-openmp",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "libboost-python-devel",
        "numpy",
        "python"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "libboost",
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "osx_arm64_meta_yaml": {
    "about": {
      "description": "MFront is a code generator which translates a set of closely related domain specific languages into plain C++ on top of the TFEL library. Those languages cover three kinds of material knowledge:\nmaterial properties (for instance the Young modulus, the thermal conductivity, etc.)\nmechanical behaviours. Numerical performances of generated mechanical behaviours were given a particular attention. Various benchmarks show that MFront implementations are competitive with native implementations available in the Cast3M, Code-Aster, Abaqus Standard and Cyrano3 solvers.\nsimple point-wise models, such as material swelling used in fuel performance codes.\n",
      "dev_url": "https://thelfer.github.io/tfel/web/contributing.html",
      "doc_url": "https://thelfer.github.io/tfel/web/index.html",
      "home": "https://github.com/thelfer/tfel",
      "license": "GPL-3.0-only",
      "license_family": "GPL",
      "license_file": "LICENCE-GNU-GPL",
      "summary": "MFront, a code generation tool dedicated to material knowledge"
    },
    "build": {
      "detect_binary_files_with_prefix": true,
      "number": "5",
      "run_exports": [
        "mfront"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "Krande",
        "ldallolio"
      ]
    },
    "package": {
      "name": "mfront",
      "version": "5.0.0"
    },
    "requirements": {
      "build": [
        "fortran_compiler_stub",
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "cmake <4",
        "make",
        "llvm-openmp"
      ],
      "host": [
        "libboost-python-devel",
        "numpy",
        "python"
      ],
      "run": [
        "python",
        "libboost"
      ]
    },
    "schema_version": 0,
    "source": {
      "fn": "mfront_5.0.0.tar.gz",
      "patches": [
        "patches/fix_Issue_703.patch",
        "patches/remove_numpy_init_wrap.patch"
      ],
      "sha256": "fe1ec39eba7f23571c2b0c773dab1cc274fee4512c5b2f2fc54b231da4502e87",
      "url": "https://github.com/thelfer/tfel/archive/refs/tags/TFEL-5.0.0.tar.gz"
    },
    "test": {
      "commands": [
        "tfel-config --version",
        "mtest --version",
        "mfront --list-stress-criteria",
        "mfront-doc --version",
        "mfront-query --version",
        "mfm --version"
      ],
      "imports": [
        "tfel",
        "tfel.math",
        "tfel.material"
      ]
    }
  },
  "osx_arm64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "fortran_compiler_stub",
        "llvm-openmp",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "libboost-python-devel",
        "numpy",
        "python"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "libboost",
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "outputs_names": {
    "__set__": true,
    "elements": [
      "mfront"
    ]
  },
  "parsing_error": false,
  "platforms": [
    "linux_64",
    "osx_64",
    "osx_arm64",
    "win_64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/mfront.json"
  },
  "raw_meta_yaml": "{% set name = \"mfront\" %}\n{% set version = \"5.0.0\" %}\n{% set sha256 = \"fe1ec39eba7f23571c2b0c773dab1cc274fee4512c5b2f2fc54b231da4502e87\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  fn: {{ name }}_{{ version }}.tar.gz\n  url: https://github.com/thelfer/tfel/archive/refs/tags/TFEL-{{ version }}.tar.gz\n  sha256: {{ sha256 }}\n  patches:\n    - patches/support_llvm-flang.patch  # [win]\n    - patches/fix_Issue_703.patch\n    - patches/remove_numpy_init_wrap.patch\n\nbuild:\n  number: 5\n  detect_binary_files_with_prefix: true\n  run_exports:\n    - {{ pin_subpackage('mfront', max_pin='x.x.x') }}\n\nrequirements:\n  build:\n    - {{ compiler(\"fortran\") }}\n    - {{ compiler('c') }}\n    - {{ stdlib(\"c\") }}\n    - {{ compiler('cxx') }}\n    - python                                 # [build_platform != target_platform]\n    - cross-python_{{ target_platform }}     # [build_platform != target_platform]\n    - numpy                                  # [build_platform != target_platform]\n    - cmake <4\n    - make  # [not win]\n    - ninja                       # [win]\n    - clang                       # [win]\n    - lld                         # [win]\n    - libgomp  # [linux]\n    - llvm-openmp  # [osx]\n  host:\n    - libboost-python-devel\n    - numpy\n    - python\n    - zlib  # [linux]\n  run:\n    - python\n    - libboost\n\ntest:\n  commands:\n    - tfel-config --version\n    - tfel-doc --version  # [linux]\n    - tfel-check --version  # [linux]\n    - mtest --version\n    - mfront --list-stress-criteria\n    - mfront-doc --version\n    - mfront-query --version\n    - mfm --version\n    - test -f $PREFIX/lib/libTFELConfig.so  # [linux]\n    - test -f $PREFIX/lib/libTFELUnicodeSupport.so  # [linux]\n    - test -f $PREFIX/lib/libTFELGlossary.so  # [linux]\n    - test -f $PREFIX/lib/libTFELException.so  # [linux]\n    - test -f $PREFIX/lib/libTFELUtilities.so  # [linux]\n\n  imports:\n    - tfel\n    - tfel.math\n    - tfel.material\n\nabout:\n  home: https://github.com/thelfer/tfel\n  license: GPL-3.0-only\n  license_family: GPL\n  license_file: LICENCE-GNU-GPL\n  summary: MFront, a code generation tool dedicated to material knowledge\n  description: |\n    MFront is a code generator which translates a set of closely related domain specific languages into plain C++ on top of the TFEL library. Those languages cover three kinds of material knowledge:\n    material properties (for instance the Young modulus, the thermal conductivity, etc.)\n    mechanical behaviours. Numerical performances of generated mechanical behaviours were given a particular attention. Various benchmarks show that MFront implementations are competitive with native implementations available in the Cast3M, Code-Aster, Abaqus Standard and Cyrano3 solvers.\n    simple point-wise models, such as material swelling used in fuel performance codes.\n  doc_url: https://thelfer.github.io/tfel/web/index.html\n  dev_url: https://thelfer.github.io/tfel/web/contributing.html\n\nextra:\n  recipe-maintainers:\n    - Krande\n    - ldallolio\n",
  "req": {
    "__set__": true,
    "elements": [
      "c_compiler_stub",
      "c_stdlib_stub",
      "clang",
      "cmake",
      "cxx_compiler_stub",
      "fortran_compiler_stub",
      "libboost",
      "libboost-python-devel",
      "libgomp",
      "lld",
      "llvm-openmp",
      "make",
      "ninja",
      "numpy",
      "python",
      "zlib"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "clang",
        "cmake",
        "cxx_compiler_stub",
        "fortran_compiler_stub",
        "libgomp",
        "lld",
        "llvm-openmp",
        "make",
        "ninja"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "ctng-compilers",
        "cxx_compiler_stub",
        "fortran_compiler_stub",
        "libboost-python-devel",
        "numpy",
        "openmp",
        "python",
        "zlib"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "ctng-compilers",
        "cxx_compiler_stub",
        "fortran_compiler_stub",
        "libboost",
        "openmp",
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "clang",
        "cmake <4",
        "cxx_compiler_stub",
        "fortran_compiler_stub",
        "libgomp",
        "lld",
        "llvm-openmp",
        "make",
        "ninja"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "libboost-python-devel",
        "numpy",
        "python",
        "zlib"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "libboost",
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "url": "https://github.com/thelfer/tfel/archive/refs/tags/TFEL-5.0.0.tar.gz",
  "version": "5.0.0",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/mfront.json"
  },
  "win_64_meta_yaml": {
    "about": {
      "description": "MFront is a code generator which translates a set of closely related domain specific languages into plain C++ on top of the TFEL library. Those languages cover three kinds of material knowledge:\nmaterial properties (for instance the Young modulus, the thermal conductivity, etc.)\nmechanical behaviours. Numerical performances of generated mechanical behaviours were given a particular attention. Various benchmarks show that MFront implementations are competitive with native implementations available in the Cast3M, Code-Aster, Abaqus Standard and Cyrano3 solvers.\nsimple point-wise models, such as material swelling used in fuel performance codes.\n",
      "dev_url": "https://thelfer.github.io/tfel/web/contributing.html",
      "doc_url": "https://thelfer.github.io/tfel/web/index.html",
      "home": "https://github.com/thelfer/tfel",
      "license": "GPL-3.0-only",
      "license_family": "GPL",
      "license_file": "LICENCE-GNU-GPL",
      "summary": "MFront, a code generation tool dedicated to material knowledge"
    },
    "build": {
      "detect_binary_files_with_prefix": true,
      "number": "5",
      "run_exports": [
        "mfront"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "Krande",
        "ldallolio"
      ]
    },
    "package": {
      "name": "mfront",
      "version": "5.0.0"
    },
    "requirements": {
      "build": [
        "fortran_compiler_stub",
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "cmake <4",
        "ninja",
        "clang",
        "lld"
      ],
      "host": [
        "libboost-python-devel",
        "numpy",
        "python"
      ],
      "run": [
        "python",
        "libboost"
      ]
    },
    "schema_version": 0,
    "source": {
      "fn": "mfront_5.0.0.tar.gz",
      "patches": [
        "patches/support_llvm-flang.patch",
        "patches/fix_Issue_703.patch",
        "patches/remove_numpy_init_wrap.patch"
      ],
      "sha256": "fe1ec39eba7f23571c2b0c773dab1cc274fee4512c5b2f2fc54b231da4502e87",
      "url": "https://github.com/thelfer/tfel/archive/refs/tags/TFEL-5.0.0.tar.gz"
    },
    "test": {
      "commands": [
        "tfel-config --version",
        "mtest --version",
        "mfront --list-stress-criteria",
        "mfront-doc --version",
        "mfront-query --version",
        "mfm --version"
      ],
      "imports": [
        "tfel",
        "tfel.math",
        "tfel.material"
      ]
    }
  },
  "win_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "clang",
        "cmake",
        "cxx_compiler_stub",
        "fortran_compiler_stub",
        "lld",
        "ninja"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "libboost-python-devel",
        "numpy",
        "python"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "libboost",
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  }
}