{
  "archived": false,
  "branch": "main",
  "conda-forge.yml": {
    "azure": {
      "free_disk_space": true,
      "settings_linux": {
        "timeoutInMinutes": 1
      }
    },
    "bot": {
      "abi_migration_branches": [
        "v2.6.x"
      ]
    },
    "build_platform": {
      "linux_aarch64": "linux_64",
      "osx_arm64": "osx_64"
    },
    "conda_build": {
      "pkg_format": "2"
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    },
    "github_actions": {
      "self_hosted": true,
      "store_build_artifacts": true,
      "timeout_minutes": 1200,
      "triggers": [
        "push",
        "pull_request"
      ]
    },
    "provider": {
      "linux_64": "github_actions",
      "linux_aarch64": "azure",
      "win_64": "github_actions"
    },
    "test": "native_and_emulated"
  },
  "feedstock_hash": "56a9a5b255b0037985d9f077fc88459661a0792b",
  "feedstock_hash_ts": 1760454145,
  "feedstock_name": "pytorch-cpu",
  "hash_type": "sha256",
  "linux_64_meta_yaml": {
    "about": {
      "description": "PyTorch is a Python package that provides two high-level features:\n  - Tensor computation (like NumPy) with strong GPU acceleration\n  - Deep neural networks built on a tape-based autograd system\nYou can reuse your favorite Python packages such as NumPy, SciPy, and Cython to extend PyTorch when needed.\n",
      "dev_url": "https://github.com/pytorch/pytorch",
      "doc_url": "https://pytorch.org/docs/",
      "home": "https://pytorch.org/",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": [
        "LICENSE",
        "NOTICE",
        "third_party/CMake/Copyright.txt"
      ],
      "summary": "PyTorch is an optimized tensor library for deep learning using GPUs and CPUs."
    },
    "build": {
      "detect_binary_files_with_prefix": false,
      "ignore_run_exports": [
        "python *",
        "numpy *",
        "libmagma_sparse"
      ],
      "ignore_run_exports_from": [
        "python *",
        "numpy *"
      ],
      "number": "101",
      "run_exports": [
        "libtorch"
      ],
      "string": "cpu_mkl_h1234567_101"
    },
    "extra": {
      "feedstock-name": "pytorch-cpu",
      "recipe-maintainers": [
        "baszalmstra",
        "benjaminrwilson",
        "beckermr",
        "h-vetinari",
        "hmaarrfk",
        "jeongseok-meta",
        "mgorny",
        "sodre",
        "Tobias-Fischer"
      ]
    },
    "outputs": [
      {
        "name": "libtorch"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "ignore_run_exports": [
            "libmagma_sparse"
          ],
          "run_exports": [
            "pytorch",
            "libtorch"
          ],
          "string": "cuda129_generic_py313_h1234567_201"
        },
        "name": "pytorch",
        "requirements": {
          "build": [
            "python",
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cuda_compiler_stub",
            "llvm-openmp",
            "cmake",
            "ninja",
            "libprotobuf",
            "protobuf",
            "make"
          ],
          "host": [
            "libtorch",
            "cudnn <9.11",
            "nccl",
            "cuda-version 12.9",
            "nvtx-c",
            "magma",
            "cuda-driver-dev",
            "cuda-cudart-dev",
            "cuda-cupti-dev",
            "cuda-nvrtc-dev",
            "cuda-nvtx-dev",
            "cuda-nvml-dev",
            "cuda-profiler-api",
            "cusparselt",
            "libcublas-dev",
            "libcudss-dev",
            "libcufile-dev",
            "libcufft-dev",
            "libcurand-dev",
            "libcusolver-dev",
            "libcusparse-dev",
            "python",
            "numpy",
            "pip",
            "setuptools",
            "pyyaml",
            "requests",
            "six",
            "libcblas",
            "liblapack",
            "llvm-openmp",
            "libabseil",
            "libprotobuf",
            "pybind11",
            "pybind11-abi",
            "eigen",
            "sleef",
            "libuv",
            "pkg-config",
            "typing_extensions",
            "zlib"
          ],
          "run": [
            "libtorch",
            "llvm-openmp",
            "nomkl",
            "triton ==3.4.0",
            "__cuda",
            "python",
            "filelock",
            "fsspec",
            "jinja2",
            "networkx",
            "optree >=0.13.0",
            "pybind11",
            "setuptools",
            "sympy >=1.13.3",
            "typing_extensions >=4.10.0"
          ],
          "run_constrained": [
            "pytorch-gpu 2.8.0",
            "pytorch-cpu <0.0a0"
          ]
        },
        "script": "build.sh"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cuda129_generic_py313_h1234567_201"
        },
        "name": "pytorch-tests",
        "requirements": {
          "host": [
            "python"
          ],
          "run": [
            "pytorch 2.8.0 cuda*_generic_py313*201"
          ]
        },
        "test": {
          "commands": [
            "pip check",
            "python -c \"import torch; print(torch.__version__)\"",
            "python -c \"import torch; torch.tensor(1).to('cpu').numpy(); print('numpy support enabled!!!')\"",
            "python -c \"import torch; import numpy\"",
            "python -c \"import numpy; import torch\"",
            "python -c \"import numpy as np;import torch;x = torch.tensor([2], dtype=torch.complex128);assert torch.dot(x, x).real == 4.0\"",
            "python -c \"import torch; assert torch.distributed.is_available()\"",
            "python -c \"import torch; assert torch.backends.cuda.is_built()\"",
            "python -c \"import torch; assert torch.backends.cudnn.is_available()\"",
            "python -c \"import torch; assert torch.backends.cudnn.enabled\"",
            "python -c \"import torch; assert torch.version.cuda is not None\"",
            "test -f $PREFIX/lib/libtorch_python${SHLIB_EXT}",
            "export OMP_NUM_THREADS=4",
            "pytest -n 1 test/test_autograd.py test/test_autograd_fallback.py test/test_custom_ops.py test/test_linalg.py test/test_mkldnn.py test/test_modules.py test/test_nn.py test/test_torch.py test/test_xnnpack_integration.py test/inductor/test_torchinductor.py -k \"not ((TestTorch and test_print) or test_1_sized_with_0_strided_cpu_float32 or test_batchnorm_nhwc_cpu or test_layer_norm_backwards_eps or test_pynode_destruction_deadlock or (TestLinalgCPU and test_cholesky_cpu_float32) or (TestLinalgCPU and test_pca_lowrank_cpu) or (TestLinalgCPU and test_svd_lowrank_cpu) or (TestMkldnnCPU and test_lstm_cpu) or test_eigh_lwork_lapack or test_gradgrad_nn_LSTM or test_grad_nn_Transformer or test_inverse_errors_large or (TestXNNPACKConv1dTransformPass and test_conv1d_basic) or test_addbmm or test_baddbmm or test_bmm or illcondition_matrix_input_should_not_crash_cpu or (TestAutograd and test_profiler_seq_nr) or (TestAutograd and test_profiler_propagation) or test_mutable_custom_op_fixed_layout or test_BCELoss_weights_no_reduce_cuda or test_ctc_loss_cudnn_tensor_cuda  or (TestTorch and test_index_add_correctness) or test_sdpa_inference_mode_aot_compile or (TestNN and test_grid_sample) or test_cublas_config_nondeterministic_alert_cuda or test_cross_entropy_loss_2d_out_of_bounds_class or test_indirect_device_assert or test_reentrant_parent_error_on_cpu_cuda or (GPUTests and test_scatter_reduce2) or test_ck_blas_library_cpu or test_matmul_offline_tunableop_cuda_float16 or test_Conv3d_1x1x1_no_bias_cuda or test_isinf_cuda or test_donated_buffer_inplace_gpt or test_linear_dynamic_maxautotune_cuda or (test_gradgrad_nn_Transformer and _cuda_) or test_avg_pool3d_backward2 or (TestLinalgCPU and test_inverse_errors_large_cpu) or test_gather_scatter_cpu or test_index_put2_cpu  or test_base_does_not_require_grad_mode_nothing or test_base_does_not_require_grad_mode_warn or test_composite_registered_to_cpu_mode_nothing or (TestMkldnnCPU and test_batch_norm_2d_cpu) or (TestNN and test_Conv1d_dilated) or (TestNN and test_Conv1d_pad_same_dilated) or (TestNN and test_Conv2d_pad_same_dilated) or (TestNN and test_Conv2d_padding) or (TestNN and test_Conv2d_strided) or (TestNN and test_Conv3d_dilated) or (TestNN and test_Conv3d_dilated_strided) or (TestNN and test_Conv3d_pad_same_dilated) or (TestNN and test_Conv3d_stride) or (TestNN and test_Conv3d_stride_padding) or (TestTorch and test_tensor_cycle_via_slots))\" -m \"not hypothesis\" --durations=50 --disable-warnings",
            "test ! -f $SP_DIR/functorch/__pycache__/__init__.cpython-313.pyc",
            "cd cmake_test",
            "cmake -GNinja -DCMAKE_CXX_STANDARD=17 -DWITH_TORCH_PYTHON=ON $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/"
          ],
          "imports": [
            "torch",
            "torch._C"
          ],
          "requires": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cuda_compiler_stub",
            "ninja",
            "boto3",
            "hypothesis",
            "pytest",
            "tabulate",
            "pydot",
            "pip",
            "expecttest",
            "xmlrunner",
            "pyyaml",
            "pytest-flakefinder",
            "pytest-rerunfailures",
            "pytest-xdist",
            "cmake",
            "cuda-nvrtc-dev",
            "nvtx-c",
            "pybind11",
            "cudnn <9.11"
          ],
          "source_files": [
            "test",
            "tools"
          ]
        }
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cuda129_generic_h1234567_201"
        },
        "name": "pytorch-gpu",
        "requirements": {
          "run": [
            "pytorch 2.8.0 cuda*_generic*201"
          ]
        },
        "test": {
          "imports": [
            "torch"
          ]
        }
      },
      {
        "name": "libtorch"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "ignore_run_exports": [
            "libmagma_sparse"
          ],
          "run_exports": [
            "pytorch",
            "libtorch"
          ],
          "string": "cpu_generic_py313_h1234567_1"
        },
        "name": "pytorch",
        "requirements": {
          "build": [
            "python",
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "llvm-openmp",
            "cmake",
            "ninja",
            "libprotobuf",
            "protobuf",
            "make"
          ],
          "host": [
            "libtorch",
            "python",
            "numpy",
            "pip",
            "setuptools",
            "pyyaml",
            "requests",
            "six",
            "libcblas",
            "liblapack",
            "llvm-openmp",
            "libabseil",
            "libprotobuf",
            "pybind11",
            "pybind11-abi",
            "eigen",
            "sleef",
            "libuv",
            "pkg-config",
            "typing_extensions",
            "zlib"
          ],
          "run": [
            "libtorch",
            "llvm-openmp",
            "nomkl",
            "python",
            "filelock",
            "fsspec",
            "jinja2",
            "networkx",
            "optree >=0.13.0",
            "pybind11",
            "setuptools",
            "sympy >=1.13.3",
            "typing_extensions >=4.10.0"
          ],
          "run_constrained": [
            "pytorch-cpu 2.8.0",
            "pytorch-gpu <0.0a0"
          ]
        },
        "script": "build.sh"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cpu_generic_py313_h1234567_1"
        },
        "name": "pytorch-tests",
        "requirements": {
          "host": [
            "python"
          ],
          "run": [
            "pytorch 2.8.0 cpu_generic_py313*1"
          ]
        },
        "test": {
          "commands": [
            "pip check",
            "python -c \"import torch; print(torch.__version__)\"",
            "python -c \"import torch; assert torch.backends.mkldnn.m.is_available()\"",
            "python -c \"import torch; torch.tensor(1).to('cpu').numpy(); print('numpy support enabled!!!')\"",
            "python -c \"import torch; import numpy\"",
            "python -c \"import numpy; import torch\"",
            "python -c \"import numpy as np;import torch;x = torch.tensor([2], dtype=torch.complex128);assert torch.dot(x, x).real == 4.0\"",
            "python -c \"import torch; assert torch.distributed.is_available()\"",
            "test -f $PREFIX/lib/libtorch_python${SHLIB_EXT}",
            "export OMP_NUM_THREADS=4",
            "pytest -n 1 test/test_autograd.py test/test_autograd_fallback.py test/test_custom_ops.py test/test_linalg.py test/test_mkldnn.py test/test_modules.py test/test_nn.py test/test_torch.py test/test_xnnpack_integration.py test/inductor/test_torchinductor.py -k \"not ((TestTorch and test_print) or test_1_sized_with_0_strided_cpu_float32 or test_batchnorm_nhwc_cpu or test_layer_norm_backwards_eps or test_pynode_destruction_deadlock or (TestLinalgCPU and test_cholesky_cpu_float32) or (TestLinalgCPU and test_pca_lowrank_cpu) or (TestLinalgCPU and test_svd_lowrank_cpu) or (TestMkldnnCPU and test_lstm_cpu) or test_eigh_lwork_lapack or test_gradgrad_nn_LSTM or test_grad_nn_Transformer or test_inverse_errors_large or (TestXNNPACKConv1dTransformPass and test_conv1d_basic) or test_addbmm or test_baddbmm or test_bmm or illcondition_matrix_input_should_not_crash_cpu or (TestAutograd and test_profiler_seq_nr) or (TestAutograd and test_profiler_propagation) or test_mutable_custom_op_fixed_layout or test_BCELoss_weights_no_reduce_cuda or test_ctc_loss_cudnn_tensor_cuda  or (TestTorch and test_index_add_correctness) or test_sdpa_inference_mode_aot_compile or (TestNN and test_grid_sample) or test_cublas_config_nondeterministic_alert_cuda or test_cross_entropy_loss_2d_out_of_bounds_class or test_indirect_device_assert or test_reentrant_parent_error_on_cpu_cuda or (GPUTests and test_scatter_reduce2) or test_ck_blas_library_cpu or test_matmul_offline_tunableop_cuda_float16 or test_Conv3d_1x1x1_no_bias_cuda or test_isinf_cuda or test_donated_buffer_inplace_gpt or test_linear_dynamic_maxautotune_cuda or (test_gradgrad_nn_Transformer and _cuda_) or test_avg_pool3d_backward2 or (TestLinalgCPU and test_inverse_errors_large_cpu) or test_gather_scatter_cpu or test_index_put2_cpu  or test_base_does_not_require_grad_mode_nothing or test_base_does_not_require_grad_mode_warn or test_composite_registered_to_cpu_mode_nothing or (TestMkldnnCPU and test_batch_norm_2d_cpu) or (TestNN and test_Conv1d_dilated) or (TestNN and test_Conv1d_pad_same_dilated) or (TestNN and test_Conv2d_pad_same_dilated) or (TestNN and test_Conv2d_padding) or (TestNN and test_Conv2d_strided) or (TestNN and test_Conv3d_dilated) or (TestNN and test_Conv3d_dilated_strided) or (TestNN and test_Conv3d_pad_same_dilated) or (TestNN and test_Conv3d_stride) or (TestNN and test_Conv3d_stride_padding) or (TestTorch and test_tensor_cycle_via_slots))\" -m \"not hypothesis\" --durations=50 --disable-warnings",
            "test ! -f $SP_DIR/functorch/__pycache__/__init__.cpython-313.pyc",
            "cd cmake_test",
            "cmake -GNinja -DCMAKE_CXX_STANDARD=17 -DWITH_TORCH_PYTHON=ON $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/"
          ],
          "imports": [
            "torch",
            "torch._C"
          ],
          "requires": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "ninja",
            "boto3",
            "hypothesis",
            "pytest",
            "tabulate",
            "pydot",
            "pip",
            "expecttest",
            "xmlrunner",
            "pyyaml",
            "pytest-flakefinder",
            "pytest-rerunfailures",
            "pytest-xdist",
            "cmake",
            "pybind11"
          ],
          "source_files": [
            "test",
            "tools"
          ]
        }
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cpu_generic_h1234567_1"
        },
        "name": "pytorch-gpu",
        "requirements": {
          "run": [
            "pytorch 2.8.0 cpu_generic*1"
          ]
        },
        "test": {
          "imports": [
            "torch"
          ]
        }
      },
      {
        "name": "libtorch"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "ignore_run_exports": [
            "libmagma_sparse"
          ],
          "run_exports": [
            "pytorch",
            "libtorch"
          ],
          "string": "cuda129_mkl_py313_h1234567_301"
        },
        "name": "pytorch",
        "requirements": {
          "build": [
            "python",
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cuda_compiler_stub",
            "llvm-openmp",
            "cmake",
            "ninja",
            "libprotobuf",
            "protobuf",
            "make"
          ],
          "host": [
            "libtorch",
            "cudnn <9.11",
            "nccl",
            "cuda-version 12.9",
            "nvtx-c",
            "magma",
            "cuda-driver-dev",
            "cuda-cudart-dev",
            "cuda-cupti-dev",
            "cuda-nvrtc-dev",
            "cuda-nvtx-dev",
            "cuda-nvml-dev",
            "cuda-profiler-api",
            "cusparselt",
            "libcublas-dev",
            "libcudss-dev",
            "libcufile-dev",
            "libcufft-dev",
            "libcurand-dev",
            "libcusolver-dev",
            "libcusparse-dev",
            "python",
            "numpy",
            "pip",
            "setuptools",
            "pyyaml",
            "requests",
            "six",
            "mkl-devel <2025",
            "libcblas * *_mkl",
            "llvm-openmp",
            "libabseil",
            "libprotobuf",
            "pybind11",
            "pybind11-abi",
            "eigen",
            "sleef",
            "libuv",
            "pkg-config",
            "typing_extensions",
            "zlib"
          ],
          "run": [
            "libtorch",
            "llvm-openmp",
            "libblas * *mkl",
            "triton ==3.4.0",
            "__cuda",
            "python",
            "filelock",
            "fsspec",
            "jinja2",
            "networkx",
            "optree >=0.13.0",
            "pybind11",
            "setuptools",
            "sympy >=1.13.3",
            "typing_extensions >=4.10.0"
          ],
          "run_constrained": [
            "pytorch-gpu 2.8.0",
            "pytorch-cpu <0.0a0"
          ]
        },
        "script": "build.sh"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cuda129_mkl_py313_h1234567_301"
        },
        "name": "pytorch-tests",
        "requirements": {
          "host": [
            "python"
          ],
          "run": [
            "pytorch 2.8.0 cuda*_mkl_py313*301"
          ]
        },
        "test": {
          "commands": [
            "pip check",
            "python -c \"import torch; print(torch.__version__)\"",
            "python -c \"import torch; torch.tensor(1).to('cpu').numpy(); print('numpy support enabled!!!')\"",
            "python -c \"import torch; import numpy\"",
            "python -c \"import numpy; import torch\"",
            "python -c \"import numpy as np;import torch;x = torch.tensor([2], dtype=torch.complex128);assert torch.dot(x, x).real == 4.0\"",
            "python -c \"import torch; assert torch.distributed.is_available()\"",
            "python -c \"import torch; assert torch.backends.cuda.is_built()\"",
            "python -c \"import torch; assert torch.backends.cudnn.is_available()\"",
            "python -c \"import torch; assert torch.backends.cudnn.enabled\"",
            "python -c \"import torch; assert torch.version.cuda is not None\"",
            "test -f $PREFIX/lib/libtorch_python${SHLIB_EXT}",
            "export OMP_NUM_THREADS=4",
            "pytest -n 1 test/test_autograd.py test/test_autograd_fallback.py test/test_custom_ops.py test/test_linalg.py test/test_mkldnn.py test/test_modules.py test/test_nn.py test/test_torch.py test/test_xnnpack_integration.py test/inductor/test_torchinductor.py -k \"not ((TestTorch and test_print) or test_1_sized_with_0_strided_cpu_float32 or test_batchnorm_nhwc_cpu or test_layer_norm_backwards_eps or test_pynode_destruction_deadlock or (TestLinalgCPU and test_cholesky_cpu_float32) or (TestLinalgCPU and test_pca_lowrank_cpu) or (TestLinalgCPU and test_svd_lowrank_cpu) or (TestMkldnnCPU and test_lstm_cpu) or test_eigh_lwork_lapack or test_gradgrad_nn_LSTM or test_grad_nn_Transformer or test_inverse_errors_large or (TestXNNPACKConv1dTransformPass and test_conv1d_basic) or test_addbmm or test_baddbmm or test_bmm or illcondition_matrix_input_should_not_crash_cpu or (TestAutograd and test_profiler_seq_nr) or (TestAutograd and test_profiler_propagation) or test_mutable_custom_op_fixed_layout or test_BCELoss_weights_no_reduce_cuda or test_ctc_loss_cudnn_tensor_cuda  or (TestTorch and test_index_add_correctness) or test_sdpa_inference_mode_aot_compile or (TestNN and test_grid_sample) or test_cublas_config_nondeterministic_alert_cuda or test_cross_entropy_loss_2d_out_of_bounds_class or test_indirect_device_assert or test_reentrant_parent_error_on_cpu_cuda or (GPUTests and test_scatter_reduce2) or test_ck_blas_library_cpu or test_matmul_offline_tunableop_cuda_float16 or test_Conv3d_1x1x1_no_bias_cuda or test_isinf_cuda or test_donated_buffer_inplace_gpt or test_linear_dynamic_maxautotune_cuda or (test_gradgrad_nn_Transformer and _cuda_) or test_avg_pool3d_backward2 or (TestLinalgCPU and test_inverse_errors_large_cpu) or test_gather_scatter_cpu or test_index_put2_cpu  or test_base_does_not_require_grad_mode_nothing or test_base_does_not_require_grad_mode_warn or test_composite_registered_to_cpu_mode_nothing or (TestMkldnnCPU and test_batch_norm_2d_cpu) or (TestNN and test_Conv1d_dilated) or (TestNN and test_Conv1d_pad_same_dilated) or (TestNN and test_Conv2d_pad_same_dilated) or (TestNN and test_Conv2d_padding) or (TestNN and test_Conv2d_strided) or (TestNN and test_Conv3d_dilated) or (TestNN and test_Conv3d_dilated_strided) or (TestNN and test_Conv3d_pad_same_dilated) or (TestNN and test_Conv3d_stride) or (TestNN and test_Conv3d_stride_padding) or (TestTorch and test_tensor_cycle_via_slots))\" -m \"not hypothesis\" --durations=50 --disable-warnings",
            "test ! -f $SP_DIR/functorch/__pycache__/__init__.cpython-313.pyc",
            "cd cmake_test",
            "cmake -GNinja -DCMAKE_CXX_STANDARD=17 -DWITH_TORCH_PYTHON=ON $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/"
          ],
          "imports": [
            "torch",
            "torch._C"
          ],
          "requires": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cuda_compiler_stub",
            "ninja",
            "boto3",
            "hypothesis",
            "pytest",
            "tabulate",
            "pydot",
            "pip",
            "expecttest",
            "xmlrunner",
            "pyyaml",
            "pytest-flakefinder",
            "pytest-rerunfailures",
            "pytest-xdist",
            "cmake",
            "cuda-nvrtc-dev",
            "nvtx-c",
            "pybind11",
            "cudnn <9.11"
          ],
          "source_files": [
            "test",
            "tools"
          ]
        }
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cuda129_mkl_h1234567_301"
        },
        "name": "pytorch-gpu",
        "requirements": {
          "run": [
            "pytorch 2.8.0 cuda*_mkl*301"
          ]
        },
        "test": {
          "imports": [
            "torch"
          ]
        }
      },
      {
        "name": "libtorch"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "ignore_run_exports": [
            "libmagma_sparse"
          ],
          "run_exports": [
            "pytorch",
            "libtorch"
          ],
          "string": "cpu_mkl_py313_h1234567_101"
        },
        "name": "pytorch",
        "requirements": {
          "build": [
            "python",
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "llvm-openmp",
            "cmake",
            "ninja",
            "libprotobuf",
            "protobuf",
            "make"
          ],
          "host": [
            "libtorch",
            "python",
            "numpy",
            "pip",
            "setuptools",
            "pyyaml",
            "requests",
            "six",
            "mkl-devel <2025",
            "libcblas * *_mkl",
            "llvm-openmp",
            "libabseil",
            "libprotobuf",
            "pybind11",
            "pybind11-abi",
            "eigen",
            "sleef",
            "libuv",
            "pkg-config",
            "typing_extensions",
            "zlib"
          ],
          "run": [
            "libtorch",
            "llvm-openmp",
            "libblas * *mkl",
            "python",
            "filelock",
            "fsspec",
            "jinja2",
            "networkx",
            "optree >=0.13.0",
            "pybind11",
            "setuptools",
            "sympy >=1.13.3",
            "typing_extensions >=4.10.0"
          ],
          "run_constrained": [
            "pytorch-cpu 2.8.0",
            "pytorch-gpu <0.0a0"
          ]
        },
        "script": "build.sh"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cpu_mkl_py313_h1234567_101"
        },
        "name": "pytorch-tests",
        "requirements": {
          "host": [
            "python"
          ],
          "run": [
            "pytorch 2.8.0 cpu_mkl_py313*101"
          ]
        },
        "test": {
          "commands": [
            "pip check",
            "python -c \"import torch; print(torch.__version__)\"",
            "python -c \"import torch; assert torch.backends.mkldnn.m.is_available()\"",
            "python -c \"import torch; torch.tensor(1).to('cpu').numpy(); print('numpy support enabled!!!')\"",
            "python -c \"import torch; import numpy\"",
            "python -c \"import numpy; import torch\"",
            "python -c \"import numpy as np;import torch;x = torch.tensor([2], dtype=torch.complex128);assert torch.dot(x, x).real == 4.0\"",
            "python -c \"import torch; assert torch.distributed.is_available()\"",
            "test -f $PREFIX/lib/libtorch_python${SHLIB_EXT}",
            "export OMP_NUM_THREADS=4",
            "pytest -n 1 test/test_autograd.py test/test_autograd_fallback.py test/test_custom_ops.py test/test_linalg.py test/test_mkldnn.py test/test_modules.py test/test_nn.py test/test_torch.py test/test_xnnpack_integration.py test/inductor/test_torchinductor.py -k \"not ((TestTorch and test_print) or test_1_sized_with_0_strided_cpu_float32 or test_batchnorm_nhwc_cpu or test_layer_norm_backwards_eps or test_pynode_destruction_deadlock or (TestLinalgCPU and test_cholesky_cpu_float32) or (TestLinalgCPU and test_pca_lowrank_cpu) or (TestLinalgCPU and test_svd_lowrank_cpu) or (TestMkldnnCPU and test_lstm_cpu) or test_eigh_lwork_lapack or test_gradgrad_nn_LSTM or test_grad_nn_Transformer or test_inverse_errors_large or (TestXNNPACKConv1dTransformPass and test_conv1d_basic) or test_addbmm or test_baddbmm or test_bmm or illcondition_matrix_input_should_not_crash_cpu or (TestAutograd and test_profiler_seq_nr) or (TestAutograd and test_profiler_propagation) or test_mutable_custom_op_fixed_layout or test_BCELoss_weights_no_reduce_cuda or test_ctc_loss_cudnn_tensor_cuda  or (TestTorch and test_index_add_correctness) or test_sdpa_inference_mode_aot_compile or (TestNN and test_grid_sample) or test_cublas_config_nondeterministic_alert_cuda or test_cross_entropy_loss_2d_out_of_bounds_class or test_indirect_device_assert or test_reentrant_parent_error_on_cpu_cuda or (GPUTests and test_scatter_reduce2) or test_ck_blas_library_cpu or test_matmul_offline_tunableop_cuda_float16 or test_Conv3d_1x1x1_no_bias_cuda or test_isinf_cuda or test_donated_buffer_inplace_gpt or test_linear_dynamic_maxautotune_cuda or (test_gradgrad_nn_Transformer and _cuda_) or test_avg_pool3d_backward2 or (TestLinalgCPU and test_inverse_errors_large_cpu) or test_gather_scatter_cpu or test_index_put2_cpu  or test_base_does_not_require_grad_mode_nothing or test_base_does_not_require_grad_mode_warn or test_composite_registered_to_cpu_mode_nothing or (TestMkldnnCPU and test_batch_norm_2d_cpu) or (TestNN and test_Conv1d_dilated) or (TestNN and test_Conv1d_pad_same_dilated) or (TestNN and test_Conv2d_pad_same_dilated) or (TestNN and test_Conv2d_padding) or (TestNN and test_Conv2d_strided) or (TestNN and test_Conv3d_dilated) or (TestNN and test_Conv3d_dilated_strided) or (TestNN and test_Conv3d_pad_same_dilated) or (TestNN and test_Conv3d_stride) or (TestNN and test_Conv3d_stride_padding) or (TestTorch and test_tensor_cycle_via_slots))\" -m \"not hypothesis\" --durations=50 --disable-warnings",
            "test ! -f $SP_DIR/functorch/__pycache__/__init__.cpython-313.pyc",
            "cd cmake_test",
            "cmake -GNinja -DCMAKE_CXX_STANDARD=17 -DWITH_TORCH_PYTHON=ON $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/"
          ],
          "imports": [
            "torch",
            "torch._C"
          ],
          "requires": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "ninja",
            "boto3",
            "hypothesis",
            "pytest",
            "tabulate",
            "pydot",
            "pip",
            "expecttest",
            "xmlrunner",
            "pyyaml",
            "pytest-flakefinder",
            "pytest-rerunfailures",
            "pytest-xdist",
            "cmake",
            "pybind11"
          ],
          "source_files": [
            "test",
            "tools"
          ]
        }
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cpu_mkl_h1234567_101"
        },
        "name": "pytorch-gpu",
        "requirements": {
          "run": [
            "pytorch 2.8.0 cpu_mkl*101"
          ]
        },
        "test": {
          "imports": [
            "torch"
          ]
        }
      }
    ],
    "package": {
      "name": "libtorch",
      "version": "2.8.0"
    },
    "requirements": {
      "build": [
        "c_stdlib_stub",
        "c_compiler_stub",
        "cxx_compiler_stub",
        "cuda_compiler_stub",
        "llvm-openmp",
        "cmake",
        "ninja",
        "libprotobuf",
        "protobuf",
        "make",
        "grep",
        "rsync"
      ],
      "host": [
        "cudnn <9.11",
        "nccl",
        "magma",
        "cuda-version 12.9",
        "nvtx-c",
        "cuda-driver-dev",
        "cuda-cudart-dev",
        "cuda-cupti-dev",
        "cuda-nvrtc-dev",
        "cuda-nvtx-dev",
        "cuda-nvml-dev",
        "cuda-profiler-api",
        "cusparselt",
        "libcublas-dev",
        "libcudss-dev",
        "libcufile-dev",
        "libcufft-dev",
        "libcurand-dev",
        "libcusolver-dev",
        "libcusparse-dev",
        "python 3.12",
        "numpy *",
        "pip",
        "setuptools",
        "pyyaml",
        "requests",
        "six",
        "libblas",
        "libcblas",
        "liblapack",
        "llvm-openmp",
        "libabseil",
        "libprotobuf",
        "sleef",
        "libuv",
        "pkg-config",
        "typing_extensions",
        "pybind11",
        "pybind11-abi",
        "eigen",
        "zlib",
        "mkl-devel <2025",
        "libcblas * *_mkl"
      ],
      "run": [
        "libblas * *mkl"
      ],
      "run_constrained": [
        "pytorch-gpu 2.8.0",
        "pytorch-cpu <0.0a0",
        "pytorch 2.8.0 cuda129_generic_*_201",
        "libopenblas * openmp_*",
        "openblas * openmp_*",
        "pytorch-cpu 2.8.0",
        "pytorch-gpu <0.0a0",
        "pytorch 2.8.0 cpu_generic_*_1",
        "pytorch 2.8.0 cuda129_mkl_*_301",
        "pytorch 2.8.0 cpu_mkl_*_101"
      ]
    },
    "schema_version": 0,
    "source": [
      {
        "patches": [
          "patches/0001-Force-usage-of-python-3-and-error-without-numpy.patch",
          "patches/0002-Help-find-numpy.patch",
          "patches/0004-Allow-overriding-CUDA-related-paths.patch",
          "patches/0005-Use-BLAS_USE_CBLAS_DOT-for-OpenBLAS-builds.patch",
          "patches/0006-fix-issue-142484.patch",
          "patches/0007-Fix-FindOpenBLAS.patch",
          "patches/0008-point-include-paths-to-Conda-prefix-include-dir.patch",
          "patches/0009-Add-conda-prefix-to-inductor-include-paths.patch",
          "patches/0010-make-ATEN_INCLUDE_DIR-relative-to-TORCH_INSTALL_PREF.patch",
          "patches/0012-avoid-deprecated-find_package-CUDA-in-caffe2-CMake-m.patch",
          "patches/0013-Fix-CUPTI-lookup-to-include-target-directory.patch",
          "patches/0014-skip-test_norm_matrix_degenerate_shapes-on-numpy-2.3.patch",
          "patches/0015-Define-PY_SSIZE_T_CLEAN-before-include-Python.h.patch",
          "patches_submodules/tensorpipe/0001-switch-away-from-find_package-CUDA.patch"
        ],
        "sha256": "c70a2c9488f6f6e8af5982a10d1cc2c37b7df5e6506d839daa5d5e250953d7b5",
        "url": "https://github.com/pytorch/pytorch/releases/download/v2.8.0/pytorch-v2.8.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Force-usage-of-python-3-and-error-without-numpy.patch",
          "patches/0002-Help-find-numpy.patch",
          "patches/0004-Allow-overriding-CUDA-related-paths.patch",
          "patches/0005-Use-BLAS_USE_CBLAS_DOT-for-OpenBLAS-builds.patch",
          "patches/0006-fix-issue-142484.patch",
          "patches/0007-Fix-FindOpenBLAS.patch",
          "patches/0008-point-include-paths-to-Conda-prefix-include-dir.patch",
          "patches/0009-Add-conda-prefix-to-inductor-include-paths.patch",
          "patches/0010-make-ATEN_INCLUDE_DIR-relative-to-TORCH_INSTALL_PREF.patch",
          "patches/0012-avoid-deprecated-find_package-CUDA-in-caffe2-CMake-m.patch",
          "patches/0013-Fix-CUPTI-lookup-to-include-target-directory.patch",
          "patches/0014-skip-test_norm_matrix_degenerate_shapes-on-numpy-2.3.patch",
          "patches/0015-Define-PY_SSIZE_T_CLEAN-before-include-Python.h.patch",
          "patches_submodules/tensorpipe/0001-switch-away-from-find_package-CUDA.patch"
        ],
        "sha256": "c70a2c9488f6f6e8af5982a10d1cc2c37b7df5e6506d839daa5d5e250953d7b5",
        "url": "https://github.com/pytorch/pytorch/releases/download/v2.8.0/pytorch-v2.8.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Force-usage-of-python-3-and-error-without-numpy.patch",
          "patches/0002-Help-find-numpy.patch",
          "patches/0004-Allow-overriding-CUDA-related-paths.patch",
          "patches/0005-Use-BLAS_USE_CBLAS_DOT-for-OpenBLAS-builds.patch",
          "patches/0006-fix-issue-142484.patch",
          "patches/0007-Fix-FindOpenBLAS.patch",
          "patches/0008-point-include-paths-to-Conda-prefix-include-dir.patch",
          "patches/0009-Add-conda-prefix-to-inductor-include-paths.patch",
          "patches/0010-make-ATEN_INCLUDE_DIR-relative-to-TORCH_INSTALL_PREF.patch",
          "patches/0012-avoid-deprecated-find_package-CUDA-in-caffe2-CMake-m.patch",
          "patches/0013-Fix-CUPTI-lookup-to-include-target-directory.patch",
          "patches/0014-skip-test_norm_matrix_degenerate_shapes-on-numpy-2.3.patch",
          "patches/0015-Define-PY_SSIZE_T_CLEAN-before-include-Python.h.patch",
          "patches_submodules/tensorpipe/0001-switch-away-from-find_package-CUDA.patch"
        ],
        "sha256": "c70a2c9488f6f6e8af5982a10d1cc2c37b7df5e6506d839daa5d5e250953d7b5",
        "url": "https://github.com/pytorch/pytorch/releases/download/v2.8.0/pytorch-v2.8.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Force-usage-of-python-3-and-error-without-numpy.patch",
          "patches/0002-Help-find-numpy.patch",
          "patches/0004-Allow-overriding-CUDA-related-paths.patch",
          "patches/0005-Use-BLAS_USE_CBLAS_DOT-for-OpenBLAS-builds.patch",
          "patches/0006-fix-issue-142484.patch",
          "patches/0007-Fix-FindOpenBLAS.patch",
          "patches/0008-point-include-paths-to-Conda-prefix-include-dir.patch",
          "patches/0009-Add-conda-prefix-to-inductor-include-paths.patch",
          "patches/0010-make-ATEN_INCLUDE_DIR-relative-to-TORCH_INSTALL_PREF.patch",
          "patches/0012-avoid-deprecated-find_package-CUDA-in-caffe2-CMake-m.patch",
          "patches/0013-Fix-CUPTI-lookup-to-include-target-directory.patch",
          "patches/0014-skip-test_norm_matrix_degenerate_shapes-on-numpy-2.3.patch",
          "patches/0015-Define-PY_SSIZE_T_CLEAN-before-include-Python.h.patch",
          "patches_submodules/tensorpipe/0001-switch-away-from-find_package-CUDA.patch"
        ],
        "sha256": "c70a2c9488f6f6e8af5982a10d1cc2c37b7df5e6506d839daa5d5e250953d7b5",
        "url": "https://github.com/pytorch/pytorch/releases/download/v2.8.0/pytorch-v2.8.0.tar.gz"
      }
    ],
    "test": {
      "commands": [
        "test -f $PREFIX/lib/libc10.so",
        "test -f $PREFIX/lib/libshm.so",
        "test -f $PREFIX/lib/libtorch.so",
        "test -f $PREFIX/lib/libtorch_cpu.so",
        "test -f $PREFIX/lib/libtorch_global_deps.so",
        "test -f $PREFIX/lib/libtorch_cuda_linalg.so",
        "test -f $PREFIX/lib/libc10_cuda.so",
        "test -f $PREFIX/lib/libcaffe2_nvrtc.so",
        "test -f $PREFIX/lib/libtorch_cuda.so",
        "test -f $PREFIX/share/cmake/Torch/TorchConfig.cmake",
        "cd cmake_test",
        "cmake -GNinja -DCMAKE_CXX_STANDARD=17 $CMAKE_ARGS ."
      ],
      "files": [
        "cmake_test/"
      ],
      "requires": [
        "cxx_compiler_stub",
        "cuda_compiler_stub",
        "cuda-nvrtc-dev",
        "nvtx-c",
        "cmake",
        "ninja",
        "pkg-config"
      ]
    }
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cuda_compiler_stub",
        "cxx_compiler_stub",
        "grep",
        "libprotobuf",
        "llvm-openmp",
        "make",
        "ninja",
        "protobuf",
        "python",
        "rsync"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "cuda-cudart-dev",
        "cuda-cupti-dev",
        "cuda-driver-dev",
        "cuda-nvml-dev",
        "cuda-nvrtc-dev",
        "cuda-nvtx-dev",
        "cuda-profiler-api",
        "cuda-version",
        "cudnn",
        "cusparselt",
        "eigen",
        "libabseil",
        "libblas",
        "libcblas",
        "libcublas-dev",
        "libcudss-dev",
        "libcufft-dev",
        "libcufile-dev",
        "libcurand-dev",
        "libcusolver-dev",
        "libcusparse-dev",
        "liblapack",
        "libprotobuf",
        "libtorch",
        "libuv",
        "llvm-openmp",
        "magma",
        "mkl-devel",
        "nccl",
        "numpy",
        "nvtx-c",
        "pip",
        "pkg-config",
        "pybind11",
        "pybind11-abi",
        "python",
        "pyyaml",
        "requests",
        "setuptools",
        "six",
        "sleef",
        "typing_extensions",
        "zlib"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "__cuda",
        "filelock",
        "fsspec",
        "jinja2",
        "libblas",
        "libtorch",
        "llvm-openmp",
        "networkx",
        "nomkl",
        "optree",
        "pybind11",
        "python",
        "pytorch",
        "setuptools",
        "sympy",
        "triton",
        "typing_extensions"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "boto3",
        "c_compiler_stub",
        "cmake",
        "cuda-nvrtc-dev",
        "cuda_compiler_stub",
        "cudnn",
        "cxx_compiler_stub",
        "expecttest",
        "hypothesis",
        "ninja",
        "nvtx-c",
        "pip",
        "pkg-config",
        "pybind11",
        "pydot",
        "pytest",
        "pytest-flakefinder",
        "pytest-rerunfailures",
        "pytest-xdist",
        "pyyaml",
        "tabulate",
        "xmlrunner"
      ]
    }
  },
  "linux_aarch64_meta_yaml": {
    "about": {
      "description": "PyTorch is a Python package that provides two high-level features:\n  - Tensor computation (like NumPy) with strong GPU acceleration\n  - Deep neural networks built on a tape-based autograd system\nYou can reuse your favorite Python packages such as NumPy, SciPy, and Cython to extend PyTorch when needed.\n",
      "dev_url": "https://github.com/pytorch/pytorch",
      "doc_url": "https://pytorch.org/docs/",
      "home": "https://pytorch.org/",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": [
        "LICENSE",
        "NOTICE",
        "third_party/CMake/Copyright.txt"
      ],
      "summary": "PyTorch is an optimized tensor library for deep learning using GPUs and CPUs."
    },
    "build": {
      "detect_binary_files_with_prefix": false,
      "ignore_run_exports": [
        "python *",
        "numpy *",
        "libmagma_sparse"
      ],
      "ignore_run_exports_from": [
        "python *",
        "numpy *"
      ],
      "number": "1",
      "run_exports": [
        "libtorch"
      ],
      "string": "cpu_generic_h1234567_1"
    },
    "extra": {
      "feedstock-name": "pytorch-cpu",
      "recipe-maintainers": [
        "baszalmstra",
        "benjaminrwilson",
        "beckermr",
        "h-vetinari",
        "hmaarrfk",
        "jeongseok-meta",
        "mgorny",
        "sodre",
        "Tobias-Fischer"
      ]
    },
    "outputs": [
      {
        "name": "libtorch"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "ignore_run_exports": [
            "libmagma_sparse"
          ],
          "run_exports": [
            "pytorch",
            "libtorch"
          ],
          "string": "cuda129_generic_py313_h1234567_201"
        },
        "name": "pytorch",
        "requirements": {
          "build": [
            "python",
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cuda_compiler_stub",
            "llvm-openmp",
            "cmake",
            "ninja",
            "libprotobuf",
            "protobuf",
            "make"
          ],
          "host": [
            "libtorch",
            "cudnn <9.11",
            "nccl",
            "cuda-version 12.9",
            "nvtx-c",
            "magma",
            "cuda-driver-dev",
            "cuda-cudart-dev",
            "cuda-cupti-dev",
            "cuda-nvrtc-dev",
            "cuda-nvtx-dev",
            "cuda-nvml-dev",
            "cuda-profiler-api",
            "cusparselt",
            "libcublas-dev",
            "libcudss-dev",
            "libcufile-dev",
            "libcufft-dev",
            "libcurand-dev",
            "libcusolver-dev",
            "libcusparse-dev",
            "python",
            "numpy",
            "pip",
            "setuptools",
            "pyyaml",
            "requests",
            "six",
            "libcblas",
            "liblapack",
            "llvm-openmp",
            "libabseil",
            "libprotobuf",
            "pybind11",
            "pybind11-abi",
            "eigen",
            "sleef",
            "libuv",
            "pkg-config",
            "typing_extensions",
            "zlib"
          ],
          "run": [
            "libtorch",
            "llvm-openmp",
            "nomkl",
            "triton ==3.4.0",
            "__cuda",
            "python",
            "filelock",
            "fsspec",
            "jinja2",
            "networkx",
            "optree >=0.13.0",
            "pybind11",
            "setuptools",
            "sympy >=1.13.3",
            "typing_extensions >=4.10.0"
          ],
          "run_constrained": [
            "pytorch-gpu 2.8.0",
            "pytorch-cpu <0.0a0"
          ]
        },
        "script": "build.sh"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cuda129_generic_py313_h1234567_201"
        },
        "name": "pytorch-tests",
        "requirements": {
          "host": [
            "python"
          ],
          "run": [
            "pytorch 2.8.0 cuda*_generic_py313*201"
          ]
        },
        "test": {
          "commands": [
            "pip check",
            "python -c \"import torch; print(torch.__version__)\"",
            "python -c \"import torch; torch.tensor(1).to('cpu').numpy(); print('numpy support enabled!!!')\"",
            "python -c \"import torch; import numpy\"",
            "python -c \"import numpy; import torch\"",
            "python -c \"import numpy as np;import torch;x = torch.tensor([2], dtype=torch.complex128);assert torch.dot(x, x).real == 4.0\"",
            "python -c \"import torch; assert torch.distributed.is_available()\"",
            "python -c \"import torch; assert torch.backends.cuda.is_built()\"",
            "python -c \"import torch; assert torch.backends.cudnn.is_available()\"",
            "python -c \"import torch; assert torch.backends.cudnn.enabled\"",
            "python -c \"import torch; assert torch.version.cuda is not None\"",
            "test -f $PREFIX/lib/libtorch_python${SHLIB_EXT}",
            "export OMP_NUM_THREADS=4",
            "test ! -f $SP_DIR/functorch/__pycache__/__init__.cpython-313.pyc",
            "cd cmake_test",
            "cmake -GNinja -DCMAKE_CXX_STANDARD=17 -DWITH_TORCH_PYTHON=ON $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/"
          ],
          "imports": [
            "torch",
            "torch._C"
          ],
          "requires": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cuda_compiler_stub",
            "ninja",
            "boto3",
            "hypothesis",
            "pytest",
            "tabulate",
            "pydot",
            "pip",
            "expecttest",
            "xmlrunner",
            "pyyaml",
            "pytest-flakefinder",
            "pytest-rerunfailures",
            "pytest-xdist",
            "cmake",
            "cuda-nvrtc-dev",
            "nvtx-c",
            "pybind11",
            "cudnn <9.11"
          ],
          "source_files": [
            "test",
            "tools"
          ]
        }
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cuda129_generic_h1234567_201"
        },
        "name": "pytorch-gpu",
        "requirements": {
          "run": [
            "pytorch 2.8.0 cuda*_generic*201"
          ]
        },
        "test": {
          "imports": [
            "torch"
          ]
        }
      },
      {
        "name": "libtorch"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "ignore_run_exports": [
            "libmagma_sparse"
          ],
          "run_exports": [
            "pytorch",
            "libtorch"
          ],
          "string": "cpu_generic_py313_h1234567_1"
        },
        "name": "pytorch",
        "requirements": {
          "build": [
            "python",
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "llvm-openmp",
            "cmake",
            "ninja",
            "libprotobuf",
            "protobuf",
            "make"
          ],
          "host": [
            "libtorch",
            "python",
            "numpy",
            "pip",
            "setuptools",
            "pyyaml",
            "requests",
            "six",
            "libcblas",
            "liblapack",
            "llvm-openmp",
            "libabseil",
            "libprotobuf",
            "pybind11",
            "pybind11-abi",
            "eigen",
            "sleef",
            "libuv",
            "pkg-config",
            "typing_extensions",
            "zlib"
          ],
          "run": [
            "libtorch",
            "llvm-openmp",
            "nomkl",
            "python",
            "filelock",
            "fsspec",
            "jinja2",
            "networkx",
            "optree >=0.13.0",
            "pybind11",
            "setuptools",
            "sympy >=1.13.3",
            "typing_extensions >=4.10.0"
          ],
          "run_constrained": [
            "pytorch-cpu 2.8.0",
            "pytorch-gpu <0.0a0"
          ]
        },
        "script": "build.sh"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cpu_generic_py313_h1234567_1"
        },
        "name": "pytorch-tests",
        "requirements": {
          "host": [
            "python"
          ],
          "run": [
            "pytorch 2.8.0 cpu_generic_py313*1"
          ]
        },
        "test": {
          "commands": [
            "pip check",
            "python -c \"import torch; print(torch.__version__)\"",
            "python -c \"import torch; torch.tensor(1).to('cpu').numpy(); print('numpy support enabled!!!')\"",
            "python -c \"import torch; import numpy\"",
            "python -c \"import numpy; import torch\"",
            "python -c \"import numpy as np;import torch;x = torch.tensor([2], dtype=torch.complex128);assert torch.dot(x, x).real == 4.0\"",
            "python -c \"import torch; assert torch.distributed.is_available()\"",
            "test -f $PREFIX/lib/libtorch_python${SHLIB_EXT}",
            "export OMP_NUM_THREADS=4",
            "test ! -f $SP_DIR/functorch/__pycache__/__init__.cpython-313.pyc",
            "cd cmake_test",
            "cmake -GNinja -DCMAKE_CXX_STANDARD=17 -DWITH_TORCH_PYTHON=ON $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/"
          ],
          "imports": [
            "torch",
            "torch._C"
          ],
          "requires": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "ninja",
            "boto3",
            "hypothesis",
            "pytest",
            "tabulate",
            "pydot",
            "pip",
            "expecttest",
            "xmlrunner",
            "pyyaml",
            "pytest-flakefinder",
            "pytest-rerunfailures",
            "pytest-xdist",
            "cmake",
            "pybind11"
          ],
          "source_files": [
            "test",
            "tools"
          ]
        }
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cpu_generic_h1234567_1"
        },
        "name": "pytorch-gpu",
        "requirements": {
          "run": [
            "pytorch 2.8.0 cpu_generic*1"
          ]
        },
        "test": {
          "imports": [
            "torch"
          ]
        }
      }
    ],
    "package": {
      "name": "libtorch",
      "version": "2.8.0"
    },
    "requirements": {
      "build": [
        "c_stdlib_stub",
        "c_compiler_stub",
        "cxx_compiler_stub",
        "cuda_compiler_stub",
        "llvm-openmp",
        "cmake",
        "ninja",
        "libprotobuf",
        "protobuf",
        "make",
        "grep",
        "rsync"
      ],
      "host": [
        "cudnn <9.11",
        "nccl",
        "magma",
        "cuda-version 12.9",
        "nvtx-c",
        "cuda-driver-dev",
        "cuda-cudart-dev",
        "cuda-cupti-dev",
        "cuda-nvrtc-dev",
        "cuda-nvtx-dev",
        "cuda-nvml-dev",
        "cuda-profiler-api",
        "cusparselt",
        "libcublas-dev",
        "libcudss-dev",
        "libcufile-dev",
        "libcufft-dev",
        "libcurand-dev",
        "libcusolver-dev",
        "libcusparse-dev",
        "python 3.12",
        "numpy *",
        "pip",
        "setuptools",
        "pyyaml",
        "requests",
        "six",
        "libblas",
        "libcblas",
        "liblapack",
        "llvm-openmp",
        "libabseil",
        "libprotobuf",
        "sleef",
        "libuv",
        "pkg-config",
        "typing_extensions",
        "pybind11",
        "pybind11-abi",
        "eigen",
        "zlib"
      ],
      "run": [],
      "run_constrained": [
        "pytorch-gpu 2.8.0",
        "pytorch-cpu <0.0a0",
        "pytorch 2.8.0 cuda129_generic_*_201",
        "libopenblas * openmp_*",
        "openblas * openmp_*",
        "pytorch-cpu 2.8.0",
        "pytorch-gpu <0.0a0",
        "pytorch 2.8.0 cpu_generic_*_1"
      ]
    },
    "schema_version": 0,
    "source": [
      {
        "patches": [
          "patches/0001-Force-usage-of-python-3-and-error-without-numpy.patch",
          "patches/0002-Help-find-numpy.patch",
          "patches/0003-Fix-duplicate-linker-script.patch",
          "patches/0004-Allow-overriding-CUDA-related-paths.patch",
          "patches/0005-Use-BLAS_USE_CBLAS_DOT-for-OpenBLAS-builds.patch",
          "patches/0006-fix-issue-142484.patch",
          "patches/0007-Fix-FindOpenBLAS.patch",
          "patches/0008-point-include-paths-to-Conda-prefix-include-dir.patch",
          "patches/0009-Add-conda-prefix-to-inductor-include-paths.patch",
          "patches/0010-make-ATEN_INCLUDE_DIR-relative-to-TORCH_INSTALL_PREF.patch",
          "patches/0012-avoid-deprecated-find_package-CUDA-in-caffe2-CMake-m.patch",
          "patches/0013-Fix-CUPTI-lookup-to-include-target-directory.patch",
          "patches/0014-skip-test_norm_matrix_degenerate_shapes-on-numpy-2.3.patch",
          "patches/0015-Define-PY_SSIZE_T_CLEAN-before-include-Python.h.patch",
          "patches_submodules/tensorpipe/0001-switch-away-from-find_package-CUDA.patch"
        ],
        "sha256": "c70a2c9488f6f6e8af5982a10d1cc2c37b7df5e6506d839daa5d5e250953d7b5",
        "url": "https://github.com/pytorch/pytorch/releases/download/v2.8.0/pytorch-v2.8.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Force-usage-of-python-3-and-error-without-numpy.patch",
          "patches/0002-Help-find-numpy.patch",
          "patches/0004-Allow-overriding-CUDA-related-paths.patch",
          "patches/0005-Use-BLAS_USE_CBLAS_DOT-for-OpenBLAS-builds.patch",
          "patches/0006-fix-issue-142484.patch",
          "patches/0007-Fix-FindOpenBLAS.patch",
          "patches/0008-point-include-paths-to-Conda-prefix-include-dir.patch",
          "patches/0009-Add-conda-prefix-to-inductor-include-paths.patch",
          "patches/0010-make-ATEN_INCLUDE_DIR-relative-to-TORCH_INSTALL_PREF.patch",
          "patches/0012-avoid-deprecated-find_package-CUDA-in-caffe2-CMake-m.patch",
          "patches/0013-Fix-CUPTI-lookup-to-include-target-directory.patch",
          "patches/0014-skip-test_norm_matrix_degenerate_shapes-on-numpy-2.3.patch",
          "patches/0015-Define-PY_SSIZE_T_CLEAN-before-include-Python.h.patch",
          "patches_submodules/tensorpipe/0001-switch-away-from-find_package-CUDA.patch"
        ],
        "sha256": "c70a2c9488f6f6e8af5982a10d1cc2c37b7df5e6506d839daa5d5e250953d7b5",
        "url": "https://github.com/pytorch/pytorch/releases/download/v2.8.0/pytorch-v2.8.0.tar.gz"
      }
    ],
    "test": {
      "commands": [
        "test -f $PREFIX/lib/libc10.so",
        "test -f $PREFIX/lib/libshm.so",
        "test -f $PREFIX/lib/libtorch.so",
        "test -f $PREFIX/lib/libtorch_cpu.so",
        "test -f $PREFIX/lib/libtorch_global_deps.so",
        "test -f $PREFIX/lib/libtorch_cuda_linalg.so",
        "test -f $PREFIX/lib/libc10_cuda.so",
        "test -f $PREFIX/lib/libcaffe2_nvrtc.so",
        "test -f $PREFIX/lib/libtorch_cuda.so",
        "test -f $PREFIX/share/cmake/Torch/TorchConfig.cmake",
        "cd cmake_test",
        "cmake -GNinja -DCMAKE_CXX_STANDARD=17 $CMAKE_ARGS ."
      ],
      "files": [
        "cmake_test/"
      ],
      "requires": [
        "cxx_compiler_stub",
        "cuda_compiler_stub",
        "cuda-nvrtc-dev",
        "nvtx-c",
        "cmake",
        "ninja",
        "pkg-config"
      ]
    }
  },
  "linux_aarch64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cuda_compiler_stub",
        "cxx_compiler_stub",
        "grep",
        "libprotobuf",
        "llvm-openmp",
        "make",
        "ninja",
        "protobuf",
        "python",
        "rsync"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "cuda-cudart-dev",
        "cuda-cupti-dev",
        "cuda-driver-dev",
        "cuda-nvml-dev",
        "cuda-nvrtc-dev",
        "cuda-nvtx-dev",
        "cuda-profiler-api",
        "cuda-version",
        "cudnn",
        "cusparselt",
        "eigen",
        "libabseil",
        "libblas",
        "libcblas",
        "libcublas-dev",
        "libcudss-dev",
        "libcufft-dev",
        "libcufile-dev",
        "libcurand-dev",
        "libcusolver-dev",
        "libcusparse-dev",
        "liblapack",
        "libprotobuf",
        "libtorch",
        "libuv",
        "llvm-openmp",
        "magma",
        "nccl",
        "numpy",
        "nvtx-c",
        "pip",
        "pkg-config",
        "pybind11",
        "pybind11-abi",
        "python",
        "pyyaml",
        "requests",
        "setuptools",
        "six",
        "sleef",
        "typing_extensions",
        "zlib"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "__cuda",
        "filelock",
        "fsspec",
        "jinja2",
        "libtorch",
        "llvm-openmp",
        "networkx",
        "nomkl",
        "optree",
        "pybind11",
        "python",
        "pytorch",
        "setuptools",
        "sympy",
        "triton",
        "typing_extensions"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "boto3",
        "c_compiler_stub",
        "cmake",
        "cuda-nvrtc-dev",
        "cuda_compiler_stub",
        "cudnn",
        "cxx_compiler_stub",
        "expecttest",
        "hypothesis",
        "ninja",
        "nvtx-c",
        "pip",
        "pkg-config",
        "pybind11",
        "pydot",
        "pytest",
        "pytest-flakefinder",
        "pytest-rerunfailures",
        "pytest-xdist",
        "pyyaml",
        "tabulate",
        "xmlrunner"
      ]
    }
  },
  "meta_yaml": {
    "about": {
      "description": "PyTorch is a Python package that provides two high-level features:\n  - Tensor computation (like NumPy) with strong GPU acceleration\n  - Deep neural networks built on a tape-based autograd system\nYou can reuse your favorite Python packages such as NumPy, SciPy, and Cython to extend PyTorch when needed.\n",
      "dev_url": "https://github.com/pytorch/pytorch",
      "doc_url": "https://pytorch.org/docs/",
      "home": "https://pytorch.org/",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": [
        "LICENSE",
        "NOTICE",
        "third_party/CMake/Copyright.txt"
      ],
      "summary": "PyTorch is an optimized tensor library for deep learning using GPUs and CPUs."
    },
    "build": {
      "detect_binary_files_with_prefix": false,
      "ignore_run_exports": [
        "python *",
        "numpy *",
        "libmagma_sparse"
      ],
      "ignore_run_exports_from": [
        "python *",
        "numpy *"
      ],
      "number": "101",
      "run_exports": [
        "libtorch"
      ],
      "string": "cpu_mkl_h1234567_101"
    },
    "extra": {
      "feedstock-name": "pytorch-cpu",
      "recipe-maintainers": [
        "baszalmstra",
        "benjaminrwilson",
        "beckermr",
        "h-vetinari",
        "hmaarrfk",
        "jeongseok-meta",
        "mgorny",
        "sodre",
        "Tobias-Fischer"
      ]
    },
    "outputs": [
      {
        "name": "libtorch"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "ignore_run_exports": [
            "libmagma_sparse"
          ],
          "run_exports": [
            "pytorch",
            "libtorch"
          ],
          "string": "cuda129_generic_py313_h1234567_201"
        },
        "name": "pytorch",
        "requirements": {
          "build": [
            "python",
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cuda_compiler_stub",
            "llvm-openmp",
            "cmake",
            "ninja",
            "libprotobuf",
            "protobuf",
            "make"
          ],
          "host": [
            "libtorch",
            "cudnn <9.11",
            "nccl",
            "cuda-version 12.9",
            "nvtx-c",
            "magma",
            "cuda-driver-dev",
            "cuda-cudart-dev",
            "cuda-cupti-dev",
            "cuda-nvrtc-dev",
            "cuda-nvtx-dev",
            "cuda-nvml-dev",
            "cuda-profiler-api",
            "cusparselt",
            "libcublas-dev",
            "libcudss-dev",
            "libcufile-dev",
            "libcufft-dev",
            "libcurand-dev",
            "libcusolver-dev",
            "libcusparse-dev",
            "python",
            "numpy",
            "pip",
            "setuptools",
            "pyyaml",
            "requests",
            "six",
            "libcblas",
            "liblapack",
            "llvm-openmp",
            "libabseil",
            "libprotobuf",
            "pybind11",
            "pybind11-abi",
            "eigen",
            "sleef",
            "libuv",
            "pkg-config",
            "typing_extensions",
            "zlib"
          ],
          "run": [
            "libtorch",
            "llvm-openmp",
            "nomkl",
            "triton ==3.4.0",
            "__cuda",
            "python",
            "filelock",
            "fsspec",
            "jinja2",
            "networkx",
            "optree >=0.13.0",
            "pybind11",
            "setuptools",
            "sympy >=1.13.3",
            "typing_extensions >=4.10.0"
          ],
          "run_constrained": [
            "pytorch-gpu 2.8.0",
            "pytorch-cpu <0.0a0"
          ]
        },
        "script": "build.sh"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cuda129_generic_py313_h1234567_201"
        },
        "name": "pytorch-tests",
        "requirements": {
          "host": [
            "python"
          ],
          "run": [
            "pytorch 2.8.0 cuda*_generic_py313*201"
          ]
        },
        "test": {
          "commands": [
            "pip check",
            "python -c \"import torch; print(torch.__version__)\"",
            "python -c \"import torch; torch.tensor(1).to('cpu').numpy(); print('numpy support enabled!!!')\"",
            "python -c \"import torch; import numpy\"",
            "python -c \"import numpy; import torch\"",
            "python -c \"import numpy as np;import torch;x = torch.tensor([2], dtype=torch.complex128);assert torch.dot(x, x).real == 4.0\"",
            "python -c \"import torch; assert torch.distributed.is_available()\"",
            "python -c \"import torch; assert torch.backends.cuda.is_built()\"",
            "python -c \"import torch; assert torch.backends.cudnn.is_available()\"",
            "python -c \"import torch; assert torch.backends.cudnn.enabled\"",
            "python -c \"import torch; assert torch.version.cuda is not None\"",
            "test -f $PREFIX/lib/libtorch_python${SHLIB_EXT}",
            "export OMP_NUM_THREADS=4",
            "pytest -n 1 test/test_autograd.py test/test_autograd_fallback.py test/test_custom_ops.py test/test_linalg.py test/test_mkldnn.py test/test_modules.py test/test_nn.py test/test_torch.py test/test_xnnpack_integration.py test/inductor/test_torchinductor.py -k \"not ((TestTorch and test_print) or test_1_sized_with_0_strided_cpu_float32 or test_batchnorm_nhwc_cpu or test_layer_norm_backwards_eps or test_pynode_destruction_deadlock or (TestLinalgCPU and test_cholesky_cpu_float32) or (TestLinalgCPU and test_pca_lowrank_cpu) or (TestLinalgCPU and test_svd_lowrank_cpu) or (TestMkldnnCPU and test_lstm_cpu) or test_eigh_lwork_lapack or test_gradgrad_nn_LSTM or test_grad_nn_Transformer or test_inverse_errors_large or (TestXNNPACKConv1dTransformPass and test_conv1d_basic) or test_addbmm or test_baddbmm or test_bmm or illcondition_matrix_input_should_not_crash_cpu or (TestAutograd and test_profiler_seq_nr) or (TestAutograd and test_profiler_propagation) or test_mutable_custom_op_fixed_layout or test_BCELoss_weights_no_reduce_cuda or test_ctc_loss_cudnn_tensor_cuda  or (TestTorch and test_index_add_correctness) or test_sdpa_inference_mode_aot_compile or (TestNN and test_grid_sample) or test_cublas_config_nondeterministic_alert_cuda or test_cross_entropy_loss_2d_out_of_bounds_class or test_indirect_device_assert or test_reentrant_parent_error_on_cpu_cuda or (GPUTests and test_scatter_reduce2) or test_ck_blas_library_cpu or test_matmul_offline_tunableop_cuda_float16 or test_Conv3d_1x1x1_no_bias_cuda or test_isinf_cuda or test_donated_buffer_inplace_gpt or test_linear_dynamic_maxautotune_cuda or (test_gradgrad_nn_Transformer and _cuda_) or test_avg_pool3d_backward2 or (TestLinalgCPU and test_inverse_errors_large_cpu) or test_gather_scatter_cpu or test_index_put2_cpu  or test_base_does_not_require_grad_mode_nothing or test_base_does_not_require_grad_mode_warn or test_composite_registered_to_cpu_mode_nothing or (TestMkldnnCPU and test_batch_norm_2d_cpu) or (TestNN and test_Conv1d_dilated) or (TestNN and test_Conv1d_pad_same_dilated) or (TestNN and test_Conv2d_pad_same_dilated) or (TestNN and test_Conv2d_padding) or (TestNN and test_Conv2d_strided) or (TestNN and test_Conv3d_dilated) or (TestNN and test_Conv3d_dilated_strided) or (TestNN and test_Conv3d_pad_same_dilated) or (TestNN and test_Conv3d_stride) or (TestNN and test_Conv3d_stride_padding) or (TestTorch and test_tensor_cycle_via_slots))\" -m \"not hypothesis\" --durations=50 --disable-warnings",
            "test ! -f $SP_DIR/functorch/__pycache__/__init__.cpython-313.pyc",
            "cd cmake_test",
            "cmake -GNinja -DCMAKE_CXX_STANDARD=17 -DWITH_TORCH_PYTHON=ON $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/"
          ],
          "imports": [
            "torch",
            "torch._C"
          ],
          "requires": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cuda_compiler_stub",
            "ninja",
            "boto3",
            "hypothesis",
            "pytest",
            "tabulate",
            "pydot",
            "pip",
            "expecttest",
            "xmlrunner",
            "pyyaml",
            "pytest-flakefinder",
            "pytest-rerunfailures",
            "pytest-xdist",
            "cmake",
            "cuda-nvrtc-dev",
            "nvtx-c",
            "pybind11",
            "cudnn <9.11"
          ],
          "source_files": [
            "test",
            "tools"
          ]
        }
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cuda129_generic_h1234567_201"
        },
        "name": "pytorch-gpu",
        "requirements": {
          "run": [
            "pytorch 2.8.0 cuda*_generic*201"
          ]
        },
        "test": {
          "imports": [
            "torch"
          ]
        }
      },
      {
        "name": "libtorch"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "ignore_run_exports": [
            "libmagma_sparse"
          ],
          "run_exports": [
            "pytorch",
            "libtorch"
          ],
          "string": "cpu_generic_py313_h1234567_1"
        },
        "name": "pytorch",
        "requirements": {
          "build": [
            "python",
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "llvm-openmp",
            "cmake",
            "ninja",
            "libprotobuf",
            "protobuf",
            "make"
          ],
          "host": [
            "libtorch",
            "python",
            "numpy",
            "pip",
            "setuptools",
            "pyyaml",
            "requests",
            "six",
            "libcblas",
            "liblapack",
            "llvm-openmp",
            "libabseil",
            "libprotobuf",
            "pybind11",
            "pybind11-abi",
            "eigen",
            "sleef",
            "libuv",
            "pkg-config",
            "typing_extensions",
            "zlib"
          ],
          "run": [
            "libtorch",
            "llvm-openmp",
            "nomkl",
            "python",
            "filelock",
            "fsspec",
            "jinja2",
            "networkx",
            "optree >=0.13.0",
            "pybind11",
            "setuptools",
            "sympy >=1.13.3",
            "typing_extensions >=4.10.0"
          ],
          "run_constrained": [
            "pytorch-cpu 2.8.0",
            "pytorch-gpu <0.0a0"
          ]
        },
        "script": "build.sh"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cpu_generic_py313_h1234567_1"
        },
        "name": "pytorch-tests",
        "requirements": {
          "host": [
            "python"
          ],
          "run": [
            "pytorch 2.8.0 cpu_generic_py313*1"
          ]
        },
        "test": {
          "commands": [
            "pip check",
            "python -c \"import torch; print(torch.__version__)\"",
            "python -c \"import torch; assert torch.backends.mkldnn.m.is_available()\"",
            "python -c \"import torch; torch.tensor(1).to('cpu').numpy(); print('numpy support enabled!!!')\"",
            "python -c \"import torch; import numpy\"",
            "python -c \"import numpy; import torch\"",
            "python -c \"import numpy as np;import torch;x = torch.tensor([2], dtype=torch.complex128);assert torch.dot(x, x).real == 4.0\"",
            "python -c \"import torch; assert torch.distributed.is_available()\"",
            "test -f $PREFIX/lib/libtorch_python${SHLIB_EXT}",
            "export OMP_NUM_THREADS=4",
            "pytest -n 1 test/test_autograd.py test/test_autograd_fallback.py test/test_custom_ops.py test/test_linalg.py test/test_mkldnn.py test/test_modules.py test/test_nn.py test/test_torch.py test/test_xnnpack_integration.py test/inductor/test_torchinductor.py -k \"not ((TestTorch and test_print) or test_1_sized_with_0_strided_cpu_float32 or test_batchnorm_nhwc_cpu or test_layer_norm_backwards_eps or test_pynode_destruction_deadlock or (TestLinalgCPU and test_cholesky_cpu_float32) or (TestLinalgCPU and test_pca_lowrank_cpu) or (TestLinalgCPU and test_svd_lowrank_cpu) or (TestMkldnnCPU and test_lstm_cpu) or test_eigh_lwork_lapack or test_gradgrad_nn_LSTM or test_grad_nn_Transformer or test_inverse_errors_large or (TestXNNPACKConv1dTransformPass and test_conv1d_basic) or test_addbmm or test_baddbmm or test_bmm or illcondition_matrix_input_should_not_crash_cpu or (TestAutograd and test_profiler_seq_nr) or (TestAutograd and test_profiler_propagation) or test_mutable_custom_op_fixed_layout or test_BCELoss_weights_no_reduce_cuda or test_ctc_loss_cudnn_tensor_cuda  or (TestTorch and test_index_add_correctness) or test_sdpa_inference_mode_aot_compile or (TestNN and test_grid_sample) or test_cublas_config_nondeterministic_alert_cuda or test_cross_entropy_loss_2d_out_of_bounds_class or test_indirect_device_assert or test_reentrant_parent_error_on_cpu_cuda or (GPUTests and test_scatter_reduce2) or test_ck_blas_library_cpu or test_matmul_offline_tunableop_cuda_float16 or test_Conv3d_1x1x1_no_bias_cuda or test_isinf_cuda or test_donated_buffer_inplace_gpt or test_linear_dynamic_maxautotune_cuda or (test_gradgrad_nn_Transformer and _cuda_) or test_avg_pool3d_backward2 or (TestLinalgCPU and test_inverse_errors_large_cpu) or test_gather_scatter_cpu or test_index_put2_cpu  or test_base_does_not_require_grad_mode_nothing or test_base_does_not_require_grad_mode_warn or test_composite_registered_to_cpu_mode_nothing or (TestMkldnnCPU and test_batch_norm_2d_cpu) or (TestNN and test_Conv1d_dilated) or (TestNN and test_Conv1d_pad_same_dilated) or (TestNN and test_Conv2d_pad_same_dilated) or (TestNN and test_Conv2d_padding) or (TestNN and test_Conv2d_strided) or (TestNN and test_Conv3d_dilated) or (TestNN and test_Conv3d_dilated_strided) or (TestNN and test_Conv3d_pad_same_dilated) or (TestNN and test_Conv3d_stride) or (TestNN and test_Conv3d_stride_padding) or (TestTorch and test_tensor_cycle_via_slots))\" -m \"not hypothesis\" --durations=50 --disable-warnings",
            "test ! -f $SP_DIR/functorch/__pycache__/__init__.cpython-313.pyc",
            "cd cmake_test",
            "cmake -GNinja -DCMAKE_CXX_STANDARD=17 -DWITH_TORCH_PYTHON=ON $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/"
          ],
          "imports": [
            "torch",
            "torch._C"
          ],
          "requires": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "ninja",
            "boto3",
            "hypothesis",
            "pytest",
            "tabulate",
            "pydot",
            "pip",
            "expecttest",
            "xmlrunner",
            "pyyaml",
            "pytest-flakefinder",
            "pytest-rerunfailures",
            "pytest-xdist",
            "cmake",
            "pybind11"
          ],
          "source_files": [
            "test",
            "tools"
          ]
        }
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cpu_generic_h1234567_1"
        },
        "name": "pytorch-gpu",
        "requirements": {
          "run": [
            "pytorch 2.8.0 cpu_generic*1"
          ]
        },
        "test": {
          "imports": [
            "torch"
          ]
        }
      },
      {
        "name": "libtorch"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "ignore_run_exports": [
            "libmagma_sparse"
          ],
          "run_exports": [
            "pytorch",
            "libtorch"
          ],
          "string": "cuda129_mkl_py313_h1234567_301"
        },
        "name": "pytorch",
        "requirements": {
          "build": [
            "python",
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cuda_compiler_stub",
            "llvm-openmp",
            "cmake",
            "ninja",
            "libprotobuf",
            "protobuf",
            "make"
          ],
          "host": [
            "libtorch",
            "cudnn <9.11",
            "nccl",
            "cuda-version 12.9",
            "nvtx-c",
            "magma",
            "cuda-driver-dev",
            "cuda-cudart-dev",
            "cuda-cupti-dev",
            "cuda-nvrtc-dev",
            "cuda-nvtx-dev",
            "cuda-nvml-dev",
            "cuda-profiler-api",
            "cusparselt",
            "libcublas-dev",
            "libcudss-dev",
            "libcufile-dev",
            "libcufft-dev",
            "libcurand-dev",
            "libcusolver-dev",
            "libcusparse-dev",
            "python",
            "numpy",
            "pip",
            "setuptools",
            "pyyaml",
            "requests",
            "six",
            "mkl-devel <2025",
            "libcblas * *_mkl",
            "llvm-openmp",
            "libabseil",
            "libprotobuf",
            "pybind11",
            "pybind11-abi",
            "eigen",
            "sleef",
            "libuv",
            "pkg-config",
            "typing_extensions",
            "zlib"
          ],
          "run": [
            "libtorch",
            "llvm-openmp",
            "libblas * *mkl",
            "triton ==3.4.0",
            "__cuda",
            "python",
            "filelock",
            "fsspec",
            "jinja2",
            "networkx",
            "optree >=0.13.0",
            "pybind11",
            "setuptools",
            "sympy >=1.13.3",
            "typing_extensions >=4.10.0"
          ],
          "run_constrained": [
            "pytorch-gpu 2.8.0",
            "pytorch-cpu <0.0a0"
          ]
        },
        "script": "build.sh"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cuda129_mkl_py313_h1234567_301"
        },
        "name": "pytorch-tests",
        "requirements": {
          "host": [
            "python"
          ],
          "run": [
            "pytorch 2.8.0 cuda*_mkl_py313*301"
          ]
        },
        "test": {
          "commands": [
            "pip check",
            "python -c \"import torch; print(torch.__version__)\"",
            "python -c \"import torch; torch.tensor(1).to('cpu').numpy(); print('numpy support enabled!!!')\"",
            "python -c \"import torch; import numpy\"",
            "python -c \"import numpy; import torch\"",
            "python -c \"import numpy as np;import torch;x = torch.tensor([2], dtype=torch.complex128);assert torch.dot(x, x).real == 4.0\"",
            "python -c \"import torch; assert torch.distributed.is_available()\"",
            "python -c \"import torch; assert torch.backends.cuda.is_built()\"",
            "python -c \"import torch; assert torch.backends.cudnn.is_available()\"",
            "python -c \"import torch; assert torch.backends.cudnn.enabled\"",
            "python -c \"import torch; assert torch.version.cuda is not None\"",
            "test -f $PREFIX/lib/libtorch_python${SHLIB_EXT}",
            "export OMP_NUM_THREADS=4",
            "pytest -n 1 test/test_autograd.py test/test_autograd_fallback.py test/test_custom_ops.py test/test_linalg.py test/test_mkldnn.py test/test_modules.py test/test_nn.py test/test_torch.py test/test_xnnpack_integration.py test/inductor/test_torchinductor.py -k \"not ((TestTorch and test_print) or test_1_sized_with_0_strided_cpu_float32 or test_batchnorm_nhwc_cpu or test_layer_norm_backwards_eps or test_pynode_destruction_deadlock or (TestLinalgCPU and test_cholesky_cpu_float32) or (TestLinalgCPU and test_pca_lowrank_cpu) or (TestLinalgCPU and test_svd_lowrank_cpu) or (TestMkldnnCPU and test_lstm_cpu) or test_eigh_lwork_lapack or test_gradgrad_nn_LSTM or test_grad_nn_Transformer or test_inverse_errors_large or (TestXNNPACKConv1dTransformPass and test_conv1d_basic) or test_addbmm or test_baddbmm or test_bmm or illcondition_matrix_input_should_not_crash_cpu or (TestAutograd and test_profiler_seq_nr) or (TestAutograd and test_profiler_propagation) or test_mutable_custom_op_fixed_layout or test_BCELoss_weights_no_reduce_cuda or test_ctc_loss_cudnn_tensor_cuda  or (TestTorch and test_index_add_correctness) or test_sdpa_inference_mode_aot_compile or (TestNN and test_grid_sample) or test_cublas_config_nondeterministic_alert_cuda or test_cross_entropy_loss_2d_out_of_bounds_class or test_indirect_device_assert or test_reentrant_parent_error_on_cpu_cuda or (GPUTests and test_scatter_reduce2) or test_ck_blas_library_cpu or test_matmul_offline_tunableop_cuda_float16 or test_Conv3d_1x1x1_no_bias_cuda or test_isinf_cuda or test_donated_buffer_inplace_gpt or test_linear_dynamic_maxautotune_cuda or (test_gradgrad_nn_Transformer and _cuda_) or test_avg_pool3d_backward2 or (TestLinalgCPU and test_inverse_errors_large_cpu) or test_gather_scatter_cpu or test_index_put2_cpu  or test_base_does_not_require_grad_mode_nothing or test_base_does_not_require_grad_mode_warn or test_composite_registered_to_cpu_mode_nothing or (TestMkldnnCPU and test_batch_norm_2d_cpu) or (TestNN and test_Conv1d_dilated) or (TestNN and test_Conv1d_pad_same_dilated) or (TestNN and test_Conv2d_pad_same_dilated) or (TestNN and test_Conv2d_padding) or (TestNN and test_Conv2d_strided) or (TestNN and test_Conv3d_dilated) or (TestNN and test_Conv3d_dilated_strided) or (TestNN and test_Conv3d_pad_same_dilated) or (TestNN and test_Conv3d_stride) or (TestNN and test_Conv3d_stride_padding) or (TestTorch and test_tensor_cycle_via_slots))\" -m \"not hypothesis\" --durations=50 --disable-warnings",
            "test ! -f $SP_DIR/functorch/__pycache__/__init__.cpython-313.pyc",
            "cd cmake_test",
            "cmake -GNinja -DCMAKE_CXX_STANDARD=17 -DWITH_TORCH_PYTHON=ON $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/"
          ],
          "imports": [
            "torch",
            "torch._C"
          ],
          "requires": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cuda_compiler_stub",
            "ninja",
            "boto3",
            "hypothesis",
            "pytest",
            "tabulate",
            "pydot",
            "pip",
            "expecttest",
            "xmlrunner",
            "pyyaml",
            "pytest-flakefinder",
            "pytest-rerunfailures",
            "pytest-xdist",
            "cmake",
            "cuda-nvrtc-dev",
            "nvtx-c",
            "pybind11",
            "cudnn <9.11"
          ],
          "source_files": [
            "test",
            "tools"
          ]
        }
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cuda129_mkl_h1234567_301"
        },
        "name": "pytorch-gpu",
        "requirements": {
          "run": [
            "pytorch 2.8.0 cuda*_mkl*301"
          ]
        },
        "test": {
          "imports": [
            "torch"
          ]
        }
      },
      {
        "name": "libtorch"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "ignore_run_exports": [
            "libmagma_sparse"
          ],
          "run_exports": [
            "pytorch",
            "libtorch"
          ],
          "string": "cpu_mkl_py313_h1234567_101"
        },
        "name": "pytorch",
        "requirements": {
          "build": [
            "python",
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "llvm-openmp",
            "cmake",
            "ninja",
            "libprotobuf",
            "protobuf",
            "make"
          ],
          "host": [
            "libtorch",
            "python",
            "numpy",
            "pip",
            "setuptools",
            "pyyaml",
            "requests",
            "six",
            "mkl-devel <2025",
            "libcblas * *_mkl",
            "llvm-openmp",
            "libabseil",
            "libprotobuf",
            "pybind11",
            "pybind11-abi",
            "eigen",
            "sleef",
            "libuv",
            "pkg-config",
            "typing_extensions",
            "zlib"
          ],
          "run": [
            "libtorch",
            "llvm-openmp",
            "libblas * *mkl",
            "python",
            "filelock",
            "fsspec",
            "jinja2",
            "networkx",
            "optree >=0.13.0",
            "pybind11",
            "setuptools",
            "sympy >=1.13.3",
            "typing_extensions >=4.10.0"
          ],
          "run_constrained": [
            "pytorch-cpu 2.8.0",
            "pytorch-gpu <0.0a0"
          ]
        },
        "script": "build.sh"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cpu_mkl_py313_h1234567_101"
        },
        "name": "pytorch-tests",
        "requirements": {
          "host": [
            "python"
          ],
          "run": [
            "pytorch 2.8.0 cpu_mkl_py313*101"
          ]
        },
        "test": {
          "commands": [
            "pip check",
            "python -c \"import torch; print(torch.__version__)\"",
            "python -c \"import torch; assert torch.backends.mkldnn.m.is_available()\"",
            "python -c \"import torch; torch.tensor(1).to('cpu').numpy(); print('numpy support enabled!!!')\"",
            "python -c \"import torch; import numpy\"",
            "python -c \"import numpy; import torch\"",
            "python -c \"import numpy as np;import torch;x = torch.tensor([2], dtype=torch.complex128);assert torch.dot(x, x).real == 4.0\"",
            "python -c \"import torch; assert torch.distributed.is_available()\"",
            "test -f $PREFIX/lib/libtorch_python${SHLIB_EXT}",
            "export OMP_NUM_THREADS=4",
            "pytest -n 1 test/test_autograd.py test/test_autograd_fallback.py test/test_custom_ops.py test/test_linalg.py test/test_mkldnn.py test/test_modules.py test/test_nn.py test/test_torch.py test/test_xnnpack_integration.py test/inductor/test_torchinductor.py -k \"not ((TestTorch and test_print) or test_1_sized_with_0_strided_cpu_float32 or test_batchnorm_nhwc_cpu or test_layer_norm_backwards_eps or test_pynode_destruction_deadlock or (TestLinalgCPU and test_cholesky_cpu_float32) or (TestLinalgCPU and test_pca_lowrank_cpu) or (TestLinalgCPU and test_svd_lowrank_cpu) or (TestMkldnnCPU and test_lstm_cpu) or test_eigh_lwork_lapack or test_gradgrad_nn_LSTM or test_grad_nn_Transformer or test_inverse_errors_large or (TestXNNPACKConv1dTransformPass and test_conv1d_basic) or test_addbmm or test_baddbmm or test_bmm or illcondition_matrix_input_should_not_crash_cpu or (TestAutograd and test_profiler_seq_nr) or (TestAutograd and test_profiler_propagation) or test_mutable_custom_op_fixed_layout or test_BCELoss_weights_no_reduce_cuda or test_ctc_loss_cudnn_tensor_cuda  or (TestTorch and test_index_add_correctness) or test_sdpa_inference_mode_aot_compile or (TestNN and test_grid_sample) or test_cublas_config_nondeterministic_alert_cuda or test_cross_entropy_loss_2d_out_of_bounds_class or test_indirect_device_assert or test_reentrant_parent_error_on_cpu_cuda or (GPUTests and test_scatter_reduce2) or test_ck_blas_library_cpu or test_matmul_offline_tunableop_cuda_float16 or test_Conv3d_1x1x1_no_bias_cuda or test_isinf_cuda or test_donated_buffer_inplace_gpt or test_linear_dynamic_maxautotune_cuda or (test_gradgrad_nn_Transformer and _cuda_) or test_avg_pool3d_backward2 or (TestLinalgCPU and test_inverse_errors_large_cpu) or test_gather_scatter_cpu or test_index_put2_cpu  or test_base_does_not_require_grad_mode_nothing or test_base_does_not_require_grad_mode_warn or test_composite_registered_to_cpu_mode_nothing or (TestMkldnnCPU and test_batch_norm_2d_cpu) or (TestNN and test_Conv1d_dilated) or (TestNN and test_Conv1d_pad_same_dilated) or (TestNN and test_Conv2d_pad_same_dilated) or (TestNN and test_Conv2d_padding) or (TestNN and test_Conv2d_strided) or (TestNN and test_Conv3d_dilated) or (TestNN and test_Conv3d_dilated_strided) or (TestNN and test_Conv3d_pad_same_dilated) or (TestNN and test_Conv3d_stride) or (TestNN and test_Conv3d_stride_padding) or (TestTorch and test_tensor_cycle_via_slots))\" -m \"not hypothesis\" --durations=50 --disable-warnings",
            "test ! -f $SP_DIR/functorch/__pycache__/__init__.cpython-313.pyc",
            "cd cmake_test",
            "cmake -GNinja -DCMAKE_CXX_STANDARD=17 -DWITH_TORCH_PYTHON=ON $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/"
          ],
          "imports": [
            "torch",
            "torch._C"
          ],
          "requires": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "ninja",
            "boto3",
            "hypothesis",
            "pytest",
            "tabulate",
            "pydot",
            "pip",
            "expecttest",
            "xmlrunner",
            "pyyaml",
            "pytest-flakefinder",
            "pytest-rerunfailures",
            "pytest-xdist",
            "cmake",
            "pybind11"
          ],
          "source_files": [
            "test",
            "tools"
          ]
        }
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cpu_mkl_h1234567_101"
        },
        "name": "pytorch-gpu",
        "requirements": {
          "run": [
            "pytorch 2.8.0 cpu_mkl*101"
          ]
        },
        "test": {
          "imports": [
            "torch"
          ]
        }
      },
      {
        "name": "libtorch"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "ignore_run_exports": [
            "libmagma_sparse"
          ],
          "run_exports": [
            "pytorch",
            "libtorch"
          ],
          "string": "cuda129_generic_py313_h1234567_201"
        },
        "name": "pytorch",
        "requirements": {
          "build": [
            "python",
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cuda_compiler_stub",
            "llvm-openmp",
            "cmake",
            "ninja",
            "libprotobuf",
            "protobuf",
            "make"
          ],
          "host": [
            "libtorch",
            "cudnn <9.11",
            "nccl",
            "cuda-version 12.9",
            "nvtx-c",
            "magma",
            "cuda-driver-dev",
            "cuda-cudart-dev",
            "cuda-cupti-dev",
            "cuda-nvrtc-dev",
            "cuda-nvtx-dev",
            "cuda-nvml-dev",
            "cuda-profiler-api",
            "cusparselt",
            "libcublas-dev",
            "libcudss-dev",
            "libcufile-dev",
            "libcufft-dev",
            "libcurand-dev",
            "libcusolver-dev",
            "libcusparse-dev",
            "python",
            "numpy",
            "pip",
            "setuptools",
            "pyyaml",
            "requests",
            "six",
            "libcblas",
            "liblapack",
            "llvm-openmp",
            "libabseil",
            "libprotobuf",
            "pybind11",
            "pybind11-abi",
            "eigen",
            "sleef",
            "libuv",
            "pkg-config",
            "typing_extensions",
            "zlib"
          ],
          "run": [
            "libtorch",
            "llvm-openmp",
            "nomkl",
            "triton ==3.4.0",
            "__cuda",
            "python",
            "filelock",
            "fsspec",
            "jinja2",
            "networkx",
            "optree >=0.13.0",
            "pybind11",
            "setuptools",
            "sympy >=1.13.3",
            "typing_extensions >=4.10.0"
          ],
          "run_constrained": [
            "pytorch-gpu 2.8.0",
            "pytorch-cpu <0.0a0"
          ]
        },
        "script": "build.sh"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cuda129_generic_py313_h1234567_201"
        },
        "name": "pytorch-tests",
        "requirements": {
          "host": [
            "python"
          ],
          "run": [
            "pytorch 2.8.0 cuda*_generic_py313*201"
          ]
        },
        "test": {
          "commands": [
            "pip check",
            "python -c \"import torch; print(torch.__version__)\"",
            "python -c \"import torch; torch.tensor(1).to('cpu').numpy(); print('numpy support enabled!!!')\"",
            "python -c \"import torch; import numpy\"",
            "python -c \"import numpy; import torch\"",
            "python -c \"import numpy as np;import torch;x = torch.tensor([2], dtype=torch.complex128);assert torch.dot(x, x).real == 4.0\"",
            "python -c \"import torch; assert torch.distributed.is_available()\"",
            "python -c \"import torch; assert torch.backends.cuda.is_built()\"",
            "python -c \"import torch; assert torch.backends.cudnn.is_available()\"",
            "python -c \"import torch; assert torch.backends.cudnn.enabled\"",
            "python -c \"import torch; assert torch.version.cuda is not None\"",
            "test -f $PREFIX/lib/libtorch_python${SHLIB_EXT}",
            "export OMP_NUM_THREADS=4",
            "test ! -f $SP_DIR/functorch/__pycache__/__init__.cpython-313.pyc",
            "cd cmake_test",
            "cmake -GNinja -DCMAKE_CXX_STANDARD=17 -DWITH_TORCH_PYTHON=ON $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/"
          ],
          "imports": [
            "torch",
            "torch._C"
          ],
          "requires": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cuda_compiler_stub",
            "ninja",
            "boto3",
            "hypothesis",
            "pytest",
            "tabulate",
            "pydot",
            "pip",
            "expecttest",
            "xmlrunner",
            "pyyaml",
            "pytest-flakefinder",
            "pytest-rerunfailures",
            "pytest-xdist",
            "cmake",
            "cuda-nvrtc-dev",
            "nvtx-c",
            "pybind11",
            "cudnn <9.11"
          ],
          "source_files": [
            "test",
            "tools"
          ]
        }
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cuda129_generic_h1234567_201"
        },
        "name": "pytorch-gpu",
        "requirements": {
          "run": [
            "pytorch 2.8.0 cuda*_generic*201"
          ]
        },
        "test": {
          "imports": [
            "torch"
          ]
        }
      },
      {
        "name": "libtorch"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "ignore_run_exports": [
            "libmagma_sparse"
          ],
          "run_exports": [
            "pytorch",
            "libtorch"
          ],
          "string": "cpu_generic_py313_h1234567_1"
        },
        "name": "pytorch",
        "requirements": {
          "build": [
            "python",
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "llvm-openmp",
            "cmake",
            "ninja",
            "libprotobuf",
            "protobuf",
            "make"
          ],
          "host": [
            "libtorch",
            "python",
            "numpy",
            "pip",
            "setuptools",
            "pyyaml",
            "requests",
            "six",
            "libcblas",
            "liblapack",
            "llvm-openmp",
            "libabseil",
            "libprotobuf",
            "pybind11",
            "pybind11-abi",
            "eigen",
            "sleef",
            "libuv",
            "pkg-config",
            "typing_extensions",
            "zlib"
          ],
          "run": [
            "libtorch",
            "llvm-openmp",
            "nomkl",
            "python",
            "filelock",
            "fsspec",
            "jinja2",
            "networkx",
            "optree >=0.13.0",
            "pybind11",
            "setuptools",
            "sympy >=1.13.3",
            "typing_extensions >=4.10.0"
          ],
          "run_constrained": [
            "pytorch-cpu 2.8.0",
            "pytorch-gpu <0.0a0"
          ]
        },
        "script": "build.sh"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cpu_generic_py313_h1234567_1"
        },
        "name": "pytorch-tests",
        "requirements": {
          "host": [
            "python"
          ],
          "run": [
            "pytorch 2.8.0 cpu_generic_py313*1"
          ]
        },
        "test": {
          "commands": [
            "pip check",
            "python -c \"import torch; print(torch.__version__)\"",
            "python -c \"import torch; torch.tensor(1).to('cpu').numpy(); print('numpy support enabled!!!')\"",
            "python -c \"import torch; import numpy\"",
            "python -c \"import numpy; import torch\"",
            "python -c \"import numpy as np;import torch;x = torch.tensor([2], dtype=torch.complex128);assert torch.dot(x, x).real == 4.0\"",
            "python -c \"import torch; assert torch.distributed.is_available()\"",
            "test -f $PREFIX/lib/libtorch_python${SHLIB_EXT}",
            "export OMP_NUM_THREADS=4",
            "test ! -f $SP_DIR/functorch/__pycache__/__init__.cpython-313.pyc",
            "cd cmake_test",
            "cmake -GNinja -DCMAKE_CXX_STANDARD=17 -DWITH_TORCH_PYTHON=ON $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/"
          ],
          "imports": [
            "torch",
            "torch._C"
          ],
          "requires": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "ninja",
            "boto3",
            "hypothesis",
            "pytest",
            "tabulate",
            "pydot",
            "pip",
            "expecttest",
            "xmlrunner",
            "pyyaml",
            "pytest-flakefinder",
            "pytest-rerunfailures",
            "pytest-xdist",
            "cmake",
            "pybind11"
          ],
          "source_files": [
            "test",
            "tools"
          ]
        }
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cpu_generic_h1234567_1"
        },
        "name": "pytorch-gpu",
        "requirements": {
          "run": [
            "pytorch 2.8.0 cpu_generic*1"
          ]
        },
        "test": {
          "imports": [
            "torch"
          ]
        }
      },
      {
        "name": "libtorch"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "ignore_run_exports": [
            "libmagma_sparse"
          ],
          "run_exports": [
            "pytorch",
            "libtorch"
          ],
          "string": "cpu_generic_py310_h1234567_1"
        },
        "name": "pytorch",
        "requirements": {
          "build": [
            "python",
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "llvm-openmp",
            "cmake",
            "ninja",
            "libprotobuf",
            "protobuf"
          ],
          "host": [
            "libtorch",
            "python",
            "numpy",
            "pip",
            "setuptools",
            "pyyaml",
            "requests",
            "six",
            "libcblas",
            "liblapack",
            "llvm-openmp",
            "libabseil",
            "libprotobuf",
            "pybind11",
            "pybind11-abi",
            "eigen",
            "sleef",
            "libuv",
            "pkg-config",
            "typing_extensions",
            "zlib"
          ],
          "run": [
            "libtorch 2.8.0.* *_1",
            "llvm-openmp",
            "nomkl",
            "python",
            "filelock",
            "fsspec",
            "jinja2",
            "networkx",
            "optree >=0.13.0",
            "pybind11",
            "setuptools",
            "sympy >=1.13.3",
            "typing_extensions >=4.10.0"
          ],
          "run_constrained": [
            "pytorch-cpu 2.8.0",
            "pytorch-gpu <0.0a0"
          ]
        },
        "script": "build.sh"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cpu_generic_py310_h1234567_1"
        },
        "name": "pytorch-tests",
        "requirements": {
          "host": [
            "python"
          ],
          "run": [
            "pytorch 2.8.0 cpu_generic_py310*1"
          ]
        },
        "test": {
          "commands": [
            "pip check",
            "python -c \"import torch; print(torch.__version__)\"",
            "python -c \"import torch; assert torch.backends.mkldnn.m.is_available()\"",
            "python -c \"import torch; torch.tensor(1).to('cpu').numpy(); print('numpy support enabled!!!')\"",
            "python -c \"import torch; import numpy\"",
            "python -c \"import numpy; import torch\"",
            "python -c \"import numpy as np;import torch;x = torch.tensor([2], dtype=torch.complex128);assert torch.dot(x, x).real == 4.0\"",
            "python -c \"import torch; assert torch.distributed.is_available()\"",
            "test -f $PREFIX/lib/libtorch_python${SHLIB_EXT}",
            "export OMP_NUM_THREADS=4",
            "pytest -n 1 test/test_autograd.py test/test_autograd_fallback.py test/test_custom_ops.py test/test_linalg.py test/test_mkldnn.py test/test_modules.py test/test_nn.py test/test_torch.py test/test_xnnpack_integration.py test/inductor/test_torchinductor.py -k \"not ((TestTorch and test_print) or test_1_sized_with_0_strided_cpu_float32 or test_batchnorm_nhwc_cpu or test_layer_norm_backwards_eps or test_pynode_destruction_deadlock or (TestLinalgCPU and test_cholesky_cpu_float32) or (TestLinalgCPU and test_pca_lowrank_cpu) or (TestLinalgCPU and test_svd_lowrank_cpu) or (TestMkldnnCPU and test_lstm_cpu) or test_eigh_lwork_lapack or test_gradgrad_nn_LSTM or test_grad_nn_Transformer or test_inverse_errors_large or (TestXNNPACKConv1dTransformPass and test_conv1d_basic) or test_addbmm or test_baddbmm or test_bmm or illcondition_matrix_input_should_not_crash_cpu or (TestAutograd and test_profiler_seq_nr) or (TestAutograd and test_profiler_propagation) or test_mutable_custom_op_fixed_layout or test_BCELoss_weights_no_reduce_cuda or test_ctc_loss_cudnn_tensor_cuda  or (TestTorch and test_index_add_correctness) or test_sdpa_inference_mode_aot_compile or (TestNN and test_grid_sample) or test_cublas_config_nondeterministic_alert_cuda or test_cross_entropy_loss_2d_out_of_bounds_class or test_indirect_device_assert or test_reentrant_parent_error_on_cpu_cuda or (GPUTests and test_scatter_reduce2) or test_ck_blas_library_cpu or test_matmul_offline_tunableop_cuda_float16 or test_Conv3d_1x1x1_no_bias_cuda or test_isinf_cuda or test_donated_buffer_inplace_gpt or test_linear_dynamic_maxautotune_cuda or (test_gradgrad_nn_Transformer and _cuda_) or test_avg_pool3d_backward2 or (TestLinalgCPU and test_inverse_errors_large_cpu) or test_gather_scatter_cpu or test_index_put2_cpu  or test_base_does_not_require_grad_mode_nothing or test_base_does_not_require_grad_mode_warn or test_composite_registered_to_cpu_mode_nothing or (TestMkldnnCPU and test_batch_norm_2d_cpu) or (TestNN and test_Conv1d_dilated) or (TestNN and test_Conv1d_pad_same_dilated) or (TestNN and test_Conv2d_pad_same_dilated) or (TestNN and test_Conv2d_padding) or (TestNN and test_Conv2d_strided) or (TestNN and test_Conv3d_dilated) or (TestNN and test_Conv3d_dilated_strided) or (TestNN and test_Conv3d_pad_same_dilated) or (TestNN and test_Conv3d_stride) or (TestNN and test_Conv3d_stride_padding) or (TestTorch and test_tensor_cycle_via_slots))\" -m \"not hypothesis\" --durations=50 --disable-warnings",
            "test ! -f $SP_DIR/functorch/__pycache__/__init__.cpython-313.pyc",
            "cd cmake_test",
            "cmake -GNinja -DCMAKE_CXX_STANDARD=17 -DWITH_TORCH_PYTHON=ON $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/"
          ],
          "imports": [
            "torch",
            "torch._C"
          ],
          "requires": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "ninja",
            "boto3",
            "hypothesis",
            "pytest",
            "tabulate",
            "pydot",
            "pip",
            "expecttest",
            "xmlrunner",
            "pyyaml",
            "pytest-flakefinder",
            "pytest-rerunfailures",
            "pytest-xdist",
            "cmake",
            "pybind11"
          ],
          "source_files": [
            "test",
            "tools"
          ]
        }
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cpu_generic_py310_h1234567_1"
        },
        "name": "pytorch-gpu",
        "requirements": {
          "run": [
            "pytorch"
          ]
        },
        "test": {
          "imports": [
            "torch"
          ]
        }
      },
      {
        "name": "libtorch"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "ignore_run_exports": [
            "libmagma_sparse"
          ],
          "run_exports": [
            "pytorch",
            "libtorch"
          ],
          "string": "cpu_generic_py311_h1234567_1"
        },
        "name": "pytorch",
        "requirements": {
          "build": [
            "python",
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "llvm-openmp",
            "cmake",
            "ninja",
            "libprotobuf",
            "protobuf"
          ],
          "host": [
            "libtorch",
            "python",
            "numpy",
            "pip",
            "setuptools",
            "pyyaml",
            "requests",
            "six",
            "libcblas",
            "liblapack",
            "llvm-openmp",
            "libabseil",
            "libprotobuf",
            "pybind11",
            "pybind11-abi",
            "eigen",
            "sleef",
            "libuv",
            "pkg-config",
            "typing_extensions",
            "zlib"
          ],
          "run": [
            "libtorch 2.8.0.* *_1",
            "llvm-openmp",
            "nomkl",
            "python",
            "filelock",
            "fsspec",
            "jinja2",
            "networkx",
            "optree >=0.13.0",
            "pybind11",
            "setuptools",
            "sympy >=1.13.3",
            "typing_extensions >=4.10.0"
          ],
          "run_constrained": [
            "pytorch-cpu 2.8.0",
            "pytorch-gpu <0.0a0"
          ]
        },
        "script": "build.sh"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cpu_generic_py311_h1234567_1"
        },
        "name": "pytorch-tests",
        "requirements": {
          "host": [
            "python"
          ],
          "run": [
            "pytorch 2.8.0 cpu_generic_py311*1"
          ]
        },
        "test": {
          "commands": [
            "pip check",
            "python -c \"import torch; print(torch.__version__)\"",
            "python -c \"import torch; assert torch.backends.mkldnn.m.is_available()\"",
            "python -c \"import torch; torch.tensor(1).to('cpu').numpy(); print('numpy support enabled!!!')\"",
            "python -c \"import torch; import numpy\"",
            "python -c \"import numpy; import torch\"",
            "python -c \"import numpy as np;import torch;x = torch.tensor([2], dtype=torch.complex128);assert torch.dot(x, x).real == 4.0\"",
            "python -c \"import torch; assert torch.distributed.is_available()\"",
            "test -f $PREFIX/lib/libtorch_python${SHLIB_EXT}",
            "export OMP_NUM_THREADS=4",
            "pytest -n 1 test/test_autograd.py test/test_autograd_fallback.py test/test_custom_ops.py test/test_linalg.py test/test_mkldnn.py test/test_modules.py test/test_nn.py test/test_torch.py test/test_xnnpack_integration.py test/inductor/test_torchinductor.py -k \"not ((TestTorch and test_print) or test_1_sized_with_0_strided_cpu_float32 or test_batchnorm_nhwc_cpu or test_layer_norm_backwards_eps or test_pynode_destruction_deadlock or (TestLinalgCPU and test_cholesky_cpu_float32) or (TestLinalgCPU and test_pca_lowrank_cpu) or (TestLinalgCPU and test_svd_lowrank_cpu) or (TestMkldnnCPU and test_lstm_cpu) or test_eigh_lwork_lapack or test_gradgrad_nn_LSTM or test_grad_nn_Transformer or test_inverse_errors_large or (TestXNNPACKConv1dTransformPass and test_conv1d_basic) or test_addbmm or test_baddbmm or test_bmm or illcondition_matrix_input_should_not_crash_cpu or (TestAutograd and test_profiler_seq_nr) or (TestAutograd and test_profiler_propagation) or test_mutable_custom_op_fixed_layout or test_BCELoss_weights_no_reduce_cuda or test_ctc_loss_cudnn_tensor_cuda  or (TestTorch and test_index_add_correctness) or test_sdpa_inference_mode_aot_compile or (TestNN and test_grid_sample) or test_cublas_config_nondeterministic_alert_cuda or test_cross_entropy_loss_2d_out_of_bounds_class or test_indirect_device_assert or test_reentrant_parent_error_on_cpu_cuda or (GPUTests and test_scatter_reduce2) or test_ck_blas_library_cpu or test_matmul_offline_tunableop_cuda_float16 or test_Conv3d_1x1x1_no_bias_cuda or test_isinf_cuda or test_donated_buffer_inplace_gpt or test_linear_dynamic_maxautotune_cuda or (test_gradgrad_nn_Transformer and _cuda_) or test_avg_pool3d_backward2 or (TestLinalgCPU and test_inverse_errors_large_cpu) or test_gather_scatter_cpu or test_index_put2_cpu  or test_base_does_not_require_grad_mode_nothing or test_base_does_not_require_grad_mode_warn or test_composite_registered_to_cpu_mode_nothing or (TestMkldnnCPU and test_batch_norm_2d_cpu) or (TestNN and test_Conv1d_dilated) or (TestNN and test_Conv1d_pad_same_dilated) or (TestNN and test_Conv2d_pad_same_dilated) or (TestNN and test_Conv2d_padding) or (TestNN and test_Conv2d_strided) or (TestNN and test_Conv3d_dilated) or (TestNN and test_Conv3d_dilated_strided) or (TestNN and test_Conv3d_pad_same_dilated) or (TestNN and test_Conv3d_stride) or (TestNN and test_Conv3d_stride_padding) or (TestTorch and test_tensor_cycle_via_slots))\" -m \"not hypothesis\" --durations=50 --disable-warnings",
            "test ! -f $SP_DIR/functorch/__pycache__/__init__.cpython-313.pyc",
            "cd cmake_test",
            "cmake -GNinja -DCMAKE_CXX_STANDARD=17 -DWITH_TORCH_PYTHON=ON $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/"
          ],
          "imports": [
            "torch",
            "torch._C"
          ],
          "requires": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "ninja",
            "boto3",
            "hypothesis",
            "pytest",
            "tabulate",
            "pydot",
            "pip",
            "expecttest",
            "xmlrunner",
            "pyyaml",
            "pytest-flakefinder",
            "pytest-rerunfailures",
            "pytest-xdist",
            "cmake",
            "pybind11"
          ],
          "source_files": [
            "test",
            "tools"
          ]
        }
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cpu_generic_py311_h1234567_1"
        },
        "name": "pytorch-gpu",
        "requirements": {
          "run": [
            "pytorch"
          ]
        },
        "test": {
          "imports": [
            "torch"
          ]
        }
      },
      {
        "name": "libtorch"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "ignore_run_exports": [
            "libmagma_sparse"
          ],
          "run_exports": [
            "pytorch",
            "libtorch"
          ],
          "string": "cpu_generic_py312_h1234567_1"
        },
        "name": "pytorch",
        "requirements": {
          "build": [
            "python",
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "llvm-openmp",
            "cmake",
            "ninja",
            "libprotobuf",
            "protobuf"
          ],
          "host": [
            "libtorch",
            "python",
            "numpy",
            "pip",
            "setuptools",
            "pyyaml",
            "requests",
            "six",
            "libcblas",
            "liblapack",
            "llvm-openmp",
            "libabseil",
            "libprotobuf",
            "pybind11",
            "pybind11-abi",
            "eigen",
            "sleef",
            "libuv",
            "pkg-config",
            "typing_extensions",
            "zlib"
          ],
          "run": [
            "libtorch 2.8.0.* *_1",
            "llvm-openmp",
            "nomkl",
            "python",
            "filelock",
            "fsspec",
            "jinja2",
            "networkx",
            "optree >=0.13.0",
            "pybind11",
            "setuptools",
            "sympy >=1.13.3",
            "typing_extensions >=4.10.0"
          ],
          "run_constrained": [
            "pytorch-cpu 2.8.0",
            "pytorch-gpu <0.0a0"
          ]
        },
        "script": "build.sh"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cpu_generic_py312_h1234567_1"
        },
        "name": "pytorch-tests",
        "requirements": {
          "host": [
            "python"
          ],
          "run": [
            "pytorch 2.8.0 cpu_generic_py312*1"
          ]
        },
        "test": {
          "commands": [
            "pip check",
            "python -c \"import torch; print(torch.__version__)\"",
            "python -c \"import torch; assert torch.backends.mkldnn.m.is_available()\"",
            "python -c \"import torch; torch.tensor(1).to('cpu').numpy(); print('numpy support enabled!!!')\"",
            "python -c \"import torch; import numpy\"",
            "python -c \"import numpy; import torch\"",
            "python -c \"import numpy as np;import torch;x = torch.tensor([2], dtype=torch.complex128);assert torch.dot(x, x).real == 4.0\"",
            "python -c \"import torch; assert torch.distributed.is_available()\"",
            "test -f $PREFIX/lib/libtorch_python${SHLIB_EXT}",
            "export OMP_NUM_THREADS=4",
            "pytest -n 1 test/test_autograd.py test/test_autograd_fallback.py test/test_custom_ops.py test/test_linalg.py test/test_mkldnn.py test/test_modules.py test/test_nn.py test/test_torch.py test/test_xnnpack_integration.py test/inductor/test_torchinductor.py -k \"not ((TestTorch and test_print) or test_1_sized_with_0_strided_cpu_float32 or test_batchnorm_nhwc_cpu or test_layer_norm_backwards_eps or test_pynode_destruction_deadlock or (TestLinalgCPU and test_cholesky_cpu_float32) or (TestLinalgCPU and test_pca_lowrank_cpu) or (TestLinalgCPU and test_svd_lowrank_cpu) or (TestMkldnnCPU and test_lstm_cpu) or test_eigh_lwork_lapack or test_gradgrad_nn_LSTM or test_grad_nn_Transformer or test_inverse_errors_large or (TestXNNPACKConv1dTransformPass and test_conv1d_basic) or test_addbmm or test_baddbmm or test_bmm or illcondition_matrix_input_should_not_crash_cpu or (TestAutograd and test_profiler_seq_nr) or (TestAutograd and test_profiler_propagation) or test_mutable_custom_op_fixed_layout or test_BCELoss_weights_no_reduce_cuda or test_ctc_loss_cudnn_tensor_cuda  or (TestTorch and test_index_add_correctness) or test_sdpa_inference_mode_aot_compile or (TestNN and test_grid_sample) or test_cublas_config_nondeterministic_alert_cuda or test_cross_entropy_loss_2d_out_of_bounds_class or test_indirect_device_assert or test_reentrant_parent_error_on_cpu_cuda or (GPUTests and test_scatter_reduce2) or test_ck_blas_library_cpu or test_matmul_offline_tunableop_cuda_float16 or test_Conv3d_1x1x1_no_bias_cuda or test_isinf_cuda or test_donated_buffer_inplace_gpt or test_linear_dynamic_maxautotune_cuda or (test_gradgrad_nn_Transformer and _cuda_) or test_avg_pool3d_backward2 or (TestLinalgCPU and test_inverse_errors_large_cpu) or test_gather_scatter_cpu or test_index_put2_cpu  or test_base_does_not_require_grad_mode_nothing or test_base_does_not_require_grad_mode_warn or test_composite_registered_to_cpu_mode_nothing or (TestMkldnnCPU and test_batch_norm_2d_cpu) or (TestNN and test_Conv1d_dilated) or (TestNN and test_Conv1d_pad_same_dilated) or (TestNN and test_Conv2d_pad_same_dilated) or (TestNN and test_Conv2d_padding) or (TestNN and test_Conv2d_strided) or (TestNN and test_Conv3d_dilated) or (TestNN and test_Conv3d_dilated_strided) or (TestNN and test_Conv3d_pad_same_dilated) or (TestNN and test_Conv3d_stride) or (TestNN and test_Conv3d_stride_padding) or (TestTorch and test_tensor_cycle_via_slots))\" -m \"not hypothesis\" --durations=50 --disable-warnings",
            "test ! -f $SP_DIR/functorch/__pycache__/__init__.cpython-313.pyc",
            "cd cmake_test",
            "cmake -GNinja -DCMAKE_CXX_STANDARD=17 -DWITH_TORCH_PYTHON=ON $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/"
          ],
          "imports": [
            "torch",
            "torch._C"
          ],
          "requires": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "ninja",
            "boto3",
            "hypothesis",
            "pytest",
            "tabulate",
            "pydot",
            "pip",
            "expecttest",
            "xmlrunner",
            "pyyaml",
            "pytest-flakefinder",
            "pytest-rerunfailures",
            "pytest-xdist",
            "cmake",
            "pybind11"
          ],
          "source_files": [
            "test",
            "tools"
          ]
        }
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cpu_generic_py312_h1234567_1"
        },
        "name": "pytorch-gpu",
        "requirements": {
          "run": [
            "pytorch"
          ]
        },
        "test": {
          "imports": [
            "torch"
          ]
        }
      },
      {
        "name": "libtorch"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "ignore_run_exports": [
            "libmagma_sparse"
          ],
          "run_exports": [
            "pytorch",
            "libtorch"
          ],
          "string": "cpu_generic_py313_h1234567_1"
        },
        "name": "pytorch",
        "requirements": {
          "build": [
            "python",
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "llvm-openmp",
            "cmake",
            "ninja",
            "libprotobuf",
            "protobuf"
          ],
          "host": [
            "libtorch",
            "python",
            "numpy",
            "pip",
            "setuptools",
            "pyyaml",
            "requests",
            "six",
            "libcblas",
            "liblapack",
            "llvm-openmp",
            "libabseil",
            "libprotobuf",
            "pybind11",
            "pybind11-abi",
            "eigen",
            "sleef",
            "libuv",
            "pkg-config",
            "typing_extensions",
            "zlib"
          ],
          "run": [
            "libtorch 2.8.0.* *_1",
            "llvm-openmp",
            "nomkl",
            "python",
            "filelock",
            "fsspec",
            "jinja2",
            "networkx",
            "optree >=0.13.0",
            "pybind11",
            "setuptools",
            "sympy >=1.13.3",
            "typing_extensions >=4.10.0"
          ],
          "run_constrained": [
            "pytorch-cpu 2.8.0",
            "pytorch-gpu <0.0a0"
          ]
        },
        "script": "build.sh"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cpu_generic_py313_h1234567_1"
        },
        "name": "pytorch-tests",
        "requirements": {
          "host": [
            "python"
          ],
          "run": [
            "pytorch 2.8.0 cpu_generic_py313*1"
          ]
        },
        "test": {
          "commands": [
            "pip check",
            "python -c \"import torch; print(torch.__version__)\"",
            "python -c \"import torch; assert torch.backends.mkldnn.m.is_available()\"",
            "python -c \"import torch; torch.tensor(1).to('cpu').numpy(); print('numpy support enabled!!!')\"",
            "python -c \"import torch; import numpy\"",
            "python -c \"import numpy; import torch\"",
            "python -c \"import numpy as np;import torch;x = torch.tensor([2], dtype=torch.complex128);assert torch.dot(x, x).real == 4.0\"",
            "python -c \"import torch; assert torch.distributed.is_available()\"",
            "test -f $PREFIX/lib/libtorch_python${SHLIB_EXT}",
            "export OMP_NUM_THREADS=4",
            "pytest -n 1 test/test_autograd.py test/test_autograd_fallback.py test/test_custom_ops.py test/test_linalg.py test/test_mkldnn.py test/test_modules.py test/test_nn.py test/test_torch.py test/test_xnnpack_integration.py test/inductor/test_torchinductor.py -k \"not ((TestTorch and test_print) or test_1_sized_with_0_strided_cpu_float32 or test_batchnorm_nhwc_cpu or test_layer_norm_backwards_eps or test_pynode_destruction_deadlock or (TestLinalgCPU and test_cholesky_cpu_float32) or (TestLinalgCPU and test_pca_lowrank_cpu) or (TestLinalgCPU and test_svd_lowrank_cpu) or (TestMkldnnCPU and test_lstm_cpu) or test_eigh_lwork_lapack or test_gradgrad_nn_LSTM or test_grad_nn_Transformer or test_inverse_errors_large or (TestXNNPACKConv1dTransformPass and test_conv1d_basic) or test_addbmm or test_baddbmm or test_bmm or illcondition_matrix_input_should_not_crash_cpu or (TestAutograd and test_profiler_seq_nr) or (TestAutograd and test_profiler_propagation) or test_mutable_custom_op_fixed_layout or test_BCELoss_weights_no_reduce_cuda or test_ctc_loss_cudnn_tensor_cuda  or (TestTorch and test_index_add_correctness) or test_sdpa_inference_mode_aot_compile or (TestNN and test_grid_sample) or test_cublas_config_nondeterministic_alert_cuda or test_cross_entropy_loss_2d_out_of_bounds_class or test_indirect_device_assert or test_reentrant_parent_error_on_cpu_cuda or (GPUTests and test_scatter_reduce2) or test_ck_blas_library_cpu or test_matmul_offline_tunableop_cuda_float16 or test_Conv3d_1x1x1_no_bias_cuda or test_isinf_cuda or test_donated_buffer_inplace_gpt or test_linear_dynamic_maxautotune_cuda or (test_gradgrad_nn_Transformer and _cuda_) or test_avg_pool3d_backward2 or (TestLinalgCPU and test_inverse_errors_large_cpu) or test_gather_scatter_cpu or test_index_put2_cpu  or test_base_does_not_require_grad_mode_nothing or test_base_does_not_require_grad_mode_warn or test_composite_registered_to_cpu_mode_nothing or (TestMkldnnCPU and test_batch_norm_2d_cpu) or (TestNN and test_Conv1d_dilated) or (TestNN and test_Conv1d_pad_same_dilated) or (TestNN and test_Conv2d_pad_same_dilated) or (TestNN and test_Conv2d_padding) or (TestNN and test_Conv2d_strided) or (TestNN and test_Conv3d_dilated) or (TestNN and test_Conv3d_dilated_strided) or (TestNN and test_Conv3d_pad_same_dilated) or (TestNN and test_Conv3d_stride) or (TestNN and test_Conv3d_stride_padding) or (TestTorch and test_tensor_cycle_via_slots))\" -m \"not hypothesis\" --durations=50 --disable-warnings",
            "test ! -f $SP_DIR/functorch/__pycache__/__init__.cpython-313.pyc",
            "cd cmake_test",
            "cmake -GNinja -DCMAKE_CXX_STANDARD=17 -DWITH_TORCH_PYTHON=ON $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/"
          ],
          "imports": [
            "torch",
            "torch._C"
          ],
          "requires": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "ninja",
            "boto3",
            "hypothesis",
            "pytest",
            "tabulate",
            "pydot",
            "pip",
            "expecttest",
            "xmlrunner",
            "pyyaml",
            "pytest-flakefinder",
            "pytest-rerunfailures",
            "pytest-xdist",
            "cmake",
            "pybind11"
          ],
          "source_files": [
            "test",
            "tools"
          ]
        }
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cpu_generic_py313_h1234567_1"
        },
        "name": "pytorch-gpu",
        "requirements": {
          "run": [
            "pytorch"
          ]
        },
        "test": {
          "imports": [
            "torch"
          ]
        }
      },
      {
        "name": "libtorch"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "ignore_run_exports": [
            "libmagma_sparse"
          ],
          "run_exports": [
            "pytorch",
            "libtorch"
          ],
          "string": "cpu_mkl_py310_h1234567_101"
        },
        "name": "pytorch",
        "requirements": {
          "build": [
            "python",
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "llvm-openmp",
            "cmake",
            "ninja",
            "libprotobuf",
            "protobuf"
          ],
          "host": [
            "libtorch",
            "python",
            "numpy",
            "pip",
            "setuptools",
            "pyyaml",
            "requests",
            "six",
            "mkl-devel <2025",
            "libcblas * *_mkl",
            "llvm-openmp",
            "libabseil",
            "libprotobuf",
            "pybind11",
            "pybind11-abi",
            "eigen",
            "sleef",
            "libuv",
            "pkg-config",
            "typing_extensions",
            "zlib"
          ],
          "run": [
            "libtorch 2.8.0.* *_101",
            "llvm-openmp",
            "libblas * *mkl",
            "python",
            "filelock",
            "fsspec",
            "jinja2",
            "networkx",
            "optree >=0.13.0",
            "pybind11",
            "setuptools",
            "sympy >=1.13.3",
            "typing_extensions >=4.10.0"
          ],
          "run_constrained": [
            "pytorch-cpu 2.8.0",
            "pytorch-gpu <0.0a0"
          ]
        },
        "script": "build.sh"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cpu_mkl_py310_h1234567_101"
        },
        "name": "pytorch-tests",
        "requirements": {
          "host": [
            "python"
          ],
          "run": [
            "pytorch 2.8.0 cpu_mkl_py310*101"
          ]
        },
        "test": {
          "commands": [
            "pip check",
            "python -c \"import torch; print(torch.__version__)\"",
            "python -c \"import torch; assert torch.backends.mkldnn.m.is_available()\"",
            "python -c \"import torch; torch.tensor(1).to('cpu').numpy(); print('numpy support enabled!!!')\"",
            "python -c \"import torch; import numpy\"",
            "python -c \"import numpy; import torch\"",
            "python -c \"import numpy as np;import torch;x = torch.tensor([2], dtype=torch.complex128);assert torch.dot(x, x).real == 4.0\"",
            "python -c \"import torch; assert torch.distributed.is_available()\"",
            "test -f $PREFIX/lib/libtorch_python${SHLIB_EXT}",
            "export OMP_NUM_THREADS=4",
            "pytest -n 1 test/test_autograd.py test/test_autograd_fallback.py test/test_custom_ops.py test/test_linalg.py test/test_mkldnn.py test/test_modules.py test/test_nn.py test/test_torch.py test/test_xnnpack_integration.py test/inductor/test_torchinductor.py -k \"not ((TestTorch and test_print) or test_1_sized_with_0_strided_cpu_float32 or test_batchnorm_nhwc_cpu or test_layer_norm_backwards_eps or test_pynode_destruction_deadlock or (TestLinalgCPU and test_cholesky_cpu_float32) or (TestLinalgCPU and test_pca_lowrank_cpu) or (TestLinalgCPU and test_svd_lowrank_cpu) or (TestMkldnnCPU and test_lstm_cpu) or test_eigh_lwork_lapack or test_gradgrad_nn_LSTM or test_grad_nn_Transformer or test_inverse_errors_large or (TestXNNPACKConv1dTransformPass and test_conv1d_basic) or test_addbmm or test_baddbmm or test_bmm or illcondition_matrix_input_should_not_crash_cpu or (TestAutograd and test_profiler_seq_nr) or (TestAutograd and test_profiler_propagation) or test_mutable_custom_op_fixed_layout or test_BCELoss_weights_no_reduce_cuda or test_ctc_loss_cudnn_tensor_cuda  or (TestTorch and test_index_add_correctness) or test_sdpa_inference_mode_aot_compile or (TestNN and test_grid_sample) or test_cublas_config_nondeterministic_alert_cuda or test_cross_entropy_loss_2d_out_of_bounds_class or test_indirect_device_assert or test_reentrant_parent_error_on_cpu_cuda or (GPUTests and test_scatter_reduce2) or test_ck_blas_library_cpu or test_matmul_offline_tunableop_cuda_float16 or test_Conv3d_1x1x1_no_bias_cuda or test_isinf_cuda or test_donated_buffer_inplace_gpt or test_linear_dynamic_maxautotune_cuda or (test_gradgrad_nn_Transformer and _cuda_) or test_avg_pool3d_backward2 or (TestLinalgCPU and test_inverse_errors_large_cpu) or test_gather_scatter_cpu or test_index_put2_cpu  or test_base_does_not_require_grad_mode_nothing or test_base_does_not_require_grad_mode_warn or test_composite_registered_to_cpu_mode_nothing or (TestMkldnnCPU and test_batch_norm_2d_cpu) or (TestNN and test_Conv1d_dilated) or (TestNN and test_Conv1d_pad_same_dilated) or (TestNN and test_Conv2d_pad_same_dilated) or (TestNN and test_Conv2d_padding) or (TestNN and test_Conv2d_strided) or (TestNN and test_Conv3d_dilated) or (TestNN and test_Conv3d_dilated_strided) or (TestNN and test_Conv3d_pad_same_dilated) or (TestNN and test_Conv3d_stride) or (TestNN and test_Conv3d_stride_padding) or (TestTorch and test_tensor_cycle_via_slots))\" -m \"not hypothesis\" --durations=50 --disable-warnings",
            "test ! -f $SP_DIR/functorch/__pycache__/__init__.cpython-313.pyc",
            "cd cmake_test",
            "cmake -GNinja -DCMAKE_CXX_STANDARD=17 -DWITH_TORCH_PYTHON=ON $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/"
          ],
          "imports": [
            "torch",
            "torch._C"
          ],
          "requires": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "ninja",
            "boto3",
            "hypothesis",
            "pytest",
            "tabulate",
            "pydot",
            "pip",
            "expecttest",
            "xmlrunner",
            "pyyaml",
            "pytest-flakefinder",
            "pytest-rerunfailures",
            "pytest-xdist",
            "cmake",
            "pybind11"
          ],
          "source_files": [
            "test",
            "tools"
          ]
        }
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cpu_mkl_py310_h1234567_101"
        },
        "name": "pytorch-gpu",
        "requirements": {
          "run": [
            "pytorch"
          ]
        },
        "test": {
          "imports": [
            "torch"
          ]
        }
      },
      {
        "name": "libtorch"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "ignore_run_exports": [
            "libmagma_sparse"
          ],
          "run_exports": [
            "pytorch",
            "libtorch"
          ],
          "string": "cpu_mkl_py311_h1234567_101"
        },
        "name": "pytorch",
        "requirements": {
          "build": [
            "python",
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "llvm-openmp",
            "cmake",
            "ninja",
            "libprotobuf",
            "protobuf"
          ],
          "host": [
            "libtorch",
            "python",
            "numpy",
            "pip",
            "setuptools",
            "pyyaml",
            "requests",
            "six",
            "mkl-devel <2025",
            "libcblas * *_mkl",
            "llvm-openmp",
            "libabseil",
            "libprotobuf",
            "pybind11",
            "pybind11-abi",
            "eigen",
            "sleef",
            "libuv",
            "pkg-config",
            "typing_extensions",
            "zlib"
          ],
          "run": [
            "libtorch 2.8.0.* *_101",
            "llvm-openmp",
            "libblas * *mkl",
            "python",
            "filelock",
            "fsspec",
            "jinja2",
            "networkx",
            "optree >=0.13.0",
            "pybind11",
            "setuptools",
            "sympy >=1.13.3",
            "typing_extensions >=4.10.0"
          ],
          "run_constrained": [
            "pytorch-cpu 2.8.0",
            "pytorch-gpu <0.0a0"
          ]
        },
        "script": "build.sh"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cpu_mkl_py311_h1234567_101"
        },
        "name": "pytorch-tests",
        "requirements": {
          "host": [
            "python"
          ],
          "run": [
            "pytorch 2.8.0 cpu_mkl_py311*101"
          ]
        },
        "test": {
          "commands": [
            "pip check",
            "python -c \"import torch; print(torch.__version__)\"",
            "python -c \"import torch; assert torch.backends.mkldnn.m.is_available()\"",
            "python -c \"import torch; torch.tensor(1).to('cpu').numpy(); print('numpy support enabled!!!')\"",
            "python -c \"import torch; import numpy\"",
            "python -c \"import numpy; import torch\"",
            "python -c \"import numpy as np;import torch;x = torch.tensor([2], dtype=torch.complex128);assert torch.dot(x, x).real == 4.0\"",
            "python -c \"import torch; assert torch.distributed.is_available()\"",
            "test -f $PREFIX/lib/libtorch_python${SHLIB_EXT}",
            "export OMP_NUM_THREADS=4",
            "pytest -n 1 test/test_autograd.py test/test_autograd_fallback.py test/test_custom_ops.py test/test_linalg.py test/test_mkldnn.py test/test_modules.py test/test_nn.py test/test_torch.py test/test_xnnpack_integration.py test/inductor/test_torchinductor.py -k \"not ((TestTorch and test_print) or test_1_sized_with_0_strided_cpu_float32 or test_batchnorm_nhwc_cpu or test_layer_norm_backwards_eps or test_pynode_destruction_deadlock or (TestLinalgCPU and test_cholesky_cpu_float32) or (TestLinalgCPU and test_pca_lowrank_cpu) or (TestLinalgCPU and test_svd_lowrank_cpu) or (TestMkldnnCPU and test_lstm_cpu) or test_eigh_lwork_lapack or test_gradgrad_nn_LSTM or test_grad_nn_Transformer or test_inverse_errors_large or (TestXNNPACKConv1dTransformPass and test_conv1d_basic) or test_addbmm or test_baddbmm or test_bmm or illcondition_matrix_input_should_not_crash_cpu or (TestAutograd and test_profiler_seq_nr) or (TestAutograd and test_profiler_propagation) or test_mutable_custom_op_fixed_layout or test_BCELoss_weights_no_reduce_cuda or test_ctc_loss_cudnn_tensor_cuda  or (TestTorch and test_index_add_correctness) or test_sdpa_inference_mode_aot_compile or (TestNN and test_grid_sample) or test_cublas_config_nondeterministic_alert_cuda or test_cross_entropy_loss_2d_out_of_bounds_class or test_indirect_device_assert or test_reentrant_parent_error_on_cpu_cuda or (GPUTests and test_scatter_reduce2) or test_ck_blas_library_cpu or test_matmul_offline_tunableop_cuda_float16 or test_Conv3d_1x1x1_no_bias_cuda or test_isinf_cuda or test_donated_buffer_inplace_gpt or test_linear_dynamic_maxautotune_cuda or (test_gradgrad_nn_Transformer and _cuda_) or test_avg_pool3d_backward2 or (TestLinalgCPU and test_inverse_errors_large_cpu) or test_gather_scatter_cpu or test_index_put2_cpu  or test_base_does_not_require_grad_mode_nothing or test_base_does_not_require_grad_mode_warn or test_composite_registered_to_cpu_mode_nothing or (TestMkldnnCPU and test_batch_norm_2d_cpu) or (TestNN and test_Conv1d_dilated) or (TestNN and test_Conv1d_pad_same_dilated) or (TestNN and test_Conv2d_pad_same_dilated) or (TestNN and test_Conv2d_padding) or (TestNN and test_Conv2d_strided) or (TestNN and test_Conv3d_dilated) or (TestNN and test_Conv3d_dilated_strided) or (TestNN and test_Conv3d_pad_same_dilated) or (TestNN and test_Conv3d_stride) or (TestNN and test_Conv3d_stride_padding) or (TestTorch and test_tensor_cycle_via_slots))\" -m \"not hypothesis\" --durations=50 --disable-warnings",
            "test ! -f $SP_DIR/functorch/__pycache__/__init__.cpython-313.pyc",
            "cd cmake_test",
            "cmake -GNinja -DCMAKE_CXX_STANDARD=17 -DWITH_TORCH_PYTHON=ON $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/"
          ],
          "imports": [
            "torch",
            "torch._C"
          ],
          "requires": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "ninja",
            "boto3",
            "hypothesis",
            "pytest",
            "tabulate",
            "pydot",
            "pip",
            "expecttest",
            "xmlrunner",
            "pyyaml",
            "pytest-flakefinder",
            "pytest-rerunfailures",
            "pytest-xdist",
            "cmake",
            "pybind11"
          ],
          "source_files": [
            "test",
            "tools"
          ]
        }
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cpu_mkl_py311_h1234567_101"
        },
        "name": "pytorch-gpu",
        "requirements": {
          "run": [
            "pytorch"
          ]
        },
        "test": {
          "imports": [
            "torch"
          ]
        }
      },
      {
        "name": "libtorch"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "ignore_run_exports": [
            "libmagma_sparse"
          ],
          "run_exports": [
            "pytorch",
            "libtorch"
          ],
          "string": "cpu_mkl_py312_h1234567_101"
        },
        "name": "pytorch",
        "requirements": {
          "build": [
            "python",
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "llvm-openmp",
            "cmake",
            "ninja",
            "libprotobuf",
            "protobuf"
          ],
          "host": [
            "libtorch",
            "python",
            "numpy",
            "pip",
            "setuptools",
            "pyyaml",
            "requests",
            "six",
            "mkl-devel <2025",
            "libcblas * *_mkl",
            "llvm-openmp",
            "libabseil",
            "libprotobuf",
            "pybind11",
            "pybind11-abi",
            "eigen",
            "sleef",
            "libuv",
            "pkg-config",
            "typing_extensions",
            "zlib"
          ],
          "run": [
            "libtorch 2.8.0.* *_101",
            "llvm-openmp",
            "libblas * *mkl",
            "python",
            "filelock",
            "fsspec",
            "jinja2",
            "networkx",
            "optree >=0.13.0",
            "pybind11",
            "setuptools",
            "sympy >=1.13.3",
            "typing_extensions >=4.10.0"
          ],
          "run_constrained": [
            "pytorch-cpu 2.8.0",
            "pytorch-gpu <0.0a0"
          ]
        },
        "script": "build.sh"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cpu_mkl_py312_h1234567_101"
        },
        "name": "pytorch-tests",
        "requirements": {
          "host": [
            "python"
          ],
          "run": [
            "pytorch 2.8.0 cpu_mkl_py312*101"
          ]
        },
        "test": {
          "commands": [
            "pip check",
            "python -c \"import torch; print(torch.__version__)\"",
            "python -c \"import torch; assert torch.backends.mkldnn.m.is_available()\"",
            "python -c \"import torch; torch.tensor(1).to('cpu').numpy(); print('numpy support enabled!!!')\"",
            "python -c \"import torch; import numpy\"",
            "python -c \"import numpy; import torch\"",
            "python -c \"import numpy as np;import torch;x = torch.tensor([2], dtype=torch.complex128);assert torch.dot(x, x).real == 4.0\"",
            "python -c \"import torch; assert torch.distributed.is_available()\"",
            "test -f $PREFIX/lib/libtorch_python${SHLIB_EXT}",
            "export OMP_NUM_THREADS=4",
            "pytest -n 1 test/test_autograd.py test/test_autograd_fallback.py test/test_custom_ops.py test/test_linalg.py test/test_mkldnn.py test/test_modules.py test/test_nn.py test/test_torch.py test/test_xnnpack_integration.py test/inductor/test_torchinductor.py -k \"not ((TestTorch and test_print) or test_1_sized_with_0_strided_cpu_float32 or test_batchnorm_nhwc_cpu or test_layer_norm_backwards_eps or test_pynode_destruction_deadlock or (TestLinalgCPU and test_cholesky_cpu_float32) or (TestLinalgCPU and test_pca_lowrank_cpu) or (TestLinalgCPU and test_svd_lowrank_cpu) or (TestMkldnnCPU and test_lstm_cpu) or test_eigh_lwork_lapack or test_gradgrad_nn_LSTM or test_grad_nn_Transformer or test_inverse_errors_large or (TestXNNPACKConv1dTransformPass and test_conv1d_basic) or test_addbmm or test_baddbmm or test_bmm or illcondition_matrix_input_should_not_crash_cpu or (TestAutograd and test_profiler_seq_nr) or (TestAutograd and test_profiler_propagation) or test_mutable_custom_op_fixed_layout or test_BCELoss_weights_no_reduce_cuda or test_ctc_loss_cudnn_tensor_cuda  or (TestTorch and test_index_add_correctness) or test_sdpa_inference_mode_aot_compile or (TestNN and test_grid_sample) or test_cublas_config_nondeterministic_alert_cuda or test_cross_entropy_loss_2d_out_of_bounds_class or test_indirect_device_assert or test_reentrant_parent_error_on_cpu_cuda or (GPUTests and test_scatter_reduce2) or test_ck_blas_library_cpu or test_matmul_offline_tunableop_cuda_float16 or test_Conv3d_1x1x1_no_bias_cuda or test_isinf_cuda or test_donated_buffer_inplace_gpt or test_linear_dynamic_maxautotune_cuda or (test_gradgrad_nn_Transformer and _cuda_) or test_avg_pool3d_backward2 or (TestLinalgCPU and test_inverse_errors_large_cpu) or test_gather_scatter_cpu or test_index_put2_cpu  or test_base_does_not_require_grad_mode_nothing or test_base_does_not_require_grad_mode_warn or test_composite_registered_to_cpu_mode_nothing or (TestMkldnnCPU and test_batch_norm_2d_cpu) or (TestNN and test_Conv1d_dilated) or (TestNN and test_Conv1d_pad_same_dilated) or (TestNN and test_Conv2d_pad_same_dilated) or (TestNN and test_Conv2d_padding) or (TestNN and test_Conv2d_strided) or (TestNN and test_Conv3d_dilated) or (TestNN and test_Conv3d_dilated_strided) or (TestNN and test_Conv3d_pad_same_dilated) or (TestNN and test_Conv3d_stride) or (TestNN and test_Conv3d_stride_padding) or (TestTorch and test_tensor_cycle_via_slots))\" -m \"not hypothesis\" --durations=50 --disable-warnings",
            "test ! -f $SP_DIR/functorch/__pycache__/__init__.cpython-313.pyc",
            "cd cmake_test",
            "cmake -GNinja -DCMAKE_CXX_STANDARD=17 -DWITH_TORCH_PYTHON=ON $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/"
          ],
          "imports": [
            "torch",
            "torch._C"
          ],
          "requires": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "ninja",
            "boto3",
            "hypothesis",
            "pytest",
            "tabulate",
            "pydot",
            "pip",
            "expecttest",
            "xmlrunner",
            "pyyaml",
            "pytest-flakefinder",
            "pytest-rerunfailures",
            "pytest-xdist",
            "cmake",
            "pybind11"
          ],
          "source_files": [
            "test",
            "tools"
          ]
        }
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cpu_mkl_py312_h1234567_101"
        },
        "name": "pytorch-gpu",
        "requirements": {
          "run": [
            "pytorch"
          ]
        },
        "test": {
          "imports": [
            "torch"
          ]
        }
      },
      {
        "name": "libtorch"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "ignore_run_exports": [
            "libmagma_sparse"
          ],
          "run_exports": [
            "pytorch",
            "libtorch"
          ],
          "string": "cpu_mkl_py313_h1234567_101"
        },
        "name": "pytorch",
        "requirements": {
          "build": [
            "python",
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "llvm-openmp",
            "cmake",
            "ninja",
            "libprotobuf",
            "protobuf"
          ],
          "host": [
            "libtorch",
            "python",
            "numpy",
            "pip",
            "setuptools",
            "pyyaml",
            "requests",
            "six",
            "mkl-devel <2025",
            "libcblas * *_mkl",
            "llvm-openmp",
            "libabseil",
            "libprotobuf",
            "pybind11",
            "pybind11-abi",
            "eigen",
            "sleef",
            "libuv",
            "pkg-config",
            "typing_extensions",
            "zlib"
          ],
          "run": [
            "libtorch 2.8.0.* *_101",
            "llvm-openmp",
            "libblas * *mkl",
            "python",
            "filelock",
            "fsspec",
            "jinja2",
            "networkx",
            "optree >=0.13.0",
            "pybind11",
            "setuptools",
            "sympy >=1.13.3",
            "typing_extensions >=4.10.0"
          ],
          "run_constrained": [
            "pytorch-cpu 2.8.0",
            "pytorch-gpu <0.0a0"
          ]
        },
        "script": "build.sh"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cpu_mkl_py313_h1234567_101"
        },
        "name": "pytorch-tests",
        "requirements": {
          "host": [
            "python"
          ],
          "run": [
            "pytorch 2.8.0 cpu_mkl_py313*101"
          ]
        },
        "test": {
          "commands": [
            "pip check",
            "python -c \"import torch; print(torch.__version__)\"",
            "python -c \"import torch; assert torch.backends.mkldnn.m.is_available()\"",
            "python -c \"import torch; torch.tensor(1).to('cpu').numpy(); print('numpy support enabled!!!')\"",
            "python -c \"import torch; import numpy\"",
            "python -c \"import numpy; import torch\"",
            "python -c \"import numpy as np;import torch;x = torch.tensor([2], dtype=torch.complex128);assert torch.dot(x, x).real == 4.0\"",
            "python -c \"import torch; assert torch.distributed.is_available()\"",
            "test -f $PREFIX/lib/libtorch_python${SHLIB_EXT}",
            "export OMP_NUM_THREADS=4",
            "pytest -n 1 test/test_autograd.py test/test_autograd_fallback.py test/test_custom_ops.py test/test_linalg.py test/test_mkldnn.py test/test_modules.py test/test_nn.py test/test_torch.py test/test_xnnpack_integration.py test/inductor/test_torchinductor.py -k \"not ((TestTorch and test_print) or test_1_sized_with_0_strided_cpu_float32 or test_batchnorm_nhwc_cpu or test_layer_norm_backwards_eps or test_pynode_destruction_deadlock or (TestLinalgCPU and test_cholesky_cpu_float32) or (TestLinalgCPU and test_pca_lowrank_cpu) or (TestLinalgCPU and test_svd_lowrank_cpu) or (TestMkldnnCPU and test_lstm_cpu) or test_eigh_lwork_lapack or test_gradgrad_nn_LSTM or test_grad_nn_Transformer or test_inverse_errors_large or (TestXNNPACKConv1dTransformPass and test_conv1d_basic) or test_addbmm or test_baddbmm or test_bmm or illcondition_matrix_input_should_not_crash_cpu or (TestAutograd and test_profiler_seq_nr) or (TestAutograd and test_profiler_propagation) or test_mutable_custom_op_fixed_layout or test_BCELoss_weights_no_reduce_cuda or test_ctc_loss_cudnn_tensor_cuda  or (TestTorch and test_index_add_correctness) or test_sdpa_inference_mode_aot_compile or (TestNN and test_grid_sample) or test_cublas_config_nondeterministic_alert_cuda or test_cross_entropy_loss_2d_out_of_bounds_class or test_indirect_device_assert or test_reentrant_parent_error_on_cpu_cuda or (GPUTests and test_scatter_reduce2) or test_ck_blas_library_cpu or test_matmul_offline_tunableop_cuda_float16 or test_Conv3d_1x1x1_no_bias_cuda or test_isinf_cuda or test_donated_buffer_inplace_gpt or test_linear_dynamic_maxautotune_cuda or (test_gradgrad_nn_Transformer and _cuda_) or test_avg_pool3d_backward2 or (TestLinalgCPU and test_inverse_errors_large_cpu) or test_gather_scatter_cpu or test_index_put2_cpu  or test_base_does_not_require_grad_mode_nothing or test_base_does_not_require_grad_mode_warn or test_composite_registered_to_cpu_mode_nothing or (TestMkldnnCPU and test_batch_norm_2d_cpu) or (TestNN and test_Conv1d_dilated) or (TestNN and test_Conv1d_pad_same_dilated) or (TestNN and test_Conv2d_pad_same_dilated) or (TestNN and test_Conv2d_padding) or (TestNN and test_Conv2d_strided) or (TestNN and test_Conv3d_dilated) or (TestNN and test_Conv3d_dilated_strided) or (TestNN and test_Conv3d_pad_same_dilated) or (TestNN and test_Conv3d_stride) or (TestNN and test_Conv3d_stride_padding) or (TestTorch and test_tensor_cycle_via_slots))\" -m \"not hypothesis\" --durations=50 --disable-warnings",
            "test ! -f $SP_DIR/functorch/__pycache__/__init__.cpython-313.pyc",
            "cd cmake_test",
            "cmake -GNinja -DCMAKE_CXX_STANDARD=17 -DWITH_TORCH_PYTHON=ON $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/"
          ],
          "imports": [
            "torch",
            "torch._C"
          ],
          "requires": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "ninja",
            "boto3",
            "hypothesis",
            "pytest",
            "tabulate",
            "pydot",
            "pip",
            "expecttest",
            "xmlrunner",
            "pyyaml",
            "pytest-flakefinder",
            "pytest-rerunfailures",
            "pytest-xdist",
            "cmake",
            "pybind11"
          ],
          "source_files": [
            "test",
            "tools"
          ]
        }
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cpu_mkl_py313_h1234567_101"
        },
        "name": "pytorch-gpu",
        "requirements": {
          "run": [
            "pytorch"
          ]
        },
        "test": {
          "imports": [
            "torch"
          ]
        }
      },
      {
        "name": "libtorch"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "ignore_run_exports": [
            "libmagma_sparse"
          ],
          "run_exports": [
            "pytorch",
            "libtorch"
          ],
          "string": "cpu_generic_py310_h1234567_1"
        },
        "name": "pytorch",
        "requirements": {
          "build": [
            "python",
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "llvm-openmp",
            "cmake",
            "ninja",
            "libprotobuf",
            "protobuf"
          ],
          "host": [
            "libtorch",
            "python",
            "numpy",
            "pip",
            "setuptools",
            "pyyaml",
            "requests",
            "six",
            "libcblas",
            "liblapack",
            "llvm-openmp",
            "libabseil",
            "libprotobuf",
            "pybind11",
            "pybind11-abi",
            "eigen",
            "sleef",
            "libuv",
            "pkg-config",
            "typing_extensions",
            "zlib"
          ],
          "run": [
            "libtorch 2.8.0.* *_1",
            "llvm-openmp",
            "nomkl",
            "python",
            "filelock",
            "fsspec",
            "jinja2",
            "networkx",
            "optree >=0.13.0",
            "pybind11",
            "setuptools",
            "sympy >=1.13.3",
            "typing_extensions >=4.10.0"
          ],
          "run_constrained": [
            "pytorch-cpu 2.8.0",
            "pytorch-gpu <0.0a0"
          ]
        },
        "script": "build.sh"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cpu_generic_py310_h1234567_1"
        },
        "name": "pytorch-tests",
        "requirements": {
          "host": [
            "python"
          ],
          "run": [
            "pytorch 2.8.0 cpu_generic_py310*1"
          ]
        },
        "test": {
          "commands": [
            "pip check",
            "python -c \"import torch; print(torch.__version__)\"",
            "python -c \"import torch; torch.tensor(1).to('cpu').numpy(); print('numpy support enabled!!!')\"",
            "python -c \"import torch; import numpy\"",
            "python -c \"import numpy; import torch\"",
            "python -c \"import numpy as np;import torch;x = torch.tensor([2], dtype=torch.complex128);assert torch.dot(x, x).real == 4.0\"",
            "python -c \"import torch; assert torch.distributed.is_available()\"",
            "test -f $PREFIX/lib/libtorch_python${SHLIB_EXT}",
            "export OMP_NUM_THREADS=4",
            "pytest -n 1 test/test_autograd.py test/test_autograd_fallback.py test/test_custom_ops.py test/test_linalg.py test/test_mkldnn.py test/test_modules.py test/test_nn.py test/test_torch.py test/test_xnnpack_integration.py test/inductor/test_torchinductor.py -k \"not ((TestTorch and test_print) or test_1_sized_with_0_strided_cpu_float32 or test_batchnorm_nhwc_cpu or test_layer_norm_backwards_eps or test_pynode_destruction_deadlock or (TestLinalgCPU and test_cholesky_cpu_float32) or (TestLinalgCPU and test_pca_lowrank_cpu) or (TestLinalgCPU and test_svd_lowrank_cpu) or (TestMkldnnCPU and test_lstm_cpu) or test_eigh_lwork_lapack or test_gradgrad_nn_LSTM or test_grad_nn_Transformer or test_inverse_errors_large or (TestXNNPACKConv1dTransformPass and test_conv1d_basic) or test_addbmm or test_baddbmm or test_bmm or illcondition_matrix_input_should_not_crash_cpu or (TestAutograd and test_profiler_seq_nr) or (TestAutograd and test_profiler_propagation) or test_mutable_custom_op_fixed_layout or test_BCELoss_weights_no_reduce_cuda or test_ctc_loss_cudnn_tensor_cuda  or (TestTorch and test_index_add_correctness) or test_sdpa_inference_mode_aot_compile or (TestNN and test_grid_sample) or test_cublas_config_nondeterministic_alert_cuda or test_cross_entropy_loss_2d_out_of_bounds_class or test_indirect_device_assert or test_reentrant_parent_error_on_cpu_cuda or (GPUTests and test_scatter_reduce2) or test_ck_blas_library_cpu or test_matmul_offline_tunableop_cuda_float16 or test_Conv3d_1x1x1_no_bias_cuda or test_isinf_cuda or test_donated_buffer_inplace_gpt or test_linear_dynamic_maxautotune_cuda or (test_gradgrad_nn_Transformer and _cuda_) or test_avg_pool3d_backward2 or (TestLinalgCPU and test_inverse_errors_large_cpu) or test_gather_scatter_cpu or test_index_put2_cpu  or test_base_does_not_require_grad_mode_nothing or test_base_does_not_require_grad_mode_warn or test_composite_registered_to_cpu_mode_nothing or (TestMkldnnCPU and test_batch_norm_2d_cpu) or (TestNN and test_Conv1d_dilated) or (TestNN and test_Conv1d_pad_same_dilated) or (TestNN and test_Conv2d_pad_same_dilated) or (TestNN and test_Conv2d_padding) or (TestNN and test_Conv2d_strided) or (TestNN and test_Conv3d_dilated) or (TestNN and test_Conv3d_dilated_strided) or (TestNN and test_Conv3d_pad_same_dilated) or (TestNN and test_Conv3d_stride) or (TestNN and test_Conv3d_stride_padding) or (TestTorch and test_tensor_cycle_via_slots))\" -m \"not hypothesis\" --durations=50 --disable-warnings",
            "test ! -f $SP_DIR/functorch/__pycache__/__init__.cpython-313.pyc",
            "cd cmake_test",
            "cmake -GNinja -DCMAKE_CXX_STANDARD=17 -DWITH_TORCH_PYTHON=ON $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/"
          ],
          "imports": [
            "torch",
            "torch._C"
          ],
          "requires": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "ninja",
            "boto3",
            "hypothesis",
            "pytest",
            "tabulate",
            "pydot",
            "pip",
            "expecttest",
            "xmlrunner",
            "pyyaml",
            "pytest-flakefinder",
            "pytest-rerunfailures",
            "pytest-xdist",
            "cmake",
            "pybind11"
          ],
          "source_files": [
            "test",
            "tools"
          ]
        }
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cpu_generic_py310_h1234567_1"
        },
        "name": "pytorch-gpu",
        "requirements": {
          "run": [
            "pytorch"
          ]
        },
        "test": {
          "imports": [
            "torch"
          ]
        }
      },
      {
        "name": "libtorch"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "ignore_run_exports": [
            "libmagma_sparse"
          ],
          "run_exports": [
            "pytorch",
            "libtorch"
          ],
          "string": "cpu_generic_py311_h1234567_1"
        },
        "name": "pytorch",
        "requirements": {
          "build": [
            "python",
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "llvm-openmp",
            "cmake",
            "ninja",
            "libprotobuf",
            "protobuf"
          ],
          "host": [
            "libtorch",
            "python",
            "numpy",
            "pip",
            "setuptools",
            "pyyaml",
            "requests",
            "six",
            "libcblas",
            "liblapack",
            "llvm-openmp",
            "libabseil",
            "libprotobuf",
            "pybind11",
            "pybind11-abi",
            "eigen",
            "sleef",
            "libuv",
            "pkg-config",
            "typing_extensions",
            "zlib"
          ],
          "run": [
            "libtorch 2.8.0.* *_1",
            "llvm-openmp",
            "nomkl",
            "python",
            "filelock",
            "fsspec",
            "jinja2",
            "networkx",
            "optree >=0.13.0",
            "pybind11",
            "setuptools",
            "sympy >=1.13.3",
            "typing_extensions >=4.10.0"
          ],
          "run_constrained": [
            "pytorch-cpu 2.8.0",
            "pytorch-gpu <0.0a0"
          ]
        },
        "script": "build.sh"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cpu_generic_py311_h1234567_1"
        },
        "name": "pytorch-tests",
        "requirements": {
          "host": [
            "python"
          ],
          "run": [
            "pytorch 2.8.0 cpu_generic_py311*1"
          ]
        },
        "test": {
          "commands": [
            "pip check",
            "python -c \"import torch; print(torch.__version__)\"",
            "python -c \"import torch; torch.tensor(1).to('cpu').numpy(); print('numpy support enabled!!!')\"",
            "python -c \"import torch; import numpy\"",
            "python -c \"import numpy; import torch\"",
            "python -c \"import numpy as np;import torch;x = torch.tensor([2], dtype=torch.complex128);assert torch.dot(x, x).real == 4.0\"",
            "python -c \"import torch; assert torch.distributed.is_available()\"",
            "test -f $PREFIX/lib/libtorch_python${SHLIB_EXT}",
            "export OMP_NUM_THREADS=4",
            "pytest -n 1 test/test_autograd.py test/test_autograd_fallback.py test/test_custom_ops.py test/test_linalg.py test/test_mkldnn.py test/test_modules.py test/test_nn.py test/test_torch.py test/test_xnnpack_integration.py test/inductor/test_torchinductor.py -k \"not ((TestTorch and test_print) or test_1_sized_with_0_strided_cpu_float32 or test_batchnorm_nhwc_cpu or test_layer_norm_backwards_eps or test_pynode_destruction_deadlock or (TestLinalgCPU and test_cholesky_cpu_float32) or (TestLinalgCPU and test_pca_lowrank_cpu) or (TestLinalgCPU and test_svd_lowrank_cpu) or (TestMkldnnCPU and test_lstm_cpu) or test_eigh_lwork_lapack or test_gradgrad_nn_LSTM or test_grad_nn_Transformer or test_inverse_errors_large or (TestXNNPACKConv1dTransformPass and test_conv1d_basic) or test_addbmm or test_baddbmm or test_bmm or illcondition_matrix_input_should_not_crash_cpu or (TestAutograd and test_profiler_seq_nr) or (TestAutograd and test_profiler_propagation) or test_mutable_custom_op_fixed_layout or test_BCELoss_weights_no_reduce_cuda or test_ctc_loss_cudnn_tensor_cuda  or (TestTorch and test_index_add_correctness) or test_sdpa_inference_mode_aot_compile or (TestNN and test_grid_sample) or test_cublas_config_nondeterministic_alert_cuda or test_cross_entropy_loss_2d_out_of_bounds_class or test_indirect_device_assert or test_reentrant_parent_error_on_cpu_cuda or (GPUTests and test_scatter_reduce2) or test_ck_blas_library_cpu or test_matmul_offline_tunableop_cuda_float16 or test_Conv3d_1x1x1_no_bias_cuda or test_isinf_cuda or test_donated_buffer_inplace_gpt or test_linear_dynamic_maxautotune_cuda or (test_gradgrad_nn_Transformer and _cuda_) or test_avg_pool3d_backward2 or (TestLinalgCPU and test_inverse_errors_large_cpu) or test_gather_scatter_cpu or test_index_put2_cpu  or test_base_does_not_require_grad_mode_nothing or test_base_does_not_require_grad_mode_warn or test_composite_registered_to_cpu_mode_nothing or (TestMkldnnCPU and test_batch_norm_2d_cpu) or (TestNN and test_Conv1d_dilated) or (TestNN and test_Conv1d_pad_same_dilated) or (TestNN and test_Conv2d_pad_same_dilated) or (TestNN and test_Conv2d_padding) or (TestNN and test_Conv2d_strided) or (TestNN and test_Conv3d_dilated) or (TestNN and test_Conv3d_dilated_strided) or (TestNN and test_Conv3d_pad_same_dilated) or (TestNN and test_Conv3d_stride) or (TestNN and test_Conv3d_stride_padding) or (TestTorch and test_tensor_cycle_via_slots))\" -m \"not hypothesis\" --durations=50 --disable-warnings",
            "test ! -f $SP_DIR/functorch/__pycache__/__init__.cpython-313.pyc",
            "cd cmake_test",
            "cmake -GNinja -DCMAKE_CXX_STANDARD=17 -DWITH_TORCH_PYTHON=ON $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/"
          ],
          "imports": [
            "torch",
            "torch._C"
          ],
          "requires": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "ninja",
            "boto3",
            "hypothesis",
            "pytest",
            "tabulate",
            "pydot",
            "pip",
            "expecttest",
            "xmlrunner",
            "pyyaml",
            "pytest-flakefinder",
            "pytest-rerunfailures",
            "pytest-xdist",
            "cmake",
            "pybind11"
          ],
          "source_files": [
            "test",
            "tools"
          ]
        }
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cpu_generic_py311_h1234567_1"
        },
        "name": "pytorch-gpu",
        "requirements": {
          "run": [
            "pytorch"
          ]
        },
        "test": {
          "imports": [
            "torch"
          ]
        }
      },
      {
        "name": "libtorch"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "ignore_run_exports": [
            "libmagma_sparse"
          ],
          "run_exports": [
            "pytorch",
            "libtorch"
          ],
          "string": "cpu_generic_py312_h1234567_1"
        },
        "name": "pytorch",
        "requirements": {
          "build": [
            "python",
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "llvm-openmp",
            "cmake",
            "ninja",
            "libprotobuf",
            "protobuf"
          ],
          "host": [
            "libtorch",
            "python",
            "numpy",
            "pip",
            "setuptools",
            "pyyaml",
            "requests",
            "six",
            "libcblas",
            "liblapack",
            "llvm-openmp",
            "libabseil",
            "libprotobuf",
            "pybind11",
            "pybind11-abi",
            "eigen",
            "sleef",
            "libuv",
            "pkg-config",
            "typing_extensions",
            "zlib"
          ],
          "run": [
            "libtorch 2.8.0.* *_1",
            "llvm-openmp",
            "nomkl",
            "python",
            "filelock",
            "fsspec",
            "jinja2",
            "networkx",
            "optree >=0.13.0",
            "pybind11",
            "setuptools",
            "sympy >=1.13.3",
            "typing_extensions >=4.10.0"
          ],
          "run_constrained": [
            "pytorch-cpu 2.8.0",
            "pytorch-gpu <0.0a0"
          ]
        },
        "script": "build.sh"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cpu_generic_py312_h1234567_1"
        },
        "name": "pytorch-tests",
        "requirements": {
          "host": [
            "python"
          ],
          "run": [
            "pytorch 2.8.0 cpu_generic_py312*1"
          ]
        },
        "test": {
          "commands": [
            "pip check",
            "python -c \"import torch; print(torch.__version__)\"",
            "python -c \"import torch; torch.tensor(1).to('cpu').numpy(); print('numpy support enabled!!!')\"",
            "python -c \"import torch; import numpy\"",
            "python -c \"import numpy; import torch\"",
            "python -c \"import numpy as np;import torch;x = torch.tensor([2], dtype=torch.complex128);assert torch.dot(x, x).real == 4.0\"",
            "python -c \"import torch; assert torch.distributed.is_available()\"",
            "test -f $PREFIX/lib/libtorch_python${SHLIB_EXT}",
            "export OMP_NUM_THREADS=4",
            "pytest -n 1 test/test_autograd.py test/test_autograd_fallback.py test/test_custom_ops.py test/test_linalg.py test/test_mkldnn.py test/test_modules.py test/test_nn.py test/test_torch.py test/test_xnnpack_integration.py test/inductor/test_torchinductor.py -k \"not ((TestTorch and test_print) or test_1_sized_with_0_strided_cpu_float32 or test_batchnorm_nhwc_cpu or test_layer_norm_backwards_eps or test_pynode_destruction_deadlock or (TestLinalgCPU and test_cholesky_cpu_float32) or (TestLinalgCPU and test_pca_lowrank_cpu) or (TestLinalgCPU and test_svd_lowrank_cpu) or (TestMkldnnCPU and test_lstm_cpu) or test_eigh_lwork_lapack or test_gradgrad_nn_LSTM or test_grad_nn_Transformer or test_inverse_errors_large or (TestXNNPACKConv1dTransformPass and test_conv1d_basic) or test_addbmm or test_baddbmm or test_bmm or illcondition_matrix_input_should_not_crash_cpu or (TestAutograd and test_profiler_seq_nr) or (TestAutograd and test_profiler_propagation) or test_mutable_custom_op_fixed_layout or test_BCELoss_weights_no_reduce_cuda or test_ctc_loss_cudnn_tensor_cuda  or (TestTorch and test_index_add_correctness) or test_sdpa_inference_mode_aot_compile or (TestNN and test_grid_sample) or test_cublas_config_nondeterministic_alert_cuda or test_cross_entropy_loss_2d_out_of_bounds_class or test_indirect_device_assert or test_reentrant_parent_error_on_cpu_cuda or (GPUTests and test_scatter_reduce2) or test_ck_blas_library_cpu or test_matmul_offline_tunableop_cuda_float16 or test_Conv3d_1x1x1_no_bias_cuda or test_isinf_cuda or test_donated_buffer_inplace_gpt or test_linear_dynamic_maxautotune_cuda or (test_gradgrad_nn_Transformer and _cuda_) or test_avg_pool3d_backward2 or (TestLinalgCPU and test_inverse_errors_large_cpu) or test_gather_scatter_cpu or test_index_put2_cpu  or test_base_does_not_require_grad_mode_nothing or test_base_does_not_require_grad_mode_warn or test_composite_registered_to_cpu_mode_nothing or (TestMkldnnCPU and test_batch_norm_2d_cpu) or (TestNN and test_Conv1d_dilated) or (TestNN and test_Conv1d_pad_same_dilated) or (TestNN and test_Conv2d_pad_same_dilated) or (TestNN and test_Conv2d_padding) or (TestNN and test_Conv2d_strided) or (TestNN and test_Conv3d_dilated) or (TestNN and test_Conv3d_dilated_strided) or (TestNN and test_Conv3d_pad_same_dilated) or (TestNN and test_Conv3d_stride) or (TestNN and test_Conv3d_stride_padding) or (TestTorch and test_tensor_cycle_via_slots))\" -m \"not hypothesis\" --durations=50 --disable-warnings",
            "test ! -f $SP_DIR/functorch/__pycache__/__init__.cpython-313.pyc",
            "cd cmake_test",
            "cmake -GNinja -DCMAKE_CXX_STANDARD=17 -DWITH_TORCH_PYTHON=ON $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/"
          ],
          "imports": [
            "torch",
            "torch._C"
          ],
          "requires": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "ninja",
            "boto3",
            "hypothesis",
            "pytest",
            "tabulate",
            "pydot",
            "pip",
            "expecttest",
            "xmlrunner",
            "pyyaml",
            "pytest-flakefinder",
            "pytest-rerunfailures",
            "pytest-xdist",
            "cmake",
            "pybind11"
          ],
          "source_files": [
            "test",
            "tools"
          ]
        }
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cpu_generic_py312_h1234567_1"
        },
        "name": "pytorch-gpu",
        "requirements": {
          "run": [
            "pytorch"
          ]
        },
        "test": {
          "imports": [
            "torch"
          ]
        }
      },
      {
        "name": "libtorch"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "ignore_run_exports": [
            "libmagma_sparse"
          ],
          "run_exports": [
            "pytorch",
            "libtorch"
          ],
          "string": "cpu_generic_py313_h1234567_1"
        },
        "name": "pytorch",
        "requirements": {
          "build": [
            "python",
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "llvm-openmp",
            "cmake",
            "ninja",
            "libprotobuf",
            "protobuf"
          ],
          "host": [
            "libtorch",
            "python",
            "numpy",
            "pip",
            "setuptools",
            "pyyaml",
            "requests",
            "six",
            "libcblas",
            "liblapack",
            "llvm-openmp",
            "libabseil",
            "libprotobuf",
            "pybind11",
            "pybind11-abi",
            "eigen",
            "sleef",
            "libuv",
            "pkg-config",
            "typing_extensions",
            "zlib"
          ],
          "run": [
            "libtorch 2.8.0.* *_1",
            "llvm-openmp",
            "nomkl",
            "python",
            "filelock",
            "fsspec",
            "jinja2",
            "networkx",
            "optree >=0.13.0",
            "pybind11",
            "setuptools",
            "sympy >=1.13.3",
            "typing_extensions >=4.10.0"
          ],
          "run_constrained": [
            "pytorch-cpu 2.8.0",
            "pytorch-gpu <0.0a0"
          ]
        },
        "script": "build.sh"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cpu_generic_py313_h1234567_1"
        },
        "name": "pytorch-tests",
        "requirements": {
          "host": [
            "python"
          ],
          "run": [
            "pytorch 2.8.0 cpu_generic_py313*1"
          ]
        },
        "test": {
          "commands": [
            "pip check",
            "python -c \"import torch; print(torch.__version__)\"",
            "python -c \"import torch; torch.tensor(1).to('cpu').numpy(); print('numpy support enabled!!!')\"",
            "python -c \"import torch; import numpy\"",
            "python -c \"import numpy; import torch\"",
            "python -c \"import numpy as np;import torch;x = torch.tensor([2], dtype=torch.complex128);assert torch.dot(x, x).real == 4.0\"",
            "python -c \"import torch; assert torch.distributed.is_available()\"",
            "test -f $PREFIX/lib/libtorch_python${SHLIB_EXT}",
            "export OMP_NUM_THREADS=4",
            "pytest -n 1 test/test_autograd.py test/test_autograd_fallback.py test/test_custom_ops.py test/test_linalg.py test/test_mkldnn.py test/test_modules.py test/test_nn.py test/test_torch.py test/test_xnnpack_integration.py test/inductor/test_torchinductor.py -k \"not ((TestTorch and test_print) or test_1_sized_with_0_strided_cpu_float32 or test_batchnorm_nhwc_cpu or test_layer_norm_backwards_eps or test_pynode_destruction_deadlock or (TestLinalgCPU and test_cholesky_cpu_float32) or (TestLinalgCPU and test_pca_lowrank_cpu) or (TestLinalgCPU and test_svd_lowrank_cpu) or (TestMkldnnCPU and test_lstm_cpu) or test_eigh_lwork_lapack or test_gradgrad_nn_LSTM or test_grad_nn_Transformer or test_inverse_errors_large or (TestXNNPACKConv1dTransformPass and test_conv1d_basic) or test_addbmm or test_baddbmm or test_bmm or illcondition_matrix_input_should_not_crash_cpu or (TestAutograd and test_profiler_seq_nr) or (TestAutograd and test_profiler_propagation) or test_mutable_custom_op_fixed_layout or test_BCELoss_weights_no_reduce_cuda or test_ctc_loss_cudnn_tensor_cuda  or (TestTorch and test_index_add_correctness) or test_sdpa_inference_mode_aot_compile or (TestNN and test_grid_sample) or test_cublas_config_nondeterministic_alert_cuda or test_cross_entropy_loss_2d_out_of_bounds_class or test_indirect_device_assert or test_reentrant_parent_error_on_cpu_cuda or (GPUTests and test_scatter_reduce2) or test_ck_blas_library_cpu or test_matmul_offline_tunableop_cuda_float16 or test_Conv3d_1x1x1_no_bias_cuda or test_isinf_cuda or test_donated_buffer_inplace_gpt or test_linear_dynamic_maxautotune_cuda or (test_gradgrad_nn_Transformer and _cuda_) or test_avg_pool3d_backward2 or (TestLinalgCPU and test_inverse_errors_large_cpu) or test_gather_scatter_cpu or test_index_put2_cpu  or test_base_does_not_require_grad_mode_nothing or test_base_does_not_require_grad_mode_warn or test_composite_registered_to_cpu_mode_nothing or (TestMkldnnCPU and test_batch_norm_2d_cpu) or (TestNN and test_Conv1d_dilated) or (TestNN and test_Conv1d_pad_same_dilated) or (TestNN and test_Conv2d_pad_same_dilated) or (TestNN and test_Conv2d_padding) or (TestNN and test_Conv2d_strided) or (TestNN and test_Conv3d_dilated) or (TestNN and test_Conv3d_dilated_strided) or (TestNN and test_Conv3d_pad_same_dilated) or (TestNN and test_Conv3d_stride) or (TestNN and test_Conv3d_stride_padding) or (TestTorch and test_tensor_cycle_via_slots))\" -m \"not hypothesis\" --durations=50 --disable-warnings",
            "test ! -f $SP_DIR/functorch/__pycache__/__init__.cpython-313.pyc",
            "cd cmake_test",
            "cmake -GNinja -DCMAKE_CXX_STANDARD=17 -DWITH_TORCH_PYTHON=ON $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/"
          ],
          "imports": [
            "torch",
            "torch._C"
          ],
          "requires": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "ninja",
            "boto3",
            "hypothesis",
            "pytest",
            "tabulate",
            "pydot",
            "pip",
            "expecttest",
            "xmlrunner",
            "pyyaml",
            "pytest-flakefinder",
            "pytest-rerunfailures",
            "pytest-xdist",
            "cmake",
            "pybind11"
          ],
          "source_files": [
            "test",
            "tools"
          ]
        }
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cpu_generic_py313_h1234567_1"
        },
        "name": "pytorch-gpu",
        "requirements": {
          "run": [
            "pytorch"
          ]
        },
        "test": {
          "imports": [
            "torch"
          ]
        }
      },
      {
        "name": "libtorch"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "ignore_run_exports": [
            "libmagma_sparse"
          ],
          "run_exports": [
            "pytorch",
            "libtorch"
          ],
          "string": "cuda128_mkl_py313_h1234567_301"
        },
        "name": "pytorch",
        "requirements": {
          "build": [
            "python",
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cuda_compiler_stub",
            "intel-openmp <2025",
            "cmake",
            "ninja",
            "libprotobuf",
            "protobuf",
            "sccache"
          ],
          "host": [
            "libtorch",
            "cudnn <9.11",
            "cuda-version 12.8",
            "nvtx-c",
            "magma",
            "cuda-cudart-dev",
            "cuda-cupti-dev",
            "cuda-nvrtc-dev",
            "cuda-nvtx-dev",
            "cuda-nvml-dev",
            "cuda-profiler-api",
            "cusparselt",
            "libcublas-dev",
            "libcudss-dev",
            "libcufft-dev",
            "libcurand-dev",
            "libcusolver-dev",
            "libcusparse-dev",
            "python",
            "numpy",
            "pip",
            "setuptools",
            "pyyaml",
            "requests",
            "six",
            "mkl-devel <2025",
            "libcblas * *_mkl",
            "intel-openmp <2025",
            "libabseil",
            "libprotobuf",
            "pybind11",
            "pybind11-abi",
            "eigen",
            "sleef",
            "libuv",
            "typing_extensions",
            "zlib"
          ],
          "run": [
            "libtorch",
            "intel-openmp <2025",
            "libblas * *mkl",
            "__cuda",
            "python",
            "filelock",
            "fsspec",
            "jinja2",
            "networkx",
            "optree >=0.13.0",
            "pybind11",
            "setuptools",
            "sympy >=1.13.3",
            "typing_extensions >=4.10.0"
          ],
          "run_constrained": [
            "pytorch-gpu 2.8.0",
            "pytorch-cpu <0.0a0"
          ]
        },
        "script": "bld.bat"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cuda128_mkl_py313_h1234567_301"
        },
        "name": "pytorch-tests",
        "requirements": {
          "host": [
            "python"
          ],
          "run": [
            "pytorch 2.8.0 cuda*_mkl_py313*301"
          ]
        },
        "test": {
          "commands": [
            "pip check",
            "python -c \"import torch; print(torch.__version__)\"",
            "python -c \"import torch; torch.tensor(1).to('cpu').numpy(); print('numpy support enabled!!!')\"",
            "python -c \"import torch; import numpy\"",
            "python -c \"import numpy; import torch\"",
            "python -c \"import numpy as np;import torch;x = torch.tensor([2], dtype=torch.complex128);assert torch.dot(x, x).real == 4.0\"",
            "python -c \"import torch; assert torch.backends.cuda.is_built()\"",
            "python -c \"import torch; assert torch.backends.cudnn.is_available()\"",
            "python -c \"import torch; assert torch.backends.cudnn.enabled\"",
            "python -c \"import torch; assert torch.version.cuda is not None\"",
            "if not exist %LIBRARY_BIN%\\torch_python.dll exit 1",
            "if not exist %SP_DIR%\\torch\\lib\\torch_python.lib exit 1",
            "if not exist %SP_DIR%\\torch\\lib\\_C.lib exit 1",
            "pytest -n 1 test/test_autograd.py test/test_autograd_fallback.py test/test_custom_ops.py test/test_linalg.py test/test_mkldnn.py test/test_modules.py test/test_nn.py test/test_torch.py test/test_xnnpack_integration.py test/inductor/test_torchinductor.py -k \"not ((TestTorch and test_print) or test_1_sized_with_0_strided_cpu_float32 or test_batchnorm_nhwc_cpu or test_layer_norm_backwards_eps or test_pynode_destruction_deadlock or (TestLinalgCPU and test_cholesky_cpu_float32) or (TestLinalgCPU and test_pca_lowrank_cpu) or (TestLinalgCPU and test_svd_lowrank_cpu) or (TestMkldnnCPU and test_lstm_cpu) or test_eigh_lwork_lapack or test_gradgrad_nn_LSTM or test_grad_nn_Transformer or test_inverse_errors_large or (TestXNNPACKConv1dTransformPass and test_conv1d_basic) or test_addbmm or test_baddbmm or test_bmm or illcondition_matrix_input_should_not_crash_cpu or (TestAutograd and test_profiler_seq_nr) or (TestAutograd and test_profiler_propagation) or test_mutable_custom_op_fixed_layout or test_BCELoss_weights_no_reduce_cuda or test_ctc_loss_cudnn_tensor_cuda  or (TestTorch and test_index_add_correctness) or test_sdpa_inference_mode_aot_compile or (TestNN and test_grid_sample) or test_cublas_config_nondeterministic_alert_cuda or test_cross_entropy_loss_2d_out_of_bounds_class or test_indirect_device_assert or test_reentrant_parent_error_on_cpu_cuda or (GPUTests and test_scatter_reduce2) or test_ck_blas_library_cpu or test_matmul_offline_tunableop_cuda_float16 or test_Conv3d_1x1x1_no_bias_cuda or test_isinf_cuda or test_donated_buffer_inplace_gpt or test_linear_dynamic_maxautotune_cuda or (test_gradgrad_nn_Transformer and _cuda_) or test_avg_pool3d_backward2 or (TestLinalgCPU and test_inverse_errors_large_cpu) or test_gather_scatter_cpu or test_index_put2_cpu  or test_base_does_not_require_grad_mode_nothing or test_base_does_not_require_grad_mode_warn or test_composite_registered_to_cpu_mode_nothing or (TestMkldnnCPU and test_batch_norm_2d_cpu) or (TestNN and test_Conv1d_dilated) or (TestNN and test_Conv1d_pad_same_dilated) or (TestNN and test_Conv2d_pad_same_dilated) or (TestNN and test_Conv2d_padding) or (TestNN and test_Conv2d_strided) or (TestNN and test_Conv3d_dilated) or (TestNN and test_Conv3d_dilated_strided) or (TestNN and test_Conv3d_pad_same_dilated) or (TestNN and test_Conv3d_stride) or (TestNN and test_Conv3d_stride_padding) or (TestTorch and test_tensor_cycle_via_slots))\" -m \"not hypothesis\" --durations=50 --disable-warnings",
            "if exist %SP_DIR%\\functorch\\__pycache__\\__init__.cpython-313.pyc exit 1",
            "cd cmake_test",
            "cmake -GNinja -DCMAKE_CXX_STANDARD=17 -DWITH_TORCH_PYTHON=ON %CMAKE_ARGS% .",
            "cmake --build . --config Release"
          ],
          "files": [
            "cmake_test/"
          ],
          "imports": [
            "torch",
            "torch._C"
          ],
          "requires": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cuda_compiler_stub",
            "ninja",
            "boto3",
            "hypothesis",
            "pytest",
            "tabulate",
            "pydot",
            "pip",
            "expecttest",
            "xmlrunner",
            "pyyaml",
            "pytest-flakefinder",
            "pytest-rerunfailures",
            "pytest-xdist",
            "cmake",
            "cuda-nvrtc-dev",
            "nvtx-c",
            "pybind11",
            "cudnn <9.11"
          ],
          "source_files": [
            "test",
            "tools"
          ]
        }
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cuda128_mkl_h1234567_301"
        },
        "name": "pytorch-gpu",
        "requirements": {
          "run": [
            "pytorch 2.8.0 cuda*_mkl*301"
          ]
        },
        "test": {
          "imports": [
            "torch"
          ]
        }
      },
      {
        "name": "libtorch"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "ignore_run_exports": [
            "libmagma_sparse"
          ],
          "run_exports": [
            "pytorch",
            "libtorch"
          ],
          "string": "cpu_mkl_py313_h1234567_101"
        },
        "name": "pytorch",
        "requirements": {
          "build": [
            "python",
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "intel-openmp <2025",
            "cmake",
            "ninja",
            "libprotobuf",
            "protobuf",
            "sccache"
          ],
          "host": [
            "libtorch",
            "python",
            "numpy",
            "pip",
            "setuptools",
            "pyyaml",
            "requests",
            "six",
            "mkl-devel <2025",
            "libcblas * *_mkl",
            "intel-openmp <2025",
            "libabseil",
            "libprotobuf",
            "pybind11",
            "pybind11-abi",
            "eigen",
            "sleef",
            "libuv",
            "typing_extensions",
            "zlib"
          ],
          "run": [
            "libtorch",
            "intel-openmp <2025",
            "libblas * *mkl",
            "python",
            "filelock",
            "fsspec",
            "jinja2",
            "networkx",
            "optree >=0.13.0",
            "pybind11",
            "setuptools",
            "sympy >=1.13.3",
            "typing_extensions >=4.10.0"
          ],
          "run_constrained": [
            "pytorch-cpu 2.8.0",
            "pytorch-gpu <0.0a0"
          ]
        },
        "script": "bld.bat"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cpu_mkl_py313_h1234567_101"
        },
        "name": "pytorch-tests",
        "requirements": {
          "host": [
            "python"
          ],
          "run": [
            "pytorch 2.8.0 cpu_mkl_py313*101"
          ]
        },
        "test": {
          "commands": [
            "pip check",
            "python -c \"import torch; print(torch.__version__)\"",
            "python -c \"import torch; assert torch.backends.mkldnn.m.is_available()\"",
            "python -c \"import torch; torch.tensor(1).to('cpu').numpy(); print('numpy support enabled!!!')\"",
            "python -c \"import torch; import numpy\"",
            "python -c \"import numpy; import torch\"",
            "python -c \"import numpy as np;import torch;x = torch.tensor([2], dtype=torch.complex128);assert torch.dot(x, x).real == 4.0\"",
            "if not exist %LIBRARY_BIN%\\torch_python.dll exit 1",
            "if not exist %SP_DIR%\\torch\\lib\\torch_python.lib exit 1",
            "if not exist %SP_DIR%\\torch\\lib\\_C.lib exit 1",
            "pytest -n 1 test/test_autograd.py test/test_autograd_fallback.py test/test_custom_ops.py test/test_linalg.py test/test_mkldnn.py test/test_modules.py test/test_nn.py test/test_torch.py test/test_xnnpack_integration.py test/inductor/test_torchinductor.py -k \"not ((TestTorch and test_print) or test_1_sized_with_0_strided_cpu_float32 or test_batchnorm_nhwc_cpu or test_layer_norm_backwards_eps or test_pynode_destruction_deadlock or (TestLinalgCPU and test_cholesky_cpu_float32) or (TestLinalgCPU and test_pca_lowrank_cpu) or (TestLinalgCPU and test_svd_lowrank_cpu) or (TestMkldnnCPU and test_lstm_cpu) or test_eigh_lwork_lapack or test_gradgrad_nn_LSTM or test_grad_nn_Transformer or test_inverse_errors_large or (TestXNNPACKConv1dTransformPass and test_conv1d_basic) or test_addbmm or test_baddbmm or test_bmm or illcondition_matrix_input_should_not_crash_cpu or (TestAutograd and test_profiler_seq_nr) or (TestAutograd and test_profiler_propagation) or test_mutable_custom_op_fixed_layout or test_BCELoss_weights_no_reduce_cuda or test_ctc_loss_cudnn_tensor_cuda  or (TestTorch and test_index_add_correctness) or test_sdpa_inference_mode_aot_compile or (TestNN and test_grid_sample) or test_cublas_config_nondeterministic_alert_cuda or test_cross_entropy_loss_2d_out_of_bounds_class or test_indirect_device_assert or test_reentrant_parent_error_on_cpu_cuda or (GPUTests and test_scatter_reduce2) or test_ck_blas_library_cpu or test_matmul_offline_tunableop_cuda_float16 or test_Conv3d_1x1x1_no_bias_cuda or test_isinf_cuda or test_donated_buffer_inplace_gpt or test_linear_dynamic_maxautotune_cuda or (test_gradgrad_nn_Transformer and _cuda_) or test_avg_pool3d_backward2 or (TestLinalgCPU and test_inverse_errors_large_cpu) or test_gather_scatter_cpu or test_index_put2_cpu  or test_base_does_not_require_grad_mode_nothing or test_base_does_not_require_grad_mode_warn or test_composite_registered_to_cpu_mode_nothing or (TestMkldnnCPU and test_batch_norm_2d_cpu) or (TestNN and test_Conv1d_dilated) or (TestNN and test_Conv1d_pad_same_dilated) or (TestNN and test_Conv2d_pad_same_dilated) or (TestNN and test_Conv2d_padding) or (TestNN and test_Conv2d_strided) or (TestNN and test_Conv3d_dilated) or (TestNN and test_Conv3d_dilated_strided) or (TestNN and test_Conv3d_pad_same_dilated) or (TestNN and test_Conv3d_stride) or (TestNN and test_Conv3d_stride_padding) or (TestTorch and test_tensor_cycle_via_slots))\" -m \"not hypothesis\" --durations=50 --disable-warnings",
            "if exist %SP_DIR%\\functorch\\__pycache__\\__init__.cpython-313.pyc exit 1",
            "cd cmake_test",
            "cmake -GNinja -DCMAKE_CXX_STANDARD=17 -DWITH_TORCH_PYTHON=ON %CMAKE_ARGS% .",
            "cmake --build . --config Release"
          ],
          "files": [
            "cmake_test/"
          ],
          "imports": [
            "torch",
            "torch._C"
          ],
          "requires": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "ninja",
            "boto3",
            "hypothesis",
            "pytest",
            "tabulate",
            "pydot",
            "pip",
            "expecttest",
            "xmlrunner",
            "pyyaml",
            "pytest-flakefinder",
            "pytest-rerunfailures",
            "pytest-xdist",
            "cmake",
            "pybind11"
          ],
          "source_files": [
            "test",
            "tools"
          ]
        }
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cpu_mkl_h1234567_101"
        },
        "name": "pytorch-gpu",
        "requirements": {
          "run": [
            "pytorch 2.8.0 cpu_mkl*101"
          ]
        },
        "test": {
          "imports": [
            "torch"
          ]
        }
      }
    ],
    "package": {
      "name": "libtorch",
      "version": "2.8.0"
    },
    "requirements": {
      "build": [
        "c_stdlib_stub",
        "c_compiler_stub",
        "cxx_compiler_stub",
        "cuda_compiler_stub",
        "llvm-openmp",
        "cmake",
        "ninja",
        "libprotobuf",
        "protobuf",
        "make",
        "grep",
        "rsync",
        "intel-openmp <2025",
        "libuv",
        "sccache"
      ],
      "host": [
        "cudnn <9.11",
        "nccl",
        "magma",
        "cuda-version 12.9",
        "nvtx-c",
        "cuda-driver-dev",
        "cuda-cudart-dev",
        "cuda-cupti-dev",
        "cuda-nvrtc-dev",
        "cuda-nvtx-dev",
        "cuda-nvml-dev",
        "cuda-profiler-api",
        "cusparselt",
        "libcublas-dev",
        "libcudss-dev",
        "libcufile-dev",
        "libcufft-dev",
        "libcurand-dev",
        "libcusolver-dev",
        "libcusparse-dev",
        "python 3.12",
        "numpy *",
        "pip",
        "setuptools",
        "pyyaml",
        "requests",
        "six",
        "libblas",
        "libcblas",
        "liblapack",
        "llvm-openmp",
        "libabseil",
        "libprotobuf",
        "sleef",
        "libuv",
        "pkg-config",
        "typing_extensions",
        "pybind11",
        "pybind11-abi",
        "eigen",
        "zlib",
        "mkl-devel <2025",
        "libcblas * *_mkl",
        "python",
        "numpy",
        "cuda-version 12.8",
        "intel-openmp <2025"
      ],
      "run": [
        "libblas * *mkl",
        "intel-openmp <2025"
      ],
      "run_constrained": [
        "pytorch-gpu 2.8.0",
        "pytorch-cpu <0.0a0",
        "pytorch 2.8.0 cuda129_generic_*_201",
        "libopenblas * openmp_*",
        "openblas * openmp_*",
        "pytorch-cpu 2.8.0",
        "pytorch-gpu <0.0a0",
        "pytorch 2.8.0 cpu_generic_*_1",
        "pytorch 2.8.0 cuda129_mkl_*_301",
        "pytorch 2.8.0 cpu_mkl_*_101",
        "pytorch 2.8.0 cuda128_mkl_*_301"
      ]
    },
    "schema_version": 0,
    "source": [
      {
        "patches": [
          "patches/0001-Force-usage-of-python-3-and-error-without-numpy.patch",
          "patches/0002-Help-find-numpy.patch",
          "patches/0004-Allow-overriding-CUDA-related-paths.patch",
          "patches/0005-Use-BLAS_USE_CBLAS_DOT-for-OpenBLAS-builds.patch",
          "patches/0006-fix-issue-142484.patch",
          "patches/0007-Fix-FindOpenBLAS.patch",
          "patches/0008-point-include-paths-to-Conda-prefix-include-dir.patch",
          "patches/0009-Add-conda-prefix-to-inductor-include-paths.patch",
          "patches/0010-make-ATEN_INCLUDE_DIR-relative-to-TORCH_INSTALL_PREF.patch",
          "patches/0012-avoid-deprecated-find_package-CUDA-in-caffe2-CMake-m.patch",
          "patches/0013-Fix-CUPTI-lookup-to-include-target-directory.patch",
          "patches/0014-skip-test_norm_matrix_degenerate_shapes-on-numpy-2.3.patch",
          "patches/0015-Define-PY_SSIZE_T_CLEAN-before-include-Python.h.patch",
          "patches_submodules/tensorpipe/0001-switch-away-from-find_package-CUDA.patch"
        ],
        "sha256": "c70a2c9488f6f6e8af5982a10d1cc2c37b7df5e6506d839daa5d5e250953d7b5",
        "url": "https://github.com/pytorch/pytorch/releases/download/v2.8.0/pytorch-v2.8.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Force-usage-of-python-3-and-error-without-numpy.patch",
          "patches/0002-Help-find-numpy.patch",
          "patches/0004-Allow-overriding-CUDA-related-paths.patch",
          "patches/0005-Use-BLAS_USE_CBLAS_DOT-for-OpenBLAS-builds.patch",
          "patches/0006-fix-issue-142484.patch",
          "patches/0007-Fix-FindOpenBLAS.patch",
          "patches/0008-point-include-paths-to-Conda-prefix-include-dir.patch",
          "patches/0009-Add-conda-prefix-to-inductor-include-paths.patch",
          "patches/0010-make-ATEN_INCLUDE_DIR-relative-to-TORCH_INSTALL_PREF.patch",
          "patches/0012-avoid-deprecated-find_package-CUDA-in-caffe2-CMake-m.patch",
          "patches/0013-Fix-CUPTI-lookup-to-include-target-directory.patch",
          "patches/0014-skip-test_norm_matrix_degenerate_shapes-on-numpy-2.3.patch",
          "patches/0015-Define-PY_SSIZE_T_CLEAN-before-include-Python.h.patch",
          "patches_submodules/tensorpipe/0001-switch-away-from-find_package-CUDA.patch"
        ],
        "sha256": "c70a2c9488f6f6e8af5982a10d1cc2c37b7df5e6506d839daa5d5e250953d7b5",
        "url": "https://github.com/pytorch/pytorch/releases/download/v2.8.0/pytorch-v2.8.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Force-usage-of-python-3-and-error-without-numpy.patch",
          "patches/0002-Help-find-numpy.patch",
          "patches/0004-Allow-overriding-CUDA-related-paths.patch",
          "patches/0005-Use-BLAS_USE_CBLAS_DOT-for-OpenBLAS-builds.patch",
          "patches/0006-fix-issue-142484.patch",
          "patches/0007-Fix-FindOpenBLAS.patch",
          "patches/0008-point-include-paths-to-Conda-prefix-include-dir.patch",
          "patches/0009-Add-conda-prefix-to-inductor-include-paths.patch",
          "patches/0010-make-ATEN_INCLUDE_DIR-relative-to-TORCH_INSTALL_PREF.patch",
          "patches/0012-avoid-deprecated-find_package-CUDA-in-caffe2-CMake-m.patch",
          "patches/0013-Fix-CUPTI-lookup-to-include-target-directory.patch",
          "patches/0014-skip-test_norm_matrix_degenerate_shapes-on-numpy-2.3.patch",
          "patches/0015-Define-PY_SSIZE_T_CLEAN-before-include-Python.h.patch",
          "patches_submodules/tensorpipe/0001-switch-away-from-find_package-CUDA.patch"
        ],
        "sha256": "c70a2c9488f6f6e8af5982a10d1cc2c37b7df5e6506d839daa5d5e250953d7b5",
        "url": "https://github.com/pytorch/pytorch/releases/download/v2.8.0/pytorch-v2.8.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Force-usage-of-python-3-and-error-without-numpy.patch",
          "patches/0002-Help-find-numpy.patch",
          "patches/0004-Allow-overriding-CUDA-related-paths.patch",
          "patches/0005-Use-BLAS_USE_CBLAS_DOT-for-OpenBLAS-builds.patch",
          "patches/0006-fix-issue-142484.patch",
          "patches/0007-Fix-FindOpenBLAS.patch",
          "patches/0008-point-include-paths-to-Conda-prefix-include-dir.patch",
          "patches/0009-Add-conda-prefix-to-inductor-include-paths.patch",
          "patches/0010-make-ATEN_INCLUDE_DIR-relative-to-TORCH_INSTALL_PREF.patch",
          "patches/0012-avoid-deprecated-find_package-CUDA-in-caffe2-CMake-m.patch",
          "patches/0013-Fix-CUPTI-lookup-to-include-target-directory.patch",
          "patches/0014-skip-test_norm_matrix_degenerate_shapes-on-numpy-2.3.patch",
          "patches/0015-Define-PY_SSIZE_T_CLEAN-before-include-Python.h.patch",
          "patches_submodules/tensorpipe/0001-switch-away-from-find_package-CUDA.patch"
        ],
        "sha256": "c70a2c9488f6f6e8af5982a10d1cc2c37b7df5e6506d839daa5d5e250953d7b5",
        "url": "https://github.com/pytorch/pytorch/releases/download/v2.8.0/pytorch-v2.8.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Force-usage-of-python-3-and-error-without-numpy.patch",
          "patches/0002-Help-find-numpy.patch",
          "patches/0003-Fix-duplicate-linker-script.patch",
          "patches/0004-Allow-overriding-CUDA-related-paths.patch",
          "patches/0005-Use-BLAS_USE_CBLAS_DOT-for-OpenBLAS-builds.patch",
          "patches/0006-fix-issue-142484.patch",
          "patches/0007-Fix-FindOpenBLAS.patch",
          "patches/0008-point-include-paths-to-Conda-prefix-include-dir.patch",
          "patches/0009-Add-conda-prefix-to-inductor-include-paths.patch",
          "patches/0010-make-ATEN_INCLUDE_DIR-relative-to-TORCH_INSTALL_PREF.patch",
          "patches/0012-avoid-deprecated-find_package-CUDA-in-caffe2-CMake-m.patch",
          "patches/0013-Fix-CUPTI-lookup-to-include-target-directory.patch",
          "patches/0014-skip-test_norm_matrix_degenerate_shapes-on-numpy-2.3.patch",
          "patches/0015-Define-PY_SSIZE_T_CLEAN-before-include-Python.h.patch",
          "patches_submodules/tensorpipe/0001-switch-away-from-find_package-CUDA.patch"
        ],
        "sha256": "c70a2c9488f6f6e8af5982a10d1cc2c37b7df5e6506d839daa5d5e250953d7b5",
        "url": "https://github.com/pytorch/pytorch/releases/download/v2.8.0/pytorch-v2.8.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Force-usage-of-python-3-and-error-without-numpy.patch",
          "patches/0002-Help-find-numpy.patch",
          "patches/0004-Allow-overriding-CUDA-related-paths.patch",
          "patches/0005-Use-BLAS_USE_CBLAS_DOT-for-OpenBLAS-builds.patch",
          "patches/0006-fix-issue-142484.patch",
          "patches/0007-Fix-FindOpenBLAS.patch",
          "patches/0008-point-include-paths-to-Conda-prefix-include-dir.patch",
          "patches/0009-Add-conda-prefix-to-inductor-include-paths.patch",
          "patches/0010-make-ATEN_INCLUDE_DIR-relative-to-TORCH_INSTALL_PREF.patch",
          "patches/0012-avoid-deprecated-find_package-CUDA-in-caffe2-CMake-m.patch",
          "patches/0013-Fix-CUPTI-lookup-to-include-target-directory.patch",
          "patches/0014-skip-test_norm_matrix_degenerate_shapes-on-numpy-2.3.patch",
          "patches/0015-Define-PY_SSIZE_T_CLEAN-before-include-Python.h.patch",
          "patches_submodules/tensorpipe/0001-switch-away-from-find_package-CUDA.patch"
        ],
        "sha256": "c70a2c9488f6f6e8af5982a10d1cc2c37b7df5e6506d839daa5d5e250953d7b5",
        "url": "https://github.com/pytorch/pytorch/releases/download/v2.8.0/pytorch-v2.8.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Force-usage-of-python-3-and-error-without-numpy.patch",
          "patches/0002-Help-find-numpy.patch",
          "patches/0004-Allow-overriding-CUDA-related-paths.patch",
          "patches/0005-Use-BLAS_USE_CBLAS_DOT-for-OpenBLAS-builds.patch",
          "patches/0006-fix-issue-142484.patch",
          "patches/0007-Fix-FindOpenBLAS.patch",
          "patches/0008-point-include-paths-to-Conda-prefix-include-dir.patch",
          "patches/0009-Add-conda-prefix-to-inductor-include-paths.patch",
          "patches/0010-make-ATEN_INCLUDE_DIR-relative-to-TORCH_INSTALL_PREF.patch",
          "patches/0012-avoid-deprecated-find_package-CUDA-in-caffe2-CMake-m.patch",
          "patches/0013-Fix-CUPTI-lookup-to-include-target-directory.patch",
          "patches/0014-skip-test_norm_matrix_degenerate_shapes-on-numpy-2.3.patch",
          "patches/0015-Define-PY_SSIZE_T_CLEAN-before-include-Python.h.patch",
          "patches_submodules/tensorpipe/0001-switch-away-from-find_package-CUDA.patch"
        ],
        "sha256": "c70a2c9488f6f6e8af5982a10d1cc2c37b7df5e6506d839daa5d5e250953d7b5",
        "url": "https://github.com/pytorch/pytorch/releases/download/v2.8.0/pytorch-v2.8.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Force-usage-of-python-3-and-error-without-numpy.patch",
          "patches/0002-Help-find-numpy.patch",
          "patches/0004-Allow-overriding-CUDA-related-paths.patch",
          "patches/0005-Use-BLAS_USE_CBLAS_DOT-for-OpenBLAS-builds.patch",
          "patches/0006-fix-issue-142484.patch",
          "patches/0007-Fix-FindOpenBLAS.patch",
          "patches/0008-point-include-paths-to-Conda-prefix-include-dir.patch",
          "patches/0009-Add-conda-prefix-to-inductor-include-paths.patch",
          "patches/0010-make-ATEN_INCLUDE_DIR-relative-to-TORCH_INSTALL_PREF.patch",
          "patches/0012-avoid-deprecated-find_package-CUDA-in-caffe2-CMake-m.patch",
          "patches/0013-Fix-CUPTI-lookup-to-include-target-directory.patch",
          "patches/0014-skip-test_norm_matrix_degenerate_shapes-on-numpy-2.3.patch",
          "patches/0015-Define-PY_SSIZE_T_CLEAN-before-include-Python.h.patch",
          "patches_submodules/tensorpipe/0001-switch-away-from-find_package-CUDA.patch"
        ],
        "sha256": "c70a2c9488f6f6e8af5982a10d1cc2c37b7df5e6506d839daa5d5e250953d7b5",
        "url": "https://github.com/pytorch/pytorch/releases/download/v2.8.0/pytorch-v2.8.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Force-usage-of-python-3-and-error-without-numpy.patch",
          "patches/0002-Help-find-numpy.patch",
          "patches/0004-Allow-overriding-CUDA-related-paths.patch",
          "patches/0005-Use-BLAS_USE_CBLAS_DOT-for-OpenBLAS-builds.patch",
          "patches/0006-fix-issue-142484.patch",
          "patches/0007-Fix-FindOpenBLAS.patch",
          "patches/0008-point-include-paths-to-Conda-prefix-include-dir.patch",
          "patches/0009-Add-conda-prefix-to-inductor-include-paths.patch",
          "patches/0010-make-ATEN_INCLUDE_DIR-relative-to-TORCH_INSTALL_PREF.patch",
          "patches/0012-avoid-deprecated-find_package-CUDA-in-caffe2-CMake-m.patch",
          "patches/0013-Fix-CUPTI-lookup-to-include-target-directory.patch",
          "patches/0014-skip-test_norm_matrix_degenerate_shapes-on-numpy-2.3.patch",
          "patches/0015-Define-PY_SSIZE_T_CLEAN-before-include-Python.h.patch",
          "patches_submodules/tensorpipe/0001-switch-away-from-find_package-CUDA.patch"
        ],
        "sha256": "c70a2c9488f6f6e8af5982a10d1cc2c37b7df5e6506d839daa5d5e250953d7b5",
        "url": "https://github.com/pytorch/pytorch/releases/download/v2.8.0/pytorch-v2.8.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Force-usage-of-python-3-and-error-without-numpy.patch",
          "patches/0002-Help-find-numpy.patch",
          "patches/0004-Allow-overriding-CUDA-related-paths.patch",
          "patches/0005-Use-BLAS_USE_CBLAS_DOT-for-OpenBLAS-builds.patch",
          "patches/0006-fix-issue-142484.patch",
          "patches/0007-Fix-FindOpenBLAS.patch",
          "patches/0008-point-include-paths-to-Conda-prefix-include-dir.patch",
          "patches/0009-Add-conda-prefix-to-inductor-include-paths.patch",
          "patches/0010-make-ATEN_INCLUDE_DIR-relative-to-TORCH_INSTALL_PREF.patch",
          "patches/0012-avoid-deprecated-find_package-CUDA-in-caffe2-CMake-m.patch",
          "patches/0013-Fix-CUPTI-lookup-to-include-target-directory.patch",
          "patches/0014-skip-test_norm_matrix_degenerate_shapes-on-numpy-2.3.patch",
          "patches/0015-Define-PY_SSIZE_T_CLEAN-before-include-Python.h.patch",
          "patches_submodules/tensorpipe/0001-switch-away-from-find_package-CUDA.patch"
        ],
        "sha256": "c70a2c9488f6f6e8af5982a10d1cc2c37b7df5e6506d839daa5d5e250953d7b5",
        "url": "https://github.com/pytorch/pytorch/releases/download/v2.8.0/pytorch-v2.8.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Force-usage-of-python-3-and-error-without-numpy.patch",
          "patches/0002-Help-find-numpy.patch",
          "patches/0004-Allow-overriding-CUDA-related-paths.patch",
          "patches/0005-Use-BLAS_USE_CBLAS_DOT-for-OpenBLAS-builds.patch",
          "patches/0006-fix-issue-142484.patch",
          "patches/0007-Fix-FindOpenBLAS.patch",
          "patches/0008-point-include-paths-to-Conda-prefix-include-dir.patch",
          "patches/0009-Add-conda-prefix-to-inductor-include-paths.patch",
          "patches/0010-make-ATEN_INCLUDE_DIR-relative-to-TORCH_INSTALL_PREF.patch",
          "patches/0012-avoid-deprecated-find_package-CUDA-in-caffe2-CMake-m.patch",
          "patches/0013-Fix-CUPTI-lookup-to-include-target-directory.patch",
          "patches/0014-skip-test_norm_matrix_degenerate_shapes-on-numpy-2.3.patch",
          "patches/0015-Define-PY_SSIZE_T_CLEAN-before-include-Python.h.patch",
          "patches_submodules/tensorpipe/0001-switch-away-from-find_package-CUDA.patch"
        ],
        "sha256": "c70a2c9488f6f6e8af5982a10d1cc2c37b7df5e6506d839daa5d5e250953d7b5",
        "url": "https://github.com/pytorch/pytorch/releases/download/v2.8.0/pytorch-v2.8.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Force-usage-of-python-3-and-error-without-numpy.patch",
          "patches/0002-Help-find-numpy.patch",
          "patches/0004-Allow-overriding-CUDA-related-paths.patch",
          "patches/0005-Use-BLAS_USE_CBLAS_DOT-for-OpenBLAS-builds.patch",
          "patches/0006-fix-issue-142484.patch",
          "patches/0007-Fix-FindOpenBLAS.patch",
          "patches/0008-point-include-paths-to-Conda-prefix-include-dir.patch",
          "patches/0009-Add-conda-prefix-to-inductor-include-paths.patch",
          "patches/0010-make-ATEN_INCLUDE_DIR-relative-to-TORCH_INSTALL_PREF.patch",
          "patches/0012-avoid-deprecated-find_package-CUDA-in-caffe2-CMake-m.patch",
          "patches/0013-Fix-CUPTI-lookup-to-include-target-directory.patch",
          "patches/0014-skip-test_norm_matrix_degenerate_shapes-on-numpy-2.3.patch",
          "patches/0015-Define-PY_SSIZE_T_CLEAN-before-include-Python.h.patch",
          "patches_submodules/tensorpipe/0001-switch-away-from-find_package-CUDA.patch"
        ],
        "sha256": "c70a2c9488f6f6e8af5982a10d1cc2c37b7df5e6506d839daa5d5e250953d7b5",
        "url": "https://github.com/pytorch/pytorch/releases/download/v2.8.0/pytorch-v2.8.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Force-usage-of-python-3-and-error-without-numpy.patch",
          "patches/0002-Help-find-numpy.patch",
          "patches/0004-Allow-overriding-CUDA-related-paths.patch",
          "patches/0005-Use-BLAS_USE_CBLAS_DOT-for-OpenBLAS-builds.patch",
          "patches/0006-fix-issue-142484.patch",
          "patches/0007-Fix-FindOpenBLAS.patch",
          "patches/0008-point-include-paths-to-Conda-prefix-include-dir.patch",
          "patches/0009-Add-conda-prefix-to-inductor-include-paths.patch",
          "patches/0010-make-ATEN_INCLUDE_DIR-relative-to-TORCH_INSTALL_PREF.patch",
          "patches/0012-avoid-deprecated-find_package-CUDA-in-caffe2-CMake-m.patch",
          "patches/0013-Fix-CUPTI-lookup-to-include-target-directory.patch",
          "patches/0014-skip-test_norm_matrix_degenerate_shapes-on-numpy-2.3.patch",
          "patches/0015-Define-PY_SSIZE_T_CLEAN-before-include-Python.h.patch",
          "patches_submodules/tensorpipe/0001-switch-away-from-find_package-CUDA.patch"
        ],
        "sha256": "c70a2c9488f6f6e8af5982a10d1cc2c37b7df5e6506d839daa5d5e250953d7b5",
        "url": "https://github.com/pytorch/pytorch/releases/download/v2.8.0/pytorch-v2.8.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Force-usage-of-python-3-and-error-without-numpy.patch",
          "patches/0002-Help-find-numpy.patch",
          "patches/0004-Allow-overriding-CUDA-related-paths.patch",
          "patches/0005-Use-BLAS_USE_CBLAS_DOT-for-OpenBLAS-builds.patch",
          "patches/0006-fix-issue-142484.patch",
          "patches/0007-Fix-FindOpenBLAS.patch",
          "patches/0008-point-include-paths-to-Conda-prefix-include-dir.patch",
          "patches/0009-Add-conda-prefix-to-inductor-include-paths.patch",
          "patches/0010-make-ATEN_INCLUDE_DIR-relative-to-TORCH_INSTALL_PREF.patch",
          "patches/0012-avoid-deprecated-find_package-CUDA-in-caffe2-CMake-m.patch",
          "patches/0013-Fix-CUPTI-lookup-to-include-target-directory.patch",
          "patches/0014-skip-test_norm_matrix_degenerate_shapes-on-numpy-2.3.patch",
          "patches/0015-Define-PY_SSIZE_T_CLEAN-before-include-Python.h.patch",
          "patches_submodules/tensorpipe/0001-switch-away-from-find_package-CUDA.patch"
        ],
        "sha256": "c70a2c9488f6f6e8af5982a10d1cc2c37b7df5e6506d839daa5d5e250953d7b5",
        "url": "https://github.com/pytorch/pytorch/releases/download/v2.8.0/pytorch-v2.8.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Force-usage-of-python-3-and-error-without-numpy.patch",
          "patches/0002-Help-find-numpy.patch",
          "patches/0004-Allow-overriding-CUDA-related-paths.patch",
          "patches/0005-Use-BLAS_USE_CBLAS_DOT-for-OpenBLAS-builds.patch",
          "patches/0006-fix-issue-142484.patch",
          "patches/0007-Fix-FindOpenBLAS.patch",
          "patches/0008-point-include-paths-to-Conda-prefix-include-dir.patch",
          "patches/0009-Add-conda-prefix-to-inductor-include-paths.patch",
          "patches/0010-make-ATEN_INCLUDE_DIR-relative-to-TORCH_INSTALL_PREF.patch",
          "patches/0012-avoid-deprecated-find_package-CUDA-in-caffe2-CMake-m.patch",
          "patches/0013-Fix-CUPTI-lookup-to-include-target-directory.patch",
          "patches/0014-skip-test_norm_matrix_degenerate_shapes-on-numpy-2.3.patch",
          "patches/0015-Define-PY_SSIZE_T_CLEAN-before-include-Python.h.patch",
          "patches_submodules/tensorpipe/0001-switch-away-from-find_package-CUDA.patch"
        ],
        "sha256": "c70a2c9488f6f6e8af5982a10d1cc2c37b7df5e6506d839daa5d5e250953d7b5",
        "url": "https://github.com/pytorch/pytorch/releases/download/v2.8.0/pytorch-v2.8.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Force-usage-of-python-3-and-error-without-numpy.patch",
          "patches/0002-Help-find-numpy.patch",
          "patches/0004-Allow-overriding-CUDA-related-paths.patch",
          "patches/0005-Use-BLAS_USE_CBLAS_DOT-for-OpenBLAS-builds.patch",
          "patches/0006-fix-issue-142484.patch",
          "patches/0007-Fix-FindOpenBLAS.patch",
          "patches/0008-point-include-paths-to-Conda-prefix-include-dir.patch",
          "patches/0009-Add-conda-prefix-to-inductor-include-paths.patch",
          "patches/0010-make-ATEN_INCLUDE_DIR-relative-to-TORCH_INSTALL_PREF.patch",
          "patches/0012-avoid-deprecated-find_package-CUDA-in-caffe2-CMake-m.patch",
          "patches/0013-Fix-CUPTI-lookup-to-include-target-directory.patch",
          "patches/0014-skip-test_norm_matrix_degenerate_shapes-on-numpy-2.3.patch",
          "patches/0015-Define-PY_SSIZE_T_CLEAN-before-include-Python.h.patch",
          "patches_submodules/tensorpipe/0001-switch-away-from-find_package-CUDA.patch"
        ],
        "sha256": "c70a2c9488f6f6e8af5982a10d1cc2c37b7df5e6506d839daa5d5e250953d7b5",
        "url": "https://github.com/pytorch/pytorch/releases/download/v2.8.0/pytorch-v2.8.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Force-usage-of-python-3-and-error-without-numpy.patch",
          "patches/0002-Help-find-numpy.patch",
          "patches/0004-Allow-overriding-CUDA-related-paths.patch",
          "patches/0005-Use-BLAS_USE_CBLAS_DOT-for-OpenBLAS-builds.patch",
          "patches/0006-fix-issue-142484.patch",
          "patches/0007-Fix-FindOpenBLAS.patch",
          "patches/0008-point-include-paths-to-Conda-prefix-include-dir.patch",
          "patches/0009-Add-conda-prefix-to-inductor-include-paths.patch",
          "patches/0010-make-ATEN_INCLUDE_DIR-relative-to-TORCH_INSTALL_PREF.patch",
          "patches/0012-avoid-deprecated-find_package-CUDA-in-caffe2-CMake-m.patch",
          "patches/0013-Fix-CUPTI-lookup-to-include-target-directory.patch",
          "patches/0014-skip-test_norm_matrix_degenerate_shapes-on-numpy-2.3.patch",
          "patches/0015-Define-PY_SSIZE_T_CLEAN-before-include-Python.h.patch",
          "patches_submodules/tensorpipe/0001-switch-away-from-find_package-CUDA.patch"
        ],
        "sha256": "c70a2c9488f6f6e8af5982a10d1cc2c37b7df5e6506d839daa5d5e250953d7b5",
        "url": "https://github.com/pytorch/pytorch/releases/download/v2.8.0/pytorch-v2.8.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Force-usage-of-python-3-and-error-without-numpy.patch",
          "patches/0002-Help-find-numpy.patch",
          "patches/0004-Allow-overriding-CUDA-related-paths.patch",
          "patches/0005-Use-BLAS_USE_CBLAS_DOT-for-OpenBLAS-builds.patch",
          "patches/0006-fix-issue-142484.patch",
          "patches/0007-Fix-FindOpenBLAS.patch",
          "patches/0008-point-include-paths-to-Conda-prefix-include-dir.patch",
          "patches/0009-Add-conda-prefix-to-inductor-include-paths.patch",
          "patches/0010-make-ATEN_INCLUDE_DIR-relative-to-TORCH_INSTALL_PREF.patch",
          "patches/0012-avoid-deprecated-find_package-CUDA-in-caffe2-CMake-m.patch",
          "patches/0013-Fix-CUPTI-lookup-to-include-target-directory.patch",
          "patches/0014-skip-test_norm_matrix_degenerate_shapes-on-numpy-2.3.patch",
          "patches/0015-Define-PY_SSIZE_T_CLEAN-before-include-Python.h.patch",
          "patches_submodules/tensorpipe/0001-switch-away-from-find_package-CUDA.patch"
        ],
        "sha256": "c70a2c9488f6f6e8af5982a10d1cc2c37b7df5e6506d839daa5d5e250953d7b5",
        "url": "https://github.com/pytorch/pytorch/releases/download/v2.8.0/pytorch-v2.8.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Force-usage-of-python-3-and-error-without-numpy.patch",
          "patches/0002-Help-find-numpy.patch",
          "patches/0004-Allow-overriding-CUDA-related-paths.patch",
          "patches/0005-Use-BLAS_USE_CBLAS_DOT-for-OpenBLAS-builds.patch",
          "patches/0006-fix-issue-142484.patch",
          "patches/0007-Fix-FindOpenBLAS.patch",
          "patches/0008-point-include-paths-to-Conda-prefix-include-dir.patch",
          "patches/0009-Add-conda-prefix-to-inductor-include-paths.patch",
          "patches/0010-make-ATEN_INCLUDE_DIR-relative-to-TORCH_INSTALL_PREF.patch",
          "patches/0011-remove-DESTINATION-lib-from-CMake-install-TARGETS-di.patch",
          "patches/0012-avoid-deprecated-find_package-CUDA-in-caffe2-CMake-m.patch",
          "patches/0013-Fix-CUPTI-lookup-to-include-target-directory.patch",
          "patches/0014-skip-test_norm_matrix_degenerate_shapes-on-numpy-2.3.patch",
          "patches/0015-Define-PY_SSIZE_T_CLEAN-before-include-Python.h.patch",
          "patches_submodules/fbgemm/0001-remove-DESTINATION-lib-from-CMake-install-directives.patch",
          "patches_submodules/tensorpipe/0001-switch-away-from-find_package-CUDA.patch"
        ],
        "sha256": "c70a2c9488f6f6e8af5982a10d1cc2c37b7df5e6506d839daa5d5e250953d7b5",
        "url": "https://github.com/pytorch/pytorch/releases/download/v2.8.0/pytorch-v2.8.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Force-usage-of-python-3-and-error-without-numpy.patch",
          "patches/0002-Help-find-numpy.patch",
          "patches/0004-Allow-overriding-CUDA-related-paths.patch",
          "patches/0005-Use-BLAS_USE_CBLAS_DOT-for-OpenBLAS-builds.patch",
          "patches/0006-fix-issue-142484.patch",
          "patches/0007-Fix-FindOpenBLAS.patch",
          "patches/0008-point-include-paths-to-Conda-prefix-include-dir.patch",
          "patches/0009-Add-conda-prefix-to-inductor-include-paths.patch",
          "patches/0010-make-ATEN_INCLUDE_DIR-relative-to-TORCH_INSTALL_PREF.patch",
          "patches/0011-remove-DESTINATION-lib-from-CMake-install-TARGETS-di.patch",
          "patches/0012-avoid-deprecated-find_package-CUDA-in-caffe2-CMake-m.patch",
          "patches/0013-Fix-CUPTI-lookup-to-include-target-directory.patch",
          "patches/0014-skip-test_norm_matrix_degenerate_shapes-on-numpy-2.3.patch",
          "patches/0015-Define-PY_SSIZE_T_CLEAN-before-include-Python.h.patch",
          "patches_submodules/fbgemm/0001-remove-DESTINATION-lib-from-CMake-install-directives.patch",
          "patches_submodules/tensorpipe/0001-switch-away-from-find_package-CUDA.patch"
        ],
        "sha256": "c70a2c9488f6f6e8af5982a10d1cc2c37b7df5e6506d839daa5d5e250953d7b5",
        "url": "https://github.com/pytorch/pytorch/releases/download/v2.8.0/pytorch-v2.8.0.tar.gz"
      }
    ],
    "test": {
      "commands": [
        "test -f $PREFIX/lib/libc10.so",
        "test -f $PREFIX/lib/libshm.so",
        "test -f $PREFIX/lib/libtorch.so",
        "test -f $PREFIX/lib/libtorch_cpu.so",
        "test -f $PREFIX/lib/libtorch_global_deps.so",
        "test -f $PREFIX/lib/libtorch_cuda_linalg.so",
        "test -f $PREFIX/lib/libc10_cuda.so",
        "test -f $PREFIX/lib/libcaffe2_nvrtc.so",
        "test -f $PREFIX/lib/libtorch_cuda.so",
        "test -f $PREFIX/share/cmake/Torch/TorchConfig.cmake",
        "cd cmake_test",
        "cmake -GNinja -DCMAKE_CXX_STANDARD=17 $CMAKE_ARGS .",
        "test -f $PREFIX/lib/libc10.dylib",
        "test -f $PREFIX/lib/libshm.dylib",
        "test -f $PREFIX/lib/libtorch.dylib",
        "test -f $PREFIX/lib/libtorch_cpu.dylib",
        "test -f $PREFIX/lib/libtorch_global_deps.dylib",
        "if not exist %LIBRARY_BIN%\\c10.dll exit 1",
        "if not exist %LIBRARY_LIB%\\c10.lib exit 1",
        "if not exist %LIBRARY_BIN%\\shm.dll exit 1",
        "if not exist %LIBRARY_LIB%\\shm.lib exit 1",
        "if not exist %LIBRARY_BIN%\\torch.dll exit 1",
        "if not exist %LIBRARY_LIB%\\torch.lib exit 1",
        "if not exist %LIBRARY_BIN%\\torch_cpu.dll exit 1",
        "if not exist %LIBRARY_LIB%\\torch_cpu.lib exit 1",
        "if not exist %LIBRARY_BIN%\\torch_global_deps.dll exit 1",
        "if not exist %LIBRARY_BIN%\\c10_cuda.dll exit 1",
        "if not exist %LIBRARY_LIB%\\c10_cuda.lib exit 1",
        "if not exist %LIBRARY_BIN%\\caffe2_nvrtc.dll exit 1",
        "if not exist %LIBRARY_LIB%\\caffe2_nvrtc.lib exit 1",
        "if not exist %LIBRARY_BIN%\\torch_cuda.dll exit 1",
        "if not exist %LIBRARY_LIB%\\torch_cuda.lib exit 1",
        "if not exist %LIBRARY_BIN%\\asmjit.dll exit 1",
        "if not exist %LIBRARY_LIB%\\asmjit.lib exit 1",
        "if not exist %LIBRARY_BIN%\\fbgemm.dll exit 1",
        "if not exist %LIBRARY_LIB%\\fbgemm.lib exit 1",
        "if not exist %LIBRARY_PREFIX%\\share\\cmake\\Torch\\TorchConfig.cmake exit 1",
        "cmake -GNinja -DCMAKE_CXX_STANDARD=17 %CMAKE_ARGS% ."
      ],
      "files": [
        "cmake_test/"
      ],
      "requires": [
        "cxx_compiler_stub",
        "cuda_compiler_stub",
        "cuda-nvrtc-dev",
        "nvtx-c",
        "cmake",
        "ninja",
        "pkg-config"
      ]
    }
  },
  "name": "libtorch",
  "osx_64_meta_yaml": {
    "about": {
      "description": "PyTorch is a Python package that provides two high-level features:\n  - Tensor computation (like NumPy) with strong GPU acceleration\n  - Deep neural networks built on a tape-based autograd system\nYou can reuse your favorite Python packages such as NumPy, SciPy, and Cython to extend PyTorch when needed.\n",
      "dev_url": "https://github.com/pytorch/pytorch",
      "doc_url": "https://pytorch.org/docs/",
      "home": "https://pytorch.org/",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": [
        "LICENSE",
        "NOTICE",
        "third_party/CMake/Copyright.txt"
      ],
      "summary": "PyTorch is an optimized tensor library for deep learning using GPUs and CPUs."
    },
    "build": {
      "detect_binary_files_with_prefix": false,
      "ignore_run_exports": [
        "libmagma_sparse"
      ],
      "ignore_run_exports_from": null,
      "number": "101",
      "run_exports": [
        "libtorch"
      ],
      "string": "cpu_mkl_h1234567_101"
    },
    "extra": {
      "feedstock-name": "pytorch-cpu",
      "recipe-maintainers": [
        "baszalmstra",
        "benjaminrwilson",
        "beckermr",
        "h-vetinari",
        "hmaarrfk",
        "jeongseok-meta",
        "mgorny",
        "sodre",
        "Tobias-Fischer"
      ]
    },
    "outputs": [
      {
        "name": "libtorch"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "ignore_run_exports": [
            "libmagma_sparse"
          ],
          "run_exports": [
            "pytorch",
            "libtorch"
          ],
          "string": "cpu_generic_py310_h1234567_1"
        },
        "name": "pytorch",
        "requirements": {
          "build": [
            "python",
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "llvm-openmp",
            "cmake",
            "ninja",
            "libprotobuf",
            "protobuf"
          ],
          "host": [
            "libtorch",
            "python",
            "numpy",
            "pip",
            "setuptools",
            "pyyaml",
            "requests",
            "six",
            "libcblas",
            "liblapack",
            "llvm-openmp",
            "libabseil",
            "libprotobuf",
            "pybind11",
            "pybind11-abi",
            "eigen",
            "sleef",
            "libuv",
            "pkg-config",
            "typing_extensions",
            "zlib"
          ],
          "run": [
            "libtorch 2.8.0.* *_1",
            "llvm-openmp",
            "nomkl",
            "python",
            "filelock",
            "fsspec",
            "jinja2",
            "networkx",
            "optree >=0.13.0",
            "pybind11",
            "setuptools",
            "sympy >=1.13.3",
            "typing_extensions >=4.10.0"
          ],
          "run_constrained": [
            "pytorch-cpu 2.8.0",
            "pytorch-gpu <0.0a0"
          ]
        },
        "script": "build.sh"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cpu_generic_py310_h1234567_1"
        },
        "name": "pytorch-tests",
        "requirements": {
          "host": [
            "python"
          ],
          "run": [
            "pytorch 2.8.0 cpu_generic_py310*1"
          ]
        },
        "test": {
          "commands": [
            "pip check",
            "python -c \"import torch; print(torch.__version__)\"",
            "python -c \"import torch; assert torch.backends.mkldnn.m.is_available()\"",
            "python -c \"import torch; torch.tensor(1).to('cpu').numpy(); print('numpy support enabled!!!')\"",
            "python -c \"import torch; import numpy\"",
            "python -c \"import numpy; import torch\"",
            "python -c \"import numpy as np;import torch;x = torch.tensor([2], dtype=torch.complex128);assert torch.dot(x, x).real == 4.0\"",
            "python -c \"import torch; assert torch.distributed.is_available()\"",
            "test -f $PREFIX/lib/libtorch_python${SHLIB_EXT}",
            "export OMP_NUM_THREADS=4",
            "pytest -n 1 test/test_autograd.py test/test_autograd_fallback.py test/test_custom_ops.py test/test_linalg.py test/test_mkldnn.py test/test_modules.py test/test_nn.py test/test_torch.py test/test_xnnpack_integration.py test/inductor/test_torchinductor.py -k \"not ((TestTorch and test_print) or test_1_sized_with_0_strided_cpu_float32 or test_batchnorm_nhwc_cpu or test_layer_norm_backwards_eps or test_pynode_destruction_deadlock or (TestLinalgCPU and test_cholesky_cpu_float32) or (TestLinalgCPU and test_pca_lowrank_cpu) or (TestLinalgCPU and test_svd_lowrank_cpu) or (TestMkldnnCPU and test_lstm_cpu) or test_eigh_lwork_lapack or test_gradgrad_nn_LSTM or test_grad_nn_Transformer or test_inverse_errors_large or (TestXNNPACKConv1dTransformPass and test_conv1d_basic) or test_addbmm or test_baddbmm or test_bmm or illcondition_matrix_input_should_not_crash_cpu or (TestAutograd and test_profiler_seq_nr) or (TestAutograd and test_profiler_propagation) or test_mutable_custom_op_fixed_layout or test_BCELoss_weights_no_reduce_cuda or test_ctc_loss_cudnn_tensor_cuda  or (TestTorch and test_index_add_correctness) or test_sdpa_inference_mode_aot_compile or (TestNN and test_grid_sample) or test_cublas_config_nondeterministic_alert_cuda or test_cross_entropy_loss_2d_out_of_bounds_class or test_indirect_device_assert or test_reentrant_parent_error_on_cpu_cuda or (GPUTests and test_scatter_reduce2) or test_ck_blas_library_cpu or test_matmul_offline_tunableop_cuda_float16 or test_Conv3d_1x1x1_no_bias_cuda or test_isinf_cuda or test_donated_buffer_inplace_gpt or test_linear_dynamic_maxautotune_cuda or (test_gradgrad_nn_Transformer and _cuda_) or test_avg_pool3d_backward2 or (TestLinalgCPU and test_inverse_errors_large_cpu) or test_gather_scatter_cpu or test_index_put2_cpu  or test_base_does_not_require_grad_mode_nothing or test_base_does_not_require_grad_mode_warn or test_composite_registered_to_cpu_mode_nothing or (TestMkldnnCPU and test_batch_norm_2d_cpu) or (TestNN and test_Conv1d_dilated) or (TestNN and test_Conv1d_pad_same_dilated) or (TestNN and test_Conv2d_pad_same_dilated) or (TestNN and test_Conv2d_padding) or (TestNN and test_Conv2d_strided) or (TestNN and test_Conv3d_dilated) or (TestNN and test_Conv3d_dilated_strided) or (TestNN and test_Conv3d_pad_same_dilated) or (TestNN and test_Conv3d_stride) or (TestNN and test_Conv3d_stride_padding) or (TestTorch and test_tensor_cycle_via_slots))\" -m \"not hypothesis\" --durations=50 --disable-warnings",
            "test ! -f $SP_DIR/functorch/__pycache__/__init__.cpython-313.pyc",
            "cd cmake_test",
            "cmake -GNinja -DCMAKE_CXX_STANDARD=17 -DWITH_TORCH_PYTHON=ON $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/"
          ],
          "imports": [
            "torch",
            "torch._C"
          ],
          "requires": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "ninja",
            "boto3",
            "hypothesis",
            "pytest",
            "tabulate",
            "pydot",
            "pip",
            "expecttest",
            "xmlrunner",
            "pyyaml",
            "pytest-flakefinder",
            "pytest-rerunfailures",
            "pytest-xdist",
            "cmake",
            "pybind11"
          ],
          "source_files": [
            "test",
            "tools"
          ]
        }
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cpu_generic_py310_h1234567_1"
        },
        "name": "pytorch-gpu",
        "requirements": {
          "run": [
            "pytorch"
          ]
        },
        "test": {
          "imports": [
            "torch"
          ]
        }
      },
      {
        "name": "libtorch"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "ignore_run_exports": [
            "libmagma_sparse"
          ],
          "run_exports": [
            "pytorch",
            "libtorch"
          ],
          "string": "cpu_generic_py311_h1234567_1"
        },
        "name": "pytorch",
        "requirements": {
          "build": [
            "python",
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "llvm-openmp",
            "cmake",
            "ninja",
            "libprotobuf",
            "protobuf"
          ],
          "host": [
            "libtorch",
            "python",
            "numpy",
            "pip",
            "setuptools",
            "pyyaml",
            "requests",
            "six",
            "libcblas",
            "liblapack",
            "llvm-openmp",
            "libabseil",
            "libprotobuf",
            "pybind11",
            "pybind11-abi",
            "eigen",
            "sleef",
            "libuv",
            "pkg-config",
            "typing_extensions",
            "zlib"
          ],
          "run": [
            "libtorch 2.8.0.* *_1",
            "llvm-openmp",
            "nomkl",
            "python",
            "filelock",
            "fsspec",
            "jinja2",
            "networkx",
            "optree >=0.13.0",
            "pybind11",
            "setuptools",
            "sympy >=1.13.3",
            "typing_extensions >=4.10.0"
          ],
          "run_constrained": [
            "pytorch-cpu 2.8.0",
            "pytorch-gpu <0.0a0"
          ]
        },
        "script": "build.sh"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cpu_generic_py311_h1234567_1"
        },
        "name": "pytorch-tests",
        "requirements": {
          "host": [
            "python"
          ],
          "run": [
            "pytorch 2.8.0 cpu_generic_py311*1"
          ]
        },
        "test": {
          "commands": [
            "pip check",
            "python -c \"import torch; print(torch.__version__)\"",
            "python -c \"import torch; assert torch.backends.mkldnn.m.is_available()\"",
            "python -c \"import torch; torch.tensor(1).to('cpu').numpy(); print('numpy support enabled!!!')\"",
            "python -c \"import torch; import numpy\"",
            "python -c \"import numpy; import torch\"",
            "python -c \"import numpy as np;import torch;x = torch.tensor([2], dtype=torch.complex128);assert torch.dot(x, x).real == 4.0\"",
            "python -c \"import torch; assert torch.distributed.is_available()\"",
            "test -f $PREFIX/lib/libtorch_python${SHLIB_EXT}",
            "export OMP_NUM_THREADS=4",
            "pytest -n 1 test/test_autograd.py test/test_autograd_fallback.py test/test_custom_ops.py test/test_linalg.py test/test_mkldnn.py test/test_modules.py test/test_nn.py test/test_torch.py test/test_xnnpack_integration.py test/inductor/test_torchinductor.py -k \"not ((TestTorch and test_print) or test_1_sized_with_0_strided_cpu_float32 or test_batchnorm_nhwc_cpu or test_layer_norm_backwards_eps or test_pynode_destruction_deadlock or (TestLinalgCPU and test_cholesky_cpu_float32) or (TestLinalgCPU and test_pca_lowrank_cpu) or (TestLinalgCPU and test_svd_lowrank_cpu) or (TestMkldnnCPU and test_lstm_cpu) or test_eigh_lwork_lapack or test_gradgrad_nn_LSTM or test_grad_nn_Transformer or test_inverse_errors_large or (TestXNNPACKConv1dTransformPass and test_conv1d_basic) or test_addbmm or test_baddbmm or test_bmm or illcondition_matrix_input_should_not_crash_cpu or (TestAutograd and test_profiler_seq_nr) or (TestAutograd and test_profiler_propagation) or test_mutable_custom_op_fixed_layout or test_BCELoss_weights_no_reduce_cuda or test_ctc_loss_cudnn_tensor_cuda  or (TestTorch and test_index_add_correctness) or test_sdpa_inference_mode_aot_compile or (TestNN and test_grid_sample) or test_cublas_config_nondeterministic_alert_cuda or test_cross_entropy_loss_2d_out_of_bounds_class or test_indirect_device_assert or test_reentrant_parent_error_on_cpu_cuda or (GPUTests and test_scatter_reduce2) or test_ck_blas_library_cpu or test_matmul_offline_tunableop_cuda_float16 or test_Conv3d_1x1x1_no_bias_cuda or test_isinf_cuda or test_donated_buffer_inplace_gpt or test_linear_dynamic_maxautotune_cuda or (test_gradgrad_nn_Transformer and _cuda_) or test_avg_pool3d_backward2 or (TestLinalgCPU and test_inverse_errors_large_cpu) or test_gather_scatter_cpu or test_index_put2_cpu  or test_base_does_not_require_grad_mode_nothing or test_base_does_not_require_grad_mode_warn or test_composite_registered_to_cpu_mode_nothing or (TestMkldnnCPU and test_batch_norm_2d_cpu) or (TestNN and test_Conv1d_dilated) or (TestNN and test_Conv1d_pad_same_dilated) or (TestNN and test_Conv2d_pad_same_dilated) or (TestNN and test_Conv2d_padding) or (TestNN and test_Conv2d_strided) or (TestNN and test_Conv3d_dilated) or (TestNN and test_Conv3d_dilated_strided) or (TestNN and test_Conv3d_pad_same_dilated) or (TestNN and test_Conv3d_stride) or (TestNN and test_Conv3d_stride_padding) or (TestTorch and test_tensor_cycle_via_slots))\" -m \"not hypothesis\" --durations=50 --disable-warnings",
            "test ! -f $SP_DIR/functorch/__pycache__/__init__.cpython-313.pyc",
            "cd cmake_test",
            "cmake -GNinja -DCMAKE_CXX_STANDARD=17 -DWITH_TORCH_PYTHON=ON $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/"
          ],
          "imports": [
            "torch",
            "torch._C"
          ],
          "requires": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "ninja",
            "boto3",
            "hypothesis",
            "pytest",
            "tabulate",
            "pydot",
            "pip",
            "expecttest",
            "xmlrunner",
            "pyyaml",
            "pytest-flakefinder",
            "pytest-rerunfailures",
            "pytest-xdist",
            "cmake",
            "pybind11"
          ],
          "source_files": [
            "test",
            "tools"
          ]
        }
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cpu_generic_py311_h1234567_1"
        },
        "name": "pytorch-gpu",
        "requirements": {
          "run": [
            "pytorch"
          ]
        },
        "test": {
          "imports": [
            "torch"
          ]
        }
      },
      {
        "name": "libtorch"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "ignore_run_exports": [
            "libmagma_sparse"
          ],
          "run_exports": [
            "pytorch",
            "libtorch"
          ],
          "string": "cpu_generic_py312_h1234567_1"
        },
        "name": "pytorch",
        "requirements": {
          "build": [
            "python",
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "llvm-openmp",
            "cmake",
            "ninja",
            "libprotobuf",
            "protobuf"
          ],
          "host": [
            "libtorch",
            "python",
            "numpy",
            "pip",
            "setuptools",
            "pyyaml",
            "requests",
            "six",
            "libcblas",
            "liblapack",
            "llvm-openmp",
            "libabseil",
            "libprotobuf",
            "pybind11",
            "pybind11-abi",
            "eigen",
            "sleef",
            "libuv",
            "pkg-config",
            "typing_extensions",
            "zlib"
          ],
          "run": [
            "libtorch 2.8.0.* *_1",
            "llvm-openmp",
            "nomkl",
            "python",
            "filelock",
            "fsspec",
            "jinja2",
            "networkx",
            "optree >=0.13.0",
            "pybind11",
            "setuptools",
            "sympy >=1.13.3",
            "typing_extensions >=4.10.0"
          ],
          "run_constrained": [
            "pytorch-cpu 2.8.0",
            "pytorch-gpu <0.0a0"
          ]
        },
        "script": "build.sh"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cpu_generic_py312_h1234567_1"
        },
        "name": "pytorch-tests",
        "requirements": {
          "host": [
            "python"
          ],
          "run": [
            "pytorch 2.8.0 cpu_generic_py312*1"
          ]
        },
        "test": {
          "commands": [
            "pip check",
            "python -c \"import torch; print(torch.__version__)\"",
            "python -c \"import torch; assert torch.backends.mkldnn.m.is_available()\"",
            "python -c \"import torch; torch.tensor(1).to('cpu').numpy(); print('numpy support enabled!!!')\"",
            "python -c \"import torch; import numpy\"",
            "python -c \"import numpy; import torch\"",
            "python -c \"import numpy as np;import torch;x = torch.tensor([2], dtype=torch.complex128);assert torch.dot(x, x).real == 4.0\"",
            "python -c \"import torch; assert torch.distributed.is_available()\"",
            "test -f $PREFIX/lib/libtorch_python${SHLIB_EXT}",
            "export OMP_NUM_THREADS=4",
            "pytest -n 1 test/test_autograd.py test/test_autograd_fallback.py test/test_custom_ops.py test/test_linalg.py test/test_mkldnn.py test/test_modules.py test/test_nn.py test/test_torch.py test/test_xnnpack_integration.py test/inductor/test_torchinductor.py -k \"not ((TestTorch and test_print) or test_1_sized_with_0_strided_cpu_float32 or test_batchnorm_nhwc_cpu or test_layer_norm_backwards_eps or test_pynode_destruction_deadlock or (TestLinalgCPU and test_cholesky_cpu_float32) or (TestLinalgCPU and test_pca_lowrank_cpu) or (TestLinalgCPU and test_svd_lowrank_cpu) or (TestMkldnnCPU and test_lstm_cpu) or test_eigh_lwork_lapack or test_gradgrad_nn_LSTM or test_grad_nn_Transformer or test_inverse_errors_large or (TestXNNPACKConv1dTransformPass and test_conv1d_basic) or test_addbmm or test_baddbmm or test_bmm or illcondition_matrix_input_should_not_crash_cpu or (TestAutograd and test_profiler_seq_nr) or (TestAutograd and test_profiler_propagation) or test_mutable_custom_op_fixed_layout or test_BCELoss_weights_no_reduce_cuda or test_ctc_loss_cudnn_tensor_cuda  or (TestTorch and test_index_add_correctness) or test_sdpa_inference_mode_aot_compile or (TestNN and test_grid_sample) or test_cublas_config_nondeterministic_alert_cuda or test_cross_entropy_loss_2d_out_of_bounds_class or test_indirect_device_assert or test_reentrant_parent_error_on_cpu_cuda or (GPUTests and test_scatter_reduce2) or test_ck_blas_library_cpu or test_matmul_offline_tunableop_cuda_float16 or test_Conv3d_1x1x1_no_bias_cuda or test_isinf_cuda or test_donated_buffer_inplace_gpt or test_linear_dynamic_maxautotune_cuda or (test_gradgrad_nn_Transformer and _cuda_) or test_avg_pool3d_backward2 or (TestLinalgCPU and test_inverse_errors_large_cpu) or test_gather_scatter_cpu or test_index_put2_cpu  or test_base_does_not_require_grad_mode_nothing or test_base_does_not_require_grad_mode_warn or test_composite_registered_to_cpu_mode_nothing or (TestMkldnnCPU and test_batch_norm_2d_cpu) or (TestNN and test_Conv1d_dilated) or (TestNN and test_Conv1d_pad_same_dilated) or (TestNN and test_Conv2d_pad_same_dilated) or (TestNN and test_Conv2d_padding) or (TestNN and test_Conv2d_strided) or (TestNN and test_Conv3d_dilated) or (TestNN and test_Conv3d_dilated_strided) or (TestNN and test_Conv3d_pad_same_dilated) or (TestNN and test_Conv3d_stride) or (TestNN and test_Conv3d_stride_padding) or (TestTorch and test_tensor_cycle_via_slots))\" -m \"not hypothesis\" --durations=50 --disable-warnings",
            "test ! -f $SP_DIR/functorch/__pycache__/__init__.cpython-313.pyc",
            "cd cmake_test",
            "cmake -GNinja -DCMAKE_CXX_STANDARD=17 -DWITH_TORCH_PYTHON=ON $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/"
          ],
          "imports": [
            "torch",
            "torch._C"
          ],
          "requires": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "ninja",
            "boto3",
            "hypothesis",
            "pytest",
            "tabulate",
            "pydot",
            "pip",
            "expecttest",
            "xmlrunner",
            "pyyaml",
            "pytest-flakefinder",
            "pytest-rerunfailures",
            "pytest-xdist",
            "cmake",
            "pybind11"
          ],
          "source_files": [
            "test",
            "tools"
          ]
        }
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cpu_generic_py312_h1234567_1"
        },
        "name": "pytorch-gpu",
        "requirements": {
          "run": [
            "pytorch"
          ]
        },
        "test": {
          "imports": [
            "torch"
          ]
        }
      },
      {
        "name": "libtorch"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "ignore_run_exports": [
            "libmagma_sparse"
          ],
          "run_exports": [
            "pytorch",
            "libtorch"
          ],
          "string": "cpu_generic_py313_h1234567_1"
        },
        "name": "pytorch",
        "requirements": {
          "build": [
            "python",
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "llvm-openmp",
            "cmake",
            "ninja",
            "libprotobuf",
            "protobuf"
          ],
          "host": [
            "libtorch",
            "python",
            "numpy",
            "pip",
            "setuptools",
            "pyyaml",
            "requests",
            "six",
            "libcblas",
            "liblapack",
            "llvm-openmp",
            "libabseil",
            "libprotobuf",
            "pybind11",
            "pybind11-abi",
            "eigen",
            "sleef",
            "libuv",
            "pkg-config",
            "typing_extensions",
            "zlib"
          ],
          "run": [
            "libtorch 2.8.0.* *_1",
            "llvm-openmp",
            "nomkl",
            "python",
            "filelock",
            "fsspec",
            "jinja2",
            "networkx",
            "optree >=0.13.0",
            "pybind11",
            "setuptools",
            "sympy >=1.13.3",
            "typing_extensions >=4.10.0"
          ],
          "run_constrained": [
            "pytorch-cpu 2.8.0",
            "pytorch-gpu <0.0a0"
          ]
        },
        "script": "build.sh"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cpu_generic_py313_h1234567_1"
        },
        "name": "pytorch-tests",
        "requirements": {
          "host": [
            "python"
          ],
          "run": [
            "pytorch 2.8.0 cpu_generic_py313*1"
          ]
        },
        "test": {
          "commands": [
            "pip check",
            "python -c \"import torch; print(torch.__version__)\"",
            "python -c \"import torch; assert torch.backends.mkldnn.m.is_available()\"",
            "python -c \"import torch; torch.tensor(1).to('cpu').numpy(); print('numpy support enabled!!!')\"",
            "python -c \"import torch; import numpy\"",
            "python -c \"import numpy; import torch\"",
            "python -c \"import numpy as np;import torch;x = torch.tensor([2], dtype=torch.complex128);assert torch.dot(x, x).real == 4.0\"",
            "python -c \"import torch; assert torch.distributed.is_available()\"",
            "test -f $PREFIX/lib/libtorch_python${SHLIB_EXT}",
            "export OMP_NUM_THREADS=4",
            "pytest -n 1 test/test_autograd.py test/test_autograd_fallback.py test/test_custom_ops.py test/test_linalg.py test/test_mkldnn.py test/test_modules.py test/test_nn.py test/test_torch.py test/test_xnnpack_integration.py test/inductor/test_torchinductor.py -k \"not ((TestTorch and test_print) or test_1_sized_with_0_strided_cpu_float32 or test_batchnorm_nhwc_cpu or test_layer_norm_backwards_eps or test_pynode_destruction_deadlock or (TestLinalgCPU and test_cholesky_cpu_float32) or (TestLinalgCPU and test_pca_lowrank_cpu) or (TestLinalgCPU and test_svd_lowrank_cpu) or (TestMkldnnCPU and test_lstm_cpu) or test_eigh_lwork_lapack or test_gradgrad_nn_LSTM or test_grad_nn_Transformer or test_inverse_errors_large or (TestXNNPACKConv1dTransformPass and test_conv1d_basic) or test_addbmm or test_baddbmm or test_bmm or illcondition_matrix_input_should_not_crash_cpu or (TestAutograd and test_profiler_seq_nr) or (TestAutograd and test_profiler_propagation) or test_mutable_custom_op_fixed_layout or test_BCELoss_weights_no_reduce_cuda or test_ctc_loss_cudnn_tensor_cuda  or (TestTorch and test_index_add_correctness) or test_sdpa_inference_mode_aot_compile or (TestNN and test_grid_sample) or test_cublas_config_nondeterministic_alert_cuda or test_cross_entropy_loss_2d_out_of_bounds_class or test_indirect_device_assert or test_reentrant_parent_error_on_cpu_cuda or (GPUTests and test_scatter_reduce2) or test_ck_blas_library_cpu or test_matmul_offline_tunableop_cuda_float16 or test_Conv3d_1x1x1_no_bias_cuda or test_isinf_cuda or test_donated_buffer_inplace_gpt or test_linear_dynamic_maxautotune_cuda or (test_gradgrad_nn_Transformer and _cuda_) or test_avg_pool3d_backward2 or (TestLinalgCPU and test_inverse_errors_large_cpu) or test_gather_scatter_cpu or test_index_put2_cpu  or test_base_does_not_require_grad_mode_nothing or test_base_does_not_require_grad_mode_warn or test_composite_registered_to_cpu_mode_nothing or (TestMkldnnCPU and test_batch_norm_2d_cpu) or (TestNN and test_Conv1d_dilated) or (TestNN and test_Conv1d_pad_same_dilated) or (TestNN and test_Conv2d_pad_same_dilated) or (TestNN and test_Conv2d_padding) or (TestNN and test_Conv2d_strided) or (TestNN and test_Conv3d_dilated) or (TestNN and test_Conv3d_dilated_strided) or (TestNN and test_Conv3d_pad_same_dilated) or (TestNN and test_Conv3d_stride) or (TestNN and test_Conv3d_stride_padding) or (TestTorch and test_tensor_cycle_via_slots))\" -m \"not hypothesis\" --durations=50 --disable-warnings",
            "test ! -f $SP_DIR/functorch/__pycache__/__init__.cpython-313.pyc",
            "cd cmake_test",
            "cmake -GNinja -DCMAKE_CXX_STANDARD=17 -DWITH_TORCH_PYTHON=ON $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/"
          ],
          "imports": [
            "torch",
            "torch._C"
          ],
          "requires": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "ninja",
            "boto3",
            "hypothesis",
            "pytest",
            "tabulate",
            "pydot",
            "pip",
            "expecttest",
            "xmlrunner",
            "pyyaml",
            "pytest-flakefinder",
            "pytest-rerunfailures",
            "pytest-xdist",
            "cmake",
            "pybind11"
          ],
          "source_files": [
            "test",
            "tools"
          ]
        }
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cpu_generic_py313_h1234567_1"
        },
        "name": "pytorch-gpu",
        "requirements": {
          "run": [
            "pytorch"
          ]
        },
        "test": {
          "imports": [
            "torch"
          ]
        }
      },
      {
        "name": "libtorch"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "ignore_run_exports": [
            "libmagma_sparse"
          ],
          "run_exports": [
            "pytorch",
            "libtorch"
          ],
          "string": "cpu_mkl_py310_h1234567_101"
        },
        "name": "pytorch",
        "requirements": {
          "build": [
            "python",
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "llvm-openmp",
            "cmake",
            "ninja",
            "libprotobuf",
            "protobuf"
          ],
          "host": [
            "libtorch",
            "python",
            "numpy",
            "pip",
            "setuptools",
            "pyyaml",
            "requests",
            "six",
            "mkl-devel <2025",
            "libcblas * *_mkl",
            "llvm-openmp",
            "libabseil",
            "libprotobuf",
            "pybind11",
            "pybind11-abi",
            "eigen",
            "sleef",
            "libuv",
            "pkg-config",
            "typing_extensions",
            "zlib"
          ],
          "run": [
            "libtorch 2.8.0.* *_101",
            "llvm-openmp",
            "libblas * *mkl",
            "python",
            "filelock",
            "fsspec",
            "jinja2",
            "networkx",
            "optree >=0.13.0",
            "pybind11",
            "setuptools",
            "sympy >=1.13.3",
            "typing_extensions >=4.10.0"
          ],
          "run_constrained": [
            "pytorch-cpu 2.8.0",
            "pytorch-gpu <0.0a0"
          ]
        },
        "script": "build.sh"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cpu_mkl_py310_h1234567_101"
        },
        "name": "pytorch-tests",
        "requirements": {
          "host": [
            "python"
          ],
          "run": [
            "pytorch 2.8.0 cpu_mkl_py310*101"
          ]
        },
        "test": {
          "commands": [
            "pip check",
            "python -c \"import torch; print(torch.__version__)\"",
            "python -c \"import torch; assert torch.backends.mkldnn.m.is_available()\"",
            "python -c \"import torch; torch.tensor(1).to('cpu').numpy(); print('numpy support enabled!!!')\"",
            "python -c \"import torch; import numpy\"",
            "python -c \"import numpy; import torch\"",
            "python -c \"import numpy as np;import torch;x = torch.tensor([2], dtype=torch.complex128);assert torch.dot(x, x).real == 4.0\"",
            "python -c \"import torch; assert torch.distributed.is_available()\"",
            "test -f $PREFIX/lib/libtorch_python${SHLIB_EXT}",
            "export OMP_NUM_THREADS=4",
            "pytest -n 1 test/test_autograd.py test/test_autograd_fallback.py test/test_custom_ops.py test/test_linalg.py test/test_mkldnn.py test/test_modules.py test/test_nn.py test/test_torch.py test/test_xnnpack_integration.py test/inductor/test_torchinductor.py -k \"not ((TestTorch and test_print) or test_1_sized_with_0_strided_cpu_float32 or test_batchnorm_nhwc_cpu or test_layer_norm_backwards_eps or test_pynode_destruction_deadlock or (TestLinalgCPU and test_cholesky_cpu_float32) or (TestLinalgCPU and test_pca_lowrank_cpu) or (TestLinalgCPU and test_svd_lowrank_cpu) or (TestMkldnnCPU and test_lstm_cpu) or test_eigh_lwork_lapack or test_gradgrad_nn_LSTM or test_grad_nn_Transformer or test_inverse_errors_large or (TestXNNPACKConv1dTransformPass and test_conv1d_basic) or test_addbmm or test_baddbmm or test_bmm or illcondition_matrix_input_should_not_crash_cpu or (TestAutograd and test_profiler_seq_nr) or (TestAutograd and test_profiler_propagation) or test_mutable_custom_op_fixed_layout or test_BCELoss_weights_no_reduce_cuda or test_ctc_loss_cudnn_tensor_cuda  or (TestTorch and test_index_add_correctness) or test_sdpa_inference_mode_aot_compile or (TestNN and test_grid_sample) or test_cublas_config_nondeterministic_alert_cuda or test_cross_entropy_loss_2d_out_of_bounds_class or test_indirect_device_assert or test_reentrant_parent_error_on_cpu_cuda or (GPUTests and test_scatter_reduce2) or test_ck_blas_library_cpu or test_matmul_offline_tunableop_cuda_float16 or test_Conv3d_1x1x1_no_bias_cuda or test_isinf_cuda or test_donated_buffer_inplace_gpt or test_linear_dynamic_maxautotune_cuda or (test_gradgrad_nn_Transformer and _cuda_) or test_avg_pool3d_backward2 or (TestLinalgCPU and test_inverse_errors_large_cpu) or test_gather_scatter_cpu or test_index_put2_cpu  or test_base_does_not_require_grad_mode_nothing or test_base_does_not_require_grad_mode_warn or test_composite_registered_to_cpu_mode_nothing or (TestMkldnnCPU and test_batch_norm_2d_cpu) or (TestNN and test_Conv1d_dilated) or (TestNN and test_Conv1d_pad_same_dilated) or (TestNN and test_Conv2d_pad_same_dilated) or (TestNN and test_Conv2d_padding) or (TestNN and test_Conv2d_strided) or (TestNN and test_Conv3d_dilated) or (TestNN and test_Conv3d_dilated_strided) or (TestNN and test_Conv3d_pad_same_dilated) or (TestNN and test_Conv3d_stride) or (TestNN and test_Conv3d_stride_padding) or (TestTorch and test_tensor_cycle_via_slots))\" -m \"not hypothesis\" --durations=50 --disable-warnings",
            "test ! -f $SP_DIR/functorch/__pycache__/__init__.cpython-313.pyc",
            "cd cmake_test",
            "cmake -GNinja -DCMAKE_CXX_STANDARD=17 -DWITH_TORCH_PYTHON=ON $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/"
          ],
          "imports": [
            "torch",
            "torch._C"
          ],
          "requires": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "ninja",
            "boto3",
            "hypothesis",
            "pytest",
            "tabulate",
            "pydot",
            "pip",
            "expecttest",
            "xmlrunner",
            "pyyaml",
            "pytest-flakefinder",
            "pytest-rerunfailures",
            "pytest-xdist",
            "cmake",
            "pybind11"
          ],
          "source_files": [
            "test",
            "tools"
          ]
        }
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cpu_mkl_py310_h1234567_101"
        },
        "name": "pytorch-gpu",
        "requirements": {
          "run": [
            "pytorch"
          ]
        },
        "test": {
          "imports": [
            "torch"
          ]
        }
      },
      {
        "name": "libtorch"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "ignore_run_exports": [
            "libmagma_sparse"
          ],
          "run_exports": [
            "pytorch",
            "libtorch"
          ],
          "string": "cpu_mkl_py311_h1234567_101"
        },
        "name": "pytorch",
        "requirements": {
          "build": [
            "python",
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "llvm-openmp",
            "cmake",
            "ninja",
            "libprotobuf",
            "protobuf"
          ],
          "host": [
            "libtorch",
            "python",
            "numpy",
            "pip",
            "setuptools",
            "pyyaml",
            "requests",
            "six",
            "mkl-devel <2025",
            "libcblas * *_mkl",
            "llvm-openmp",
            "libabseil",
            "libprotobuf",
            "pybind11",
            "pybind11-abi",
            "eigen",
            "sleef",
            "libuv",
            "pkg-config",
            "typing_extensions",
            "zlib"
          ],
          "run": [
            "libtorch 2.8.0.* *_101",
            "llvm-openmp",
            "libblas * *mkl",
            "python",
            "filelock",
            "fsspec",
            "jinja2",
            "networkx",
            "optree >=0.13.0",
            "pybind11",
            "setuptools",
            "sympy >=1.13.3",
            "typing_extensions >=4.10.0"
          ],
          "run_constrained": [
            "pytorch-cpu 2.8.0",
            "pytorch-gpu <0.0a0"
          ]
        },
        "script": "build.sh"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cpu_mkl_py311_h1234567_101"
        },
        "name": "pytorch-tests",
        "requirements": {
          "host": [
            "python"
          ],
          "run": [
            "pytorch 2.8.0 cpu_mkl_py311*101"
          ]
        },
        "test": {
          "commands": [
            "pip check",
            "python -c \"import torch; print(torch.__version__)\"",
            "python -c \"import torch; assert torch.backends.mkldnn.m.is_available()\"",
            "python -c \"import torch; torch.tensor(1).to('cpu').numpy(); print('numpy support enabled!!!')\"",
            "python -c \"import torch; import numpy\"",
            "python -c \"import numpy; import torch\"",
            "python -c \"import numpy as np;import torch;x = torch.tensor([2], dtype=torch.complex128);assert torch.dot(x, x).real == 4.0\"",
            "python -c \"import torch; assert torch.distributed.is_available()\"",
            "test -f $PREFIX/lib/libtorch_python${SHLIB_EXT}",
            "export OMP_NUM_THREADS=4",
            "pytest -n 1 test/test_autograd.py test/test_autograd_fallback.py test/test_custom_ops.py test/test_linalg.py test/test_mkldnn.py test/test_modules.py test/test_nn.py test/test_torch.py test/test_xnnpack_integration.py test/inductor/test_torchinductor.py -k \"not ((TestTorch and test_print) or test_1_sized_with_0_strided_cpu_float32 or test_batchnorm_nhwc_cpu or test_layer_norm_backwards_eps or test_pynode_destruction_deadlock or (TestLinalgCPU and test_cholesky_cpu_float32) or (TestLinalgCPU and test_pca_lowrank_cpu) or (TestLinalgCPU and test_svd_lowrank_cpu) or (TestMkldnnCPU and test_lstm_cpu) or test_eigh_lwork_lapack or test_gradgrad_nn_LSTM or test_grad_nn_Transformer or test_inverse_errors_large or (TestXNNPACKConv1dTransformPass and test_conv1d_basic) or test_addbmm or test_baddbmm or test_bmm or illcondition_matrix_input_should_not_crash_cpu or (TestAutograd and test_profiler_seq_nr) or (TestAutograd and test_profiler_propagation) or test_mutable_custom_op_fixed_layout or test_BCELoss_weights_no_reduce_cuda or test_ctc_loss_cudnn_tensor_cuda  or (TestTorch and test_index_add_correctness) or test_sdpa_inference_mode_aot_compile or (TestNN and test_grid_sample) or test_cublas_config_nondeterministic_alert_cuda or test_cross_entropy_loss_2d_out_of_bounds_class or test_indirect_device_assert or test_reentrant_parent_error_on_cpu_cuda or (GPUTests and test_scatter_reduce2) or test_ck_blas_library_cpu or test_matmul_offline_tunableop_cuda_float16 or test_Conv3d_1x1x1_no_bias_cuda or test_isinf_cuda or test_donated_buffer_inplace_gpt or test_linear_dynamic_maxautotune_cuda or (test_gradgrad_nn_Transformer and _cuda_) or test_avg_pool3d_backward2 or (TestLinalgCPU and test_inverse_errors_large_cpu) or test_gather_scatter_cpu or test_index_put2_cpu  or test_base_does_not_require_grad_mode_nothing or test_base_does_not_require_grad_mode_warn or test_composite_registered_to_cpu_mode_nothing or (TestMkldnnCPU and test_batch_norm_2d_cpu) or (TestNN and test_Conv1d_dilated) or (TestNN and test_Conv1d_pad_same_dilated) or (TestNN and test_Conv2d_pad_same_dilated) or (TestNN and test_Conv2d_padding) or (TestNN and test_Conv2d_strided) or (TestNN and test_Conv3d_dilated) or (TestNN and test_Conv3d_dilated_strided) or (TestNN and test_Conv3d_pad_same_dilated) or (TestNN and test_Conv3d_stride) or (TestNN and test_Conv3d_stride_padding) or (TestTorch and test_tensor_cycle_via_slots))\" -m \"not hypothesis\" --durations=50 --disable-warnings",
            "test ! -f $SP_DIR/functorch/__pycache__/__init__.cpython-313.pyc",
            "cd cmake_test",
            "cmake -GNinja -DCMAKE_CXX_STANDARD=17 -DWITH_TORCH_PYTHON=ON $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/"
          ],
          "imports": [
            "torch",
            "torch._C"
          ],
          "requires": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "ninja",
            "boto3",
            "hypothesis",
            "pytest",
            "tabulate",
            "pydot",
            "pip",
            "expecttest",
            "xmlrunner",
            "pyyaml",
            "pytest-flakefinder",
            "pytest-rerunfailures",
            "pytest-xdist",
            "cmake",
            "pybind11"
          ],
          "source_files": [
            "test",
            "tools"
          ]
        }
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cpu_mkl_py311_h1234567_101"
        },
        "name": "pytorch-gpu",
        "requirements": {
          "run": [
            "pytorch"
          ]
        },
        "test": {
          "imports": [
            "torch"
          ]
        }
      },
      {
        "name": "libtorch"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "ignore_run_exports": [
            "libmagma_sparse"
          ],
          "run_exports": [
            "pytorch",
            "libtorch"
          ],
          "string": "cpu_mkl_py312_h1234567_101"
        },
        "name": "pytorch",
        "requirements": {
          "build": [
            "python",
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "llvm-openmp",
            "cmake",
            "ninja",
            "libprotobuf",
            "protobuf"
          ],
          "host": [
            "libtorch",
            "python",
            "numpy",
            "pip",
            "setuptools",
            "pyyaml",
            "requests",
            "six",
            "mkl-devel <2025",
            "libcblas * *_mkl",
            "llvm-openmp",
            "libabseil",
            "libprotobuf",
            "pybind11",
            "pybind11-abi",
            "eigen",
            "sleef",
            "libuv",
            "pkg-config",
            "typing_extensions",
            "zlib"
          ],
          "run": [
            "libtorch 2.8.0.* *_101",
            "llvm-openmp",
            "libblas * *mkl",
            "python",
            "filelock",
            "fsspec",
            "jinja2",
            "networkx",
            "optree >=0.13.0",
            "pybind11",
            "setuptools",
            "sympy >=1.13.3",
            "typing_extensions >=4.10.0"
          ],
          "run_constrained": [
            "pytorch-cpu 2.8.0",
            "pytorch-gpu <0.0a0"
          ]
        },
        "script": "build.sh"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cpu_mkl_py312_h1234567_101"
        },
        "name": "pytorch-tests",
        "requirements": {
          "host": [
            "python"
          ],
          "run": [
            "pytorch 2.8.0 cpu_mkl_py312*101"
          ]
        },
        "test": {
          "commands": [
            "pip check",
            "python -c \"import torch; print(torch.__version__)\"",
            "python -c \"import torch; assert torch.backends.mkldnn.m.is_available()\"",
            "python -c \"import torch; torch.tensor(1).to('cpu').numpy(); print('numpy support enabled!!!')\"",
            "python -c \"import torch; import numpy\"",
            "python -c \"import numpy; import torch\"",
            "python -c \"import numpy as np;import torch;x = torch.tensor([2], dtype=torch.complex128);assert torch.dot(x, x).real == 4.0\"",
            "python -c \"import torch; assert torch.distributed.is_available()\"",
            "test -f $PREFIX/lib/libtorch_python${SHLIB_EXT}",
            "export OMP_NUM_THREADS=4",
            "pytest -n 1 test/test_autograd.py test/test_autograd_fallback.py test/test_custom_ops.py test/test_linalg.py test/test_mkldnn.py test/test_modules.py test/test_nn.py test/test_torch.py test/test_xnnpack_integration.py test/inductor/test_torchinductor.py -k \"not ((TestTorch and test_print) or test_1_sized_with_0_strided_cpu_float32 or test_batchnorm_nhwc_cpu or test_layer_norm_backwards_eps or test_pynode_destruction_deadlock or (TestLinalgCPU and test_cholesky_cpu_float32) or (TestLinalgCPU and test_pca_lowrank_cpu) or (TestLinalgCPU and test_svd_lowrank_cpu) or (TestMkldnnCPU and test_lstm_cpu) or test_eigh_lwork_lapack or test_gradgrad_nn_LSTM or test_grad_nn_Transformer or test_inverse_errors_large or (TestXNNPACKConv1dTransformPass and test_conv1d_basic) or test_addbmm or test_baddbmm or test_bmm or illcondition_matrix_input_should_not_crash_cpu or (TestAutograd and test_profiler_seq_nr) or (TestAutograd and test_profiler_propagation) or test_mutable_custom_op_fixed_layout or test_BCELoss_weights_no_reduce_cuda or test_ctc_loss_cudnn_tensor_cuda  or (TestTorch and test_index_add_correctness) or test_sdpa_inference_mode_aot_compile or (TestNN and test_grid_sample) or test_cublas_config_nondeterministic_alert_cuda or test_cross_entropy_loss_2d_out_of_bounds_class or test_indirect_device_assert or test_reentrant_parent_error_on_cpu_cuda or (GPUTests and test_scatter_reduce2) or test_ck_blas_library_cpu or test_matmul_offline_tunableop_cuda_float16 or test_Conv3d_1x1x1_no_bias_cuda or test_isinf_cuda or test_donated_buffer_inplace_gpt or test_linear_dynamic_maxautotune_cuda or (test_gradgrad_nn_Transformer and _cuda_) or test_avg_pool3d_backward2 or (TestLinalgCPU and test_inverse_errors_large_cpu) or test_gather_scatter_cpu or test_index_put2_cpu  or test_base_does_not_require_grad_mode_nothing or test_base_does_not_require_grad_mode_warn or test_composite_registered_to_cpu_mode_nothing or (TestMkldnnCPU and test_batch_norm_2d_cpu) or (TestNN and test_Conv1d_dilated) or (TestNN and test_Conv1d_pad_same_dilated) or (TestNN and test_Conv2d_pad_same_dilated) or (TestNN and test_Conv2d_padding) or (TestNN and test_Conv2d_strided) or (TestNN and test_Conv3d_dilated) or (TestNN and test_Conv3d_dilated_strided) or (TestNN and test_Conv3d_pad_same_dilated) or (TestNN and test_Conv3d_stride) or (TestNN and test_Conv3d_stride_padding) or (TestTorch and test_tensor_cycle_via_slots))\" -m \"not hypothesis\" --durations=50 --disable-warnings",
            "test ! -f $SP_DIR/functorch/__pycache__/__init__.cpython-313.pyc",
            "cd cmake_test",
            "cmake -GNinja -DCMAKE_CXX_STANDARD=17 -DWITH_TORCH_PYTHON=ON $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/"
          ],
          "imports": [
            "torch",
            "torch._C"
          ],
          "requires": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "ninja",
            "boto3",
            "hypothesis",
            "pytest",
            "tabulate",
            "pydot",
            "pip",
            "expecttest",
            "xmlrunner",
            "pyyaml",
            "pytest-flakefinder",
            "pytest-rerunfailures",
            "pytest-xdist",
            "cmake",
            "pybind11"
          ],
          "source_files": [
            "test",
            "tools"
          ]
        }
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cpu_mkl_py312_h1234567_101"
        },
        "name": "pytorch-gpu",
        "requirements": {
          "run": [
            "pytorch"
          ]
        },
        "test": {
          "imports": [
            "torch"
          ]
        }
      },
      {
        "name": "libtorch"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "ignore_run_exports": [
            "libmagma_sparse"
          ],
          "run_exports": [
            "pytorch",
            "libtorch"
          ],
          "string": "cpu_mkl_py313_h1234567_101"
        },
        "name": "pytorch",
        "requirements": {
          "build": [
            "python",
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "llvm-openmp",
            "cmake",
            "ninja",
            "libprotobuf",
            "protobuf"
          ],
          "host": [
            "libtorch",
            "python",
            "numpy",
            "pip",
            "setuptools",
            "pyyaml",
            "requests",
            "six",
            "mkl-devel <2025",
            "libcblas * *_mkl",
            "llvm-openmp",
            "libabseil",
            "libprotobuf",
            "pybind11",
            "pybind11-abi",
            "eigen",
            "sleef",
            "libuv",
            "pkg-config",
            "typing_extensions",
            "zlib"
          ],
          "run": [
            "libtorch 2.8.0.* *_101",
            "llvm-openmp",
            "libblas * *mkl",
            "python",
            "filelock",
            "fsspec",
            "jinja2",
            "networkx",
            "optree >=0.13.0",
            "pybind11",
            "setuptools",
            "sympy >=1.13.3",
            "typing_extensions >=4.10.0"
          ],
          "run_constrained": [
            "pytorch-cpu 2.8.0",
            "pytorch-gpu <0.0a0"
          ]
        },
        "script": "build.sh"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cpu_mkl_py313_h1234567_101"
        },
        "name": "pytorch-tests",
        "requirements": {
          "host": [
            "python"
          ],
          "run": [
            "pytorch 2.8.0 cpu_mkl_py313*101"
          ]
        },
        "test": {
          "commands": [
            "pip check",
            "python -c \"import torch; print(torch.__version__)\"",
            "python -c \"import torch; assert torch.backends.mkldnn.m.is_available()\"",
            "python -c \"import torch; torch.tensor(1).to('cpu').numpy(); print('numpy support enabled!!!')\"",
            "python -c \"import torch; import numpy\"",
            "python -c \"import numpy; import torch\"",
            "python -c \"import numpy as np;import torch;x = torch.tensor([2], dtype=torch.complex128);assert torch.dot(x, x).real == 4.0\"",
            "python -c \"import torch; assert torch.distributed.is_available()\"",
            "test -f $PREFIX/lib/libtorch_python${SHLIB_EXT}",
            "export OMP_NUM_THREADS=4",
            "pytest -n 1 test/test_autograd.py test/test_autograd_fallback.py test/test_custom_ops.py test/test_linalg.py test/test_mkldnn.py test/test_modules.py test/test_nn.py test/test_torch.py test/test_xnnpack_integration.py test/inductor/test_torchinductor.py -k \"not ((TestTorch and test_print) or test_1_sized_with_0_strided_cpu_float32 or test_batchnorm_nhwc_cpu or test_layer_norm_backwards_eps or test_pynode_destruction_deadlock or (TestLinalgCPU and test_cholesky_cpu_float32) or (TestLinalgCPU and test_pca_lowrank_cpu) or (TestLinalgCPU and test_svd_lowrank_cpu) or (TestMkldnnCPU and test_lstm_cpu) or test_eigh_lwork_lapack or test_gradgrad_nn_LSTM or test_grad_nn_Transformer or test_inverse_errors_large or (TestXNNPACKConv1dTransformPass and test_conv1d_basic) or test_addbmm or test_baddbmm or test_bmm or illcondition_matrix_input_should_not_crash_cpu or (TestAutograd and test_profiler_seq_nr) or (TestAutograd and test_profiler_propagation) or test_mutable_custom_op_fixed_layout or test_BCELoss_weights_no_reduce_cuda or test_ctc_loss_cudnn_tensor_cuda  or (TestTorch and test_index_add_correctness) or test_sdpa_inference_mode_aot_compile or (TestNN and test_grid_sample) or test_cublas_config_nondeterministic_alert_cuda or test_cross_entropy_loss_2d_out_of_bounds_class or test_indirect_device_assert or test_reentrant_parent_error_on_cpu_cuda or (GPUTests and test_scatter_reduce2) or test_ck_blas_library_cpu or test_matmul_offline_tunableop_cuda_float16 or test_Conv3d_1x1x1_no_bias_cuda or test_isinf_cuda or test_donated_buffer_inplace_gpt or test_linear_dynamic_maxautotune_cuda or (test_gradgrad_nn_Transformer and _cuda_) or test_avg_pool3d_backward2 or (TestLinalgCPU and test_inverse_errors_large_cpu) or test_gather_scatter_cpu or test_index_put2_cpu  or test_base_does_not_require_grad_mode_nothing or test_base_does_not_require_grad_mode_warn or test_composite_registered_to_cpu_mode_nothing or (TestMkldnnCPU and test_batch_norm_2d_cpu) or (TestNN and test_Conv1d_dilated) or (TestNN and test_Conv1d_pad_same_dilated) or (TestNN and test_Conv2d_pad_same_dilated) or (TestNN and test_Conv2d_padding) or (TestNN and test_Conv2d_strided) or (TestNN and test_Conv3d_dilated) or (TestNN and test_Conv3d_dilated_strided) or (TestNN and test_Conv3d_pad_same_dilated) or (TestNN and test_Conv3d_stride) or (TestNN and test_Conv3d_stride_padding) or (TestTorch and test_tensor_cycle_via_slots))\" -m \"not hypothesis\" --durations=50 --disable-warnings",
            "test ! -f $SP_DIR/functorch/__pycache__/__init__.cpython-313.pyc",
            "cd cmake_test",
            "cmake -GNinja -DCMAKE_CXX_STANDARD=17 -DWITH_TORCH_PYTHON=ON $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/"
          ],
          "imports": [
            "torch",
            "torch._C"
          ],
          "requires": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "ninja",
            "boto3",
            "hypothesis",
            "pytest",
            "tabulate",
            "pydot",
            "pip",
            "expecttest",
            "xmlrunner",
            "pyyaml",
            "pytest-flakefinder",
            "pytest-rerunfailures",
            "pytest-xdist",
            "cmake",
            "pybind11"
          ],
          "source_files": [
            "test",
            "tools"
          ]
        }
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cpu_mkl_py313_h1234567_101"
        },
        "name": "pytorch-gpu",
        "requirements": {
          "run": [
            "pytorch"
          ]
        },
        "test": {
          "imports": [
            "torch"
          ]
        }
      }
    ],
    "package": {
      "name": "libtorch",
      "version": "2.8.0"
    },
    "requirements": {
      "build": [
        "c_stdlib_stub",
        "c_compiler_stub",
        "cxx_compiler_stub",
        "llvm-openmp",
        "cmake",
        "ninja",
        "libprotobuf",
        "protobuf",
        "grep",
        "rsync"
      ],
      "host": [
        "python",
        "numpy",
        "pip",
        "setuptools",
        "pyyaml",
        "requests",
        "six",
        "libblas",
        "libcblas",
        "liblapack",
        "llvm-openmp",
        "libabseil",
        "libprotobuf",
        "sleef",
        "libuv",
        "pkg-config",
        "typing_extensions",
        "pybind11",
        "pybind11-abi",
        "eigen",
        "zlib",
        "mkl-devel <2025",
        "libcblas * *_mkl"
      ],
      "run": [
        "libblas * *mkl"
      ],
      "run_constrained": [
        "pytorch-cpu 2.8.0",
        "pytorch-gpu <0.0a0",
        "pytorch 2.8.0 cpu_generic_*_1",
        "libopenblas * openmp_*",
        "openblas * openmp_*",
        "pytorch 2.8.0 cpu_mkl_*_101"
      ]
    },
    "schema_version": 0,
    "source": [
      {
        "patches": [
          "patches/0001-Force-usage-of-python-3-and-error-without-numpy.patch",
          "patches/0002-Help-find-numpy.patch",
          "patches/0004-Allow-overriding-CUDA-related-paths.patch",
          "patches/0005-Use-BLAS_USE_CBLAS_DOT-for-OpenBLAS-builds.patch",
          "patches/0006-fix-issue-142484.patch",
          "patches/0007-Fix-FindOpenBLAS.patch",
          "patches/0008-point-include-paths-to-Conda-prefix-include-dir.patch",
          "patches/0009-Add-conda-prefix-to-inductor-include-paths.patch",
          "patches/0010-make-ATEN_INCLUDE_DIR-relative-to-TORCH_INSTALL_PREF.patch",
          "patches/0012-avoid-deprecated-find_package-CUDA-in-caffe2-CMake-m.patch",
          "patches/0013-Fix-CUPTI-lookup-to-include-target-directory.patch",
          "patches/0014-skip-test_norm_matrix_degenerate_shapes-on-numpy-2.3.patch",
          "patches/0015-Define-PY_SSIZE_T_CLEAN-before-include-Python.h.patch",
          "patches_submodules/tensorpipe/0001-switch-away-from-find_package-CUDA.patch"
        ],
        "sha256": "c70a2c9488f6f6e8af5982a10d1cc2c37b7df5e6506d839daa5d5e250953d7b5",
        "url": "https://github.com/pytorch/pytorch/releases/download/v2.8.0/pytorch-v2.8.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Force-usage-of-python-3-and-error-without-numpy.patch",
          "patches/0002-Help-find-numpy.patch",
          "patches/0004-Allow-overriding-CUDA-related-paths.patch",
          "patches/0005-Use-BLAS_USE_CBLAS_DOT-for-OpenBLAS-builds.patch",
          "patches/0006-fix-issue-142484.patch",
          "patches/0007-Fix-FindOpenBLAS.patch",
          "patches/0008-point-include-paths-to-Conda-prefix-include-dir.patch",
          "patches/0009-Add-conda-prefix-to-inductor-include-paths.patch",
          "patches/0010-make-ATEN_INCLUDE_DIR-relative-to-TORCH_INSTALL_PREF.patch",
          "patches/0012-avoid-deprecated-find_package-CUDA-in-caffe2-CMake-m.patch",
          "patches/0013-Fix-CUPTI-lookup-to-include-target-directory.patch",
          "patches/0014-skip-test_norm_matrix_degenerate_shapes-on-numpy-2.3.patch",
          "patches/0015-Define-PY_SSIZE_T_CLEAN-before-include-Python.h.patch",
          "patches_submodules/tensorpipe/0001-switch-away-from-find_package-CUDA.patch"
        ],
        "sha256": "c70a2c9488f6f6e8af5982a10d1cc2c37b7df5e6506d839daa5d5e250953d7b5",
        "url": "https://github.com/pytorch/pytorch/releases/download/v2.8.0/pytorch-v2.8.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Force-usage-of-python-3-and-error-without-numpy.patch",
          "patches/0002-Help-find-numpy.patch",
          "patches/0004-Allow-overriding-CUDA-related-paths.patch",
          "patches/0005-Use-BLAS_USE_CBLAS_DOT-for-OpenBLAS-builds.patch",
          "patches/0006-fix-issue-142484.patch",
          "patches/0007-Fix-FindOpenBLAS.patch",
          "patches/0008-point-include-paths-to-Conda-prefix-include-dir.patch",
          "patches/0009-Add-conda-prefix-to-inductor-include-paths.patch",
          "patches/0010-make-ATEN_INCLUDE_DIR-relative-to-TORCH_INSTALL_PREF.patch",
          "patches/0012-avoid-deprecated-find_package-CUDA-in-caffe2-CMake-m.patch",
          "patches/0013-Fix-CUPTI-lookup-to-include-target-directory.patch",
          "patches/0014-skip-test_norm_matrix_degenerate_shapes-on-numpy-2.3.patch",
          "patches/0015-Define-PY_SSIZE_T_CLEAN-before-include-Python.h.patch",
          "patches_submodules/tensorpipe/0001-switch-away-from-find_package-CUDA.patch"
        ],
        "sha256": "c70a2c9488f6f6e8af5982a10d1cc2c37b7df5e6506d839daa5d5e250953d7b5",
        "url": "https://github.com/pytorch/pytorch/releases/download/v2.8.0/pytorch-v2.8.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Force-usage-of-python-3-and-error-without-numpy.patch",
          "patches/0002-Help-find-numpy.patch",
          "patches/0004-Allow-overriding-CUDA-related-paths.patch",
          "patches/0005-Use-BLAS_USE_CBLAS_DOT-for-OpenBLAS-builds.patch",
          "patches/0006-fix-issue-142484.patch",
          "patches/0007-Fix-FindOpenBLAS.patch",
          "patches/0008-point-include-paths-to-Conda-prefix-include-dir.patch",
          "patches/0009-Add-conda-prefix-to-inductor-include-paths.patch",
          "patches/0010-make-ATEN_INCLUDE_DIR-relative-to-TORCH_INSTALL_PREF.patch",
          "patches/0012-avoid-deprecated-find_package-CUDA-in-caffe2-CMake-m.patch",
          "patches/0013-Fix-CUPTI-lookup-to-include-target-directory.patch",
          "patches/0014-skip-test_norm_matrix_degenerate_shapes-on-numpy-2.3.patch",
          "patches/0015-Define-PY_SSIZE_T_CLEAN-before-include-Python.h.patch",
          "patches_submodules/tensorpipe/0001-switch-away-from-find_package-CUDA.patch"
        ],
        "sha256": "c70a2c9488f6f6e8af5982a10d1cc2c37b7df5e6506d839daa5d5e250953d7b5",
        "url": "https://github.com/pytorch/pytorch/releases/download/v2.8.0/pytorch-v2.8.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Force-usage-of-python-3-and-error-without-numpy.patch",
          "patches/0002-Help-find-numpy.patch",
          "patches/0004-Allow-overriding-CUDA-related-paths.patch",
          "patches/0005-Use-BLAS_USE_CBLAS_DOT-for-OpenBLAS-builds.patch",
          "patches/0006-fix-issue-142484.patch",
          "patches/0007-Fix-FindOpenBLAS.patch",
          "patches/0008-point-include-paths-to-Conda-prefix-include-dir.patch",
          "patches/0009-Add-conda-prefix-to-inductor-include-paths.patch",
          "patches/0010-make-ATEN_INCLUDE_DIR-relative-to-TORCH_INSTALL_PREF.patch",
          "patches/0012-avoid-deprecated-find_package-CUDA-in-caffe2-CMake-m.patch",
          "patches/0013-Fix-CUPTI-lookup-to-include-target-directory.patch",
          "patches/0014-skip-test_norm_matrix_degenerate_shapes-on-numpy-2.3.patch",
          "patches/0015-Define-PY_SSIZE_T_CLEAN-before-include-Python.h.patch",
          "patches_submodules/tensorpipe/0001-switch-away-from-find_package-CUDA.patch"
        ],
        "sha256": "c70a2c9488f6f6e8af5982a10d1cc2c37b7df5e6506d839daa5d5e250953d7b5",
        "url": "https://github.com/pytorch/pytorch/releases/download/v2.8.0/pytorch-v2.8.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Force-usage-of-python-3-and-error-without-numpy.patch",
          "patches/0002-Help-find-numpy.patch",
          "patches/0004-Allow-overriding-CUDA-related-paths.patch",
          "patches/0005-Use-BLAS_USE_CBLAS_DOT-for-OpenBLAS-builds.patch",
          "patches/0006-fix-issue-142484.patch",
          "patches/0007-Fix-FindOpenBLAS.patch",
          "patches/0008-point-include-paths-to-Conda-prefix-include-dir.patch",
          "patches/0009-Add-conda-prefix-to-inductor-include-paths.patch",
          "patches/0010-make-ATEN_INCLUDE_DIR-relative-to-TORCH_INSTALL_PREF.patch",
          "patches/0012-avoid-deprecated-find_package-CUDA-in-caffe2-CMake-m.patch",
          "patches/0013-Fix-CUPTI-lookup-to-include-target-directory.patch",
          "patches/0014-skip-test_norm_matrix_degenerate_shapes-on-numpy-2.3.patch",
          "patches/0015-Define-PY_SSIZE_T_CLEAN-before-include-Python.h.patch",
          "patches_submodules/tensorpipe/0001-switch-away-from-find_package-CUDA.patch"
        ],
        "sha256": "c70a2c9488f6f6e8af5982a10d1cc2c37b7df5e6506d839daa5d5e250953d7b5",
        "url": "https://github.com/pytorch/pytorch/releases/download/v2.8.0/pytorch-v2.8.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Force-usage-of-python-3-and-error-without-numpy.patch",
          "patches/0002-Help-find-numpy.patch",
          "patches/0004-Allow-overriding-CUDA-related-paths.patch",
          "patches/0005-Use-BLAS_USE_CBLAS_DOT-for-OpenBLAS-builds.patch",
          "patches/0006-fix-issue-142484.patch",
          "patches/0007-Fix-FindOpenBLAS.patch",
          "patches/0008-point-include-paths-to-Conda-prefix-include-dir.patch",
          "patches/0009-Add-conda-prefix-to-inductor-include-paths.patch",
          "patches/0010-make-ATEN_INCLUDE_DIR-relative-to-TORCH_INSTALL_PREF.patch",
          "patches/0012-avoid-deprecated-find_package-CUDA-in-caffe2-CMake-m.patch",
          "patches/0013-Fix-CUPTI-lookup-to-include-target-directory.patch",
          "patches/0014-skip-test_norm_matrix_degenerate_shapes-on-numpy-2.3.patch",
          "patches/0015-Define-PY_SSIZE_T_CLEAN-before-include-Python.h.patch",
          "patches_submodules/tensorpipe/0001-switch-away-from-find_package-CUDA.patch"
        ],
        "sha256": "c70a2c9488f6f6e8af5982a10d1cc2c37b7df5e6506d839daa5d5e250953d7b5",
        "url": "https://github.com/pytorch/pytorch/releases/download/v2.8.0/pytorch-v2.8.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Force-usage-of-python-3-and-error-without-numpy.patch",
          "patches/0002-Help-find-numpy.patch",
          "patches/0004-Allow-overriding-CUDA-related-paths.patch",
          "patches/0005-Use-BLAS_USE_CBLAS_DOT-for-OpenBLAS-builds.patch",
          "patches/0006-fix-issue-142484.patch",
          "patches/0007-Fix-FindOpenBLAS.patch",
          "patches/0008-point-include-paths-to-Conda-prefix-include-dir.patch",
          "patches/0009-Add-conda-prefix-to-inductor-include-paths.patch",
          "patches/0010-make-ATEN_INCLUDE_DIR-relative-to-TORCH_INSTALL_PREF.patch",
          "patches/0012-avoid-deprecated-find_package-CUDA-in-caffe2-CMake-m.patch",
          "patches/0013-Fix-CUPTI-lookup-to-include-target-directory.patch",
          "patches/0014-skip-test_norm_matrix_degenerate_shapes-on-numpy-2.3.patch",
          "patches/0015-Define-PY_SSIZE_T_CLEAN-before-include-Python.h.patch",
          "patches_submodules/tensorpipe/0001-switch-away-from-find_package-CUDA.patch"
        ],
        "sha256": "c70a2c9488f6f6e8af5982a10d1cc2c37b7df5e6506d839daa5d5e250953d7b5",
        "url": "https://github.com/pytorch/pytorch/releases/download/v2.8.0/pytorch-v2.8.0.tar.gz"
      }
    ],
    "test": {
      "commands": [
        "test -f $PREFIX/lib/libc10.dylib",
        "test -f $PREFIX/lib/libshm.dylib",
        "test -f $PREFIX/lib/libtorch.dylib",
        "test -f $PREFIX/lib/libtorch_cpu.dylib",
        "test -f $PREFIX/lib/libtorch_global_deps.dylib",
        "cd cmake_test",
        "cmake -GNinja -DCMAKE_CXX_STANDARD=17 $CMAKE_ARGS ."
      ],
      "files": [
        "cmake_test/"
      ],
      "requires": [
        "cxx_compiler_stub",
        "cmake",
        "ninja",
        "pkg-config"
      ]
    }
  },
  "osx_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "grep",
        "libprotobuf",
        "llvm-openmp",
        "ninja",
        "protobuf",
        "python",
        "rsync"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "eigen",
        "libabseil",
        "libblas",
        "libcblas",
        "liblapack",
        "libprotobuf",
        "libtorch",
        "libuv",
        "llvm-openmp",
        "mkl-devel",
        "numpy",
        "pip",
        "pkg-config",
        "pybind11",
        "pybind11-abi",
        "python",
        "pyyaml",
        "requests",
        "setuptools",
        "six",
        "sleef",
        "typing_extensions",
        "zlib"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "filelock",
        "fsspec",
        "jinja2",
        "libblas",
        "libtorch",
        "llvm-openmp",
        "networkx",
        "nomkl",
        "optree",
        "pybind11",
        "python",
        "pytorch",
        "setuptools",
        "sympy",
        "typing_extensions"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "boto3",
        "c_compiler_stub",
        "cmake",
        "cxx_compiler_stub",
        "expecttest",
        "hypothesis",
        "ninja",
        "pip",
        "pkg-config",
        "pybind11",
        "pydot",
        "pytest",
        "pytest-flakefinder",
        "pytest-rerunfailures",
        "pytest-xdist",
        "pyyaml",
        "tabulate",
        "xmlrunner"
      ]
    }
  },
  "osx_arm64_meta_yaml": {
    "about": {
      "description": "PyTorch is a Python package that provides two high-level features:\n  - Tensor computation (like NumPy) with strong GPU acceleration\n  - Deep neural networks built on a tape-based autograd system\nYou can reuse your favorite Python packages such as NumPy, SciPy, and Cython to extend PyTorch when needed.\n",
      "dev_url": "https://github.com/pytorch/pytorch",
      "doc_url": "https://pytorch.org/docs/",
      "home": "https://pytorch.org/",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": [
        "LICENSE",
        "NOTICE",
        "third_party/CMake/Copyright.txt"
      ],
      "summary": "PyTorch is an optimized tensor library for deep learning using GPUs and CPUs."
    },
    "build": {
      "detect_binary_files_with_prefix": false,
      "ignore_run_exports": [
        "libmagma_sparse"
      ],
      "ignore_run_exports_from": null,
      "number": "1",
      "run_exports": [
        "libtorch"
      ],
      "string": "cpu_generic_h1234567_1"
    },
    "extra": {
      "feedstock-name": "pytorch-cpu",
      "recipe-maintainers": [
        "baszalmstra",
        "benjaminrwilson",
        "beckermr",
        "h-vetinari",
        "hmaarrfk",
        "jeongseok-meta",
        "mgorny",
        "sodre",
        "Tobias-Fischer"
      ]
    },
    "outputs": [
      {
        "name": "libtorch"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "ignore_run_exports": [
            "libmagma_sparse"
          ],
          "run_exports": [
            "pytorch",
            "libtorch"
          ],
          "string": "cpu_generic_py310_h1234567_1"
        },
        "name": "pytorch",
        "requirements": {
          "build": [
            "python",
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "llvm-openmp",
            "cmake",
            "ninja",
            "libprotobuf",
            "protobuf"
          ],
          "host": [
            "libtorch",
            "python",
            "numpy",
            "pip",
            "setuptools",
            "pyyaml",
            "requests",
            "six",
            "libcblas",
            "liblapack",
            "llvm-openmp",
            "libabseil",
            "libprotobuf",
            "pybind11",
            "pybind11-abi",
            "eigen",
            "sleef",
            "libuv",
            "pkg-config",
            "typing_extensions",
            "zlib"
          ],
          "run": [
            "libtorch 2.8.0.* *_1",
            "llvm-openmp",
            "nomkl",
            "python",
            "filelock",
            "fsspec",
            "jinja2",
            "networkx",
            "optree >=0.13.0",
            "pybind11",
            "setuptools",
            "sympy >=1.13.3",
            "typing_extensions >=4.10.0"
          ],
          "run_constrained": [
            "pytorch-cpu 2.8.0",
            "pytorch-gpu <0.0a0"
          ]
        },
        "script": "build.sh"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cpu_generic_py310_h1234567_1"
        },
        "name": "pytorch-tests",
        "requirements": {
          "host": [
            "python"
          ],
          "run": [
            "pytorch 2.8.0 cpu_generic_py310*1"
          ]
        },
        "test": {
          "commands": [
            "pip check",
            "python -c \"import torch; print(torch.__version__)\"",
            "python -c \"import torch; torch.tensor(1).to('cpu').numpy(); print('numpy support enabled!!!')\"",
            "python -c \"import torch; import numpy\"",
            "python -c \"import numpy; import torch\"",
            "python -c \"import numpy as np;import torch;x = torch.tensor([2], dtype=torch.complex128);assert torch.dot(x, x).real == 4.0\"",
            "python -c \"import torch; assert torch.distributed.is_available()\"",
            "test -f $PREFIX/lib/libtorch_python${SHLIB_EXT}",
            "export OMP_NUM_THREADS=4",
            "pytest -n 1 test/test_autograd.py test/test_autograd_fallback.py test/test_custom_ops.py test/test_linalg.py test/test_mkldnn.py test/test_modules.py test/test_nn.py test/test_torch.py test/test_xnnpack_integration.py test/inductor/test_torchinductor.py -k \"not ((TestTorch and test_print) or test_1_sized_with_0_strided_cpu_float32 or test_batchnorm_nhwc_cpu or test_layer_norm_backwards_eps or test_pynode_destruction_deadlock or (TestLinalgCPU and test_cholesky_cpu_float32) or (TestLinalgCPU and test_pca_lowrank_cpu) or (TestLinalgCPU and test_svd_lowrank_cpu) or (TestMkldnnCPU and test_lstm_cpu) or test_eigh_lwork_lapack or test_gradgrad_nn_LSTM or test_grad_nn_Transformer or test_inverse_errors_large or (TestXNNPACKConv1dTransformPass and test_conv1d_basic) or test_addbmm or test_baddbmm or test_bmm or illcondition_matrix_input_should_not_crash_cpu or (TestAutograd and test_profiler_seq_nr) or (TestAutograd and test_profiler_propagation) or test_mutable_custom_op_fixed_layout or test_BCELoss_weights_no_reduce_cuda or test_ctc_loss_cudnn_tensor_cuda  or (TestTorch and test_index_add_correctness) or test_sdpa_inference_mode_aot_compile or (TestNN and test_grid_sample) or test_cublas_config_nondeterministic_alert_cuda or test_cross_entropy_loss_2d_out_of_bounds_class or test_indirect_device_assert or test_reentrant_parent_error_on_cpu_cuda or (GPUTests and test_scatter_reduce2) or test_ck_blas_library_cpu or test_matmul_offline_tunableop_cuda_float16 or test_Conv3d_1x1x1_no_bias_cuda or test_isinf_cuda or test_donated_buffer_inplace_gpt or test_linear_dynamic_maxautotune_cuda or (test_gradgrad_nn_Transformer and _cuda_) or test_avg_pool3d_backward2 or (TestLinalgCPU and test_inverse_errors_large_cpu) or test_gather_scatter_cpu or test_index_put2_cpu  or test_base_does_not_require_grad_mode_nothing or test_base_does_not_require_grad_mode_warn or test_composite_registered_to_cpu_mode_nothing or (TestMkldnnCPU and test_batch_norm_2d_cpu) or (TestNN and test_Conv1d_dilated) or (TestNN and test_Conv1d_pad_same_dilated) or (TestNN and test_Conv2d_pad_same_dilated) or (TestNN and test_Conv2d_padding) or (TestNN and test_Conv2d_strided) or (TestNN and test_Conv3d_dilated) or (TestNN and test_Conv3d_dilated_strided) or (TestNN and test_Conv3d_pad_same_dilated) or (TestNN and test_Conv3d_stride) or (TestNN and test_Conv3d_stride_padding) or (TestTorch and test_tensor_cycle_via_slots))\" -m \"not hypothesis\" --durations=50 --disable-warnings",
            "test ! -f $SP_DIR/functorch/__pycache__/__init__.cpython-313.pyc",
            "cd cmake_test",
            "cmake -GNinja -DCMAKE_CXX_STANDARD=17 -DWITH_TORCH_PYTHON=ON $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/"
          ],
          "imports": [
            "torch",
            "torch._C"
          ],
          "requires": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "ninja",
            "boto3",
            "hypothesis",
            "pytest",
            "tabulate",
            "pydot",
            "pip",
            "expecttest",
            "xmlrunner",
            "pyyaml",
            "pytest-flakefinder",
            "pytest-rerunfailures",
            "pytest-xdist",
            "cmake",
            "pybind11"
          ],
          "source_files": [
            "test",
            "tools"
          ]
        }
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cpu_generic_py310_h1234567_1"
        },
        "name": "pytorch-gpu",
        "requirements": {
          "run": [
            "pytorch"
          ]
        },
        "test": {
          "imports": [
            "torch"
          ]
        }
      },
      {
        "name": "libtorch"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "ignore_run_exports": [
            "libmagma_sparse"
          ],
          "run_exports": [
            "pytorch",
            "libtorch"
          ],
          "string": "cpu_generic_py311_h1234567_1"
        },
        "name": "pytorch",
        "requirements": {
          "build": [
            "python",
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "llvm-openmp",
            "cmake",
            "ninja",
            "libprotobuf",
            "protobuf"
          ],
          "host": [
            "libtorch",
            "python",
            "numpy",
            "pip",
            "setuptools",
            "pyyaml",
            "requests",
            "six",
            "libcblas",
            "liblapack",
            "llvm-openmp",
            "libabseil",
            "libprotobuf",
            "pybind11",
            "pybind11-abi",
            "eigen",
            "sleef",
            "libuv",
            "pkg-config",
            "typing_extensions",
            "zlib"
          ],
          "run": [
            "libtorch 2.8.0.* *_1",
            "llvm-openmp",
            "nomkl",
            "python",
            "filelock",
            "fsspec",
            "jinja2",
            "networkx",
            "optree >=0.13.0",
            "pybind11",
            "setuptools",
            "sympy >=1.13.3",
            "typing_extensions >=4.10.0"
          ],
          "run_constrained": [
            "pytorch-cpu 2.8.0",
            "pytorch-gpu <0.0a0"
          ]
        },
        "script": "build.sh"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cpu_generic_py311_h1234567_1"
        },
        "name": "pytorch-tests",
        "requirements": {
          "host": [
            "python"
          ],
          "run": [
            "pytorch 2.8.0 cpu_generic_py311*1"
          ]
        },
        "test": {
          "commands": [
            "pip check",
            "python -c \"import torch; print(torch.__version__)\"",
            "python -c \"import torch; torch.tensor(1).to('cpu').numpy(); print('numpy support enabled!!!')\"",
            "python -c \"import torch; import numpy\"",
            "python -c \"import numpy; import torch\"",
            "python -c \"import numpy as np;import torch;x = torch.tensor([2], dtype=torch.complex128);assert torch.dot(x, x).real == 4.0\"",
            "python -c \"import torch; assert torch.distributed.is_available()\"",
            "test -f $PREFIX/lib/libtorch_python${SHLIB_EXT}",
            "export OMP_NUM_THREADS=4",
            "pytest -n 1 test/test_autograd.py test/test_autograd_fallback.py test/test_custom_ops.py test/test_linalg.py test/test_mkldnn.py test/test_modules.py test/test_nn.py test/test_torch.py test/test_xnnpack_integration.py test/inductor/test_torchinductor.py -k \"not ((TestTorch and test_print) or test_1_sized_with_0_strided_cpu_float32 or test_batchnorm_nhwc_cpu or test_layer_norm_backwards_eps or test_pynode_destruction_deadlock or (TestLinalgCPU and test_cholesky_cpu_float32) or (TestLinalgCPU and test_pca_lowrank_cpu) or (TestLinalgCPU and test_svd_lowrank_cpu) or (TestMkldnnCPU and test_lstm_cpu) or test_eigh_lwork_lapack or test_gradgrad_nn_LSTM or test_grad_nn_Transformer or test_inverse_errors_large or (TestXNNPACKConv1dTransformPass and test_conv1d_basic) or test_addbmm or test_baddbmm or test_bmm or illcondition_matrix_input_should_not_crash_cpu or (TestAutograd and test_profiler_seq_nr) or (TestAutograd and test_profiler_propagation) or test_mutable_custom_op_fixed_layout or test_BCELoss_weights_no_reduce_cuda or test_ctc_loss_cudnn_tensor_cuda  or (TestTorch and test_index_add_correctness) or test_sdpa_inference_mode_aot_compile or (TestNN and test_grid_sample) or test_cublas_config_nondeterministic_alert_cuda or test_cross_entropy_loss_2d_out_of_bounds_class or test_indirect_device_assert or test_reentrant_parent_error_on_cpu_cuda or (GPUTests and test_scatter_reduce2) or test_ck_blas_library_cpu or test_matmul_offline_tunableop_cuda_float16 or test_Conv3d_1x1x1_no_bias_cuda or test_isinf_cuda or test_donated_buffer_inplace_gpt or test_linear_dynamic_maxautotune_cuda or (test_gradgrad_nn_Transformer and _cuda_) or test_avg_pool3d_backward2 or (TestLinalgCPU and test_inverse_errors_large_cpu) or test_gather_scatter_cpu or test_index_put2_cpu  or test_base_does_not_require_grad_mode_nothing or test_base_does_not_require_grad_mode_warn or test_composite_registered_to_cpu_mode_nothing or (TestMkldnnCPU and test_batch_norm_2d_cpu) or (TestNN and test_Conv1d_dilated) or (TestNN and test_Conv1d_pad_same_dilated) or (TestNN and test_Conv2d_pad_same_dilated) or (TestNN and test_Conv2d_padding) or (TestNN and test_Conv2d_strided) or (TestNN and test_Conv3d_dilated) or (TestNN and test_Conv3d_dilated_strided) or (TestNN and test_Conv3d_pad_same_dilated) or (TestNN and test_Conv3d_stride) or (TestNN and test_Conv3d_stride_padding) or (TestTorch and test_tensor_cycle_via_slots))\" -m \"not hypothesis\" --durations=50 --disable-warnings",
            "test ! -f $SP_DIR/functorch/__pycache__/__init__.cpython-313.pyc",
            "cd cmake_test",
            "cmake -GNinja -DCMAKE_CXX_STANDARD=17 -DWITH_TORCH_PYTHON=ON $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/"
          ],
          "imports": [
            "torch",
            "torch._C"
          ],
          "requires": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "ninja",
            "boto3",
            "hypothesis",
            "pytest",
            "tabulate",
            "pydot",
            "pip",
            "expecttest",
            "xmlrunner",
            "pyyaml",
            "pytest-flakefinder",
            "pytest-rerunfailures",
            "pytest-xdist",
            "cmake",
            "pybind11"
          ],
          "source_files": [
            "test",
            "tools"
          ]
        }
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cpu_generic_py311_h1234567_1"
        },
        "name": "pytorch-gpu",
        "requirements": {
          "run": [
            "pytorch"
          ]
        },
        "test": {
          "imports": [
            "torch"
          ]
        }
      },
      {
        "name": "libtorch"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "ignore_run_exports": [
            "libmagma_sparse"
          ],
          "run_exports": [
            "pytorch",
            "libtorch"
          ],
          "string": "cpu_generic_py312_h1234567_1"
        },
        "name": "pytorch",
        "requirements": {
          "build": [
            "python",
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "llvm-openmp",
            "cmake",
            "ninja",
            "libprotobuf",
            "protobuf"
          ],
          "host": [
            "libtorch",
            "python",
            "numpy",
            "pip",
            "setuptools",
            "pyyaml",
            "requests",
            "six",
            "libcblas",
            "liblapack",
            "llvm-openmp",
            "libabseil",
            "libprotobuf",
            "pybind11",
            "pybind11-abi",
            "eigen",
            "sleef",
            "libuv",
            "pkg-config",
            "typing_extensions",
            "zlib"
          ],
          "run": [
            "libtorch 2.8.0.* *_1",
            "llvm-openmp",
            "nomkl",
            "python",
            "filelock",
            "fsspec",
            "jinja2",
            "networkx",
            "optree >=0.13.0",
            "pybind11",
            "setuptools",
            "sympy >=1.13.3",
            "typing_extensions >=4.10.0"
          ],
          "run_constrained": [
            "pytorch-cpu 2.8.0",
            "pytorch-gpu <0.0a0"
          ]
        },
        "script": "build.sh"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cpu_generic_py312_h1234567_1"
        },
        "name": "pytorch-tests",
        "requirements": {
          "host": [
            "python"
          ],
          "run": [
            "pytorch 2.8.0 cpu_generic_py312*1"
          ]
        },
        "test": {
          "commands": [
            "pip check",
            "python -c \"import torch; print(torch.__version__)\"",
            "python -c \"import torch; torch.tensor(1).to('cpu').numpy(); print('numpy support enabled!!!')\"",
            "python -c \"import torch; import numpy\"",
            "python -c \"import numpy; import torch\"",
            "python -c \"import numpy as np;import torch;x = torch.tensor([2], dtype=torch.complex128);assert torch.dot(x, x).real == 4.0\"",
            "python -c \"import torch; assert torch.distributed.is_available()\"",
            "test -f $PREFIX/lib/libtorch_python${SHLIB_EXT}",
            "export OMP_NUM_THREADS=4",
            "pytest -n 1 test/test_autograd.py test/test_autograd_fallback.py test/test_custom_ops.py test/test_linalg.py test/test_mkldnn.py test/test_modules.py test/test_nn.py test/test_torch.py test/test_xnnpack_integration.py test/inductor/test_torchinductor.py -k \"not ((TestTorch and test_print) or test_1_sized_with_0_strided_cpu_float32 or test_batchnorm_nhwc_cpu or test_layer_norm_backwards_eps or test_pynode_destruction_deadlock or (TestLinalgCPU and test_cholesky_cpu_float32) or (TestLinalgCPU and test_pca_lowrank_cpu) or (TestLinalgCPU and test_svd_lowrank_cpu) or (TestMkldnnCPU and test_lstm_cpu) or test_eigh_lwork_lapack or test_gradgrad_nn_LSTM or test_grad_nn_Transformer or test_inverse_errors_large or (TestXNNPACKConv1dTransformPass and test_conv1d_basic) or test_addbmm or test_baddbmm or test_bmm or illcondition_matrix_input_should_not_crash_cpu or (TestAutograd and test_profiler_seq_nr) or (TestAutograd and test_profiler_propagation) or test_mutable_custom_op_fixed_layout or test_BCELoss_weights_no_reduce_cuda or test_ctc_loss_cudnn_tensor_cuda  or (TestTorch and test_index_add_correctness) or test_sdpa_inference_mode_aot_compile or (TestNN and test_grid_sample) or test_cublas_config_nondeterministic_alert_cuda or test_cross_entropy_loss_2d_out_of_bounds_class or test_indirect_device_assert or test_reentrant_parent_error_on_cpu_cuda or (GPUTests and test_scatter_reduce2) or test_ck_blas_library_cpu or test_matmul_offline_tunableop_cuda_float16 or test_Conv3d_1x1x1_no_bias_cuda or test_isinf_cuda or test_donated_buffer_inplace_gpt or test_linear_dynamic_maxautotune_cuda or (test_gradgrad_nn_Transformer and _cuda_) or test_avg_pool3d_backward2 or (TestLinalgCPU and test_inverse_errors_large_cpu) or test_gather_scatter_cpu or test_index_put2_cpu  or test_base_does_not_require_grad_mode_nothing or test_base_does_not_require_grad_mode_warn or test_composite_registered_to_cpu_mode_nothing or (TestMkldnnCPU and test_batch_norm_2d_cpu) or (TestNN and test_Conv1d_dilated) or (TestNN and test_Conv1d_pad_same_dilated) or (TestNN and test_Conv2d_pad_same_dilated) or (TestNN and test_Conv2d_padding) or (TestNN and test_Conv2d_strided) or (TestNN and test_Conv3d_dilated) or (TestNN and test_Conv3d_dilated_strided) or (TestNN and test_Conv3d_pad_same_dilated) or (TestNN and test_Conv3d_stride) or (TestNN and test_Conv3d_stride_padding) or (TestTorch and test_tensor_cycle_via_slots))\" -m \"not hypothesis\" --durations=50 --disable-warnings",
            "test ! -f $SP_DIR/functorch/__pycache__/__init__.cpython-313.pyc",
            "cd cmake_test",
            "cmake -GNinja -DCMAKE_CXX_STANDARD=17 -DWITH_TORCH_PYTHON=ON $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/"
          ],
          "imports": [
            "torch",
            "torch._C"
          ],
          "requires": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "ninja",
            "boto3",
            "hypothesis",
            "pytest",
            "tabulate",
            "pydot",
            "pip",
            "expecttest",
            "xmlrunner",
            "pyyaml",
            "pytest-flakefinder",
            "pytest-rerunfailures",
            "pytest-xdist",
            "cmake",
            "pybind11"
          ],
          "source_files": [
            "test",
            "tools"
          ]
        }
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cpu_generic_py312_h1234567_1"
        },
        "name": "pytorch-gpu",
        "requirements": {
          "run": [
            "pytorch"
          ]
        },
        "test": {
          "imports": [
            "torch"
          ]
        }
      },
      {
        "name": "libtorch"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "ignore_run_exports": [
            "libmagma_sparse"
          ],
          "run_exports": [
            "pytorch",
            "libtorch"
          ],
          "string": "cpu_generic_py313_h1234567_1"
        },
        "name": "pytorch",
        "requirements": {
          "build": [
            "python",
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "llvm-openmp",
            "cmake",
            "ninja",
            "libprotobuf",
            "protobuf"
          ],
          "host": [
            "libtorch",
            "python",
            "numpy",
            "pip",
            "setuptools",
            "pyyaml",
            "requests",
            "six",
            "libcblas",
            "liblapack",
            "llvm-openmp",
            "libabseil",
            "libprotobuf",
            "pybind11",
            "pybind11-abi",
            "eigen",
            "sleef",
            "libuv",
            "pkg-config",
            "typing_extensions",
            "zlib"
          ],
          "run": [
            "libtorch 2.8.0.* *_1",
            "llvm-openmp",
            "nomkl",
            "python",
            "filelock",
            "fsspec",
            "jinja2",
            "networkx",
            "optree >=0.13.0",
            "pybind11",
            "setuptools",
            "sympy >=1.13.3",
            "typing_extensions >=4.10.0"
          ],
          "run_constrained": [
            "pytorch-cpu 2.8.0",
            "pytorch-gpu <0.0a0"
          ]
        },
        "script": "build.sh"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cpu_generic_py313_h1234567_1"
        },
        "name": "pytorch-tests",
        "requirements": {
          "host": [
            "python"
          ],
          "run": [
            "pytorch 2.8.0 cpu_generic_py313*1"
          ]
        },
        "test": {
          "commands": [
            "pip check",
            "python -c \"import torch; print(torch.__version__)\"",
            "python -c \"import torch; torch.tensor(1).to('cpu').numpy(); print('numpy support enabled!!!')\"",
            "python -c \"import torch; import numpy\"",
            "python -c \"import numpy; import torch\"",
            "python -c \"import numpy as np;import torch;x = torch.tensor([2], dtype=torch.complex128);assert torch.dot(x, x).real == 4.0\"",
            "python -c \"import torch; assert torch.distributed.is_available()\"",
            "test -f $PREFIX/lib/libtorch_python${SHLIB_EXT}",
            "export OMP_NUM_THREADS=4",
            "pytest -n 1 test/test_autograd.py test/test_autograd_fallback.py test/test_custom_ops.py test/test_linalg.py test/test_mkldnn.py test/test_modules.py test/test_nn.py test/test_torch.py test/test_xnnpack_integration.py test/inductor/test_torchinductor.py -k \"not ((TestTorch and test_print) or test_1_sized_with_0_strided_cpu_float32 or test_batchnorm_nhwc_cpu or test_layer_norm_backwards_eps or test_pynode_destruction_deadlock or (TestLinalgCPU and test_cholesky_cpu_float32) or (TestLinalgCPU and test_pca_lowrank_cpu) or (TestLinalgCPU and test_svd_lowrank_cpu) or (TestMkldnnCPU and test_lstm_cpu) or test_eigh_lwork_lapack or test_gradgrad_nn_LSTM or test_grad_nn_Transformer or test_inverse_errors_large or (TestXNNPACKConv1dTransformPass and test_conv1d_basic) or test_addbmm or test_baddbmm or test_bmm or illcondition_matrix_input_should_not_crash_cpu or (TestAutograd and test_profiler_seq_nr) or (TestAutograd and test_profiler_propagation) or test_mutable_custom_op_fixed_layout or test_BCELoss_weights_no_reduce_cuda or test_ctc_loss_cudnn_tensor_cuda  or (TestTorch and test_index_add_correctness) or test_sdpa_inference_mode_aot_compile or (TestNN and test_grid_sample) or test_cublas_config_nondeterministic_alert_cuda or test_cross_entropy_loss_2d_out_of_bounds_class or test_indirect_device_assert or test_reentrant_parent_error_on_cpu_cuda or (GPUTests and test_scatter_reduce2) or test_ck_blas_library_cpu or test_matmul_offline_tunableop_cuda_float16 or test_Conv3d_1x1x1_no_bias_cuda or test_isinf_cuda or test_donated_buffer_inplace_gpt or test_linear_dynamic_maxautotune_cuda or (test_gradgrad_nn_Transformer and _cuda_) or test_avg_pool3d_backward2 or (TestLinalgCPU and test_inverse_errors_large_cpu) or test_gather_scatter_cpu or test_index_put2_cpu  or test_base_does_not_require_grad_mode_nothing or test_base_does_not_require_grad_mode_warn or test_composite_registered_to_cpu_mode_nothing or (TestMkldnnCPU and test_batch_norm_2d_cpu) or (TestNN and test_Conv1d_dilated) or (TestNN and test_Conv1d_pad_same_dilated) or (TestNN and test_Conv2d_pad_same_dilated) or (TestNN and test_Conv2d_padding) or (TestNN and test_Conv2d_strided) or (TestNN and test_Conv3d_dilated) or (TestNN and test_Conv3d_dilated_strided) or (TestNN and test_Conv3d_pad_same_dilated) or (TestNN and test_Conv3d_stride) or (TestNN and test_Conv3d_stride_padding) or (TestTorch and test_tensor_cycle_via_slots))\" -m \"not hypothesis\" --durations=50 --disable-warnings",
            "test ! -f $SP_DIR/functorch/__pycache__/__init__.cpython-313.pyc",
            "cd cmake_test",
            "cmake -GNinja -DCMAKE_CXX_STANDARD=17 -DWITH_TORCH_PYTHON=ON $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/"
          ],
          "imports": [
            "torch",
            "torch._C"
          ],
          "requires": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "ninja",
            "boto3",
            "hypothesis",
            "pytest",
            "tabulate",
            "pydot",
            "pip",
            "expecttest",
            "xmlrunner",
            "pyyaml",
            "pytest-flakefinder",
            "pytest-rerunfailures",
            "pytest-xdist",
            "cmake",
            "pybind11"
          ],
          "source_files": [
            "test",
            "tools"
          ]
        }
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cpu_generic_py313_h1234567_1"
        },
        "name": "pytorch-gpu",
        "requirements": {
          "run": [
            "pytorch"
          ]
        },
        "test": {
          "imports": [
            "torch"
          ]
        }
      }
    ],
    "package": {
      "name": "libtorch",
      "version": "2.8.0"
    },
    "requirements": {
      "build": [
        "c_stdlib_stub",
        "c_compiler_stub",
        "cxx_compiler_stub",
        "llvm-openmp",
        "cmake",
        "ninja",
        "libprotobuf",
        "protobuf",
        "grep",
        "rsync"
      ],
      "host": [
        "python",
        "numpy",
        "pip",
        "setuptools",
        "pyyaml",
        "requests",
        "six",
        "libblas",
        "libcblas",
        "liblapack",
        "llvm-openmp",
        "libabseil",
        "libprotobuf",
        "sleef",
        "libuv",
        "pkg-config",
        "typing_extensions",
        "pybind11",
        "pybind11-abi",
        "eigen",
        "zlib"
      ],
      "run": [],
      "run_constrained": [
        "pytorch-cpu 2.8.0",
        "pytorch-gpu <0.0a0",
        "pytorch 2.8.0 cpu_generic_*_1",
        "libopenblas * openmp_*",
        "openblas * openmp_*"
      ]
    },
    "schema_version": 0,
    "source": [
      {
        "patches": [
          "patches/0001-Force-usage-of-python-3-and-error-without-numpy.patch",
          "patches/0002-Help-find-numpy.patch",
          "patches/0004-Allow-overriding-CUDA-related-paths.patch",
          "patches/0005-Use-BLAS_USE_CBLAS_DOT-for-OpenBLAS-builds.patch",
          "patches/0006-fix-issue-142484.patch",
          "patches/0007-Fix-FindOpenBLAS.patch",
          "patches/0008-point-include-paths-to-Conda-prefix-include-dir.patch",
          "patches/0009-Add-conda-prefix-to-inductor-include-paths.patch",
          "patches/0010-make-ATEN_INCLUDE_DIR-relative-to-TORCH_INSTALL_PREF.patch",
          "patches/0012-avoid-deprecated-find_package-CUDA-in-caffe2-CMake-m.patch",
          "patches/0013-Fix-CUPTI-lookup-to-include-target-directory.patch",
          "patches/0014-skip-test_norm_matrix_degenerate_shapes-on-numpy-2.3.patch",
          "patches/0015-Define-PY_SSIZE_T_CLEAN-before-include-Python.h.patch",
          "patches_submodules/tensorpipe/0001-switch-away-from-find_package-CUDA.patch"
        ],
        "sha256": "c70a2c9488f6f6e8af5982a10d1cc2c37b7df5e6506d839daa5d5e250953d7b5",
        "url": "https://github.com/pytorch/pytorch/releases/download/v2.8.0/pytorch-v2.8.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Force-usage-of-python-3-and-error-without-numpy.patch",
          "patches/0002-Help-find-numpy.patch",
          "patches/0004-Allow-overriding-CUDA-related-paths.patch",
          "patches/0005-Use-BLAS_USE_CBLAS_DOT-for-OpenBLAS-builds.patch",
          "patches/0006-fix-issue-142484.patch",
          "patches/0007-Fix-FindOpenBLAS.patch",
          "patches/0008-point-include-paths-to-Conda-prefix-include-dir.patch",
          "patches/0009-Add-conda-prefix-to-inductor-include-paths.patch",
          "patches/0010-make-ATEN_INCLUDE_DIR-relative-to-TORCH_INSTALL_PREF.patch",
          "patches/0012-avoid-deprecated-find_package-CUDA-in-caffe2-CMake-m.patch",
          "patches/0013-Fix-CUPTI-lookup-to-include-target-directory.patch",
          "patches/0014-skip-test_norm_matrix_degenerate_shapes-on-numpy-2.3.patch",
          "patches/0015-Define-PY_SSIZE_T_CLEAN-before-include-Python.h.patch",
          "patches_submodules/tensorpipe/0001-switch-away-from-find_package-CUDA.patch"
        ],
        "sha256": "c70a2c9488f6f6e8af5982a10d1cc2c37b7df5e6506d839daa5d5e250953d7b5",
        "url": "https://github.com/pytorch/pytorch/releases/download/v2.8.0/pytorch-v2.8.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Force-usage-of-python-3-and-error-without-numpy.patch",
          "patches/0002-Help-find-numpy.patch",
          "patches/0004-Allow-overriding-CUDA-related-paths.patch",
          "patches/0005-Use-BLAS_USE_CBLAS_DOT-for-OpenBLAS-builds.patch",
          "patches/0006-fix-issue-142484.patch",
          "patches/0007-Fix-FindOpenBLAS.patch",
          "patches/0008-point-include-paths-to-Conda-prefix-include-dir.patch",
          "patches/0009-Add-conda-prefix-to-inductor-include-paths.patch",
          "patches/0010-make-ATEN_INCLUDE_DIR-relative-to-TORCH_INSTALL_PREF.patch",
          "patches/0012-avoid-deprecated-find_package-CUDA-in-caffe2-CMake-m.patch",
          "patches/0013-Fix-CUPTI-lookup-to-include-target-directory.patch",
          "patches/0014-skip-test_norm_matrix_degenerate_shapes-on-numpy-2.3.patch",
          "patches/0015-Define-PY_SSIZE_T_CLEAN-before-include-Python.h.patch",
          "patches_submodules/tensorpipe/0001-switch-away-from-find_package-CUDA.patch"
        ],
        "sha256": "c70a2c9488f6f6e8af5982a10d1cc2c37b7df5e6506d839daa5d5e250953d7b5",
        "url": "https://github.com/pytorch/pytorch/releases/download/v2.8.0/pytorch-v2.8.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Force-usage-of-python-3-and-error-without-numpy.patch",
          "patches/0002-Help-find-numpy.patch",
          "patches/0004-Allow-overriding-CUDA-related-paths.patch",
          "patches/0005-Use-BLAS_USE_CBLAS_DOT-for-OpenBLAS-builds.patch",
          "patches/0006-fix-issue-142484.patch",
          "patches/0007-Fix-FindOpenBLAS.patch",
          "patches/0008-point-include-paths-to-Conda-prefix-include-dir.patch",
          "patches/0009-Add-conda-prefix-to-inductor-include-paths.patch",
          "patches/0010-make-ATEN_INCLUDE_DIR-relative-to-TORCH_INSTALL_PREF.patch",
          "patches/0012-avoid-deprecated-find_package-CUDA-in-caffe2-CMake-m.patch",
          "patches/0013-Fix-CUPTI-lookup-to-include-target-directory.patch",
          "patches/0014-skip-test_norm_matrix_degenerate_shapes-on-numpy-2.3.patch",
          "patches/0015-Define-PY_SSIZE_T_CLEAN-before-include-Python.h.patch",
          "patches_submodules/tensorpipe/0001-switch-away-from-find_package-CUDA.patch"
        ],
        "sha256": "c70a2c9488f6f6e8af5982a10d1cc2c37b7df5e6506d839daa5d5e250953d7b5",
        "url": "https://github.com/pytorch/pytorch/releases/download/v2.8.0/pytorch-v2.8.0.tar.gz"
      }
    ],
    "test": {
      "commands": [
        "test -f $PREFIX/lib/libc10.dylib",
        "test -f $PREFIX/lib/libshm.dylib",
        "test -f $PREFIX/lib/libtorch.dylib",
        "test -f $PREFIX/lib/libtorch_cpu.dylib",
        "test -f $PREFIX/lib/libtorch_global_deps.dylib",
        "cd cmake_test",
        "cmake -GNinja -DCMAKE_CXX_STANDARD=17 $CMAKE_ARGS ."
      ],
      "files": [
        "cmake_test/"
      ],
      "requires": [
        "cxx_compiler_stub",
        "cmake",
        "ninja",
        "pkg-config"
      ]
    }
  },
  "osx_arm64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "grep",
        "libprotobuf",
        "llvm-openmp",
        "ninja",
        "protobuf",
        "python",
        "rsync"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "eigen",
        "libabseil",
        "libblas",
        "libcblas",
        "liblapack",
        "libprotobuf",
        "libtorch",
        "libuv",
        "llvm-openmp",
        "numpy",
        "pip",
        "pkg-config",
        "pybind11",
        "pybind11-abi",
        "python",
        "pyyaml",
        "requests",
        "setuptools",
        "six",
        "sleef",
        "typing_extensions",
        "zlib"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "filelock",
        "fsspec",
        "jinja2",
        "libtorch",
        "llvm-openmp",
        "networkx",
        "nomkl",
        "optree",
        "pybind11",
        "python",
        "pytorch",
        "setuptools",
        "sympy",
        "typing_extensions"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "boto3",
        "c_compiler_stub",
        "cmake",
        "cxx_compiler_stub",
        "expecttest",
        "hypothesis",
        "ninja",
        "pip",
        "pkg-config",
        "pybind11",
        "pydot",
        "pytest",
        "pytest-flakefinder",
        "pytest-rerunfailures",
        "pytest-xdist",
        "pyyaml",
        "tabulate",
        "xmlrunner"
      ]
    }
  },
  "outputs_names": {
    "__set__": true,
    "elements": [
      "libtorch",
      "pytorch",
      "pytorch-gpu",
      "pytorch-tests"
    ]
  },
  "parsing_error": false,
  "platforms": [
    "linux_64",
    "linux_aarch64",
    "osx_64",
    "osx_arm64",
    "win_64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/pytorch-cpu.json"
  },
  "raw_meta_yaml": "# if you wish to build release candidate number X, append the version string with \".rcX\"\n{% set version = \"2.8.0\" %}\n{% set build = 1 %}\n\n# Use a higher build number for the CUDA variant, to ensure that it's\n# preferred by conda's solver, and it's preferentially\n# installed where the platform supports it.\n{% if cuda_compiler_version != \"None\" %}\n{% set build = build + 200 %}\n{% endif %}\n\n{% if blas_impl == \"mkl\" %}\n{% set build = build + 100 %}\n{% endif %}\n\n# see https://github.com/pytorch/pytorch/blame/v{{ version }}/.ci/docker/ci_commit_pins/triton.txt\n# pytorch and triton are released in tandem, see notes in their release process\n# https://github.com/pytorch/pytorch/blob/main/RELEASE.md#triton-dependency-for-the-release\n{% set triton = \"3.4.0\" %}\n\n# TODO Temporary pin, remove me\n{% set mkl = \"<2025\" %}\n\npackage:\n  name: libtorch\n  version: {{ version.replace(\"-\", \".\") }}\n\nsource:\n{% if \"rc\" in version %}\n  # - git_url: https://github.com/pytorch/pytorch.git\n  #   git_rev: v{{ version.replace(\".rc\", \"-rc\") }}\n  # we cannot apply patches to submodules when checking out with git_url, because\n  # then conda switches the patch-application to use git, which cannot construct\n  # a usable ancestor from outside the submodule; the only option then is to\n  # pull in the submodules separately.\n  - url: https://github.com/pytorch/pytorch/archive/refs/tags/v{{ version }}.tar.gz\n    sha256: 04ae0a8babdc9cb9dfc4f8746b2b8aa0f8ed0f9e92835cc4af0bcb01e3969e51\n{% else %}\n  # The \"pytorch-v\" tarballs contain submodules; the \"pytorch-\" ones don't.\n  - url: https://github.com/pytorch/pytorch/releases/download/v{{ version }}/pytorch-v{{ version }}.tar.gz\n    sha256: c70a2c9488f6f6e8af5982a10d1cc2c37b7df5e6506d839daa5d5e250953d7b5\n{% endif %}\n    patches:\n      - patches/0001-Force-usage-of-python-3-and-error-without-numpy.patch\n      # backport https://github.com/pytorch/pytorch/pull/137084\n      - patches/0002-Help-find-numpy.patch\n      - patches/0003-Fix-duplicate-linker-script.patch  # [cuda_compiler_version != \"None\" and aarch64]\n      # conda-specific patch, lets us override CUDA paths\n      - patches/0004-Allow-overriding-CUDA-related-paths.patch\n      # fix BLAS calling convention for openblas\n      - patches/0005-Use-BLAS_USE_CBLAS_DOT-for-OpenBLAS-builds.patch\n      # fix mkl-2024 issue\n      # https://github.com/pytorch/pytorch/pull/143894\n      - patches/0006-fix-issue-142484.patch\n      - patches/0007-Fix-FindOpenBLAS.patch\n      # point to headers that are now living in $PREFIX/include instead of $SP_DIR/torch/include\n      - patches/0008-point-include-paths-to-Conda-prefix-include-dir.patch\n      - patches/0009-Add-conda-prefix-to-inductor-include-paths.patch\n      - patches/0010-make-ATEN_INCLUDE_DIR-relative-to-TORCH_INSTALL_PREF.patch\n      - patches/0011-remove-DESTINATION-lib-from-CMake-install-TARGETS-di.patch                       # [win]\n      - patches/0012-avoid-deprecated-find_package-CUDA-in-caffe2-CMake-m.patch\n      # backport https://github.com/pytorch/pytorch/pull/148668\n      - patches/0013-Fix-CUPTI-lookup-to-include-target-directory.patch\n      # skip a test that fails with numpy 2.3; can be dropped for pytorch>2.7\n      - patches/0014-skip-test_norm_matrix_degenerate_shapes-on-numpy-2.3.patch\n      # backport https://github.com/pytorch/pytorch/pull/127702\n      - patches/0015-Define-PY_SSIZE_T_CLEAN-before-include-Python.h.patch\n      - patches_submodules/fbgemm/0001-remove-DESTINATION-lib-from-CMake-install-directives.patch     # [win]\n      - patches_submodules/tensorpipe/0001-switch-away-from-find_package-CUDA.patch\n\nbuild:\n  number: {{ build }}\n  # This logic allows two rc variants to be defined in the conda_build_config, but only one to actually be built.\n  # We want to be able to define two variants in the cbc so we can assign different labels to each in the upload channel\n  # (by zipping is_rc with channel_targets). This prevents rc builds being used unless specifically requested.\n{% if \"rc\" in version %}\n  skip: true  # [not is_rc]\n{% else %}\n  skip: true  # [is_rc]\n{% endif %}\n  string: cuda{{ cuda_compiler_version | replace('.', '') }}_{{ blas_impl }}_h{{ PKG_HASH }}_{{ build }}  # [cuda_compiler_version != \"None\"]\n  string: cpu_{{ blas_impl }}_h{{ PKG_HASH }}_{{ build }}                                                 # [cuda_compiler_version == \"None\"]\n  detect_binary_files_with_prefix: false\n  run_exports:\n    - {{ pin_subpackage('libtorch', max_pin='x.x') }}\n  ignore_run_exports_from:\n    - python *                               # [megabuild]\n    - numpy *                                # [megabuild]\n    - cross-python_{{ target_platform }}     # [megabuild and build_platform != target_platform]\n  ignore_run_exports:\n    - python *                               # [megabuild]\n    - numpy *                                # [megabuild]\n    - libmagma_sparse\n\nrequirements:\n  # Keep this list synchronized (except for python*, numpy*) in outputs\n  # We use python to build libtorch as well because it is easier\n  build:\n    # When you change 3.12 here, change it in build.sh/bld.bat as well\n    - python 3.12                            # [megabuild and build_platform != target_platform]\n    - python                                 # [not megabuild and build_platform != target_platform]\n    - cross-python_{{ target_platform }}     # [build_platform != target_platform]\n    - numpy  *                               # [megabuild and build_platform != target_platform]\n    - numpy                                  # [not megabuild and build_platform != target_platform]\n    - {{ stdlib('c') }}\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n    - {{ compiler('cuda') }}                 # [cuda_compiler_version != \"None\"]\n    - llvm-openmp               # [unix]\n    - intel-openmp {{ mkl }}    # [win]\n    - libuv                     # [win]\n    - cmake\n    - ninja\n    # Keep libprotobuf here so that a compatibile version\n    # of protobuf is installed between build and host\n    - libprotobuf\n    - protobuf\n    - make      # [linux]\n    - sccache   # [win]\n    - grep      # [unix]\n    - rsync     # [unix]\n  host:\n    # GPU requirements\n    # building against the older version to satisfy test constraints\n    - cudnn <9.11                     # [cuda_compiler_version != \"None\"]\n    - nccl                            # [cuda_compiler_version != \"None\" and linux]\n    - magma                           # [cuda_compiler_version != \"None\"]\n    - cuda-version {{ cuda_compiler_version }}  # [cuda_compiler_version != \"None\"]\n    - nvtx-c                          # [cuda_compiler_version != \"None\"]\n    {% if cuda_compiler_version != \"None\" %}\n    - cuda-driver-dev                 # [linux]\n    - cuda-cudart-dev\n    - cuda-cupti-dev\n    - cuda-nvrtc-dev\n    - cuda-nvtx-dev\n    - cuda-nvml-dev\n    - cuda-profiler-api\n    - cusparselt\n    - libcublas-dev\n    - libcudss-dev\n    - libcufile-dev  # [linux]\n    - libcufft-dev\n    - libcurand-dev\n    - libcusolver-dev\n    - libcusparse-dev\n    {% endif %}\n    # other requirements\n    - python 3.12  # [megabuild]\n    - python       # [not megabuild]\n    - numpy *      # [megabuild]\n    - numpy        # [not megabuild]\n    - pip\n    - setuptools\n    - pyyaml\n    - requests\n    - six\n    - mkl-devel {{ mkl }}   # [blas_impl == \"mkl\"]\n    - libcblas * *_mkl      # [blas_impl == \"mkl\"]\n    - libblas               # [blas_impl != \"mkl\"]\n    - libcblas              # [blas_impl != \"mkl\"]\n    - liblapack             # [blas_impl != \"mkl\"]\n    - llvm-openmp             # [unix]\n    - intel-openmp {{ mkl }}  # [win]\n    - libabseil\n    - libprotobuf\n    - sleef\n    - libuv\n    - pkg-config  # [unix]\n    - typing_extensions\n    - pybind11\n    - pybind11-abi\n    - eigen\n    - zlib\n  run:\n    - intel-openmp {{ mkl }}            # [win]\n    - libblas * *{{ blas_impl }}        # [blas_impl == \"mkl\"]\n  run_constrained:\n    # These constraints ensure conflict between pytorch and\n    # pytorch-cpu 1.1 which we built before conda-forge had GPU infrastructure\n    # built into place.\n    # https://github.com/conda-forge/pytorch-cpu-feedstock/issues/65\n    - pytorch-cpu {{ version }}    # [cuda_compiler_version == \"None\"]\n    - pytorch-gpu <0.0a0           # [cuda_compiler_version == \"None\"]\n    - pytorch-gpu {{ version }}    # [cuda_compiler_version != \"None\"]\n    - pytorch-cpu <0.0a0           # [cuda_compiler_version != \"None\"]\n    - pytorch {{ version }} cuda{{ cuda_compiler_version | replace('.', '') }}_{{ blas_impl }}_*_{{ build }}  # [cuda_compiler_version != \"None\"]\n    - pytorch {{ version }} cpu_{{ blas_impl }}_*_{{ build }}                                                 # [cuda_compiler_version == \"None\"]\n    # if using OpenBLAS, ensure that a version compatible with OpenMP is used\n    # otherwise, we get the following warnings:\n    # OpenBLAS Warning : Detect OpenMP Loop and this application may hang. Please rebuild the library with USE_OPENMP=1 option.\n    - libopenblas * openmp_*          # [unix and blas_impl != \"mkl\"]\n    - openblas * openmp_*          # [unix and blas_impl != \"mkl\"]\n\n# these tests are for the libtorch output below, but due to\n# a particularity of conda-build, that output is defined in\n# the global build stage, including tests\ntest:\n  requires:\n    # cmake needs a compiler to run package detection, see\n    # https://discourse.cmake.org/t/questions-about-find-package-cli-msvc/6194\n    - {{ compiler('cxx') }}\n    # for CMake config to find cuda & nvrtc\n    - {{ compiler('cuda') }}    # [cuda_compiler_version != \"None\"]\n    - cuda-nvrtc-dev            # [cuda_compiler_version != \"None\"]\n    - nvtx-c                    # [cuda_compiler_version != \"None\"]\n    - cmake\n    - ninja\n    - pkg-config\n  files:\n    - cmake_test/\n  commands:\n    # libraries; peculiar formatting to avoid linter false positives about selectors\n    {% set torch_libs = [\n        \"c10\", \"shm\", \"torch\", \"torch_cpu\", \"torch_global_deps\"\n    ] + (cuda_compiler_version != \"None\" and target_platform.startswith(\"linux\")) * [\n        \"torch_cuda_linalg\"\n    ] + (cuda_compiler_version != \"None\") * [\n        \"c10_cuda\", \"caffe2_nvrtc\", \"torch_cuda\"\n    ] + target_platform.startswith(\"win\") * [\n        \"asmjit\", \"fbgemm\"\n    ]\n    %}\n    {% for each_lib in torch_libs %}\n    - test -f $PREFIX/lib/lib{{ each_lib }}.so              # [linux]\n    - test -f $PREFIX/lib/lib{{ each_lib }}.dylib           # [osx]\n    - if not exist %LIBRARY_BIN%\\{{ each_lib }}.dll exit 1  # [win]\n    {% if each_lib != \"torch_global_deps\" %}\n    - if not exist %LIBRARY_LIB%\\{{ each_lib }}.lib exit 1  # [win]\n    {% endif %}\n    {% endfor %}\n\n    # CMake files in share\n    - test -f $PREFIX/share/cmake/Torch/TorchConfig.cmake                       # [linux]\n    - if not exist %LIBRARY_PREFIX%\\share\\cmake\\Torch\\TorchConfig.cmake exit 1  # [win]\n\n    # test integrity of CMake metadata\n    - cd cmake_test\n    - cmake -GNinja -DCMAKE_CXX_STANDARD=17 $CMAKE_ARGS .   # [unix]\n    - cmake -GNinja -DCMAKE_CXX_STANDARD=17 %CMAKE_ARGS% .  # [win]\n\noutputs:\n  - name: libtorch\n  - name: pytorch\n    script: build.sh    # [unix]\n    script: bld.bat     # [win]\n    build:\n      string: cuda{{ cuda_compiler_version | replace('.', '') }}_{{ blas_impl }}_py{{ CONDA_PY }}_h{{ PKG_HASH }}_{{ build }}  # [cuda_compiler_version != \"None\"]\n      string: cpu_{{ blas_impl }}_py{{ CONDA_PY }}_h{{ PKG_HASH }}_{{ build }}                                                 # [cuda_compiler_version == \"None\"]\n      detect_binary_files_with_prefix: false\n      run_exports:\n        - {{ pin_subpackage('pytorch', max_pin='x.x') }}\n        - {{ pin_subpackage('libtorch', max_pin='x.x') }}\n      ignore_run_exports:\n        - libmagma_sparse\n    requirements:\n      build:\n        - python\n        - cross-python_{{ target_platform }}     # [build_platform != target_platform]\n        - numpy                                  # [build_platform != target_platform]\n        - {{ stdlib('c') }}\n        - {{ compiler('c') }}\n        - {{ compiler('cxx') }}\n        - {{ compiler('cuda') }}                 # [cuda_compiler_version != \"None\"]\n        - llvm-openmp             # [unix]\n        - intel-openmp {{ mkl }}  # [win]\n        - cmake\n        - ninja\n        # Keep libprotobuf here so that a compatibile version\n        # of protobuf is installed between build and host\n        - libprotobuf\n        - protobuf\n        - make      # [linux]\n        - sccache   # [win]\n      host:\n        - {{ pin_subpackage('libtorch', exact=True) }}\n        # GPU requirements\n        - cudnn <9.11                     # [cuda_compiler_version != \"None\"]\n        - nccl                            # [cuda_compiler_version != \"None\" and linux]\n        - cuda-version {{ cuda_compiler_version }}  # [cuda_compiler_version != \"None\"]\n        - nvtx-c                          # [cuda_compiler_version != \"None\"]\n        - magma                           # [cuda_compiler_version != \"None\"]\n        {% if cuda_compiler_version != \"None\" %}\n        - cuda-driver-dev                 # [linux]\n        - cuda-cudart-dev\n        - cuda-cupti-dev\n        - cuda-nvrtc-dev\n        - cuda-nvtx-dev\n        - cuda-nvml-dev\n        - cuda-profiler-api\n        - cusparselt\n        - libcublas-dev\n        - libcudss-dev\n        - libcufile-dev  # [linux]\n        - libcufft-dev\n        - libcurand-dev\n        - libcusolver-dev\n        - libcusparse-dev\n        {% endif %}\n        # other requirements\n        - python\n        - numpy\n        - pip\n        - setuptools\n        - pyyaml\n        - requests\n        - six\n        - mkl-devel {{ mkl }}   # [blas_impl == \"mkl\"]\n        - libcblas * *_mkl      # [blas_impl == \"mkl\"]\n        - libcblas              # [blas_impl != \"mkl\"]\n        - liblapack             # [blas_impl != \"mkl\"]\n        - llvm-openmp             # [unix]\n        - intel-openmp {{ mkl }}  # [win]\n        - libabseil\n        - libprotobuf\n        - pybind11\n        - pybind11-abi\n        - eigen\n        - sleef\n        - libuv\n        - pkg-config  # [unix]\n        - typing_extensions\n        - zlib\n      run:\n        - {{ pin_subpackage('libtorch', exact=True) }}  # [megabuild]\n        # for non-megabuild, allow libtorch from any python version\n        - libtorch {{ version }}.* *_{{ build }}        # [not megabuild]\n        - llvm-openmp                       # [unix]\n        - intel-openmp {{ mkl }}            # [win]\n        - libblas * *{{ blas_impl }}        # [blas_impl == \"mkl\"]\n        - nomkl                             # [blas_impl != \"mkl\"]\n        - triton =={{ triton }}             # [cuda_compiler_version != \"None\" and not win]\n        # avoid that people without GPUs needlessly download ~0.5-1GB\n        - __cuda                            # [cuda_compiler_version != \"None\"]\n        - python\n        # other requirements, see https://github.com/pytorch/pytorch/blame/main/requirements.txt\n        - filelock\n        - fsspec\n        - jinja2\n        - networkx\n        - optree >=0.13.0\n        - pybind11\n        - setuptools\n        - sympy >=1.13.3\n        - typing_extensions >=4.10.0\n      run_constrained:\n        # These constraints ensure conflict between pytorch and\n        # pytorch-cpu 1.1 which we built before conda-forge had GPU infrastructure\n        # built into place.\n        # https://github.com/conda-forge/pytorch-cpu-feedstock/issues/65\n        - pytorch-cpu {{ version }}    # [cuda_compiler_version == \"None\"]\n        - pytorch-gpu <0.0a0           # [cuda_compiler_version == \"None\"]\n        - pytorch-gpu {{ version }}    # [cuda_compiler_version != \"None\"]\n        - pytorch-cpu <0.0a0           # [cuda_compiler_version != \"None\"]\n\n  - name: pytorch-tests\n    build:\n      string: cuda{{ cuda_compiler_version | replace('.', '') }}_{{ blas_impl }}_py{{ CONDA_PY }}_h{{ PKG_HASH }}_{{ build }}  # [cuda_compiler_version != \"None\"]\n      string: cpu_{{ blas_impl }}_py{{ CONDA_PY }}_h{{ PKG_HASH }}_{{ build }}                                                 # [cuda_compiler_version == \"None\"]\n      detect_binary_files_with_prefix: false\n    requirements:\n      host:\n        - python\n      run:\n        - pytorch {{ version }} cuda*_{{ blas_impl }}_py{{ CONDA_PY }}*{{ build }}   # [cuda_compiler_version != \"None\"]\n        - pytorch {{ version }} cpu_{{ blas_impl }}_py{{ CONDA_PY }}*{{ build }}     # [cuda_compiler_version == \"None\"]\n    test:\n      requires:\n        - {{ compiler('c') }}\n        - {{ compiler('cxx') }}\n        # for torch.compile tests\n        - {{ compiler('cuda') }}       # [cuda_compiler_version != \"None\"]\n        - ninja\n        - boto3\n        - hypothesis\n        - pytest\n        - tabulate\n        - pydot\n        - pip\n        - expecttest\n        - xmlrunner\n        - pyyaml\n        # Required by run_test.py\n        - pytest-flakefinder\n        - pytest-rerunfailures\n        - pytest-xdist\n        # danpetry/TF: Pytorch includes their own edited version of pytest-shard and adding\n        # it into the test deps as well results in the --shard-id option being added twice.\n        # https://github.com/pytorch/pytorch/blob/main/test/pytest_shard_custom.py\n        # - pytest-shard\n        # for cmake_test\n        - cmake\n        - cuda-nvrtc-dev            # [cuda_compiler_version != \"None\"]\n        - nvtx-c                    # [cuda_compiler_version != \"None\"]\n        - pybind11\n        # cudnn >=9.11 removed support older GPUs that are still supported by CUDA 12\n        # pin tests since the CI uses sm70 that is no longer supported at the moment\n        # pending https://github.com/conda-forge/admin-requests/pull/1687\n        - cudnn <9.11               # [cuda_compiler_version != \"None\"]\n      imports:\n        - torch\n        - torch._C\n      files:\n        - cmake_test/\n      source_files:\n        # Only include the source_files if we are actually going to run the tests.\n        - test\n        # tools/ is needed to optimise test run\n        # as of pytorch=2.0.0, there is a bug when trying to run tests without the tools\n        - tools\n      commands:\n        # Run pip check so as to ensure that all pytorch packages are installed\n        # https://github.com/conda-forge/pytorch-cpu-feedstock/issues/24\n        - pip check\n        - python -c \"import torch; print(torch.__version__)\"\n        - python -c \"import torch; assert torch.backends.mkldnn.m.is_available()\"  # [x86 and cuda_compiler_version == \"None\"]\n        - python -c \"import torch; torch.tensor(1).to('cpu').numpy(); print('numpy support enabled!!!')\"\n        # We have had issues with openmp .dylibs being doubly loaded in certain cases. These two tests catch the (observed) issue\n        - python -c \"import torch; import numpy\"\n        - python -c \"import numpy; import torch\"\n        - python -c \"import numpy as np;import torch;x = torch.tensor([2], dtype=torch.complex128);assert torch.dot(x, x).real == 4.0\"\n        # distributed support is enabled by default on linux; for mac, we enable it manually in build.sh\n        - python -c \"import torch; assert torch.distributed.is_available()\"         # [linux or osx]\n        - python -c \"import torch; assert torch.backends.cuda.is_built()\"           # [cuda_compiler_version != \"None\"]\n        - python -c \"import torch; assert torch.backends.cudnn.is_available()\"      # [cuda_compiler_version != \"None\"]\n        - python -c \"import torch; assert torch.backends.cudnn.enabled\"             # [cuda_compiler_version != \"None\"]\n        - python -c \"import torch; assert torch.version.cuda is not None\"           # [cuda_compiler_version != \"None\"]\n        # At conda-forge, we target versions of OSX that are too old for MPS support\n        # But if users install a newer version of OSX, they will have MPS support\n        # https://github.com/conda-forge/pytorch-cpu-feedstock/pull/123#issuecomment-1186355073\n        # - python -c \"import torch; assert torch.backends.mps.is_available()\" # [osx]\n\n        # python-version-specific library (default location in SP_DIR symlinks back to this)\n        - test -f $PREFIX/lib/libtorch_python${SHLIB_EXT}           # [unix]\n        - if not exist %LIBRARY_BIN%\\torch_python.dll exit 1        # [win]\n        - if not exist %SP_DIR%\\torch\\lib\\torch_python.lib exit 1   # [win]\n        - if not exist %SP_DIR%\\torch\\lib\\_C.lib exit 1             # [win]\n\n        # a reasonably safe subset of tests that should run under 15 minutes\n        {% set tests = \" \".join([\n            \"test/test_autograd.py\",\n            \"test/test_autograd_fallback.py\",\n            \"test/test_custom_ops.py\",\n            \"test/test_linalg.py\",\n            \"test/test_mkldnn.py\",\n            \"test/test_modules.py\",\n            \"test/test_nn.py\",\n            \"test/test_torch.py\",\n            \"test/test_xnnpack_integration.py\",\n        ]) %}\n        # tests torch.compile; avoid on aarch because it adds >4h in test runtime in emulation;\n        # they add a lot of runtime (15->60min on windows), so run them for only one python version\n        {% set tests = tests ~ \" test/inductor/test_torchinductor.py\" %}    # [py==312 and not (aarch64 or osx)]\n\n        {% set skips = \"(TestTorch and test_print)\" %}\n        # minor tolerance violations\n        {% set skips = skips ~ \" or test_1_sized_with_0_strided_cpu_float32\" %}         # [osx]\n        {% set skips = skips ~ \" or test_batchnorm_nhwc_cpu\" %}                         # [unix]\n        {% set skips = skips ~ \" or test_layer_norm_backwards_eps\" %}                   # [unix]\n        # timeouts and failures on aarch, see https://github.com/conda-forge/pytorch-cpu-feedstock/pull/298#issuecomment-2555888508\n        {% set skips = skips ~ \" or test_pynode_destruction_deadlock\" %}                # [aarch64]\n        {% set skips = skips ~ \" or (TestLinalgCPU and test_cholesky_cpu_float32)\" %}   # [aarch64]\n        {% set skips = skips ~ \" or (TestLinalgCPU and test_pca_lowrank_cpu)\" %}        # [aarch64]\n        {% set skips = skips ~ \" or (TestLinalgCPU and test_svd_lowrank_cpu)\" %}        # [aarch64]\n        {% set skips = skips ~ \" or (TestMkldnnCPU and test_lstm_cpu)\" %}               # [aarch64]\n        # very long-running tests in emulation\n        {% set skips = skips ~ \" or test_eigh_lwork_lapack\" %}                          # [aarch64]\n        {% set skips = skips ~ \" or test_gradgrad_nn_LSTM\" %}                           # [aarch64]\n        {% set skips = skips ~ \" or test_grad_nn_Transformer\" %}                        # [aarch64]\n        {% set skips = skips ~ \" or test_inverse_errors_large\" %}                       # [aarch64]\n        {% set skips = skips ~ \" or (TestXNNPACKConv1dTransformPass and test_conv1d_basic)\" %}  # [aarch64]\n        # errors (possibly QEMU-related) with openblas 0.3.30\n        {% set skips = skips ~ \" or test_addbmm or test_baddbmm or test_bmm\" %}         # [aarch64]\n        # doesn't crash, but gets different result on aarch + CUDA\n        {% set skips = skips ~ \" or illcondition_matrix_input_should_not_crash_cpu\" %}  # [aarch64 and cuda_compiler_version != \"None\"]\n        # may crash spuriously\n        {% set skips = skips ~ \" or (TestAutograd and test_profiler_seq_nr)\" %}\n        {% set skips = skips ~ \" or (TestAutograd and test_profiler_propagation)\" %}\n        # tests that fail due to resource clean-up issues (non-unique temporary libraries), see\n        # https://github.com/conda-forge/pytorch-cpu-feedstock/pull/318#issuecomment-2620080859\n        {% set skips = skips ~ \" or test_mutable_custom_op_fixed_layout\" %}\n        # trivial accuracy problems\n        {% set skips = skips ~ \" or test_BCELoss_weights_no_reduce_cuda\" %}             # [unix and cuda_compiler_version != \"None\"]\n        {% set skips = skips ~ \" or test_ctc_loss_cudnn_tensor_cuda \" %}                # [unix and cuda_compiler_version != \"None\"]\n        {% set skips = skips ~ \" or (TestTorch and test_index_add_correctness)\" %}      # [unix and cuda_compiler_version != \"None\"]\n        # These tests require higher-resource or more recent GPUs than the CI provides\n        {% set skips = skips ~ \" or test_sdpa_inference_mode_aot_compile\" %}            # [linux and cuda_compiler_version != \"None\"]\n        {% set skips = skips ~ \" or (TestNN and test_grid_sample)\" %}                   # [linux and cuda_compiler_version != \"None\"]\n        # don't mess with tests that rely on GPU failure handling\n        {% set skips = skips ~ \" or test_cublas_config_nondeterministic_alert_cuda\" %}  # [linux and cuda_compiler_version != \"None\"]\n        {% set skips = skips ~ \" or test_cross_entropy_loss_2d_out_of_bounds_class\" %}  # [linux and cuda_compiler_version != \"None\"]\n        {% set skips = skips ~ \" or test_indirect_device_assert\" %}                     # [linux and cuda_compiler_version != \"None\"]\n        {% set skips = skips ~ \" or test_reentrant_parent_error_on_cpu_cuda\" %}         # [linux and cuda_compiler_version != \"None\"]\n        # test that fails to find temporary resource\n        {% set skips = skips ~ \" or (GPUTests and test_scatter_reduce2)\" %}             # [linux and cuda_compiler_version != \"None\"]\n        # ROCM test whose skip doesn't trigger\n        {% set skips = skips ~ \" or test_ck_blas_library_cpu\" %}                        # [linux and cuda_compiler_version != \"None\"]\n        # problem with finding output of `torch.cuda.tunable.write_file()`\n        {% set skips = skips ~ \" or test_matmul_offline_tunableop_cuda_float16\" %}      # [linux and cuda_compiler_version != \"None\"]\n        # catastropic accuracy failure in convolution\n        {% set skips = skips ~ \" or test_Conv3d_1x1x1_no_bias_cuda\" %}                  # [linux and cuda_compiler_version != \"None\"]\n        # some triton errors that appeared in #391\n        {% set skips = skips ~ \" or test_isinf_cuda\" %}                                 # [linux and cuda_compiler_version != \"None\"]\n        {% set skips = skips ~ \" or test_donated_buffer_inplace_gpt\" %}                 # [linux and cuda_compiler_version != \"None\"]\n        {% set skips = skips ~ \" or test_linear_dynamic_maxautotune_cuda\" %}            # [linux and cuda_compiler_version != \"None\"]\n        # skip some very long-running groups of tests (~30 minutes total)\n        {% set skips = skips ~ \" or (test_gradgrad_nn_Transformer and _cuda_)\" %}       # [linux and cuda_compiler_version != \"None\"]\n        {% set skips = skips ~ \" or test_avg_pool3d_backward2\" %}                       # [linux and cuda_compiler_version != \"None\"]\n        # MKL problems\n        {% set skips = skips ~ \" or (TestLinalgCPU and test_inverse_errors_large_cpu)\" %}           # [linux and blas_impl == \"mkl\" and cuda_compiler_version != \"None\"]\n        # non-MKL problems\n        {% set skips = skips ~ \" or test_gather_scatter_cpu or test_index_put2_cpu \" %}             # [linux and blas_impl != \"mkl\" and cuda_compiler_version != \"None\"]\n        # these tests are failing with low -n values\n        {% set skips = skips ~ \" or test_base_does_not_require_grad_mode_nothing\" %}\n        {% set skips = skips ~ \" or test_base_does_not_require_grad_mode_warn\" %}\n        {% set skips = skips ~ \" or test_composite_registered_to_cpu_mode_nothing\" %}\n        # these tests are failing on windows\n        {% set skips = skips ~ \" or (TestMkldnnCPU and test_batch_norm_2d_cpu)\" %}       # [win]\n        {% set skips = skips ~ \" or (TestNN and test_Conv1d_dilated)\" %}                 # [win]\n        {% set skips = skips ~ \" or (TestNN and test_Conv1d_pad_same_dilated)\" %}        # [win]\n        {% set skips = skips ~ \" or (TestNN and test_Conv2d_pad_same_dilated)\" %}        # [win]\n        {% set skips = skips ~ \" or (TestNN and test_Conv2d_padding)\" %}                 # [win]\n        {% set skips = skips ~ \" or (TestNN and test_Conv2d_strided)\" %}                 # [win]\n        {% set skips = skips ~ \" or (TestNN and test_Conv3d_dilated)\" %}                 # [win]\n        {% set skips = skips ~ \" or (TestNN and test_Conv3d_dilated_strided)\" %}         # [win]\n        {% set skips = skips ~ \" or (TestNN and test_Conv3d_pad_same_dilated)\" %}        # [win]\n        {% set skips = skips ~ \" or (TestNN and test_Conv3d_stride)\" %}                  # [win]\n        {% set skips = skips ~ \" or (TestNN and test_Conv3d_stride_padding)\" %}          # [win]\n        # flaky test, fragile to GC behavior\n        {% set skips = skips ~ \" or (TestTorch and test_tensor_cycle_via_slots)\" %}\n\n        # the whole test suite takes forever, but we should get a good enough coverage\n        # for potential packaging problems by running a fixed subset\n        - export OMP_NUM_THREADS=4  # [unix]\n        # reduced paralellism to avoid OOM for CUDA builds\n        {% set jobs = \"-n 2\" %}\n        {% set jobs = \"-n 1\" %}     # [linux64 and cuda_compiler_version != \"None\"]\n        # test only one python version on aarch because emulation is super-slow;\n        # disable hypothesis because it randomly yields health check errors\n        - pytest {{ jobs }} {{ tests }} -k \"not ({{ skips }})\" -m \"not hypothesis\" --durations=50 --disable-warnings    # [not aarch64 or py==312]\n\n        # regression test for https://github.com/conda-forge/pytorch-cpu-feedstock/issues/329, where we picked up\n        # duplicate `.pyc` files due to newest py-ver (3.13) in the build environment not matching the one in host;\n        # obviously this test can only be done for other python versions.\n        - test ! -f $SP_DIR/functorch/__pycache__/__init__.cpython-313.pyc          # [py!=313 and unix]\n        - if exist %SP_DIR%\\functorch\\__pycache__\\__init__.cpython-313.pyc exit 1   # [py!=313 and win]\n\n        # test integrity of CMake metadata and ensure that THPLayoutType is visible as a symbol from libtorch_python\n        - cd cmake_test\n        - cmake -GNinja -DCMAKE_CXX_STANDARD=17 -DWITH_TORCH_PYTHON=ON $CMAKE_ARGS .   # [unix]\n        - cmake -GNinja -DCMAKE_CXX_STANDARD=17 -DWITH_TORCH_PYTHON=ON %CMAKE_ARGS% .  # [win]\n        - cmake --build .                   # [unix]\n        - cmake --build . --config Release  # [win]\n\n  # 2021/08/01, hmaarrfk\n  # While this seems like a roundabout way of defining the package name\n  # It helps the linter avoid errors on a package not having tests.\n  {% set pytorch_cpu_gpu = \"pytorch-cpu\" %}   # [cuda_compiler_version == \"None\"]\n  {% set pytorch_cpu_gpu = \"pytorch-gpu\" %}   # [cuda_compiler_version != \"None\"]\n  - name: {{ pytorch_cpu_gpu }}\n    build:\n      string: cuda{{ cuda_compiler_version | replace('.', '') }}_{{ blas_impl }}_h{{ PKG_HASH }}_{{ build }}    # [megabuild and cuda_compiler_version != \"None\"]\n      string: cpu_{{ blas_impl }}_h{{ PKG_HASH }}_{{ build }}                                                   # [megabuild and cuda_compiler_version == \"None\"]\n      string: cpu_{{ blas_impl }}_py{{ CONDA_PY }}_h{{ PKG_HASH }}_{{ build }}                                  # [not megabuild]\n      detect_binary_files_with_prefix: false\n    requirements:\n      run:\n        - pytorch {{ version }} cuda*_{{ blas_impl }}*{{ build }}   # [megabuild and cuda_compiler_version != \"None\"]\n        - pytorch {{ version }} cpu_{{ blas_impl }}*{{ build }}     # [megabuild and cuda_compiler_version == \"None\"]\n        - {{ pin_subpackage(\"pytorch\", exact=True) }}               # [not megabuild]\n    test:\n      imports:\n        - torch\n\nabout:\n  home: https://pytorch.org/\n  dev_url: https://github.com/pytorch/pytorch\n  license: BSD-3-Clause\n  license_family: BSD\n  license_file:\n    - LICENSE\n    - NOTICE\n    - third_party/CMake/Copyright.txt\n  summary: PyTorch is an optimized tensor library for deep learning using GPUs and CPUs.\n  description: |\n    PyTorch is a Python package that provides two high-level features:\n      - Tensor computation (like NumPy) with strong GPU acceleration\n      - Deep neural networks built on a tape-based autograd system\n    You can reuse your favorite Python packages such as NumPy, SciPy, and Cython to extend PyTorch when needed.\n  doc_url: https://pytorch.org/docs/\n\nextra:\n  recipe-maintainers:\n    - baszalmstra\n    - benjaminrwilson\n    - beckermr\n    - h-vetinari\n    - hmaarrfk\n    - jeongseok-meta\n    - mgorny\n    - sodre\n    - Tobias-Fischer\n  feedstock-name: pytorch-cpu\n",
  "req": {
    "__set__": true,
    "elements": [
      "__cuda",
      "c_compiler_stub",
      "c_stdlib_stub",
      "cmake",
      "cuda-cudart-dev",
      "cuda-cupti-dev",
      "cuda-driver-dev",
      "cuda-nvml-dev",
      "cuda-nvrtc-dev",
      "cuda-nvtx-dev",
      "cuda-profiler-api",
      "cuda-version",
      "cuda_compiler_stub",
      "cudnn",
      "cusparselt",
      "cxx_compiler_stub",
      "eigen",
      "filelock",
      "fsspec",
      "grep",
      "intel-openmp",
      "jinja2",
      "libabseil",
      "libblas",
      "libcblas",
      "libcublas-dev",
      "libcudss-dev",
      "libcufft-dev",
      "libcufile-dev",
      "libcurand-dev",
      "libcusolver-dev",
      "libcusparse-dev",
      "liblapack",
      "libprotobuf",
      "libtorch",
      "libuv",
      "llvm-openmp",
      "magma",
      "make",
      "mkl-devel",
      "nccl",
      "networkx",
      "ninja",
      "nomkl",
      "numpy",
      "nvtx-c",
      "optree",
      "pip",
      "pkg-config",
      "protobuf",
      "pybind11",
      "pybind11-abi",
      "python",
      "pytorch",
      "pyyaml",
      "requests",
      "rsync",
      "sccache",
      "setuptools",
      "six",
      "sleef",
      "sympy",
      "triton",
      "typing_extensions",
      "zlib"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cuda_compiler_stub",
        "cxx_compiler_stub",
        "grep",
        "intel-openmp",
        "libprotobuf",
        "libuv",
        "llvm-openmp",
        "make",
        "ninja",
        "protobuf",
        "python",
        "rsync",
        "sccache"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cuda-cudart-dev",
        "cuda-cupti-dev",
        "cuda-driver-dev",
        "cuda-nvml-dev",
        "cuda-nvrtc-dev",
        "cuda-nvtx-dev",
        "cuda-profiler-api",
        "cuda-version",
        "cuda_compiler_stub",
        "cudnn",
        "cusparselt",
        "cxx_compiler_stub",
        "eigen",
        "intel-openmp",
        "libabseil",
        "libblas",
        "libcblas",
        "libcublas-dev",
        "libcudss-dev",
        "libcufft-dev",
        "libcufile-dev",
        "libcurand-dev",
        "libcusolver-dev",
        "libcusparse-dev",
        "liblapack",
        "libprotobuf",
        "libtorch",
        "libuv",
        "llvm-openmp",
        "magma",
        "mkl-devel",
        "nccl",
        "numpy",
        "nvtx-c",
        "openmp",
        "pip",
        "pkg-config",
        "pybind11",
        "pybind11-abi",
        "python",
        "pyyaml",
        "requests",
        "setuptools",
        "six",
        "sleef",
        "typing_extensions",
        "zlib"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "__cuda",
        "c_compiler_stub",
        "c_stdlib_stub",
        "cuda_compiler_stub",
        "cxx_compiler_stub",
        "filelock",
        "fsspec",
        "intel-openmp",
        "jinja2",
        "libblas",
        "libtorch",
        "llvm-openmp",
        "networkx",
        "nomkl",
        "openmp",
        "optree",
        "pybind11",
        "python",
        "pytorch",
        "setuptools",
        "sympy",
        "triton",
        "typing_extensions"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "boto3",
        "c_compiler_stub",
        "cmake",
        "cuda-nvrtc-dev",
        "cuda_compiler_stub",
        "cudnn",
        "cxx_compiler_stub",
        "expecttest",
        "hypothesis",
        "ninja",
        "nvtx-c",
        "pip",
        "pkg-config",
        "pybind11",
        "pydot",
        "pytest",
        "pytest-flakefinder",
        "pytest-rerunfailures",
        "pytest-xdist",
        "pyyaml",
        "tabulate",
        "xmlrunner"
      ]
    }
  },
  "strong_exports": false,
  "time": 1568135301.1552057,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cuda_compiler_stub",
        "cxx_compiler_stub",
        "grep",
        "intel-openmp <2025",
        "libprotobuf",
        "libuv",
        "llvm-openmp",
        "make",
        "ninja",
        "protobuf",
        "python",
        "rsync",
        "sccache"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "cuda-cudart-dev",
        "cuda-cupti-dev",
        "cuda-driver-dev",
        "cuda-nvml-dev",
        "cuda-nvrtc-dev",
        "cuda-nvtx-dev",
        "cuda-profiler-api",
        "cuda-version 12.8",
        "cuda-version 12.9",
        "cudnn <9.11",
        "cusparselt",
        "eigen",
        "intel-openmp <2025",
        "libabseil",
        "libblas",
        "libcblas",
        "libcblas * *_mkl",
        "libcublas-dev",
        "libcudss-dev",
        "libcufft-dev",
        "libcufile-dev",
        "libcurand-dev",
        "libcusolver-dev",
        "libcusparse-dev",
        "liblapack",
        "libprotobuf",
        "libtorch",
        "libuv",
        "llvm-openmp",
        "magma",
        "mkl-devel <2025",
        "nccl",
        "numpy",
        "numpy *",
        "nvtx-c",
        "pip",
        "pkg-config",
        "pybind11",
        "pybind11-abi",
        "python",
        "python 3.12",
        "pyyaml",
        "requests",
        "setuptools",
        "six",
        "sleef",
        "typing_extensions",
        "zlib"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "__cuda",
        "filelock",
        "fsspec",
        "intel-openmp <2025",
        "jinja2",
        "libblas * *mkl",
        "libtorch",
        "libtorch 2.8.0.* *_1",
        "libtorch 2.8.0.* *_101",
        "llvm-openmp",
        "networkx",
        "nomkl",
        "optree >=0.13.0",
        "pybind11",
        "python",
        "pytorch",
        "pytorch 2.8.0 cpu_generic*1",
        "pytorch 2.8.0 cpu_generic_py310*1",
        "pytorch 2.8.0 cpu_generic_py311*1",
        "pytorch 2.8.0 cpu_generic_py312*1",
        "pytorch 2.8.0 cpu_generic_py313*1",
        "pytorch 2.8.0 cpu_mkl*101",
        "pytorch 2.8.0 cpu_mkl_py310*101",
        "pytorch 2.8.0 cpu_mkl_py311*101",
        "pytorch 2.8.0 cpu_mkl_py312*101",
        "pytorch 2.8.0 cpu_mkl_py313*101",
        "pytorch 2.8.0 cuda*_generic*201",
        "pytorch 2.8.0 cuda*_generic_py313*201",
        "pytorch 2.8.0 cuda*_mkl*301",
        "pytorch 2.8.0 cuda*_mkl_py313*301",
        "setuptools",
        "sympy >=1.13.3",
        "triton ==3.4.0",
        "typing_extensions >=4.10.0"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "boto3",
        "c_compiler_stub",
        "cmake",
        "cuda-nvrtc-dev",
        "cuda_compiler_stub",
        "cudnn <9.11",
        "cxx_compiler_stub",
        "expecttest",
        "hypothesis",
        "ninja",
        "nvtx-c",
        "pip",
        "pkg-config",
        "pybind11",
        "pydot",
        "pytest",
        "pytest-flakefinder",
        "pytest-rerunfailures",
        "pytest-xdist",
        "pyyaml",
        "tabulate",
        "xmlrunner"
      ]
    }
  },
  "url": "https://github.com/pytorch/pytorch/releases/download/v2.8.0/pytorch-v2.8.0.tar.gz",
  "version": "2.8.0",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/pytorch-cpu.json"
  },
  "win_64_meta_yaml": {
    "about": {
      "description": "PyTorch is a Python package that provides two high-level features:\n  - Tensor computation (like NumPy) with strong GPU acceleration\n  - Deep neural networks built on a tape-based autograd system\nYou can reuse your favorite Python packages such as NumPy, SciPy, and Cython to extend PyTorch when needed.\n",
      "dev_url": "https://github.com/pytorch/pytorch",
      "doc_url": "https://pytorch.org/docs/",
      "home": "https://pytorch.org/",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": [
        "LICENSE",
        "NOTICE",
        "third_party/CMake/Copyright.txt"
      ],
      "summary": "PyTorch is an optimized tensor library for deep learning using GPUs and CPUs."
    },
    "build": {
      "detect_binary_files_with_prefix": false,
      "ignore_run_exports": [
        "python *",
        "numpy *",
        "libmagma_sparse"
      ],
      "ignore_run_exports_from": [
        "python *",
        "numpy *"
      ],
      "number": "101",
      "run_exports": [
        "libtorch"
      ],
      "string": "cpu_mkl_h1234567_101"
    },
    "extra": {
      "feedstock-name": "pytorch-cpu",
      "recipe-maintainers": [
        "baszalmstra",
        "benjaminrwilson",
        "beckermr",
        "h-vetinari",
        "hmaarrfk",
        "jeongseok-meta",
        "mgorny",
        "sodre",
        "Tobias-Fischer"
      ]
    },
    "outputs": [
      {
        "name": "libtorch"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "ignore_run_exports": [
            "libmagma_sparse"
          ],
          "run_exports": [
            "pytorch",
            "libtorch"
          ],
          "string": "cuda128_mkl_py313_h1234567_301"
        },
        "name": "pytorch",
        "requirements": {
          "build": [
            "python",
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cuda_compiler_stub",
            "intel-openmp <2025",
            "cmake",
            "ninja",
            "libprotobuf",
            "protobuf",
            "sccache"
          ],
          "host": [
            "libtorch",
            "cudnn <9.11",
            "cuda-version 12.8",
            "nvtx-c",
            "magma",
            "cuda-cudart-dev",
            "cuda-cupti-dev",
            "cuda-nvrtc-dev",
            "cuda-nvtx-dev",
            "cuda-nvml-dev",
            "cuda-profiler-api",
            "cusparselt",
            "libcublas-dev",
            "libcudss-dev",
            "libcufft-dev",
            "libcurand-dev",
            "libcusolver-dev",
            "libcusparse-dev",
            "python",
            "numpy",
            "pip",
            "setuptools",
            "pyyaml",
            "requests",
            "six",
            "mkl-devel <2025",
            "libcblas * *_mkl",
            "intel-openmp <2025",
            "libabseil",
            "libprotobuf",
            "pybind11",
            "pybind11-abi",
            "eigen",
            "sleef",
            "libuv",
            "typing_extensions",
            "zlib"
          ],
          "run": [
            "libtorch",
            "intel-openmp <2025",
            "libblas * *mkl",
            "__cuda",
            "python",
            "filelock",
            "fsspec",
            "jinja2",
            "networkx",
            "optree >=0.13.0",
            "pybind11",
            "setuptools",
            "sympy >=1.13.3",
            "typing_extensions >=4.10.0"
          ],
          "run_constrained": [
            "pytorch-gpu 2.8.0",
            "pytorch-cpu <0.0a0"
          ]
        },
        "script": "bld.bat"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cuda128_mkl_py313_h1234567_301"
        },
        "name": "pytorch-tests",
        "requirements": {
          "host": [
            "python"
          ],
          "run": [
            "pytorch 2.8.0 cuda*_mkl_py313*301"
          ]
        },
        "test": {
          "commands": [
            "pip check",
            "python -c \"import torch; print(torch.__version__)\"",
            "python -c \"import torch; torch.tensor(1).to('cpu').numpy(); print('numpy support enabled!!!')\"",
            "python -c \"import torch; import numpy\"",
            "python -c \"import numpy; import torch\"",
            "python -c \"import numpy as np;import torch;x = torch.tensor([2], dtype=torch.complex128);assert torch.dot(x, x).real == 4.0\"",
            "python -c \"import torch; assert torch.backends.cuda.is_built()\"",
            "python -c \"import torch; assert torch.backends.cudnn.is_available()\"",
            "python -c \"import torch; assert torch.backends.cudnn.enabled\"",
            "python -c \"import torch; assert torch.version.cuda is not None\"",
            "if not exist %LIBRARY_BIN%\\torch_python.dll exit 1",
            "if not exist %SP_DIR%\\torch\\lib\\torch_python.lib exit 1",
            "if not exist %SP_DIR%\\torch\\lib\\_C.lib exit 1",
            "pytest -n 1 test/test_autograd.py test/test_autograd_fallback.py test/test_custom_ops.py test/test_linalg.py test/test_mkldnn.py test/test_modules.py test/test_nn.py test/test_torch.py test/test_xnnpack_integration.py test/inductor/test_torchinductor.py -k \"not ((TestTorch and test_print) or test_1_sized_with_0_strided_cpu_float32 or test_batchnorm_nhwc_cpu or test_layer_norm_backwards_eps or test_pynode_destruction_deadlock or (TestLinalgCPU and test_cholesky_cpu_float32) or (TestLinalgCPU and test_pca_lowrank_cpu) or (TestLinalgCPU and test_svd_lowrank_cpu) or (TestMkldnnCPU and test_lstm_cpu) or test_eigh_lwork_lapack or test_gradgrad_nn_LSTM or test_grad_nn_Transformer or test_inverse_errors_large or (TestXNNPACKConv1dTransformPass and test_conv1d_basic) or test_addbmm or test_baddbmm or test_bmm or illcondition_matrix_input_should_not_crash_cpu or (TestAutograd and test_profiler_seq_nr) or (TestAutograd and test_profiler_propagation) or test_mutable_custom_op_fixed_layout or test_BCELoss_weights_no_reduce_cuda or test_ctc_loss_cudnn_tensor_cuda  or (TestTorch and test_index_add_correctness) or test_sdpa_inference_mode_aot_compile or (TestNN and test_grid_sample) or test_cublas_config_nondeterministic_alert_cuda or test_cross_entropy_loss_2d_out_of_bounds_class or test_indirect_device_assert or test_reentrant_parent_error_on_cpu_cuda or (GPUTests and test_scatter_reduce2) or test_ck_blas_library_cpu or test_matmul_offline_tunableop_cuda_float16 or test_Conv3d_1x1x1_no_bias_cuda or test_isinf_cuda or test_donated_buffer_inplace_gpt or test_linear_dynamic_maxautotune_cuda or (test_gradgrad_nn_Transformer and _cuda_) or test_avg_pool3d_backward2 or (TestLinalgCPU and test_inverse_errors_large_cpu) or test_gather_scatter_cpu or test_index_put2_cpu  or test_base_does_not_require_grad_mode_nothing or test_base_does_not_require_grad_mode_warn or test_composite_registered_to_cpu_mode_nothing or (TestMkldnnCPU and test_batch_norm_2d_cpu) or (TestNN and test_Conv1d_dilated) or (TestNN and test_Conv1d_pad_same_dilated) or (TestNN and test_Conv2d_pad_same_dilated) or (TestNN and test_Conv2d_padding) or (TestNN and test_Conv2d_strided) or (TestNN and test_Conv3d_dilated) or (TestNN and test_Conv3d_dilated_strided) or (TestNN and test_Conv3d_pad_same_dilated) or (TestNN and test_Conv3d_stride) or (TestNN and test_Conv3d_stride_padding) or (TestTorch and test_tensor_cycle_via_slots))\" -m \"not hypothesis\" --durations=50 --disable-warnings",
            "if exist %SP_DIR%\\functorch\\__pycache__\\__init__.cpython-313.pyc exit 1",
            "cd cmake_test",
            "cmake -GNinja -DCMAKE_CXX_STANDARD=17 -DWITH_TORCH_PYTHON=ON %CMAKE_ARGS% .",
            "cmake --build . --config Release"
          ],
          "files": [
            "cmake_test/"
          ],
          "imports": [
            "torch",
            "torch._C"
          ],
          "requires": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cuda_compiler_stub",
            "ninja",
            "boto3",
            "hypothesis",
            "pytest",
            "tabulate",
            "pydot",
            "pip",
            "expecttest",
            "xmlrunner",
            "pyyaml",
            "pytest-flakefinder",
            "pytest-rerunfailures",
            "pytest-xdist",
            "cmake",
            "cuda-nvrtc-dev",
            "nvtx-c",
            "pybind11",
            "cudnn <9.11"
          ],
          "source_files": [
            "test",
            "tools"
          ]
        }
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cuda128_mkl_h1234567_301"
        },
        "name": "pytorch-gpu",
        "requirements": {
          "run": [
            "pytorch 2.8.0 cuda*_mkl*301"
          ]
        },
        "test": {
          "imports": [
            "torch"
          ]
        }
      },
      {
        "name": "libtorch"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "ignore_run_exports": [
            "libmagma_sparse"
          ],
          "run_exports": [
            "pytorch",
            "libtorch"
          ],
          "string": "cpu_mkl_py313_h1234567_101"
        },
        "name": "pytorch",
        "requirements": {
          "build": [
            "python",
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "intel-openmp <2025",
            "cmake",
            "ninja",
            "libprotobuf",
            "protobuf",
            "sccache"
          ],
          "host": [
            "libtorch",
            "python",
            "numpy",
            "pip",
            "setuptools",
            "pyyaml",
            "requests",
            "six",
            "mkl-devel <2025",
            "libcblas * *_mkl",
            "intel-openmp <2025",
            "libabseil",
            "libprotobuf",
            "pybind11",
            "pybind11-abi",
            "eigen",
            "sleef",
            "libuv",
            "typing_extensions",
            "zlib"
          ],
          "run": [
            "libtorch",
            "intel-openmp <2025",
            "libblas * *mkl",
            "python",
            "filelock",
            "fsspec",
            "jinja2",
            "networkx",
            "optree >=0.13.0",
            "pybind11",
            "setuptools",
            "sympy >=1.13.3",
            "typing_extensions >=4.10.0"
          ],
          "run_constrained": [
            "pytorch-cpu 2.8.0",
            "pytorch-gpu <0.0a0"
          ]
        },
        "script": "bld.bat"
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cpu_mkl_py313_h1234567_101"
        },
        "name": "pytorch-tests",
        "requirements": {
          "host": [
            "python"
          ],
          "run": [
            "pytorch 2.8.0 cpu_mkl_py313*101"
          ]
        },
        "test": {
          "commands": [
            "pip check",
            "python -c \"import torch; print(torch.__version__)\"",
            "python -c \"import torch; assert torch.backends.mkldnn.m.is_available()\"",
            "python -c \"import torch; torch.tensor(1).to('cpu').numpy(); print('numpy support enabled!!!')\"",
            "python -c \"import torch; import numpy\"",
            "python -c \"import numpy; import torch\"",
            "python -c \"import numpy as np;import torch;x = torch.tensor([2], dtype=torch.complex128);assert torch.dot(x, x).real == 4.0\"",
            "if not exist %LIBRARY_BIN%\\torch_python.dll exit 1",
            "if not exist %SP_DIR%\\torch\\lib\\torch_python.lib exit 1",
            "if not exist %SP_DIR%\\torch\\lib\\_C.lib exit 1",
            "pytest -n 1 test/test_autograd.py test/test_autograd_fallback.py test/test_custom_ops.py test/test_linalg.py test/test_mkldnn.py test/test_modules.py test/test_nn.py test/test_torch.py test/test_xnnpack_integration.py test/inductor/test_torchinductor.py -k \"not ((TestTorch and test_print) or test_1_sized_with_0_strided_cpu_float32 or test_batchnorm_nhwc_cpu or test_layer_norm_backwards_eps or test_pynode_destruction_deadlock or (TestLinalgCPU and test_cholesky_cpu_float32) or (TestLinalgCPU and test_pca_lowrank_cpu) or (TestLinalgCPU and test_svd_lowrank_cpu) or (TestMkldnnCPU and test_lstm_cpu) or test_eigh_lwork_lapack or test_gradgrad_nn_LSTM or test_grad_nn_Transformer or test_inverse_errors_large or (TestXNNPACKConv1dTransformPass and test_conv1d_basic) or test_addbmm or test_baddbmm or test_bmm or illcondition_matrix_input_should_not_crash_cpu or (TestAutograd and test_profiler_seq_nr) or (TestAutograd and test_profiler_propagation) or test_mutable_custom_op_fixed_layout or test_BCELoss_weights_no_reduce_cuda or test_ctc_loss_cudnn_tensor_cuda  or (TestTorch and test_index_add_correctness) or test_sdpa_inference_mode_aot_compile or (TestNN and test_grid_sample) or test_cublas_config_nondeterministic_alert_cuda or test_cross_entropy_loss_2d_out_of_bounds_class or test_indirect_device_assert or test_reentrant_parent_error_on_cpu_cuda or (GPUTests and test_scatter_reduce2) or test_ck_blas_library_cpu or test_matmul_offline_tunableop_cuda_float16 or test_Conv3d_1x1x1_no_bias_cuda or test_isinf_cuda or test_donated_buffer_inplace_gpt or test_linear_dynamic_maxautotune_cuda or (test_gradgrad_nn_Transformer and _cuda_) or test_avg_pool3d_backward2 or (TestLinalgCPU and test_inverse_errors_large_cpu) or test_gather_scatter_cpu or test_index_put2_cpu  or test_base_does_not_require_grad_mode_nothing or test_base_does_not_require_grad_mode_warn or test_composite_registered_to_cpu_mode_nothing or (TestMkldnnCPU and test_batch_norm_2d_cpu) or (TestNN and test_Conv1d_dilated) or (TestNN and test_Conv1d_pad_same_dilated) or (TestNN and test_Conv2d_pad_same_dilated) or (TestNN and test_Conv2d_padding) or (TestNN and test_Conv2d_strided) or (TestNN and test_Conv3d_dilated) or (TestNN and test_Conv3d_dilated_strided) or (TestNN and test_Conv3d_pad_same_dilated) or (TestNN and test_Conv3d_stride) or (TestNN and test_Conv3d_stride_padding) or (TestTorch and test_tensor_cycle_via_slots))\" -m \"not hypothesis\" --durations=50 --disable-warnings",
            "if exist %SP_DIR%\\functorch\\__pycache__\\__init__.cpython-313.pyc exit 1",
            "cd cmake_test",
            "cmake -GNinja -DCMAKE_CXX_STANDARD=17 -DWITH_TORCH_PYTHON=ON %CMAKE_ARGS% .",
            "cmake --build . --config Release"
          ],
          "files": [
            "cmake_test/"
          ],
          "imports": [
            "torch",
            "torch._C"
          ],
          "requires": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "ninja",
            "boto3",
            "hypothesis",
            "pytest",
            "tabulate",
            "pydot",
            "pip",
            "expecttest",
            "xmlrunner",
            "pyyaml",
            "pytest-flakefinder",
            "pytest-rerunfailures",
            "pytest-xdist",
            "cmake",
            "pybind11"
          ],
          "source_files": [
            "test",
            "tools"
          ]
        }
      },
      {
        "build": {
          "detect_binary_files_with_prefix": false,
          "string": "cpu_mkl_h1234567_101"
        },
        "name": "pytorch-gpu",
        "requirements": {
          "run": [
            "pytorch 2.8.0 cpu_mkl*101"
          ]
        },
        "test": {
          "imports": [
            "torch"
          ]
        }
      }
    ],
    "package": {
      "name": "libtorch",
      "version": "2.8.0"
    },
    "requirements": {
      "build": [
        "c_stdlib_stub",
        "c_compiler_stub",
        "cxx_compiler_stub",
        "cuda_compiler_stub",
        "intel-openmp <2025",
        "libuv",
        "cmake",
        "ninja",
        "libprotobuf",
        "protobuf",
        "sccache"
      ],
      "host": [
        "cudnn <9.11",
        "magma",
        "cuda-version 12.8",
        "nvtx-c",
        "cuda-cudart-dev",
        "cuda-cupti-dev",
        "cuda-nvrtc-dev",
        "cuda-nvtx-dev",
        "cuda-nvml-dev",
        "cuda-profiler-api",
        "cusparselt",
        "libcublas-dev",
        "libcudss-dev",
        "libcufft-dev",
        "libcurand-dev",
        "libcusolver-dev",
        "libcusparse-dev",
        "python 3.12",
        "numpy *",
        "pip",
        "setuptools",
        "pyyaml",
        "requests",
        "six",
        "mkl-devel <2025",
        "libcblas * *_mkl",
        "intel-openmp <2025",
        "libabseil",
        "libprotobuf",
        "sleef",
        "libuv",
        "typing_extensions",
        "pybind11",
        "pybind11-abi",
        "eigen",
        "zlib"
      ],
      "run": [
        "intel-openmp <2025",
        "libblas * *mkl"
      ],
      "run_constrained": [
        "pytorch-gpu 2.8.0",
        "pytorch-cpu <0.0a0",
        "pytorch 2.8.0 cuda128_mkl_*_301",
        "pytorch-cpu 2.8.0",
        "pytorch-gpu <0.0a0",
        "pytorch 2.8.0 cpu_mkl_*_101"
      ]
    },
    "schema_version": 0,
    "source": [
      {
        "patches": [
          "patches/0001-Force-usage-of-python-3-and-error-without-numpy.patch",
          "patches/0002-Help-find-numpy.patch",
          "patches/0004-Allow-overriding-CUDA-related-paths.patch",
          "patches/0005-Use-BLAS_USE_CBLAS_DOT-for-OpenBLAS-builds.patch",
          "patches/0006-fix-issue-142484.patch",
          "patches/0007-Fix-FindOpenBLAS.patch",
          "patches/0008-point-include-paths-to-Conda-prefix-include-dir.patch",
          "patches/0009-Add-conda-prefix-to-inductor-include-paths.patch",
          "patches/0010-make-ATEN_INCLUDE_DIR-relative-to-TORCH_INSTALL_PREF.patch",
          "patches/0011-remove-DESTINATION-lib-from-CMake-install-TARGETS-di.patch",
          "patches/0012-avoid-deprecated-find_package-CUDA-in-caffe2-CMake-m.patch",
          "patches/0013-Fix-CUPTI-lookup-to-include-target-directory.patch",
          "patches/0014-skip-test_norm_matrix_degenerate_shapes-on-numpy-2.3.patch",
          "patches/0015-Define-PY_SSIZE_T_CLEAN-before-include-Python.h.patch",
          "patches_submodules/fbgemm/0001-remove-DESTINATION-lib-from-CMake-install-directives.patch",
          "patches_submodules/tensorpipe/0001-switch-away-from-find_package-CUDA.patch"
        ],
        "sha256": "c70a2c9488f6f6e8af5982a10d1cc2c37b7df5e6506d839daa5d5e250953d7b5",
        "url": "https://github.com/pytorch/pytorch/releases/download/v2.8.0/pytorch-v2.8.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Force-usage-of-python-3-and-error-without-numpy.patch",
          "patches/0002-Help-find-numpy.patch",
          "patches/0004-Allow-overriding-CUDA-related-paths.patch",
          "patches/0005-Use-BLAS_USE_CBLAS_DOT-for-OpenBLAS-builds.patch",
          "patches/0006-fix-issue-142484.patch",
          "patches/0007-Fix-FindOpenBLAS.patch",
          "patches/0008-point-include-paths-to-Conda-prefix-include-dir.patch",
          "patches/0009-Add-conda-prefix-to-inductor-include-paths.patch",
          "patches/0010-make-ATEN_INCLUDE_DIR-relative-to-TORCH_INSTALL_PREF.patch",
          "patches/0011-remove-DESTINATION-lib-from-CMake-install-TARGETS-di.patch",
          "patches/0012-avoid-deprecated-find_package-CUDA-in-caffe2-CMake-m.patch",
          "patches/0013-Fix-CUPTI-lookup-to-include-target-directory.patch",
          "patches/0014-skip-test_norm_matrix_degenerate_shapes-on-numpy-2.3.patch",
          "patches/0015-Define-PY_SSIZE_T_CLEAN-before-include-Python.h.patch",
          "patches_submodules/fbgemm/0001-remove-DESTINATION-lib-from-CMake-install-directives.patch",
          "patches_submodules/tensorpipe/0001-switch-away-from-find_package-CUDA.patch"
        ],
        "sha256": "c70a2c9488f6f6e8af5982a10d1cc2c37b7df5e6506d839daa5d5e250953d7b5",
        "url": "https://github.com/pytorch/pytorch/releases/download/v2.8.0/pytorch-v2.8.0.tar.gz"
      }
    ],
    "test": {
      "commands": [
        "if not exist %LIBRARY_BIN%\\c10.dll exit 1",
        "if not exist %LIBRARY_LIB%\\c10.lib exit 1",
        "if not exist %LIBRARY_BIN%\\shm.dll exit 1",
        "if not exist %LIBRARY_LIB%\\shm.lib exit 1",
        "if not exist %LIBRARY_BIN%\\torch.dll exit 1",
        "if not exist %LIBRARY_LIB%\\torch.lib exit 1",
        "if not exist %LIBRARY_BIN%\\torch_cpu.dll exit 1",
        "if not exist %LIBRARY_LIB%\\torch_cpu.lib exit 1",
        "if not exist %LIBRARY_BIN%\\torch_global_deps.dll exit 1",
        "if not exist %LIBRARY_BIN%\\c10_cuda.dll exit 1",
        "if not exist %LIBRARY_LIB%\\c10_cuda.lib exit 1",
        "if not exist %LIBRARY_BIN%\\caffe2_nvrtc.dll exit 1",
        "if not exist %LIBRARY_LIB%\\caffe2_nvrtc.lib exit 1",
        "if not exist %LIBRARY_BIN%\\torch_cuda.dll exit 1",
        "if not exist %LIBRARY_LIB%\\torch_cuda.lib exit 1",
        "if not exist %LIBRARY_BIN%\\asmjit.dll exit 1",
        "if not exist %LIBRARY_LIB%\\asmjit.lib exit 1",
        "if not exist %LIBRARY_BIN%\\fbgemm.dll exit 1",
        "if not exist %LIBRARY_LIB%\\fbgemm.lib exit 1",
        "if not exist %LIBRARY_PREFIX%\\share\\cmake\\Torch\\TorchConfig.cmake exit 1",
        "cd cmake_test",
        "cmake -GNinja -DCMAKE_CXX_STANDARD=17 %CMAKE_ARGS% ."
      ],
      "files": [
        "cmake_test/"
      ],
      "requires": [
        "cxx_compiler_stub",
        "cuda_compiler_stub",
        "cuda-nvrtc-dev",
        "nvtx-c",
        "cmake",
        "ninja",
        "pkg-config"
      ]
    }
  },
  "win_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cuda_compiler_stub",
        "cxx_compiler_stub",
        "intel-openmp",
        "libprotobuf",
        "libuv",
        "ninja",
        "protobuf",
        "python",
        "sccache"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "cuda-cudart-dev",
        "cuda-cupti-dev",
        "cuda-nvml-dev",
        "cuda-nvrtc-dev",
        "cuda-nvtx-dev",
        "cuda-profiler-api",
        "cuda-version",
        "cudnn",
        "cusparselt",
        "eigen",
        "intel-openmp",
        "libabseil",
        "libcblas",
        "libcublas-dev",
        "libcudss-dev",
        "libcufft-dev",
        "libcurand-dev",
        "libcusolver-dev",
        "libcusparse-dev",
        "libprotobuf",
        "libtorch",
        "libuv",
        "magma",
        "mkl-devel",
        "numpy",
        "nvtx-c",
        "pip",
        "pybind11",
        "pybind11-abi",
        "python",
        "pyyaml",
        "requests",
        "setuptools",
        "six",
        "sleef",
        "typing_extensions",
        "zlib"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "__cuda",
        "filelock",
        "fsspec",
        "intel-openmp",
        "jinja2",
        "libblas",
        "libtorch",
        "networkx",
        "optree",
        "pybind11",
        "python",
        "pytorch",
        "setuptools",
        "sympy",
        "typing_extensions"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "boto3",
        "c_compiler_stub",
        "cmake",
        "cuda-nvrtc-dev",
        "cuda_compiler_stub",
        "cudnn",
        "cxx_compiler_stub",
        "expecttest",
        "hypothesis",
        "ninja",
        "nvtx-c",
        "pip",
        "pkg-config",
        "pybind11",
        "pydot",
        "pytest",
        "pytest-flakefinder",
        "pytest-rerunfailures",
        "pytest-xdist",
        "pyyaml",
        "tabulate",
        "xmlrunner"
      ]
    }
  }
}