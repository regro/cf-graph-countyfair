{
  "archived": false,
  "branch": "main",
  "conda-forge.yml": {
    "conda_build": {
      "pkg_format": "2"
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    }
  },
  "feedstock_hash": "f4136b58984998674043fb65d96cb0b5dc649ab1",
  "feedstock_hash_ts": 1751900098,
  "feedstock_name": "mintpy",
  "hash_type": "sha256",
  "linux_64_meta_yaml": {
    "about": {
      "description": "The Miami INsar Time-series software in PYthon (MintPy as /mɪnt paɪ/) is an\nopen-source package for Interferometric Synthetic Aperture Radar (InSAR)\ntime series analysis. It reads the stack of interferograms (coregistered and\nunwrapped) in ISCE, ARIA, FRInGE, HyP3, GMTSAR, SNAP, GAMMA or ROI_PAC format,\nand produces three dimensional (2D in space and 1D in time) ground surface\ndisplacement in line-of-sight direction. It includes a routine time series\nanalysis (smallbaselineApp.py) and some independent toolbox.\n",
      "dev_url": "https://github.com/insarlab/mintpy",
      "doc_url": "https://mintpy.readthedocs.io",
      "home": "https://github.com/insarlab/mintpy",
      "license": "GPL-3.0-or-later",
      "license_family": "GPL",
      "license_file": "LICENSE",
      "summary": "Miami INsar Time-series software in PYthon"
    },
    "build": {
      "entry_points": [
        "mintpy = mintpy.__main__:main",
        "add.py = mintpy.cli.add:main",
        "asc_desc2horz_vert.py = mintpy.cli.asc_desc2horz_vert:main",
        "closure_phase_bias.py = mintpy.cli.closure_phase_bias:main",
        "dem_error.py = mintpy.cli.dem_error:main",
        "dem_gsi.py = mintpy.cli.dem_gsi:main",
        "diff.py = mintpy.cli.diff:main",
        "generate_mask.py = mintpy.cli.generate_mask:main",
        "geocode.py = mintpy.cli.geocode:main",
        "ifgram_inversion.py = mintpy.cli.ifgram_inversion:main",
        "image_math.py = mintpy.cli.image_math:main",
        "image_stitch.py = mintpy.cli.image_stitch:main",
        "info.py = mintpy.cli.info:main",
        "iono_split_spectrum.py = mintpy.cli.iono_split_spectrum:main",
        "iono_tec.py = mintpy.cli.iono_tec:main",
        "load_data.py = mintpy.cli.load_data:main",
        "load_gbis.py = mintpy.cli.load_gbis:main",
        "local_oscilator_drift.py = mintpy.cli.local_oscilator_drift:main",
        "lookup_geo2radar.py = mintpy.cli.lookup_geo2radar:main",
        "mask.py = mintpy.cli.mask:main",
        "modify_network.py = mintpy.cli.modify_network:main",
        "multilook.py = mintpy.cli.multilook:main",
        "multi_transect.py = mintpy.multi_transect:main",
        "plate_motion.py = mintpy.cli.plate_motion:main",
        "plot_coherence_matrix.py = mintpy.cli.plot_coherence_matrix:main",
        "plot_network.py = mintpy.cli.plot_network:main",
        "plot_transection.py = mintpy.cli.plot_transection:main",
        "prep_aria.py = mintpy.cli.prep_aria:main",
        "prep_cosicorr.py = mintpy.cli.prep_cosicorr:main",
        "prep_fringe.py = mintpy.cli.prep_fringe:main",
        "prep_gamma.py = mintpy.cli.prep_gamma:main",
        "prep_gmtsar.py = mintpy.cli.prep_gmtsar:main",
        "prep_hyp3.py = mintpy.cli.prep_hyp3:main",
        "prep_isce.py = mintpy.cli.prep_isce:main",
        "prep_nisar.py = mintpy.cli.prep_nisar:main",
        "prep_roipac.py = mintpy.cli.prep_roipac:main",
        "prep_snap.py = mintpy.cli.prep_snap:main",
        "reference_date.py = mintpy.cli.reference_date:main",
        "reference_point.py = mintpy.cli.reference_point:main",
        "remove_hdf5_dataset.py = mintpy.cli.remove_hdf5_dataset:main",
        "remove_ramp.py = mintpy.cli.remove_ramp:main",
        "s1ab_range_bias.py = mintpy.cli.s1ab_range_bias:main",
        "save_explorer.py = mintpy.cli.save_explorer:main",
        "save_gbis.py = mintpy.cli.save_gbis:main",
        "save_gdal.py = mintpy.cli.save_gdal:main",
        "save_gmt.py = mintpy.cli.save_gmt:main",
        "save_hdfeos5.py = mintpy.cli.save_hdfeos5:main",
        "save_kite.py = mintpy.cli.save_kite:main",
        "save_kmz.py = mintpy.cli.save_kmz:main",
        "save_kmz_timeseries.py = mintpy.cli.save_kmz_timeseries:main",
        "save_qgis.py = mintpy.cli.save_qgis:main",
        "save_roipac.py = mintpy.cli.save_roipac:main",
        "smallbaselineApp.py = mintpy.cli.smallbaselineApp:main",
        "solid_earth_tides.py = mintpy.cli.solid_earth_tides:main",
        "spatial_average.py = mintpy.cli.spatial_average:main",
        "spatial_filter.py = mintpy.cli.spatial_filter:main",
        "subset.py = mintpy.cli.subset:main",
        "temporal_average.py = mintpy.cli.temporal_average:main",
        "temporal_derivative.py = mintpy.cli.temporal_derivative:main",
        "temporal_filter.py = mintpy.cli.temporal_filter:main",
        "timeseries2velocity.py = mintpy.cli.timeseries2velocity:main",
        "timeseries_rms.py = mintpy.cli.timeseries_rms:main",
        "tropo_gacos.py = mintpy.cli.tropo_gacos:main",
        "tropo_phase_elevation.py = mintpy.cli.tropo_phase_elevation:main",
        "tropo_pyaps3.py = mintpy.cli.tropo_pyaps3:main",
        "tsview.py = mintpy.cli.tsview:main",
        "unwrap_error_bridging.py = mintpy.cli.unwrap_error_bridging:main",
        "unwrap_error_phase_closure.py = mintpy.cli.unwrap_error_phase_closure:main",
        "view.py = mintpy.cli.view:main"
      ],
      "noarch": "python",
      "number": "0",
      "script": "PYTHON -m pip install .[cli] -vv"
    },
    "extra": {
      "recipe-maintainers": [
        "jhkennedy",
        "jlrine2",
        "yunjunz"
      ]
    },
    "package": {
      "name": "mintpy",
      "version": "1.6.2"
    },
    "requirements": {
      "host": [
        "python 3.9",
        "pip",
        "setuptools",
        "setuptools_scm"
      ],
      "run": [
        "python >=3.9",
        "argcomplete",
        "cartopy",
        "cvxopt",
        "dask >=1.0",
        "dask-jobqueue >=0.3",
        "gdal",
        "h5py",
        "joblib",
        "lxml",
        "matplotlib-base",
        "numpy",
        "pre-commit",
        "pyaps3 >=0.3.6",
        "pykml >=0.2",
        "pyproj",
        "pyresample",
        "pysolid",
        "requests",
        "rich",
        "scikit-image",
        "scipy",
        "shapely",
        "utm"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "58dc194ce387a4355c8fd547caedf1b9b481b98fd112bd137c0c5d47b33d25c1",
      "url": "https://pypi.org/packages/source/m/mintpy/mintpy-1.6.2.tar.gz"
    },
    "test": {
      "commands": [
        "pip check",
        "mintpy --help",
        "mintpy smallbaselineApp --help",
        "smallbaselineApp.py --help",
        "view.py --help",
        "tsview.py --help",
        "info.py --help"
      ],
      "imports": [
        "mintpy"
      ],
      "requires": [
        "pip",
        "python 3.9"
      ]
    }
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": []
    },
    "host": {
      "__set__": true,
      "elements": [
        "pip",
        "python",
        "setuptools",
        "setuptools_scm"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "argcomplete",
        "cartopy",
        "cvxopt",
        "dask",
        "dask-jobqueue",
        "gdal",
        "h5py",
        "joblib",
        "lxml",
        "matplotlib-base",
        "numpy",
        "pre-commit",
        "pyaps3",
        "pykml",
        "pyproj",
        "pyresample",
        "pysolid",
        "python",
        "requests",
        "rich",
        "scikit-image",
        "scipy",
        "shapely",
        "utm"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "pip",
        "python"
      ]
    }
  },
  "meta_yaml": {
    "about": {
      "description": "The Miami INsar Time-series software in PYthon (MintPy as /mɪnt paɪ/) is an\nopen-source package for Interferometric Synthetic Aperture Radar (InSAR)\ntime series analysis. It reads the stack of interferograms (coregistered and\nunwrapped) in ISCE, ARIA, FRInGE, HyP3, GMTSAR, SNAP, GAMMA or ROI_PAC format,\nand produces three dimensional (2D in space and 1D in time) ground surface\ndisplacement in line-of-sight direction. It includes a routine time series\nanalysis (smallbaselineApp.py) and some independent toolbox.\n",
      "dev_url": "https://github.com/insarlab/mintpy",
      "doc_url": "https://mintpy.readthedocs.io",
      "home": "https://github.com/insarlab/mintpy",
      "license": "GPL-3.0-or-later",
      "license_family": "GPL",
      "license_file": "LICENSE",
      "summary": "Miami INsar Time-series software in PYthon"
    },
    "build": {
      "entry_points": [
        "mintpy = mintpy.__main__:main",
        "add.py = mintpy.cli.add:main",
        "asc_desc2horz_vert.py = mintpy.cli.asc_desc2horz_vert:main",
        "closure_phase_bias.py = mintpy.cli.closure_phase_bias:main",
        "dem_error.py = mintpy.cli.dem_error:main",
        "dem_gsi.py = mintpy.cli.dem_gsi:main",
        "diff.py = mintpy.cli.diff:main",
        "generate_mask.py = mintpy.cli.generate_mask:main",
        "geocode.py = mintpy.cli.geocode:main",
        "ifgram_inversion.py = mintpy.cli.ifgram_inversion:main",
        "image_math.py = mintpy.cli.image_math:main",
        "image_stitch.py = mintpy.cli.image_stitch:main",
        "info.py = mintpy.cli.info:main",
        "iono_split_spectrum.py = mintpy.cli.iono_split_spectrum:main",
        "iono_tec.py = mintpy.cli.iono_tec:main",
        "load_data.py = mintpy.cli.load_data:main",
        "load_gbis.py = mintpy.cli.load_gbis:main",
        "local_oscilator_drift.py = mintpy.cli.local_oscilator_drift:main",
        "lookup_geo2radar.py = mintpy.cli.lookup_geo2radar:main",
        "mask.py = mintpy.cli.mask:main",
        "modify_network.py = mintpy.cli.modify_network:main",
        "multilook.py = mintpy.cli.multilook:main",
        "multi_transect.py = mintpy.multi_transect:main",
        "plate_motion.py = mintpy.cli.plate_motion:main",
        "plot_coherence_matrix.py = mintpy.cli.plot_coherence_matrix:main",
        "plot_network.py = mintpy.cli.plot_network:main",
        "plot_transection.py = mintpy.cli.plot_transection:main",
        "prep_aria.py = mintpy.cli.prep_aria:main",
        "prep_cosicorr.py = mintpy.cli.prep_cosicorr:main",
        "prep_fringe.py = mintpy.cli.prep_fringe:main",
        "prep_gamma.py = mintpy.cli.prep_gamma:main",
        "prep_gmtsar.py = mintpy.cli.prep_gmtsar:main",
        "prep_hyp3.py = mintpy.cli.prep_hyp3:main",
        "prep_isce.py = mintpy.cli.prep_isce:main",
        "prep_nisar.py = mintpy.cli.prep_nisar:main",
        "prep_roipac.py = mintpy.cli.prep_roipac:main",
        "prep_snap.py = mintpy.cli.prep_snap:main",
        "reference_date.py = mintpy.cli.reference_date:main",
        "reference_point.py = mintpy.cli.reference_point:main",
        "remove_hdf5_dataset.py = mintpy.cli.remove_hdf5_dataset:main",
        "remove_ramp.py = mintpy.cli.remove_ramp:main",
        "s1ab_range_bias.py = mintpy.cli.s1ab_range_bias:main",
        "save_explorer.py = mintpy.cli.save_explorer:main",
        "save_gbis.py = mintpy.cli.save_gbis:main",
        "save_gdal.py = mintpy.cli.save_gdal:main",
        "save_gmt.py = mintpy.cli.save_gmt:main",
        "save_hdfeos5.py = mintpy.cli.save_hdfeos5:main",
        "save_kite.py = mintpy.cli.save_kite:main",
        "save_kmz.py = mintpy.cli.save_kmz:main",
        "save_kmz_timeseries.py = mintpy.cli.save_kmz_timeseries:main",
        "save_qgis.py = mintpy.cli.save_qgis:main",
        "save_roipac.py = mintpy.cli.save_roipac:main",
        "smallbaselineApp.py = mintpy.cli.smallbaselineApp:main",
        "solid_earth_tides.py = mintpy.cli.solid_earth_tides:main",
        "spatial_average.py = mintpy.cli.spatial_average:main",
        "spatial_filter.py = mintpy.cli.spatial_filter:main",
        "subset.py = mintpy.cli.subset:main",
        "temporal_average.py = mintpy.cli.temporal_average:main",
        "temporal_derivative.py = mintpy.cli.temporal_derivative:main",
        "temporal_filter.py = mintpy.cli.temporal_filter:main",
        "timeseries2velocity.py = mintpy.cli.timeseries2velocity:main",
        "timeseries_rms.py = mintpy.cli.timeseries_rms:main",
        "tropo_gacos.py = mintpy.cli.tropo_gacos:main",
        "tropo_phase_elevation.py = mintpy.cli.tropo_phase_elevation:main",
        "tropo_pyaps3.py = mintpy.cli.tropo_pyaps3:main",
        "tsview.py = mintpy.cli.tsview:main",
        "unwrap_error_bridging.py = mintpy.cli.unwrap_error_bridging:main",
        "unwrap_error_phase_closure.py = mintpy.cli.unwrap_error_phase_closure:main",
        "view.py = mintpy.cli.view:main"
      ],
      "noarch": "python",
      "number": "0",
      "script": "PYTHON -m pip install .[cli] -vv"
    },
    "extra": {
      "recipe-maintainers": [
        "jhkennedy",
        "jlrine2",
        "yunjunz"
      ]
    },
    "package": {
      "name": "mintpy",
      "version": "1.6.2"
    },
    "requirements": {
      "host": [
        "python 3.9",
        "pip",
        "setuptools",
        "setuptools_scm"
      ],
      "run": [
        "python >=3.9",
        "argcomplete",
        "cartopy",
        "cvxopt",
        "dask >=1.0",
        "dask-jobqueue >=0.3",
        "gdal",
        "h5py",
        "joblib",
        "lxml",
        "matplotlib-base",
        "numpy",
        "pre-commit",
        "pyaps3 >=0.3.6",
        "pykml >=0.2",
        "pyproj",
        "pyresample",
        "pysolid",
        "requests",
        "rich",
        "scikit-image",
        "scipy",
        "shapely",
        "utm"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "58dc194ce387a4355c8fd547caedf1b9b481b98fd112bd137c0c5d47b33d25c1",
      "url": "https://pypi.org/packages/source/m/mintpy/mintpy-1.6.2.tar.gz"
    },
    "test": {
      "commands": [
        "pip check",
        "mintpy --help",
        "mintpy smallbaselineApp --help",
        "smallbaselineApp.py --help",
        "view.py --help",
        "tsview.py --help",
        "info.py --help"
      ],
      "imports": [
        "mintpy"
      ],
      "requires": [
        "pip",
        "python 3.9"
      ]
    }
  },
  "name": "mintpy",
  "outputs_names": {
    "__set__": true,
    "elements": [
      "mintpy"
    ]
  },
  "parsing_error": false,
  "platforms": [
    "linux_64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/mintpy.json"
  },
  "raw_meta_yaml": "{% set name = \"mintpy\" %}\n{% set version = \"1.6.2\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.org/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: 58dc194ce387a4355c8fd547caedf1b9b481b98fd112bd137c0c5d47b33d25c1\n\nbuild:\n  noarch: python\n  number: 0\n  script: {{ PYTHON }} -m pip install .[cli] -vv\n  entry_points:\n    - mintpy = mintpy.__main__:main\n    - add.py = mintpy.cli.add:main\n    - asc_desc2horz_vert.py = mintpy.cli.asc_desc2horz_vert:main\n    - closure_phase_bias.py = mintpy.cli.closure_phase_bias:main\n    - dem_error.py = mintpy.cli.dem_error:main\n    - dem_gsi.py = mintpy.cli.dem_gsi:main\n    - diff.py = mintpy.cli.diff:main\n    - generate_mask.py = mintpy.cli.generate_mask:main\n    - geocode.py = mintpy.cli.geocode:main\n    - ifgram_inversion.py = mintpy.cli.ifgram_inversion:main\n    - image_math.py = mintpy.cli.image_math:main\n    - image_stitch.py = mintpy.cli.image_stitch:main\n    - info.py = mintpy.cli.info:main\n    - iono_split_spectrum.py = mintpy.cli.iono_split_spectrum:main\n    - iono_tec.py = mintpy.cli.iono_tec:main\n    - load_data.py = mintpy.cli.load_data:main\n    - load_gbis.py = mintpy.cli.load_gbis:main\n    - local_oscilator_drift.py = mintpy.cli.local_oscilator_drift:main\n    - lookup_geo2radar.py = mintpy.cli.lookup_geo2radar:main\n    - mask.py = mintpy.cli.mask:main\n    - modify_network.py = mintpy.cli.modify_network:main\n    - multilook.py = mintpy.cli.multilook:main\n    - multi_transect.py = mintpy.multi_transect:main\n    - plate_motion.py = mintpy.cli.plate_motion:main\n    - plot_coherence_matrix.py = mintpy.cli.plot_coherence_matrix:main\n    - plot_network.py = mintpy.cli.plot_network:main\n    - plot_transection.py = mintpy.cli.plot_transection:main\n    - prep_aria.py = mintpy.cli.prep_aria:main\n    - prep_cosicorr.py = mintpy.cli.prep_cosicorr:main\n    - prep_fringe.py = mintpy.cli.prep_fringe:main\n    - prep_gamma.py = mintpy.cli.prep_gamma:main\n    - prep_gmtsar.py = mintpy.cli.prep_gmtsar:main\n    - prep_hyp3.py = mintpy.cli.prep_hyp3:main\n    - prep_isce.py = mintpy.cli.prep_isce:main\n    - prep_nisar.py = mintpy.cli.prep_nisar:main\n    - prep_roipac.py = mintpy.cli.prep_roipac:main\n    - prep_snap.py = mintpy.cli.prep_snap:main\n    - reference_date.py = mintpy.cli.reference_date:main\n    - reference_point.py = mintpy.cli.reference_point:main\n    - remove_hdf5_dataset.py = mintpy.cli.remove_hdf5_dataset:main\n    - remove_ramp.py = mintpy.cli.remove_ramp:main\n    - s1ab_range_bias.py = mintpy.cli.s1ab_range_bias:main\n    - save_explorer.py = mintpy.cli.save_explorer:main\n    - save_gbis.py = mintpy.cli.save_gbis:main\n    - save_gdal.py = mintpy.cli.save_gdal:main\n    - save_gmt.py = mintpy.cli.save_gmt:main\n    - save_hdfeos5.py = mintpy.cli.save_hdfeos5:main\n    - save_kite.py = mintpy.cli.save_kite:main\n    - save_kmz.py = mintpy.cli.save_kmz:main\n    - save_kmz_timeseries.py = mintpy.cli.save_kmz_timeseries:main\n    - save_qgis.py = mintpy.cli.save_qgis:main\n    - save_roipac.py = mintpy.cli.save_roipac:main\n    - smallbaselineApp.py = mintpy.cli.smallbaselineApp:main\n    - solid_earth_tides.py = mintpy.cli.solid_earth_tides:main\n    - spatial_average.py = mintpy.cli.spatial_average:main\n    - spatial_filter.py = mintpy.cli.spatial_filter:main\n    - subset.py = mintpy.cli.subset:main\n    - temporal_average.py = mintpy.cli.temporal_average:main\n    - temporal_derivative.py = mintpy.cli.temporal_derivative:main\n    - temporal_filter.py = mintpy.cli.temporal_filter:main\n    - timeseries2velocity.py = mintpy.cli.timeseries2velocity:main\n    - timeseries_rms.py = mintpy.cli.timeseries_rms:main\n    - tropo_gacos.py = mintpy.cli.tropo_gacos:main\n    - tropo_phase_elevation.py = mintpy.cli.tropo_phase_elevation:main\n    - tropo_pyaps3.py = mintpy.cli.tropo_pyaps3:main\n    - tsview.py = mintpy.cli.tsview:main\n    - unwrap_error_bridging.py = mintpy.cli.unwrap_error_bridging:main\n    - unwrap_error_phase_closure.py = mintpy.cli.unwrap_error_phase_closure:main\n    - view.py = mintpy.cli.view:main\n\nrequirements:\n  host:\n    - python {{ python_min }}\n    - pip\n    - setuptools\n    - setuptools_scm\n  run:\n    - python >={{ python_min }}\n    - argcomplete\n    - cartopy\n    - cvxopt\n    - dask >=1.0\n    - dask-jobqueue >=0.3\n    - gdal\n    - h5py\n    - joblib\n    - lxml\n    - matplotlib-base\n    - numpy\n    - pre-commit\n    - pyaps3 >=0.3.6\n    - pykml >=0.2\n    - pyproj\n    - pyresample\n    - pysolid\n    - requests\n    - rich\n    - scikit-image\n    - scipy\n    - shapely\n    - utm\n\ntest:\n  imports:\n    - mintpy\n  requires:\n    - pip\n    - python {{ python_min }}\n  commands:\n    - pip check\n    - mintpy --help\n    - mintpy smallbaselineApp --help\n    - smallbaselineApp.py --help\n    - view.py --help\n    - tsview.py --help\n    - info.py --help\n\nabout:\n  home: https://github.com/insarlab/mintpy\n  license: GPL-3.0-or-later\n  license_family: GPL\n  license_file: LICENSE\n  summary: Miami INsar Time-series software in PYthon\n  description: |\n    The Miami INsar Time-series software in PYthon (MintPy as /mɪnt paɪ/) is an\n    open-source package for Interferometric Synthetic Aperture Radar (InSAR)\n    time series analysis. It reads the stack of interferograms (coregistered and\n    unwrapped) in ISCE, ARIA, FRInGE, HyP3, GMTSAR, SNAP, GAMMA or ROI_PAC format,\n    and produces three dimensional (2D in space and 1D in time) ground surface\n    displacement in line-of-sight direction. It includes a routine time series\n    analysis (smallbaselineApp.py) and some independent toolbox.\n  doc_url: https://mintpy.readthedocs.io\n  dev_url: https://github.com/insarlab/mintpy\n\nextra:\n  recipe-maintainers:\n    - jhkennedy\n    - jlrine2\n    - yunjunz\n",
  "req": {
    "__set__": true,
    "elements": [
      "argcomplete",
      "cartopy",
      "cvxopt",
      "dask",
      "dask-jobqueue",
      "gdal",
      "h5py",
      "joblib",
      "lxml",
      "matplotlib-base",
      "numpy",
      "pip",
      "pre-commit",
      "pyaps3",
      "pykml",
      "pyproj",
      "pyresample",
      "pysolid",
      "python",
      "requests",
      "rich",
      "scikit-image",
      "scipy",
      "setuptools",
      "setuptools_scm",
      "shapely",
      "utm"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": []
    },
    "host": {
      "__set__": true,
      "elements": [
        "pip",
        "python",
        "setuptools",
        "setuptools_scm"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "argcomplete",
        "cartopy",
        "cvxopt",
        "dask",
        "dask-jobqueue",
        "gdal",
        "h5py",
        "joblib",
        "lxml",
        "matplotlib-base",
        "numpy",
        "pre-commit",
        "pyaps3",
        "pykml",
        "pyproj",
        "pyresample",
        "pysolid",
        "python",
        "requests",
        "rich",
        "scikit-image",
        "scipy",
        "shapely",
        "utm"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "pip",
        "python"
      ]
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": []
    },
    "host": {
      "__set__": true,
      "elements": [
        "pip",
        "python 3.9",
        "setuptools",
        "setuptools_scm"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "argcomplete",
        "cartopy",
        "cvxopt",
        "dask >=1.0",
        "dask-jobqueue >=0.3",
        "gdal",
        "h5py",
        "joblib",
        "lxml",
        "matplotlib-base",
        "numpy",
        "pre-commit",
        "pyaps3 >=0.3.6",
        "pykml >=0.2",
        "pyproj",
        "pyresample",
        "pysolid",
        "python >=3.9",
        "requests",
        "rich",
        "scikit-image",
        "scipy",
        "shapely",
        "utm"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "pip",
        "python 3.9"
      ]
    }
  },
  "url": "https://pypi.org/packages/source/m/mintpy/mintpy-1.6.2.tar.gz",
  "version": "1.6.2",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/mintpy.json"
  }
}