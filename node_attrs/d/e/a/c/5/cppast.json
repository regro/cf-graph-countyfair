{
  "archived": false,
  "branch": "main",
  "conda-forge.yml": {
    "conda_build": {
      "pkg_format": "2"
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    }
  },
  "feedstock_name": "cppast",
  "hash_type": "sha256",
  "linux_64_meta_yaml": {
    "about": {
      "description": "If you're writing a tool that needs access to the C++ AST (i.e.\ndocumentation generator, reflection library, …), your only option apart\nfrom writing your own parser is to use clang. It offers three interfaces\nfor tools, but the only one that really works for standalone applications\nis libclang. However, libclang has various limitations and does not expose\nthe entire AST.\nSo there is no feasible option — except for this library. It was originally\na part of the standardese documentation generator, but has been extracted\ninto an independent library.\n",
      "dev_url": "https://github.com/foonathan/cppast",
      "home": "https://github.com/foonathan/cppast",
      "license": "MIT",
      "license_family": "MIT",
      "license_file": "LICENSE.md",
      "summary": "Library interface to the C++ AST"
    },
    "build": {
      "number": "0",
      "run_exports": [
        "cppast"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "saraedum"
      ]
    },
    "package": {
      "name": "cppast",
      "version": "0.1.0"
    },
    "requirements": {
      "build": [
        "cxx_compiler_stub",
        "cmake",
        "make"
      ],
      "host": [
        "type_safe",
        "tiny-process-library",
        "cxxopts",
        "clangdev",
        "libclang",
        "llvmdev"
      ],
      "run": [
        "clangxx >=4.0.0"
      ]
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "0001-do-not-vendor-external-dependencies.patch",
        "0002-install-library-binary.patch",
        "0003-simplify-cmake.patch"
      ],
      "sha256": "06f11c7a86263f10187ce45977e78c53b597032b4d24f501cd54f41ceae53721",
      "url": "https://github.com/foonathan/cppast/archive/refs/tags/v0.1.0.zip"
    },
    "test": {
      "commands": [
        "test -f $PREFIX/include/cppast/cppast_fwd.hpp",
        "test -f $PREFIX/lib/libcppast.so",
        "cppast sample.h"
      ],
      "files": [
        "sample.h"
      ],
      "requires": [
        "cxx-compiler"
      ]
    }
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "cmake",
        "cxx_compiler_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "clangdev",
        "cxxopts",
        "libclang",
        "llvmdev",
        "tiny-process-library",
        "type_safe"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "clangxx"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "cxx-compiler"
      ]
    }
  },
  "meta_yaml": {
    "about": {
      "description": "If you're writing a tool that needs access to the C++ AST (i.e.\ndocumentation generator, reflection library, …), your only option apart\nfrom writing your own parser is to use clang. It offers three interfaces\nfor tools, but the only one that really works for standalone applications\nis libclang. However, libclang has various limitations and does not expose\nthe entire AST.\nSo there is no feasible option — except for this library. It was originally\na part of the standardese documentation generator, but has been extracted\ninto an independent library.\n",
      "dev_url": "https://github.com/foonathan/cppast",
      "home": "https://github.com/foonathan/cppast",
      "license": "MIT",
      "license_family": "MIT",
      "license_file": "LICENSE.md",
      "summary": "Library interface to the C++ AST"
    },
    "build": {
      "ignore_run_exports_from": [
        "zlib"
      ],
      "number": "0",
      "run_exports": [
        "cppast"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "saraedum"
      ]
    },
    "package": {
      "name": "cppast",
      "version": "0.1.0"
    },
    "requirements": {
      "build": [
        "cxx_compiler_stub",
        "cmake",
        "make",
        "ninja"
      ],
      "host": [
        "type_safe",
        "tiny-process-library",
        "cxxopts",
        "clangdev",
        "libclang",
        "llvmdev",
        "zlib"
      ],
      "run": [
        "clangxx >=4.0.0"
      ]
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "0001-do-not-vendor-external-dependencies.patch",
        "0002-install-library-binary.patch",
        "0003-simplify-cmake.patch"
      ],
      "sha256": "06f11c7a86263f10187ce45977e78c53b597032b4d24f501cd54f41ceae53721",
      "url": "https://github.com/foonathan/cppast/archive/refs/tags/v0.1.0.zip"
    },
    "test": {
      "commands": [
        "test -f $PREFIX/include/cppast/cppast_fwd.hpp",
        "test -f $PREFIX/lib/libcppast.so",
        "cppast sample.h",
        "test -f $PREFIX/lib/libcppast.dylib",
        "if not exist %LIBRARY_INC%\\cppast\\cppast_fwd.hpp exit 1",
        "if not exist %LIBRARY_LIB%\\cppast.lib exit 1",
        "if not exist %LIBRARY_BIN%\\cppast.dll exit 1",
        "cppast --msvc_compatibility sample.h"
      ],
      "files": [
        "sample.h"
      ],
      "requires": [
        "cxx-compiler"
      ]
    }
  },
  "name": "cppast",
  "osx_64_meta_yaml": {
    "about": {
      "description": "If you're writing a tool that needs access to the C++ AST (i.e.\ndocumentation generator, reflection library, …), your only option apart\nfrom writing your own parser is to use clang. It offers three interfaces\nfor tools, but the only one that really works for standalone applications\nis libclang. However, libclang has various limitations and does not expose\nthe entire AST.\nSo there is no feasible option — except for this library. It was originally\na part of the standardese documentation generator, but has been extracted\ninto an independent library.\n",
      "dev_url": "https://github.com/foonathan/cppast",
      "home": "https://github.com/foonathan/cppast",
      "license": "MIT",
      "license_family": "MIT",
      "license_file": "LICENSE.md",
      "summary": "Library interface to the C++ AST"
    },
    "build": {
      "number": "0",
      "run_exports": [
        "cppast"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "saraedum"
      ]
    },
    "package": {
      "name": "cppast",
      "version": "0.1.0"
    },
    "requirements": {
      "build": [
        "cxx_compiler_stub",
        "cmake",
        "make"
      ],
      "host": [
        "type_safe",
        "tiny-process-library",
        "cxxopts",
        "clangdev",
        "libclang",
        "llvmdev"
      ],
      "run": [
        "clangxx >=4.0.0"
      ]
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "0001-do-not-vendor-external-dependencies.patch",
        "0002-install-library-binary.patch",
        "0003-simplify-cmake.patch"
      ],
      "sha256": "06f11c7a86263f10187ce45977e78c53b597032b4d24f501cd54f41ceae53721",
      "url": "https://github.com/foonathan/cppast/archive/refs/tags/v0.1.0.zip"
    },
    "test": {
      "commands": [
        "test -f $PREFIX/include/cppast/cppast_fwd.hpp",
        "test -f $PREFIX/lib/libcppast.dylib",
        "cppast sample.h"
      ],
      "files": [
        "sample.h"
      ],
      "requires": [
        "cxx-compiler"
      ]
    }
  },
  "osx_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "cmake",
        "cxx_compiler_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "clangdev",
        "cxxopts",
        "libclang",
        "llvmdev",
        "tiny-process-library",
        "type_safe"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "clangxx"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "cxx-compiler"
      ]
    }
  },
  "outputs_names": {
    "__set__": true,
    "elements": [
      "cppast"
    ]
  },
  "parsing_error": false,
  "platforms": [
    "linux_64",
    "osx_64",
    "win_64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/cppast.json"
  },
  "raw_meta_yaml": "{% set name = \"cppast\" %}\n{% set version = \"0.1.0\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://github.com/foonathan/cppast/archive/refs/tags/v{{ version }}.zip\n  sha256: 06f11c7a86263f10187ce45977e78c53b597032b4d24f501cd54f41ceae53721\n  patches:\n    - 0001-do-not-vendor-external-dependencies.patch\n    # Upstreamed at https://github.com/foonathan/cppast/pull/145\n    - 0002-install-library-binary.patch\n    - 0003-simplify-cmake.patch\n\nbuild:\n  number: 0\n  skip: true  # [win and vc<14]\n  run_exports:\n    # cppast does not to be too careful about not breaking their ABI so we pin strictly when building against it.\n    - {{ pin_subpackage('cppast', max_pin='x.x.x') }}\n  ignore_run_exports_from:  # [win]\n    # We do not link against zlib so we do not need it at runtime.\n    - zlib  # [win]\n\nrequirements:\n  build:\n    - {{ compiler('cxx') }}\n    - cmake\n    - make  # [not win]\n    - ninja  # [win]\n  host:\n    - type_safe\n    - tiny-process-library\n    - cxxopts\n    # clangdev provides clang header files we build against\n    - clangdev\n    - libclang\n    # llvmdev provides LLVMConfig.cmake needed by the build system\n    - llvmdev\n    # The cmake setup of LLVM on Windows needs the zlib headers\n    - zlib  # [win]\n  run:\n    - clangxx >=4.0.0\n\ntest:\n  requires:\n    # To parse sample.h we need the type_traits headers shipped with the C++\n    # compiler on Linux & macOS.\n    # We do not use compiler('cxx') here since on macOS, that is a clang that\n    # might not be compatible with the libclang installed.\n    - cxx-compiler\n  files:\n    - sample.h\n  commands:\n    - if not exist %LIBRARY_INC%\\cppast\\cppast_fwd.hpp exit 1  # [win]\n    - if not exist %LIBRARY_LIB%\\cppast.lib exit 1             # [win]\n    - if not exist %LIBRARY_BIN%\\cppast.dll exit 1             # [win]\n    - test -f $PREFIX/include/cppast/cppast_fwd.hpp            # [unix]\n    - test -f $PREFIX/lib/libcppast.so                         # [linux]\n    - test -f $PREFIX/lib/libcppast.dylib                      # [osx]\n    - cppast sample.h                                          # [unix]\n    # When parsing Microsoft's C++ headers, we need to disable some #line\n    # macros that clang gets confused by:\n    # https://github.com/foonathan/cppast/issues/46\n    - cppast --msvc_compatibility sample.h                     # [win]\n\nabout:\n  home: https://github.com/foonathan/cppast\n  license: MIT\n  license_family: MIT\n  license_file: LICENSE.md\n  summary: 'Library interface to the C++ AST'\n  description: |\n    If you're writing a tool that needs access to the C++ AST (i.e.\n    documentation generator, reflection library, …), your only option apart\n    from writing your own parser is to use clang. It offers three interfaces\n    for tools, but the only one that really works for standalone applications\n    is libclang. However, libclang has various limitations and does not expose\n    the entire AST.\n    So there is no feasible option — except for this library. It was originally\n    a part of the standardese documentation generator, but has been extracted\n    into an independent library.\n  dev_url: https://github.com/foonathan/cppast\n\nextra:\n  recipe-maintainers:\n    - saraedum\n",
  "req": {
    "__set__": true,
    "elements": [
      "clangdev",
      "clangxx",
      "cmake",
      "cxx_compiler_stub",
      "cxxopts",
      "libclang",
      "llvmdev",
      "make",
      "ninja",
      "tiny-process-library",
      "type_safe",
      "zlib"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "cmake",
        "cxx_compiler_stub",
        "make",
        "ninja"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "clangdev",
        "cxx_compiler_stub",
        "cxxopts",
        "libclang",
        "llvmdev",
        "tiny-process-library",
        "type_safe",
        "zlib"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "clangxx",
        "cxx_compiler_stub"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "cxx-compiler"
      ]
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "cmake",
        "cxx_compiler_stub",
        "make",
        "ninja"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "clangdev",
        "cxxopts",
        "libclang",
        "llvmdev",
        "tiny-process-library",
        "type_safe",
        "zlib"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "clangxx >=4.0.0"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "cxx-compiler"
      ]
    }
  },
  "url": "https://github.com/foonathan/cppast/archive/refs/tags/v0.1.0.zip",
  "version": "0.1.0",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/cppast.json"
  },
  "win_64_meta_yaml": {
    "about": {
      "description": "If you're writing a tool that needs access to the C++ AST (i.e.\ndocumentation generator, reflection library, …), your only option apart\nfrom writing your own parser is to use clang. It offers three interfaces\nfor tools, but the only one that really works for standalone applications\nis libclang. However, libclang has various limitations and does not expose\nthe entire AST.\nSo there is no feasible option — except for this library. It was originally\na part of the standardese documentation generator, but has been extracted\ninto an independent library.\n",
      "dev_url": "https://github.com/foonathan/cppast",
      "home": "https://github.com/foonathan/cppast",
      "license": "MIT",
      "license_family": "MIT",
      "license_file": "LICENSE.md",
      "summary": "Library interface to the C++ AST"
    },
    "build": {
      "ignore_run_exports_from": [
        "zlib"
      ],
      "number": "0",
      "run_exports": [
        "cppast"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "saraedum"
      ]
    },
    "package": {
      "name": "cppast",
      "version": "0.1.0"
    },
    "requirements": {
      "build": [
        "cxx_compiler_stub",
        "cmake",
        "ninja"
      ],
      "host": [
        "type_safe",
        "tiny-process-library",
        "cxxopts",
        "clangdev",
        "libclang",
        "llvmdev",
        "zlib"
      ],
      "run": [
        "clangxx >=4.0.0"
      ]
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "0001-do-not-vendor-external-dependencies.patch",
        "0002-install-library-binary.patch",
        "0003-simplify-cmake.patch"
      ],
      "sha256": "06f11c7a86263f10187ce45977e78c53b597032b4d24f501cd54f41ceae53721",
      "url": "https://github.com/foonathan/cppast/archive/refs/tags/v0.1.0.zip"
    },
    "test": {
      "commands": [
        "if not exist %LIBRARY_INC%\\cppast\\cppast_fwd.hpp exit 1",
        "if not exist %LIBRARY_LIB%\\cppast.lib exit 1",
        "if not exist %LIBRARY_BIN%\\cppast.dll exit 1",
        "cppast --msvc_compatibility sample.h"
      ],
      "files": [
        "sample.h"
      ],
      "requires": [
        "cxx-compiler"
      ]
    }
  },
  "win_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "cmake",
        "cxx_compiler_stub",
        "ninja"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "clangdev",
        "cxxopts",
        "libclang",
        "llvmdev",
        "tiny-process-library",
        "type_safe",
        "zlib"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "clangxx"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "cxx-compiler"
      ]
    }
  }
}