{
  "archived": false,
  "branch": "main",
  "conda-forge.yml": {
    "build_platform": {
      "linux_aarch64": "linux_64",
      "linux_ppc64le": "linux_64",
      "osx_arm64": "osx_64"
    },
    "conda_build": {
      "pkg_format": "2"
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    },
    "test": "native_and_emulated"
  },
  "feedstock_hash": "d1d2b7048ed0fd6abc47528706f1158f4a26a78e",
  "feedstock_hash_ts": 1731602071,
  "feedstock_name": "analisi",
  "linux_64_meta_yaml": {
    "about": {
      "description": "analisi is a framework for analyzing molecular dynamics simulations.\nIt can read lammps's binary format (other formats can be converted)\nand evaluate averages over the ergodic and equilibrated trajectory.\nVery heavy calculation can be performed in a parallel way using\nMPI, while multithreading is implemented also in the python interface.\nExample calculations are Steinhard (averaged) local order parameters,\nfull GK integral calculation with block analysis, traditional mean\nsquare displacement and a lot more...\n",
      "dev_url": "https://github.com/rikigigi/analisi",
      "home": "https://github.com/rikigigi/analisi",
      "license": "GPL-2.0-or-later",
      "license_file": [
        "LICENSE"
      ],
      "summary": "analisi: your Swiss Army Knife of molecular dynamics analysis"
    },
    "build": {
      "number": "6",
      "string": "py39h1234567_openmpi_6"
    },
    "extra": {
      "recipe-maintainers": [
        "rikigigi"
      ]
    },
    "package": {
      "name": "analisi",
      "version": "0.5.2"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "cmake",
        "make"
      ],
      "host": [
        "python",
        "mpich",
        "fftw",
        "libboost-devel",
        "eigen",
        "xdrfile",
        "openmpi"
      ],
      "run": [
        "python",
        "mpich",
        "fftw",
        "xdrfile",
        "matplotlib-base",
        "numpy",
        "scipy",
        "openmpi"
      ]
    },
    "schema_version": 0,
    "source": {
      "git_depth": "20",
      "git_rev": "v0.5.2",
      "git_url": "https://github.com/rikigigi/analisi.git",
      "patches": [
        "testbook-timeout.patch"
      ]
    },
    "test": {
      "commands": [
        "analisi_serial --help",
        "mpiexec -n 1 analisi --help",
        "pytest -sv tests"
      ],
      "imports": [
        "pyanalisi"
      ],
      "requires": [
        "pytest",
        "pandas",
        "pytest-regressions",
        "matplotlib",
        "numpy",
        "scipy",
        "testbook",
        "k3d",
        "ipykernel"
      ],
      "source_files": [
        "tests",
        "tools",
        "notebooks"
      ]
    }
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "eigen",
        "fftw",
        "libboost-devel",
        "mpich",
        "openmpi",
        "python",
        "xdrfile"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "fftw",
        "matplotlib-base",
        "mpich",
        "numpy",
        "openmpi",
        "python",
        "scipy",
        "xdrfile"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "ipykernel",
        "k3d",
        "matplotlib",
        "numpy",
        "pandas",
        "pytest",
        "pytest-regressions",
        "scipy",
        "testbook"
      ]
    }
  },
  "linux_aarch64_meta_yaml": {
    "about": {
      "description": "analisi is a framework for analyzing molecular dynamics simulations.\nIt can read lammps's binary format (other formats can be converted)\nand evaluate averages over the ergodic and equilibrated trajectory.\nVery heavy calculation can be performed in a parallel way using\nMPI, while multithreading is implemented also in the python interface.\nExample calculations are Steinhard (averaged) local order parameters,\nfull GK integral calculation with block analysis, traditional mean\nsquare displacement and a lot more...\n",
      "dev_url": "https://github.com/rikigigi/analisi",
      "home": "https://github.com/rikigigi/analisi",
      "license": "GPL-2.0-or-later",
      "license_file": [
        "LICENSE"
      ],
      "summary": "analisi: your Swiss Army Knife of molecular dynamics analysis"
    },
    "build": {
      "number": "6",
      "string": "py39h1234567_openmpi_6"
    },
    "extra": {
      "recipe-maintainers": [
        "rikigigi"
      ]
    },
    "package": {
      "name": "analisi",
      "version": "0.5.2"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "cmake",
        "make"
      ],
      "host": [
        "python",
        "mpich",
        "fftw",
        "libboost-devel",
        "eigen",
        "xdrfile",
        "openmpi"
      ],
      "run": [
        "python",
        "mpich",
        "fftw",
        "xdrfile",
        "matplotlib-base",
        "numpy",
        "scipy",
        "openmpi"
      ]
    },
    "schema_version": 0,
    "source": {
      "git_depth": "20",
      "git_rev": "v0.5.2",
      "git_url": "https://github.com/rikigigi/analisi.git",
      "patches": [
        "testbook-timeout.patch"
      ]
    },
    "test": {
      "commands": [
        "analisi_serial --help",
        "mpiexec -n 1 analisi --help",
        "pytest -sv tests"
      ],
      "imports": [
        "pyanalisi"
      ],
      "requires": [
        "pytest",
        "pandas",
        "pytest-regressions",
        "matplotlib",
        "numpy",
        "scipy",
        "testbook",
        "k3d",
        "ipykernel"
      ],
      "source_files": [
        "tests",
        "tools",
        "notebooks"
      ]
    }
  },
  "linux_aarch64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "eigen",
        "fftw",
        "libboost-devel",
        "mpich",
        "openmpi",
        "python",
        "xdrfile"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "fftw",
        "matplotlib-base",
        "mpich",
        "numpy",
        "openmpi",
        "python",
        "scipy",
        "xdrfile"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "ipykernel",
        "k3d",
        "matplotlib",
        "numpy",
        "pandas",
        "pytest",
        "pytest-regressions",
        "scipy",
        "testbook"
      ]
    }
  },
  "linux_ppc64le_meta_yaml": {
    "about": {
      "description": "analisi is a framework for analyzing molecular dynamics simulations.\nIt can read lammps's binary format (other formats can be converted)\nand evaluate averages over the ergodic and equilibrated trajectory.\nVery heavy calculation can be performed in a parallel way using\nMPI, while multithreading is implemented also in the python interface.\nExample calculations are Steinhard (averaged) local order parameters,\nfull GK integral calculation with block analysis, traditional mean\nsquare displacement and a lot more...\n",
      "dev_url": "https://github.com/rikigigi/analisi",
      "home": "https://github.com/rikigigi/analisi",
      "license": "GPL-2.0-or-later",
      "license_file": [
        "LICENSE"
      ],
      "summary": "analisi: your Swiss Army Knife of molecular dynamics analysis"
    },
    "build": {
      "number": "6",
      "string": "py39h1234567_openmpi_6"
    },
    "extra": {
      "recipe-maintainers": [
        "rikigigi"
      ]
    },
    "package": {
      "name": "analisi",
      "version": "0.5.2"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "cmake",
        "make"
      ],
      "host": [
        "python",
        "mpich",
        "fftw",
        "libboost-devel",
        "eigen",
        "xdrfile",
        "openmpi"
      ],
      "run": [
        "python",
        "mpich",
        "fftw",
        "xdrfile",
        "matplotlib-base",
        "numpy",
        "scipy",
        "openmpi"
      ]
    },
    "schema_version": 0,
    "source": {
      "git_depth": "20",
      "git_rev": "v0.5.2",
      "git_url": "https://github.com/rikigigi/analisi.git",
      "patches": [
        "testbook-timeout.patch"
      ]
    },
    "test": {
      "commands": [
        "analisi_serial --help",
        "mpiexec -n 1 analisi --help",
        "pytest -sv tests"
      ],
      "imports": [
        "pyanalisi"
      ],
      "requires": [
        "pytest",
        "pandas",
        "pytest-regressions",
        "matplotlib",
        "numpy",
        "scipy",
        "testbook",
        "k3d",
        "ipykernel"
      ],
      "source_files": [
        "tests",
        "tools",
        "notebooks"
      ]
    }
  },
  "linux_ppc64le_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "eigen",
        "fftw",
        "libboost-devel",
        "mpich",
        "openmpi",
        "python",
        "xdrfile"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "fftw",
        "matplotlib-base",
        "mpich",
        "numpy",
        "openmpi",
        "python",
        "scipy",
        "xdrfile"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "ipykernel",
        "k3d",
        "matplotlib",
        "numpy",
        "pandas",
        "pytest",
        "pytest-regressions",
        "scipy",
        "testbook"
      ]
    }
  },
  "meta_yaml": {
    "about": {
      "description": "analisi is a framework for analyzing molecular dynamics simulations.\nIt can read lammps's binary format (other formats can be converted)\nand evaluate averages over the ergodic and equilibrated trajectory.\nVery heavy calculation can be performed in a parallel way using\nMPI, while multithreading is implemented also in the python interface.\nExample calculations are Steinhard (averaged) local order parameters,\nfull GK integral calculation with block analysis, traditional mean\nsquare displacement and a lot more...\n",
      "dev_url": "https://github.com/rikigigi/analisi",
      "home": "https://github.com/rikigigi/analisi",
      "license": "GPL-2.0-or-later",
      "license_file": [
        "LICENSE"
      ],
      "summary": "analisi: your Swiss Army Knife of molecular dynamics analysis"
    },
    "build": {
      "number": "6",
      "string": "py39h1234567_openmpi_6"
    },
    "extra": {
      "recipe-maintainers": [
        "rikigigi"
      ]
    },
    "package": {
      "name": "analisi",
      "version": "0.5.2"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "cmake",
        "make"
      ],
      "host": [
        "python",
        "mpich",
        "fftw",
        "libboost-devel",
        "eigen",
        "xdrfile",
        "openmpi"
      ],
      "run": [
        "python",
        "mpich",
        "fftw",
        "xdrfile",
        "matplotlib-base",
        "numpy",
        "scipy",
        "openmpi"
      ]
    },
    "schema_version": 0,
    "source": {
      "git_depth": "20",
      "git_rev": "v0.5.2",
      "git_url": "https://github.com/rikigigi/analisi.git",
      "patches": [
        "testbook-timeout.patch"
      ]
    },
    "test": {
      "commands": [
        "analisi_serial --help",
        "mpiexec -n 1 analisi --help",
        "pytest -sv tests"
      ],
      "imports": [
        "pyanalisi"
      ],
      "requires": [
        "pytest",
        "pandas",
        "pytest-regressions",
        "matplotlib",
        "numpy",
        "scipy",
        "testbook",
        "k3d",
        "ipykernel"
      ],
      "source_files": [
        "tests",
        "tools",
        "notebooks"
      ]
    }
  },
  "name": "analisi",
  "osx_64_meta_yaml": {
    "about": {
      "description": "analisi is a framework for analyzing molecular dynamics simulations.\nIt can read lammps's binary format (other formats can be converted)\nand evaluate averages over the ergodic and equilibrated trajectory.\nVery heavy calculation can be performed in a parallel way using\nMPI, while multithreading is implemented also in the python interface.\nExample calculations are Steinhard (averaged) local order parameters,\nfull GK integral calculation with block analysis, traditional mean\nsquare displacement and a lot more...\n",
      "dev_url": "https://github.com/rikigigi/analisi",
      "home": "https://github.com/rikigigi/analisi",
      "license": "GPL-2.0-or-later",
      "license_file": [
        "LICENSE"
      ],
      "summary": "analisi: your Swiss Army Knife of molecular dynamics analysis"
    },
    "build": {
      "number": "6",
      "string": "py39h1234567_openmpi_6"
    },
    "extra": {
      "recipe-maintainers": [
        "rikigigi"
      ]
    },
    "package": {
      "name": "analisi",
      "version": "0.5.2"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "cmake",
        "make"
      ],
      "host": [
        "python",
        "mpich",
        "fftw",
        "libboost-devel",
        "eigen",
        "xdrfile",
        "openmpi"
      ],
      "run": [
        "python",
        "mpich",
        "fftw",
        "xdrfile",
        "matplotlib-base",
        "numpy",
        "scipy",
        "openmpi"
      ]
    },
    "schema_version": 0,
    "source": {
      "git_depth": "20",
      "git_rev": "v0.5.2",
      "git_url": "https://github.com/rikigigi/analisi.git",
      "patches": [
        "testbook-timeout.patch"
      ]
    },
    "test": {
      "commands": [
        "analisi_serial --help",
        "mpiexec -n 1 analisi --help",
        "pytest -sv tests"
      ],
      "imports": [
        "pyanalisi"
      ],
      "requires": [
        "pytest",
        "pandas",
        "pytest-regressions",
        "matplotlib",
        "numpy",
        "scipy",
        "testbook",
        "k3d",
        "ipykernel"
      ],
      "source_files": [
        "tests",
        "tools",
        "notebooks"
      ]
    }
  },
  "osx_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "eigen",
        "fftw",
        "libboost-devel",
        "mpich",
        "openmpi",
        "python",
        "xdrfile"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "fftw",
        "matplotlib-base",
        "mpich",
        "numpy",
        "openmpi",
        "python",
        "scipy",
        "xdrfile"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "ipykernel",
        "k3d",
        "matplotlib",
        "numpy",
        "pandas",
        "pytest",
        "pytest-regressions",
        "scipy",
        "testbook"
      ]
    }
  },
  "osx_arm64_meta_yaml": {
    "about": {
      "description": "analisi is a framework for analyzing molecular dynamics simulations.\nIt can read lammps's binary format (other formats can be converted)\nand evaluate averages over the ergodic and equilibrated trajectory.\nVery heavy calculation can be performed in a parallel way using\nMPI, while multithreading is implemented also in the python interface.\nExample calculations are Steinhard (averaged) local order parameters,\nfull GK integral calculation with block analysis, traditional mean\nsquare displacement and a lot more...\n",
      "dev_url": "https://github.com/rikigigi/analisi",
      "home": "https://github.com/rikigigi/analisi",
      "license": "GPL-2.0-or-later",
      "license_file": [
        "LICENSE"
      ],
      "summary": "analisi: your Swiss Army Knife of molecular dynamics analysis"
    },
    "build": {
      "number": "6",
      "string": "py39h1234567_openmpi_6"
    },
    "extra": {
      "recipe-maintainers": [
        "rikigigi"
      ]
    },
    "package": {
      "name": "analisi",
      "version": "0.5.2"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "cmake",
        "make"
      ],
      "host": [
        "python",
        "mpich",
        "fftw",
        "libboost-devel",
        "eigen",
        "xdrfile",
        "openmpi"
      ],
      "run": [
        "python",
        "mpich",
        "fftw",
        "xdrfile",
        "matplotlib-base",
        "numpy",
        "scipy",
        "openmpi"
      ]
    },
    "schema_version": 0,
    "source": {
      "git_depth": "20",
      "git_rev": "v0.5.2",
      "git_url": "https://github.com/rikigigi/analisi.git",
      "patches": [
        "testbook-timeout.patch"
      ]
    },
    "test": {
      "commands": [
        "analisi_serial --help",
        "mpiexec -n 1 analisi --help",
        "pytest -sv tests"
      ],
      "imports": [
        "pyanalisi"
      ],
      "requires": [
        "pytest",
        "pandas",
        "pytest-regressions",
        "matplotlib",
        "numpy",
        "scipy",
        "testbook",
        "k3d",
        "ipykernel"
      ],
      "source_files": [
        "tests",
        "tools",
        "notebooks"
      ]
    }
  },
  "osx_arm64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "eigen",
        "fftw",
        "libboost-devel",
        "mpich",
        "openmpi",
        "python",
        "xdrfile"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "fftw",
        "matplotlib-base",
        "mpich",
        "numpy",
        "openmpi",
        "python",
        "scipy",
        "xdrfile"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "ipykernel",
        "k3d",
        "matplotlib",
        "numpy",
        "pandas",
        "pytest",
        "pytest-regressions",
        "scipy",
        "testbook"
      ]
    }
  },
  "outputs_names": {
    "__set__": true,
    "elements": [
      "analisi"
    ]
  },
  "parsing_error": false,
  "platforms": [
    "linux_64",
    "linux_aarch64",
    "linux_ppc64le",
    "osx_64",
    "osx_arm64",
    "win_64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/analisi.json"
  },
  "raw_meta_yaml": "{% set name = \"analisi\" %}\n{% set version = \"0.5.2\" %}\n{% set build = 6 %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  git_url: https://github.com/rikigigi/analisi.git\n  git_rev: v{{ version }}\n  git_depth: 20\n  patches:\n    - testbook-timeout.patch\n\n\nbuild:\n  number: {{ build }}\n  skip: true  # [ python_impl == 'pypy' ]\n  string: py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ mpi }}_{{ build }}\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ stdlib(\"c\") }}\n    - {{ compiler('cxx') }}\n    - cmake\n    - make\n    - python                                 # [build_platform != target_platform]\n    - cross-python_{{ target_platform }}     # [build_platform != target_platform]\n    - {{ mpi }}                              # [build_platform != target_platform and not win]\n\n  host:\n    - python\n    - {{ mpi }}        # [ not win ]\n    - fftw\n    - libboost-devel\n    - eigen\n    - xdrfile          # [ not win ]\n  run:\n    - python\n    - {{ mpi }}        # [ not win ]\n    - fftw\n    - xdrfile          # [ not win ]\n    - matplotlib-base\n    - numpy\n    - scipy\n\ntest:\n  imports:\n    - pyanalisi\n  requires:\n    - pytest\n    - pandas\n    - pytest-regressions\n    - matplotlib\n    - numpy\n    - scipy\n    - testbook\n    - k3d\n    - ipykernel\n  source_files:\n    - tests\n    - tools\n    - notebooks\n  commands:\n    - export TESTBOOK_TIMEOUT=900  # [target_platform != build_platform]\n    - analisi_serial --help                                 # [not win]\n    - mpiexec -n 1 analisi --help                           # [not win]\n    - pytest -sv tests\nabout:\n  home: https://github.com/rikigigi/analisi\n  license: GPL-2.0-or-later\n  license_file:\n    - LICENSE\n\n  summary: 'analisi: your Swiss Army Knife of molecular dynamics analysis'\n  description: |\n    analisi is a framework for analyzing molecular dynamics simulations.\n    It can read lammps's binary format (other formats can be converted)\n    and evaluate averages over the ergodic and equilibrated trajectory. \n    Very heavy calculation can be performed in a parallel way using \n    MPI, while multithreading is implemented also in the python interface.\n    Example calculations are Steinhard (averaged) local order parameters,\n    full GK integral calculation with block analysis, traditional mean\n    square displacement and a lot more...\n\n  dev_url: https://github.com/rikigigi/analisi\n\nextra:\n  recipe-maintainers:\n    - rikigigi\n",
  "req": {
    "__set__": true,
    "elements": [
      "c_compiler_stub",
      "c_stdlib_stub",
      "cmake",
      "cxx_compiler_stub",
      "eigen",
      "fftw",
      "libboost-devel",
      "make",
      "matplotlib-base",
      "mpich",
      "numpy",
      "openmpi",
      "python",
      "scipy",
      "xdrfile"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "eigen",
        "fftw",
        "libboost-devel",
        "mpich",
        "openmpi",
        "python",
        "xdrfile"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "fftw",
        "matplotlib-base",
        "mpich",
        "numpy",
        "openmpi",
        "python",
        "scipy",
        "xdrfile"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "ipykernel",
        "k3d",
        "matplotlib",
        "numpy",
        "pandas",
        "pytest",
        "pytest-regressions",
        "scipy",
        "testbook"
      ]
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "eigen",
        "fftw",
        "libboost-devel",
        "mpich",
        "openmpi",
        "python",
        "xdrfile"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "fftw",
        "matplotlib-base",
        "mpich",
        "numpy",
        "openmpi",
        "python",
        "scipy",
        "xdrfile"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "ipykernel",
        "k3d",
        "matplotlib",
        "numpy",
        "pandas",
        "pytest",
        "pytest-regressions",
        "scipy",
        "testbook"
      ]
    }
  },
  "url": null,
  "version": "0.5.2",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/analisi.json"
  },
  "win_64_meta_yaml": {
    "about": {
      "description": "analisi is a framework for analyzing molecular dynamics simulations.\nIt can read lammps's binary format (other formats can be converted)\nand evaluate averages over the ergodic and equilibrated trajectory.\nVery heavy calculation can be performed in a parallel way using\nMPI, while multithreading is implemented also in the python interface.\nExample calculations are Steinhard (averaged) local order parameters,\nfull GK integral calculation with block analysis, traditional mean\nsquare displacement and a lot more...\n",
      "dev_url": "https://github.com/rikigigi/analisi",
      "home": "https://github.com/rikigigi/analisi",
      "license": "GPL-2.0-or-later",
      "license_file": [
        "LICENSE"
      ],
      "summary": "analisi: your Swiss Army Knife of molecular dynamics analysis"
    },
    "build": {
      "number": "6",
      "string": "py39h1234567_openmpi_6"
    },
    "extra": {
      "recipe-maintainers": [
        "rikigigi"
      ]
    },
    "package": {
      "name": "analisi",
      "version": "0.5.2"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "cmake",
        "make"
      ],
      "host": [
        "python",
        "fftw",
        "libboost-devel",
        "eigen"
      ],
      "run": [
        "python",
        "fftw",
        "matplotlib-base",
        "numpy",
        "scipy"
      ]
    },
    "schema_version": 0,
    "source": {
      "git_depth": "20",
      "git_rev": "v0.5.2",
      "git_url": "https://github.com/rikigigi/analisi.git",
      "patches": [
        "testbook-timeout.patch"
      ]
    },
    "test": {
      "commands": [
        "pytest -sv tests"
      ],
      "imports": [
        "pyanalisi"
      ],
      "requires": [
        "pytest",
        "pandas",
        "pytest-regressions",
        "matplotlib",
        "numpy",
        "scipy",
        "testbook",
        "k3d",
        "ipykernel"
      ],
      "source_files": [
        "tests",
        "tools",
        "notebooks"
      ]
    }
  },
  "win_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "eigen",
        "fftw",
        "libboost-devel",
        "python"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "fftw",
        "matplotlib-base",
        "numpy",
        "python",
        "scipy"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "ipykernel",
        "k3d",
        "matplotlib",
        "numpy",
        "pandas",
        "pytest",
        "pytest-regressions",
        "scipy",
        "testbook"
      ]
    }
  }
}