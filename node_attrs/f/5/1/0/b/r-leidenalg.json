{
  "archived": false,
  "branch": "main",
  "conda-forge.yml": {
    "azure": {
      "store_build_artifacts": false
    },
    "bot": {
      "automerge": true
    },
    "build_platform": {
      "linux_aarch64": "linux_64",
      "linux_ppc64le": "linux_64",
      "osx_arm64": "osx_64"
    },
    "conda_build": {
      "pkg_format": "2"
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    },
    "provider": {
      "linux_aarch64": "azure",
      "linux_ppc64le": "azure"
    },
    "test": "native_and_emulated"
  },
  "feedstock_name": "r-leidenalg",
  "hash_type": "sha256",
  "linux_64_meta_yaml": {
    "about": {
      "home": "https://github.com/kharchenkolab/leidenAlg",
      "license": "GPL-3.0-or-later",
      "license_file": [
        "/lib/R/share/licenses/GPL-3"
      ],
      "summary": "An R interface to the Leiden algorithm, an iterative community detection algorithm on networks. The algorithm is designed to converge to a partition in which all subsets of all communities are locally optimally assigned, yielding communities guaranteed to be connected. The implementation proves to be fast, scales well, and can be run on graphs of millions of nodes (as long as they can fit in memory). The original implementation was constructed as a python interface \"leidenalg\" found here: <https://github.com/vtraag/leidenalg>. The algorithm was originally described in Traag, V.A., Waltman, L. & van Eck, N.J. \"From Louvain to Leiden: guaranteeing well-connected communities\". Sci Rep 9, 5233 (2019) <doi:10.1038/s41598-019-41695-z>."
    },
    "build": {
      "missing_dso_whitelist": null,
      "number": "0",
      "rpaths": [
        "lib/R/lib/",
        "lib/"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "conda-forge/r",
        "raivivek"
      ]
    },
    "package": {
      "name": "r-leidenalg",
      "version": "1.1.5"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "fortran_compiler_stub",
        "make"
      ],
      "host": [
        "r-base",
        "r-matrix",
        "r-matrix.utils",
        "r-rcpp >=1.0.5",
        "r-rcpparmadillo",
        "r-rcppeigen",
        "r-igraph",
        "r-sccore"
      ],
      "run": [
        "r-base",
        "r-matrix",
        "r-matrix.utils",
        "r-rcpp >=1.0.5",
        "r-rcpparmadillo",
        "r-rcppeigen",
        "r-igraph",
        "r-sccore"
      ]
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "patches/0001-use-AR-variable.patch"
      ],
      "sha256": "02fc96bc2e3e7b32aa6a27096f98b29763e210b86c5a60f87c5440b29c3a23cb",
      "url": [
        "https://cran.r-project.org/src/contrib/leidenAlg_1.1.5.tar.gz",
        "https://cran.r-project.org/src/contrib/Archive/leidenAlg/leidenAlg_1.1.5.tar.gz"
      ]
    },
    "test": {
      "commands": [
        "$R -e \"library('leidenAlg')\"",
        "$R -e \"testthat::test_file('tests/testthat.R', stop_on_failure=TRUE)\""
      ],
      "requires": [
        "r-testthat"
      ],
      "source_files": [
        "tests/"
      ]
    }
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "fortran_compiler_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "r-base",
        "r-igraph",
        "r-matrix",
        "r-matrix.utils",
        "r-rcpp",
        "r-rcpparmadillo",
        "r-rcppeigen",
        "r-sccore"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "r-base",
        "r-igraph",
        "r-matrix",
        "r-matrix.utils",
        "r-rcpp",
        "r-rcpparmadillo",
        "r-rcppeigen",
        "r-sccore"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "r-testthat"
      ]
    }
  },
  "linux_aarch64_meta_yaml": {
    "about": {
      "home": "https://github.com/kharchenkolab/leidenAlg",
      "license": "GPL-3.0-or-later",
      "license_file": [
        "/lib/R/share/licenses/GPL-3"
      ],
      "summary": "An R interface to the Leiden algorithm, an iterative community detection algorithm on networks. The algorithm is designed to converge to a partition in which all subsets of all communities are locally optimally assigned, yielding communities guaranteed to be connected. The implementation proves to be fast, scales well, and can be run on graphs of millions of nodes (as long as they can fit in memory). The original implementation was constructed as a python interface \"leidenalg\" found here: <https://github.com/vtraag/leidenalg>. The algorithm was originally described in Traag, V.A., Waltman, L. & van Eck, N.J. \"From Louvain to Leiden: guaranteeing well-connected communities\". Sci Rep 9, 5233 (2019) <doi:10.1038/s41598-019-41695-z>."
    },
    "build": {
      "missing_dso_whitelist": null,
      "number": "0",
      "rpaths": [
        "lib/R/lib/",
        "lib/"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "conda-forge/r",
        "raivivek"
      ]
    },
    "package": {
      "name": "r-leidenalg",
      "version": "1.1.5"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "fortran_compiler_stub",
        "make"
      ],
      "host": [
        "r-base",
        "r-matrix",
        "r-matrix.utils",
        "r-rcpp >=1.0.5",
        "r-rcpparmadillo",
        "r-rcppeigen",
        "r-igraph",
        "r-sccore"
      ],
      "run": [
        "r-base",
        "r-matrix",
        "r-matrix.utils",
        "r-rcpp >=1.0.5",
        "r-rcpparmadillo",
        "r-rcppeigen",
        "r-igraph",
        "r-sccore"
      ]
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "patches/0001-use-AR-variable.patch"
      ],
      "sha256": "02fc96bc2e3e7b32aa6a27096f98b29763e210b86c5a60f87c5440b29c3a23cb",
      "url": [
        "https://cran.r-project.org/src/contrib/leidenAlg_1.1.5.tar.gz",
        "https://cran.r-project.org/src/contrib/Archive/leidenAlg/leidenAlg_1.1.5.tar.gz"
      ]
    },
    "test": {
      "commands": [
        "$R -e \"library('leidenAlg')\"",
        "$R -e \"testthat::test_file('tests/testthat.R', stop_on_failure=TRUE)\""
      ],
      "requires": [
        "r-testthat"
      ],
      "source_files": [
        "tests/"
      ]
    }
  },
  "linux_aarch64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "fortran_compiler_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "r-base",
        "r-igraph",
        "r-matrix",
        "r-matrix.utils",
        "r-rcpp",
        "r-rcpparmadillo",
        "r-rcppeigen",
        "r-sccore"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "r-base",
        "r-igraph",
        "r-matrix",
        "r-matrix.utils",
        "r-rcpp",
        "r-rcpparmadillo",
        "r-rcppeigen",
        "r-sccore"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "r-testthat"
      ]
    }
  },
  "linux_ppc64le_meta_yaml": {
    "about": {
      "home": "https://github.com/kharchenkolab/leidenAlg",
      "license": "GPL-3.0-or-later",
      "license_file": [
        "/lib/R/share/licenses/GPL-3"
      ],
      "summary": "An R interface to the Leiden algorithm, an iterative community detection algorithm on networks. The algorithm is designed to converge to a partition in which all subsets of all communities are locally optimally assigned, yielding communities guaranteed to be connected. The implementation proves to be fast, scales well, and can be run on graphs of millions of nodes (as long as they can fit in memory). The original implementation was constructed as a python interface \"leidenalg\" found here: <https://github.com/vtraag/leidenalg>. The algorithm was originally described in Traag, V.A., Waltman, L. & van Eck, N.J. \"From Louvain to Leiden: guaranteeing well-connected communities\". Sci Rep 9, 5233 (2019) <doi:10.1038/s41598-019-41695-z>."
    },
    "build": {
      "missing_dso_whitelist": null,
      "number": "0",
      "rpaths": [
        "lib/R/lib/",
        "lib/"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "conda-forge/r",
        "raivivek"
      ]
    },
    "package": {
      "name": "r-leidenalg",
      "version": "1.1.5"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "fortran_compiler_stub",
        "make"
      ],
      "host": [
        "r-base",
        "r-matrix",
        "r-matrix.utils",
        "r-rcpp >=1.0.5",
        "r-rcpparmadillo",
        "r-rcppeigen",
        "r-igraph",
        "r-sccore"
      ],
      "run": [
        "r-base",
        "r-matrix",
        "r-matrix.utils",
        "r-rcpp >=1.0.5",
        "r-rcpparmadillo",
        "r-rcppeigen",
        "r-igraph",
        "r-sccore"
      ]
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "patches/0001-use-AR-variable.patch"
      ],
      "sha256": "02fc96bc2e3e7b32aa6a27096f98b29763e210b86c5a60f87c5440b29c3a23cb",
      "url": [
        "https://cran.r-project.org/src/contrib/leidenAlg_1.1.5.tar.gz",
        "https://cran.r-project.org/src/contrib/Archive/leidenAlg/leidenAlg_1.1.5.tar.gz"
      ]
    },
    "test": {
      "commands": [
        "$R -e \"library('leidenAlg')\"",
        "$R -e \"testthat::test_file('tests/testthat.R', stop_on_failure=TRUE)\""
      ],
      "requires": [
        "r-testthat"
      ],
      "source_files": [
        "tests/"
      ]
    }
  },
  "linux_ppc64le_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "fortran_compiler_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "r-base",
        "r-igraph",
        "r-matrix",
        "r-matrix.utils",
        "r-rcpp",
        "r-rcpparmadillo",
        "r-rcppeigen",
        "r-sccore"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "r-base",
        "r-igraph",
        "r-matrix",
        "r-matrix.utils",
        "r-rcpp",
        "r-rcpparmadillo",
        "r-rcppeigen",
        "r-sccore"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "r-testthat"
      ]
    }
  },
  "meta_yaml": {
    "about": {
      "home": "https://github.com/kharchenkolab/leidenAlg",
      "license": "GPL-3.0-or-later",
      "license_file": [
        "/lib/R/share/licenses/GPL-3"
      ],
      "summary": "An R interface to the Leiden algorithm, an iterative community detection algorithm on networks. The algorithm is designed to converge to a partition in which all subsets of all communities are locally optimally assigned, yielding communities guaranteed to be connected. The implementation proves to be fast, scales well, and can be run on graphs of millions of nodes (as long as they can fit in memory). The original implementation was constructed as a python interface \"leidenalg\" found here: <https://github.com/vtraag/leidenalg>. The algorithm was originally described in Traag, V.A., Waltman, L. & van Eck, N.J. \"From Louvain to Leiden: guaranteeing well-connected communities\". Sci Rep 9, 5233 (2019) <doi:10.1038/s41598-019-41695-z>."
    },
    "build": {
      "missing_dso_whitelist": [
        "*/R.dll",
        "*/Rblas.dll",
        "*/Rlapack.dll"
      ],
      "number": "0",
      "rpaths": [
        "lib/R/lib/",
        "lib/"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "conda-forge/r",
        "raivivek"
      ]
    },
    "package": {
      "name": "r-leidenalg",
      "version": "1.1.5"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "fortran_compiler_stub",
        "make",
        "m2w64_c_compiler_stub",
        "m2w64_c_stdlib_stub",
        "m2w64_cxx_compiler_stub",
        "m2w64_fortran_compiler_stub",
        "filesystem",
        "sed",
        "coreutils",
        "zip"
      ],
      "host": [
        "r-base",
        "r-matrix",
        "r-matrix.utils",
        "r-rcpp >=1.0.5",
        "r-rcpparmadillo",
        "r-rcppeigen",
        "r-igraph",
        "r-sccore"
      ],
      "run": [
        "r-base",
        "r-matrix",
        "r-matrix.utils",
        "r-rcpp >=1.0.5",
        "r-rcpparmadillo",
        "r-rcppeigen",
        "r-igraph",
        "r-sccore"
      ]
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "patches/0001-use-AR-variable.patch"
      ],
      "sha256": "02fc96bc2e3e7b32aa6a27096f98b29763e210b86c5a60f87c5440b29c3a23cb",
      "url": [
        "https://cran.r-project.org/src/contrib/leidenAlg_1.1.5.tar.gz",
        "https://cran.r-project.org/src/contrib/Archive/leidenAlg/leidenAlg_1.1.5.tar.gz"
      ]
    },
    "test": {
      "commands": [
        "$R -e \"library('leidenAlg')\"",
        "$R -e \"testthat::test_file('tests/testthat.R', stop_on_failure=TRUE)\"",
        "\"%R%\" -e \"library('leidenAlg')\"",
        "\"%R%\" -e \"testthat::test_file('tests/testthat.R', stop_on_failure=TRUE)\""
      ],
      "requires": [
        "r-testthat"
      ],
      "source_files": [
        "tests/"
      ]
    }
  },
  "name": "r-leidenalg",
  "osx_64_meta_yaml": {
    "about": {
      "home": "https://github.com/kharchenkolab/leidenAlg",
      "license": "GPL-3.0-or-later",
      "license_file": [
        "/lib/R/share/licenses/GPL-3"
      ],
      "summary": "An R interface to the Leiden algorithm, an iterative community detection algorithm on networks. The algorithm is designed to converge to a partition in which all subsets of all communities are locally optimally assigned, yielding communities guaranteed to be connected. The implementation proves to be fast, scales well, and can be run on graphs of millions of nodes (as long as they can fit in memory). The original implementation was constructed as a python interface \"leidenalg\" found here: <https://github.com/vtraag/leidenalg>. The algorithm was originally described in Traag, V.A., Waltman, L. & van Eck, N.J. \"From Louvain to Leiden: guaranteeing well-connected communities\". Sci Rep 9, 5233 (2019) <doi:10.1038/s41598-019-41695-z>."
    },
    "build": {
      "missing_dso_whitelist": null,
      "number": "0",
      "rpaths": [
        "lib/R/lib/",
        "lib/"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "conda-forge/r",
        "raivivek"
      ]
    },
    "package": {
      "name": "r-leidenalg",
      "version": "1.1.5"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "fortran_compiler_stub",
        "make"
      ],
      "host": [
        "r-base",
        "r-matrix",
        "r-matrix.utils",
        "r-rcpp >=1.0.5",
        "r-rcpparmadillo",
        "r-rcppeigen",
        "r-igraph",
        "r-sccore"
      ],
      "run": [
        "r-base",
        "r-matrix",
        "r-matrix.utils",
        "r-rcpp >=1.0.5",
        "r-rcpparmadillo",
        "r-rcppeigen",
        "r-igraph",
        "r-sccore"
      ]
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "patches/0001-use-AR-variable.patch"
      ],
      "sha256": "02fc96bc2e3e7b32aa6a27096f98b29763e210b86c5a60f87c5440b29c3a23cb",
      "url": [
        "https://cran.r-project.org/src/contrib/leidenAlg_1.1.5.tar.gz",
        "https://cran.r-project.org/src/contrib/Archive/leidenAlg/leidenAlg_1.1.5.tar.gz"
      ]
    },
    "test": {
      "commands": [
        "$R -e \"library('leidenAlg')\"",
        "$R -e \"testthat::test_file('tests/testthat.R', stop_on_failure=TRUE)\""
      ],
      "requires": [
        "r-testthat"
      ],
      "source_files": [
        "tests/"
      ]
    }
  },
  "osx_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "fortran_compiler_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "r-base",
        "r-igraph",
        "r-matrix",
        "r-matrix.utils",
        "r-rcpp",
        "r-rcpparmadillo",
        "r-rcppeigen",
        "r-sccore"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "r-base",
        "r-igraph",
        "r-matrix",
        "r-matrix.utils",
        "r-rcpp",
        "r-rcpparmadillo",
        "r-rcppeigen",
        "r-sccore"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "r-testthat"
      ]
    }
  },
  "osx_arm64_meta_yaml": {
    "about": {
      "home": "https://github.com/kharchenkolab/leidenAlg",
      "license": "GPL-3.0-or-later",
      "license_file": [
        "/lib/R/share/licenses/GPL-3"
      ],
      "summary": "An R interface to the Leiden algorithm, an iterative community detection algorithm on networks. The algorithm is designed to converge to a partition in which all subsets of all communities are locally optimally assigned, yielding communities guaranteed to be connected. The implementation proves to be fast, scales well, and can be run on graphs of millions of nodes (as long as they can fit in memory). The original implementation was constructed as a python interface \"leidenalg\" found here: <https://github.com/vtraag/leidenalg>. The algorithm was originally described in Traag, V.A., Waltman, L. & van Eck, N.J. \"From Louvain to Leiden: guaranteeing well-connected communities\". Sci Rep 9, 5233 (2019) <doi:10.1038/s41598-019-41695-z>."
    },
    "build": {
      "missing_dso_whitelist": null,
      "number": "0",
      "rpaths": [
        "lib/R/lib/",
        "lib/"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "conda-forge/r",
        "raivivek"
      ]
    },
    "package": {
      "name": "r-leidenalg",
      "version": "1.1.5"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "fortran_compiler_stub",
        "make"
      ],
      "host": [
        "r-base",
        "r-matrix",
        "r-matrix.utils",
        "r-rcpp >=1.0.5",
        "r-rcpparmadillo",
        "r-rcppeigen",
        "r-igraph",
        "r-sccore"
      ],
      "run": [
        "r-base",
        "r-matrix",
        "r-matrix.utils",
        "r-rcpp >=1.0.5",
        "r-rcpparmadillo",
        "r-rcppeigen",
        "r-igraph",
        "r-sccore"
      ]
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "patches/0001-use-AR-variable.patch"
      ],
      "sha256": "02fc96bc2e3e7b32aa6a27096f98b29763e210b86c5a60f87c5440b29c3a23cb",
      "url": [
        "https://cran.r-project.org/src/contrib/leidenAlg_1.1.5.tar.gz",
        "https://cran.r-project.org/src/contrib/Archive/leidenAlg/leidenAlg_1.1.5.tar.gz"
      ]
    },
    "test": {
      "commands": [
        "$R -e \"library('leidenAlg')\"",
        "$R -e \"testthat::test_file('tests/testthat.R', stop_on_failure=TRUE)\""
      ],
      "requires": [
        "r-testthat"
      ],
      "source_files": [
        "tests/"
      ]
    }
  },
  "osx_arm64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "fortran_compiler_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "r-base",
        "r-igraph",
        "r-matrix",
        "r-matrix.utils",
        "r-rcpp",
        "r-rcpparmadillo",
        "r-rcppeigen",
        "r-sccore"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "r-base",
        "r-igraph",
        "r-matrix",
        "r-matrix.utils",
        "r-rcpp",
        "r-rcpparmadillo",
        "r-rcppeigen",
        "r-sccore"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "r-testthat"
      ]
    }
  },
  "outputs_names": {
    "__set__": true,
    "elements": [
      "r-leidenalg"
    ]
  },
  "parsing_error": false,
  "platforms": [
    "linux_64",
    "linux_aarch64",
    "linux_ppc64le",
    "osx_64",
    "osx_arm64",
    "win_64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/r-leidenalg.json"
  },
  "raw_meta_yaml": "{% set version = \"1.1.5\" %}\n{% set posix = 'm2-' if win else '' %}\n\npackage:\n  name: r-leidenalg\n  version: {{ version|replace(\"-\", \"_\") }}\n\nsource:\n  url:\n    - {{ cran_mirror }}/src/contrib/leidenAlg_{{ version }}.tar.gz\n    - {{ cran_mirror }}/src/contrib/Archive/leidenAlg/leidenAlg_{{ version }}.tar.gz\n  sha256: 02fc96bc2e3e7b32aa6a27096f98b29763e210b86c5a60f87c5440b29c3a23cb\n  patches:\n    - patches/0001-use-AR-variable.patch\n\nbuild:\n  number: 0\n  rpaths:\n    - lib/R/lib/\n    - lib/\n  missing_dso_whitelist:\n    - '*/R.dll'        # [win]\n    - '*/Rblas.dll'    # [win]\n    - '*/Rlapack.dll'  # [win]\n\nrequirements:\n  build:\n    - cross-r-base {{ r_base }}    # [build_platform != target_platform]\n    - r-matrix                     # [build_platform != target_platform]\n    - r-matrix.utils               # [build_platform != target_platform]\n    - r-rcpp                       # [build_platform != target_platform]\n    - r-rcpparmadillo              # [build_platform != target_platform]\n    - r-rcppeigen                  # [build_platform != target_platform]\n    - r-igraph                     # [build_platform != target_platform]\n    - r-sccore                     # [build_platform != target_platform]\n    - {{ compiler('c') }}          # [not win]\n    - {{ stdlib(\"c\") }}            # [not win]\n    - {{ compiler('m2w64_c') }}    # [win]\n    - {{ stdlib(\"m2w64_c\") }}      # [win]\n    - {{ compiler('cxx') }}        # [not win]\n    - {{ compiler('m2w64_cxx') }}  # [win]\n    - {{ compiler('fortran') }}    # [not win]\n    - {{ compiler('m2w64_fortran') }}  # [win]\n    - {{ posix }}filesystem        # [win]\n    - {{ posix }}make\n    - {{ posix }}sed               # [win]\n    - {{ posix }}coreutils         # [win]\n    - {{ posix }}zip               # [win]\n  host:\n    - r-base\n    - r-matrix\n    - r-matrix.utils\n    - r-rcpp >=1.0.5\n    - r-rcpparmadillo\n    - r-rcppeigen\n    - r-igraph\n    - r-sccore\n  run:\n    - r-base\n    - r-matrix\n    - r-matrix.utils\n    - r-rcpp >=1.0.5\n    - r-rcpparmadillo\n    - r-rcppeigen\n    - r-igraph\n    - r-sccore\n\ntest:\n  requires:\n    - r-testthat\n  source_files:\n    - tests/\n  commands:\n    - $R -e \"library('leidenAlg')\"                                                    # [not win]\n    - $R -e \"testthat::test_file('tests/testthat.R', stop_on_failure=TRUE)\"           # [not win]\n    - \"\\\"%R%\\\" -e \\\"library('leidenAlg')\\\"\"                                           # [win]\n    - \"\\\"%R%\\\" -e \\\"testthat::test_file('tests/testthat.R', stop_on_failure=TRUE)\\\"\"  # [win]\n\nabout:\n  home: https://github.com/kharchenkolab/leidenAlg\n  license: GPL-3.0-or-later\n  summary: 'An R interface to the Leiden algorithm, an iterative community detection algorithm on networks. The algorithm is designed to converge to a partition in which all subsets of all communities are locally optimally assigned, yielding communities guaranteed to be connected. The implementation proves to be fast, scales\n    well, and can be run on graphs of millions of nodes (as long as they can fit in memory). The original implementation was constructed as a python interface \"leidenalg\" found here: <https://github.com/vtraag/leidenalg>. The algorithm was originally described in Traag, V.A., Waltman, L. & van Eck, N.J. \"From Louvain to\n    Leiden: guaranteeing well-connected communities\". Sci Rep 9, 5233 (2019) <doi:10.1038/s41598-019-41695-z>.'\n  license_file:\n    - {{ environ[\"PREFIX\"] }}/lib/R/share/licenses/GPL-3\n\nextra:\n  recipe-maintainers:\n    - conda-forge/r\n    - raivivek\n",
  "req": {
    "__set__": true,
    "elements": [
      "c_compiler_stub",
      "c_stdlib_stub",
      "coreutils",
      "cxx_compiler_stub",
      "filesystem",
      "fortran_compiler_stub",
      "m2w64_c_compiler_stub",
      "m2w64_c_stdlib_stub",
      "m2w64_cxx_compiler_stub",
      "m2w64_fortran_compiler_stub",
      "make",
      "r-base",
      "r-igraph",
      "r-matrix",
      "r-matrix.utils",
      "r-rcpp",
      "r-rcpparmadillo",
      "r-rcppeigen",
      "r-sccore",
      "sed",
      "zip"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "coreutils",
        "cxx_compiler_stub",
        "filesystem",
        "fortran_compiler_stub",
        "m2w64_c_compiler_stub",
        "m2w64_c_stdlib_stub",
        "m2w64_cxx_compiler_stub",
        "m2w64_fortran_compiler_stub",
        "make",
        "sed",
        "zip"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "fortran_compiler_stub",
        "r-base",
        "r-igraph",
        "r-matrix",
        "r-matrix.utils",
        "r-rcpp",
        "r-rcpparmadillo",
        "r-rcppeigen",
        "r-sccore"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "fortran_compiler_stub",
        "r-base",
        "r-igraph",
        "r-matrix",
        "r-matrix.utils",
        "r-rcpp",
        "r-rcpparmadillo",
        "r-rcppeigen",
        "r-sccore"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "r-testthat"
      ]
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "coreutils",
        "cxx_compiler_stub",
        "filesystem",
        "fortran_compiler_stub",
        "m2w64_c_compiler_stub",
        "m2w64_c_stdlib_stub",
        "m2w64_cxx_compiler_stub",
        "m2w64_fortran_compiler_stub",
        "make",
        "sed",
        "zip"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "r-base",
        "r-igraph",
        "r-matrix",
        "r-matrix.utils",
        "r-rcpp >=1.0.5",
        "r-rcpparmadillo",
        "r-rcppeigen",
        "r-sccore"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "r-base",
        "r-igraph",
        "r-matrix",
        "r-matrix.utils",
        "r-rcpp >=1.0.5",
        "r-rcpparmadillo",
        "r-rcppeigen",
        "r-sccore"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "r-testthat"
      ]
    }
  },
  "url": [
    "https://cran.r-project.org/src/contrib/leidenAlg_1.1.5.tar.gz",
    "https://cran.r-project.org/src/contrib/Archive/leidenAlg/leidenAlg_1.1.5.tar.gz",
    "https://cran.r-project.org/src/contrib/leidenAlg_1.1.5.tar.gz",
    "https://cran.r-project.org/src/contrib/Archive/leidenAlg/leidenAlg_1.1.5.tar.gz",
    "https://cran.r-project.org/src/contrib/leidenAlg_1.1.5.tar.gz",
    "https://cran.r-project.org/src/contrib/Archive/leidenAlg/leidenAlg_1.1.5.tar.gz",
    "https://cran.r-project.org/src/contrib/leidenAlg_1.1.5.tar.gz",
    "https://cran.r-project.org/src/contrib/Archive/leidenAlg/leidenAlg_1.1.5.tar.gz",
    "https://cran.r-project.org/src/contrib/leidenAlg_1.1.5.tar.gz",
    "https://cran.r-project.org/src/contrib/Archive/leidenAlg/leidenAlg_1.1.5.tar.gz",
    "https://cran.r-project.org/src/contrib/leidenAlg_1.1.5.tar.gz",
    "https://cran.r-project.org/src/contrib/Archive/leidenAlg/leidenAlg_1.1.5.tar.gz"
  ],
  "version": "1.1.5",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/r-leidenalg.json"
  },
  "win_64_meta_yaml": {
    "about": {
      "home": "https://github.com/kharchenkolab/leidenAlg",
      "license": "GPL-3.0-or-later",
      "license_file": [
        "/lib/R/share/licenses/GPL-3"
      ],
      "summary": "An R interface to the Leiden algorithm, an iterative community detection algorithm on networks. The algorithm is designed to converge to a partition in which all subsets of all communities are locally optimally assigned, yielding communities guaranteed to be connected. The implementation proves to be fast, scales well, and can be run on graphs of millions of nodes (as long as they can fit in memory). The original implementation was constructed as a python interface \"leidenalg\" found here: <https://github.com/vtraag/leidenalg>. The algorithm was originally described in Traag, V.A., Waltman, L. & van Eck, N.J. \"From Louvain to Leiden: guaranteeing well-connected communities\". Sci Rep 9, 5233 (2019) <doi:10.1038/s41598-019-41695-z>."
    },
    "build": {
      "missing_dso_whitelist": [
        "*/R.dll",
        "*/Rblas.dll",
        "*/Rlapack.dll"
      ],
      "number": "0",
      "rpaths": [
        "lib/R/lib/",
        "lib/"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "conda-forge/r",
        "raivivek"
      ]
    },
    "package": {
      "name": "r-leidenalg",
      "version": "1.1.5"
    },
    "requirements": {
      "build": [
        "m2w64_c_compiler_stub",
        "m2w64_c_stdlib_stub",
        "m2w64_cxx_compiler_stub",
        "m2w64_fortran_compiler_stub",
        "filesystem",
        "make",
        "sed",
        "coreutils",
        "zip"
      ],
      "host": [
        "r-base",
        "r-matrix",
        "r-matrix.utils",
        "r-rcpp >=1.0.5",
        "r-rcpparmadillo",
        "r-rcppeigen",
        "r-igraph",
        "r-sccore"
      ],
      "run": [
        "r-base",
        "r-matrix",
        "r-matrix.utils",
        "r-rcpp >=1.0.5",
        "r-rcpparmadillo",
        "r-rcppeigen",
        "r-igraph",
        "r-sccore"
      ]
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "patches/0001-use-AR-variable.patch"
      ],
      "sha256": "02fc96bc2e3e7b32aa6a27096f98b29763e210b86c5a60f87c5440b29c3a23cb",
      "url": [
        "https://cran.r-project.org/src/contrib/leidenAlg_1.1.5.tar.gz",
        "https://cran.r-project.org/src/contrib/Archive/leidenAlg/leidenAlg_1.1.5.tar.gz"
      ]
    },
    "test": {
      "commands": [
        "\"%R%\" -e \"library('leidenAlg')\"",
        "\"%R%\" -e \"testthat::test_file('tests/testthat.R', stop_on_failure=TRUE)\""
      ],
      "requires": [
        "r-testthat"
      ],
      "source_files": [
        "tests/"
      ]
    }
  },
  "win_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "coreutils",
        "filesystem",
        "m2w64_c_compiler_stub",
        "m2w64_c_stdlib_stub",
        "m2w64_cxx_compiler_stub",
        "m2w64_fortran_compiler_stub",
        "make",
        "sed",
        "zip"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "r-base",
        "r-igraph",
        "r-matrix",
        "r-matrix.utils",
        "r-rcpp",
        "r-rcpparmadillo",
        "r-rcppeigen",
        "r-sccore"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "r-base",
        "r-igraph",
        "r-matrix",
        "r-matrix.utils",
        "r-rcpp",
        "r-rcpparmadillo",
        "r-rcppeigen",
        "r-sccore"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "r-testthat"
      ]
    }
  }
}