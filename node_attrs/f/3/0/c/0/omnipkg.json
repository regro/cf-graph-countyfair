{
  "archived": false,
  "branch": "main",
  "conda-forge.yml": {
    "conda_build": {
      "error_overlinking": true
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    }
  },
  "feedstock_name": "omnipkg",
  "hash_type": "sha256",
  "linux_64_meta_yaml": {
    "about": {
      "description": "Omnipkg is a next-generation Python dependency manager that solves the\nclassic problems of pip, conda, and Docker by enabling multiple package\nversions and Python interpreters to coexist in a single environment.\nKey features:\n  • Dynamic version switching: swap between NumPy, TensorFlow, or any package mid-script.\n  • Multi-interpreter freedom: run Python 3.8, 3.11, and beyond in one process.\n  • Auto-healing: automatically detect and fix broken dependencies at runtime.\n  • Bubble isolation: install conflicting versions side by side without virtualenvs.\n  • SQLite/Redis intelligence: instant lookups, conflict resolution, and rollback.\nOmnipkg is designed for researchers, quants, and engineers who demand\nspeed, reproducibility, and zero-friction workflows across complex\ndependency stacks. It provides a robust alternative to pipx, uv, poetry,\nand Docker, all in one tool. Optional: omnipkg can use Redis (v5.0+) for improved speed.\n",
      "dev_url": "https://github.com/1minds3t",
      "doc_url": "https://github.com/1minds3t/omnipkg/tree/main/docs",
      "home": "https://github.com/1minds3t/omnipkg",
      "license": "AGPL-3.0-only",
      "license_family": "AGPL",
      "license_file": "LICENSE",
      "summary": "The Ultimate Python Dependency Resolver. One environment. Infinite packages. Zero conflicts."
    },
    "build": {
      "entry_points": [
        "omnipkg = omnipkg.cli:main",
        "8pkg = omnipkg.cli:main"
      ],
      "noarch": "python",
      "number": "0",
      "script": "PYTHON -m pip install . --no-deps --no-build-isolation -vv"
    },
    "extra": {
      "recipe-maintainers": [
        "1minds3t"
      ]
    },
    "package": {
      "name": "omnipkg",
      "version": "1.4.7"
    },
    "requirements": {
      "host": [
        "python 3.10",
        "pip",
        "setuptools >=61.0"
      ],
      "run": [
        "python >=3.10",
        "packaging >=23.0",
        "requests >=2.20",
        "filelock >=3.9",
        "tomli",
        "tqdm",
        "safety >=3.0",
        "aiohttp",
        "uv"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "832c9ac4aef1999225e0c48053c3882cb56c29b9c1919b78629852fb4bb3220b",
      "url": "https://pypi.org/packages/source/o/omnipkg/omnipkg-1.4.7.tar.gz"
    },
    "test": {
      "commands": [
        "omnipkg --version"
      ],
      "imports": [
        "omnipkg"
      ]
    }
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": []
    },
    "host": {
      "__set__": true,
      "elements": [
        "pip",
        "python",
        "setuptools"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "aiohttp",
        "filelock",
        "packaging",
        "python",
        "requests",
        "safety",
        "tomli",
        "tqdm",
        "uv"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "meta_yaml": {
    "about": {
      "description": "Omnipkg is a next-generation Python dependency manager that solves the\nclassic problems of pip, conda, and Docker by enabling multiple package\nversions and Python interpreters to coexist in a single environment.\nKey features:\n  • Dynamic version switching: swap between NumPy, TensorFlow, or any package mid-script.\n  • Multi-interpreter freedom: run Python 3.8, 3.11, and beyond in one process.\n  • Auto-healing: automatically detect and fix broken dependencies at runtime.\n  • Bubble isolation: install conflicting versions side by side without virtualenvs.\n  • SQLite/Redis intelligence: instant lookups, conflict resolution, and rollback.\nOmnipkg is designed for researchers, quants, and engineers who demand\nspeed, reproducibility, and zero-friction workflows across complex\ndependency stacks. It provides a robust alternative to pipx, uv, poetry,\nand Docker, all in one tool. Optional: omnipkg can use Redis (v5.0+) for improved speed.\n",
      "dev_url": "https://github.com/1minds3t",
      "doc_url": "https://github.com/1minds3t/omnipkg/tree/main/docs",
      "home": "https://github.com/1minds3t/omnipkg",
      "license": "AGPL-3.0-only",
      "license_family": "AGPL",
      "license_file": "LICENSE",
      "summary": "The Ultimate Python Dependency Resolver. One environment. Infinite packages. Zero conflicts."
    },
    "build": {
      "entry_points": [
        "omnipkg = omnipkg.cli:main",
        "8pkg = omnipkg.cli:main"
      ],
      "noarch": "python",
      "number": "0",
      "script": "PYTHON -m pip install . --no-deps --no-build-isolation -vv"
    },
    "extra": {
      "recipe-maintainers": [
        "1minds3t"
      ]
    },
    "package": {
      "name": "omnipkg",
      "version": "1.4.7"
    },
    "requirements": {
      "host": [
        "python 3.10",
        "pip",
        "setuptools >=61.0"
      ],
      "run": [
        "python >=3.10",
        "packaging >=23.0",
        "requests >=2.20",
        "filelock >=3.9",
        "tomli",
        "tqdm",
        "safety >=3.0",
        "aiohttp",
        "uv"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "832c9ac4aef1999225e0c48053c3882cb56c29b9c1919b78629852fb4bb3220b",
      "url": "https://pypi.org/packages/source/o/omnipkg/omnipkg-1.4.7.tar.gz"
    },
    "test": {
      "commands": [
        "omnipkg --version"
      ],
      "imports": [
        "omnipkg"
      ]
    }
  },
  "name": "omnipkg",
  "outputs_names": {
    "__set__": true,
    "elements": [
      "omnipkg"
    ]
  },
  "parsing_error": "feedstock parsing error: Error running 'conda-forge-tick-container parse-feedstock --existing-feedstock-node-attrs - --log-level info --mark-not-archived' in container - error RuntimeError raised:\n'conda build error: TypeError(\"CondaError.__init__() missing 1 required positional argument: 'message'\")\nTraceback (most recent call last):\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/metadata.py\", line 418, in yamlize\n    return yaml.load(data, Loader=StringifyNumbersLoader)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/yaml/__init__.py\", line 81, in load\n    return loader.get_single_data()\n           ^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/yaml/constructor.py\", line 49, in get_single_data\n    node = self.get_single_node()\n           ^^^^^^^^^^^^^^^^^^^^^^\n  File \"yaml/_yaml.pyx\", line 673, in yaml._yaml.CParser.get_single_node\n  File \"yaml/_yaml.pyx\", line 687, in yaml._yaml.CParser._compose_document\n  File \"yaml/_yaml.pyx\", line 731, in yaml._yaml.CParser._compose_node\n  File \"yaml/_yaml.pyx\", line 845, in yaml._yaml.CParser._compose_mapping_node\n  File \"yaml/_yaml.pyx\", line 731, in yaml._yaml.CParser._compose_node\n  File \"yaml/_yaml.pyx\", line 847, in yaml._yaml.CParser._compose_mapping_node\n  File \"yaml/_yaml.pyx\", line 860, in yaml._yaml.CParser._parse_next_event\nyaml.scanner.ScannerError: while scanning a simple key\n  in \"<unicode string>\", line 50, column 3\ncould not find expected ':'\n  in \"<unicode string>\", line 51, column 3\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/opt/autotick-bot/conda_forge_tick/utils.py\", line 1002, in parse_meta_yaml_local\n    return _run(use_orig_cbc_path=True)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/autotick-bot/conda_forge_tick/utils.py\", line 989, in _run\n    return _parse_meta_yaml_impl(\n           ^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/autotick-bot/conda_forge_tick/utils.py\", line 1090, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/metadata.py\", line 1250, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/metadata.py\", line 1338, in parse_again\n    self.meta = parse(\n                ^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/metadata.py\", line 581, in parse\n    res = yamlize(data)\n          ^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/metadata.py\", line 422, in yamlize\n    raise UnableToParse(original=e)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/exceptions.py\", line 22, in __init__\n    super().__init__(*args, **kwargs)\nTypeError: CondaError.__init__() missing 1 required positional argument: 'message'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/metadata.py\", line 418, in yamlize\n    return yaml.load(data, Loader=StringifyNumbersLoader)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/yaml/__init__.py\", line 81, in load\n    return loader.get_single_data()\n           ^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/yaml/constructor.py\", line 49, in get_single_data\n    node = self.get_single_node()\n           ^^^^^^^^^^^^^^^^^^^^^^\n  File \"yaml/_yaml.pyx\", line 673, in yaml._yaml.CParser.get_single_node\n  File \"yaml/_yaml.pyx\", line 687, in yaml._yaml.CParser._compose_document\n  File \"yaml/_yaml.pyx\", line 731, in yaml._yaml.CParser._compose_node\n  File \"yaml/_yaml.pyx\", line 845, in yaml._yaml.CParser._compose_mapping_node\n  File \"yaml/_yaml.pyx\", line 731, in yaml._yaml.CParser._compose_node\n  File \"yaml/_yaml.pyx\", line 847, in yaml._yaml.CParser._compose_mapping_node\n  File \"yaml/_yaml.pyx\", line 860, in yaml._yaml.CParser._parse_next_event\nyaml.scanner.ScannerError: while scanning a simple key\n  in \"<unicode string>\", line 50, column 3\ncould not find expected ':'\n  in \"<unicode string>\", line 51, column 3\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/opt/autotick-bot/conda_forge_tick/utils.py\", line 1006, in parse_meta_yaml_local\n    return _run(use_orig_cbc_path=False)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/autotick-bot/conda_forge_tick/utils.py\", line 989, in _run\n    return _parse_meta_yaml_impl(\n           ^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/autotick-bot/conda_forge_tick/utils.py\", line 1090, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/metadata.py\", line 1250, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/metadata.py\", line 1338, in parse_again\n    self.meta = parse(\n                ^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/metadata.py\", line 581, in parse\n    res = yamlize(data)\n          ^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/metadata.py\", line 422, in yamlize\n    raise UnableToParse(original=e)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/exceptions.py\", line 22, in __init__\n    super().__init__(*args, **kwargs)\nTypeError: CondaError.__init__() missing 1 required positional argument: 'message'\n'\nTraceback (most recent call last):\n  File \"/home/runner/work/cf-scripts/cf-scripts/cf-scripts/conda_forge_tick/make_graph.py\", line 115, in try_load_feedstock\n    data = load_feedstock(name, attrs.data, mark_not_archived=mark_not_archived)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/cf-scripts/cf-scripts/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 756, in load_feedstock\n    return load_feedstock_containerized(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/cf-scripts/cf-scripts/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 703, in load_feedstock_containerized\n    data = run_container_operation(\n           ^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/micromamba/envs/cf-scripts/lib/python3.11/site-packages/conda_forge_feedstock_ops/container_utils.py\", line 232, in run_container_operation\n    raise ContainerRuntimeError(\nconda_forge_feedstock_ops.container_utils.ContainerRuntimeError: Error running 'conda-forge-tick-container parse-feedstock --existing-feedstock-node-attrs - --log-level info --mark-not-archived' in container - error RuntimeError raised:\n'conda build error: TypeError(\"CondaError.__init__() missing 1 required positional argument: 'message'\")\nTraceback (most recent call last):\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/metadata.py\", line 418, in yamlize\n    return yaml.load(data, Loader=StringifyNumbersLoader)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/yaml/__init__.py\", line 81, in load\n    return loader.get_single_data()\n           ^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/yaml/constructor.py\", line 49, in get_single_data\n    node = self.get_single_node()\n           ^^^^^^^^^^^^^^^^^^^^^^\n  File \"yaml/_yaml.pyx\", line 673, in yaml._yaml.CParser.get_single_node\n  File \"yaml/_yaml.pyx\", line 687, in yaml._yaml.CParser._compose_document\n  File \"yaml/_yaml.pyx\", line 731, in yaml._yaml.CParser._compose_node\n  File \"yaml/_yaml.pyx\", line 845, in yaml._yaml.CParser._compose_mapping_node\n  File \"yaml/_yaml.pyx\", line 731, in yaml._yaml.CParser._compose_node\n  File \"yaml/_yaml.pyx\", line 847, in yaml._yaml.CParser._compose_mapping_node\n  File \"yaml/_yaml.pyx\", line 860, in yaml._yaml.CParser._parse_next_event\nyaml.scanner.ScannerError: while scanning a simple key\n  in \"<unicode string>\", line 50, column 3\ncould not find expected ':'\n  in \"<unicode string>\", line 51, column 3\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/opt/autotick-bot/conda_forge_tick/utils.py\", line 1002, in parse_meta_yaml_local\n    return _run(use_orig_cbc_path=True)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/autotick-bot/conda_forge_tick/utils.py\", line 989, in _run\n    return _parse_meta_yaml_impl(\n           ^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/autotick-bot/conda_forge_tick/utils.py\", line 1090, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/metadata.py\", line 1250, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/metadata.py\", line 1338, in parse_again\n    self.meta = parse(\n                ^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/metadata.py\", line 581, in parse\n    res = yamlize(data)\n          ^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/metadata.py\", line 422, in yamlize\n    raise UnableToParse(original=e)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/exceptions.py\", line 22, in __init__\n    super().__init__(*args, **kwargs)\nTypeError: CondaError.__init__() missing 1 required positional argument: 'message'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/metadata.py\", line 418, in yamlize\n    return yaml.load(data, Loader=StringifyNumbersLoader)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/yaml/__init__.py\", line 81, in load\n    return loader.get_single_data()\n           ^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/yaml/constructor.py\", line 49, in get_single_data\n    node = self.get_single_node()\n           ^^^^^^^^^^^^^^^^^^^^^^\n  File \"yaml/_yaml.pyx\", line 673, in yaml._yaml.CParser.get_single_node\n  File \"yaml/_yaml.pyx\", line 687, in yaml._yaml.CParser._compose_document\n  File \"yaml/_yaml.pyx\", line 731, in yaml._yaml.CParser._compose_node\n  File \"yaml/_yaml.pyx\", line 845, in yaml._yaml.CParser._compose_mapping_node\n  File \"yaml/_yaml.pyx\", line 731, in yaml._yaml.CParser._compose_node\n  File \"yaml/_yaml.pyx\", line 847, in yaml._yaml.CParser._compose_mapping_node\n  File \"yaml/_yaml.pyx\", line 860, in yaml._yaml.CParser._parse_next_event\nyaml.scanner.ScannerError: while scanning a simple key\n  in \"<unicode string>\", line 50, column 3\ncould not find expected ':'\n  in \"<unicode string>\", line 51, column 3\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/opt/autotick-bot/conda_forge_tick/utils.py\", line 1006, in parse_meta_yaml_local\n    return _run(use_orig_cbc_path=False)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/autotick-bot/conda_forge_tick/utils.py\", line 989, in _run\n    return _parse_meta_yaml_impl(\n           ^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/autotick-bot/conda_forge_tick/utils.py\", line 1090, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/metadata.py\", line 1250, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/metadata.py\", line 1338, in parse_again\n    self.meta = parse(\n                ^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/metadata.py\", line 581, in parse\n    res = yamlize(data)\n          ^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/metadata.py\", line 422, in yamlize\n    raise UnableToParse(original=e)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/exceptions.py\", line 22, in __init__\n    super().__init__(*args, **kwargs)\nTypeError: CondaError.__init__() missing 1 required positional argument: 'message'\n'\n",
  "platforms": [
    "linux_64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/omnipkg.json"
  },
  "raw_meta_yaml": "{% set name = \"omnipkg\" %}\n{% set version = \"1.4.7\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.org/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: 832c9ac4aef1999225e0c48053c3882cb56c29b9c1919b78629852fb4bb3220b\n\nbuild:\n  number: 0\n  noarch: python\n  script: \"{{ PYTHON }} -m pip install . --no-deps --no-build-isolation -vv\"\n  entry_points:\n    - omnipkg = omnipkg.cli:main\n    - 8pkg = omnipkg.cli:main\n\nrequirements:\n  host:\n    - python {{ python_min }}\n    - pip\n    - setuptools >=61.0\n  run:\n    - python >={{ python_min }}\n    - packaging >=23.0\n    - requests >=2.20\n    - filelock >=3.9\n    - tomli\n    - tqdm\n    - safety >=3.0\n    - aiohttp\n    - uv\n\ntest:\n  imports:\n    - omnipkg\n  commands:\n    - omnipkg --version\n\nabout:\n  home: https://github.com/1minds3t/omnipkg\n  license: AGPL-3.0-only\n  license_family: AGPL\n  license_file: LICENSE\n  summary: 'The Ultimate Python Dependency Resolver. One environment. Infinite packages. Zero conflicts.'\n  description: |\n    Omnipkg is a next-generation Python dependency manager that solves the\n    classic problems of pip, conda, and Docker by enabling multiple package\n    versions and Python interpreters to coexist in a single environment.\n    Key features:\n      • Dynamic version switching: swap between NumPy, TensorFlow, or any package mid-script.  \n      • Multi-interpreter freedom: run Python 3.8, 3.11, and beyond in one process.  \n      • Auto-healing: automatically detect and fix broken dependencies at runtime.  \n      • Bubble isolation: install conflicting versions side by side without virtualenvs.  \n      • SQLite/Redis intelligence: instant lookups, conflict resolution, and rollback.  \n    Omnipkg is designed for researchers, quants, and engineers who demand\n    speed, reproducibility, and zero-friction workflows across complex\n    dependency stacks. It provides a robust alternative to pipx, uv, poetry,\n    and Docker, all in one tool. Optional: omnipkg can use Redis (v5.0+) for improved speed.\n  doc_url: https://github.com/1minds3t/omnipkg/tree/main/docs\n  dev_url: https://github.com/1minds3t\n\nextra:\n  recipe-maintainers:\n    - 1minds3t\n",
  "req": {
    "__set__": true,
    "elements": [
      "aiohttp",
      "filelock",
      "packaging",
      "pip",
      "python",
      "requests",
      "safety",
      "setuptools",
      "tomli",
      "tqdm",
      "uv"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": []
    },
    "host": {
      "__set__": true,
      "elements": [
        "pip",
        "python",
        "setuptools"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "aiohttp",
        "filelock",
        "packaging",
        "python",
        "requests",
        "safety",
        "tomli",
        "tqdm",
        "uv"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": []
    },
    "host": {
      "__set__": true,
      "elements": [
        "pip",
        "python 3.10",
        "setuptools >=61.0"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "aiohttp",
        "filelock >=3.9",
        "packaging >=23.0",
        "python >=3.10",
        "requests >=2.20",
        "safety >=3.0",
        "tomli",
        "tqdm",
        "uv"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "url": "https://pypi.org/packages/source/o/omnipkg/omnipkg-1.4.7.tar.gz",
  "version": "1.4.7",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/omnipkg.json"
  }
}