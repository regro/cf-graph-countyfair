{
  "archived": false,
  "branch": "main",
  "conda-forge.yml": {
    "bot": {
      "automerge": true
    },
    "conda_build": {
      "pkg_format": "2"
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    }
  },
  "feedstock_name": "r-treesim",
  "hash_type": "sha256",
  "linux_64_meta_yaml": {
    "about": {
      "home": "https://CRAN.R-project.org/package=TreeSim",
      "license": "GPL-2",
      "license_family": "GPL2",
      "license_file": "/lib/R/share/licenses/GPL-2",
      "summary": "Simulation methods for phylogenetic trees where (i) all tips are sampled at one time point or (ii) tips are sampled sequentially through time. (i) For sampling at one time point, simulations are performed under a constant rate birth-death process, conditioned on having a fixed number of final tips (sim.bd.taxa()), or a fixed age (sim.bd.age()), or a fixed age and number of tips (sim.bd.taxa.age()). When conditioning on the number of final tips, the method allows for shifts in rates and mass extinction events during the birth-death process (sim.rateshift.taxa()). The function sim.bd.age() (and sim.rateshift.taxa() without extinction) allow the speciation rate to change in a density-dependent way. The LTT plots of the simulations can be displayed using LTT.plot(), LTT.plot.gen() and LTT.average.root(). TreeSim further samples trees with n final tips from a set of trees generated by the common sampling algorithm stopping when a fixed number m>>n of tips is first reached (sim.gsa.taxa()). This latter method is appropriate for m-tip trees generated under a big class of models (details in the sim.gsa.taxa() man page). For incomplete phylogeny, the missing speciation events can be added through simulations (corsim()). (ii) sim.rateshifts.taxa() is generalized to sim.bdsky.stt() for serially sampled trees, where the trees are conditioned on either the number of sampled tips or the age. Furthermore, for a multitype-branching process with sequential sampling, trees on a fixed number of tips can be simulated using sim.bdtypes.stt.taxa(). This function further allows to simulate under epidemiological models with an exposed class. The function sim.genespeciestree() simulates coalescent gene trees within birth-death species trees, and sim.genetree() simulates coalescent gene trees."
    },
    "build": {
      "noarch": "generic",
      "number": "5",
      "rpaths": [
        "lib/R/lib/",
        "lib/"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "conda-forge/r",
        "jenzopr"
      ]
    },
    "package": {
      "name": "r-treesim",
      "version": "2.4"
    },
    "requirements": {
      "build": [],
      "host": [
        "r-base",
        "r-ape",
        "r-geiger"
      ],
      "run": [
        "r-base",
        "r-ape",
        "r-geiger"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "236d1971f8010577a15714c68f4b8deeda276014ff8792322d2ed8218ee8bf5a",
      "url": [
        "https://cran.r-project.org/src/contrib/TreeSim_2.4.tar.gz",
        "https://cran.r-project.org/src/contrib/Archive/TreeSim/TreeSim_2.4.tar.gz"
      ]
    },
    "test": {
      "commands": [
        "$R -e \"library('TreeSim')\""
      ]
    }
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": []
    },
    "host": {
      "__set__": true,
      "elements": [
        "r-ape",
        "r-base",
        "r-geiger"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "r-ape",
        "r-base",
        "r-geiger"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "meta_yaml": {
    "about": {
      "home": "https://CRAN.R-project.org/package=TreeSim",
      "license": "GPL-2",
      "license_family": "GPL2",
      "license_file": "/lib/R/share/licenses/GPL-2",
      "summary": "Simulation methods for phylogenetic trees where (i) all tips are sampled at one time point or (ii) tips are sampled sequentially through time. (i) For sampling at one time point, simulations are performed under a constant rate birth-death process, conditioned on having a fixed number of final tips (sim.bd.taxa()), or a fixed age (sim.bd.age()), or a fixed age and number of tips (sim.bd.taxa.age()). When conditioning on the number of final tips, the method allows for shifts in rates and mass extinction events during the birth-death process (sim.rateshift.taxa()). The function sim.bd.age() (and sim.rateshift.taxa() without extinction) allow the speciation rate to change in a density-dependent way. The LTT plots of the simulations can be displayed using LTT.plot(), LTT.plot.gen() and LTT.average.root(). TreeSim further samples trees with n final tips from a set of trees generated by the common sampling algorithm stopping when a fixed number m>>n of tips is first reached (sim.gsa.taxa()). This latter method is appropriate for m-tip trees generated under a big class of models (details in the sim.gsa.taxa() man page). For incomplete phylogeny, the missing speciation events can be added through simulations (corsim()). (ii) sim.rateshifts.taxa() is generalized to sim.bdsky.stt() for serially sampled trees, where the trees are conditioned on either the number of sampled tips or the age. Furthermore, for a multitype-branching process with sequential sampling, trees on a fixed number of tips can be simulated using sim.bdtypes.stt.taxa(). This function further allows to simulate under epidemiological models with an exposed class. The function sim.genespeciestree() simulates coalescent gene trees within birth-death species trees, and sim.genetree() simulates coalescent gene trees."
    },
    "build": {
      "noarch": "generic",
      "number": "5",
      "rpaths": [
        "lib/R/lib/",
        "lib/"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "conda-forge/r",
        "jenzopr"
      ]
    },
    "package": {
      "name": "r-treesim",
      "version": "2.4"
    },
    "requirements": {
      "build": [],
      "host": [
        "r-base",
        "r-ape",
        "r-geiger"
      ],
      "run": [
        "r-base",
        "r-ape",
        "r-geiger"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "236d1971f8010577a15714c68f4b8deeda276014ff8792322d2ed8218ee8bf5a",
      "url": [
        "https://cran.r-project.org/src/contrib/TreeSim_2.4.tar.gz",
        "https://cran.r-project.org/src/contrib/Archive/TreeSim/TreeSim_2.4.tar.gz"
      ]
    },
    "test": {
      "commands": [
        "$R -e \"library('TreeSim')\""
      ]
    }
  },
  "name": "r-treesim",
  "outputs_names": {
    "__set__": true,
    "elements": [
      "r-treesim"
    ]
  },
  "parsing_error": false,
  "platforms": [
    "linux_64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/r-treesim.json"
  },
  "raw_meta_yaml": "{% set version = '2.4' %}\n{% set posix = 'm2-' if win else '' %}\n\npackage:\n  name: r-treesim\n  version: {{ version|replace(\"-\", \"_\") }}\n\nsource:\n  url:\n    - {{ cran_mirror }}/src/contrib/TreeSim_{{ version }}.tar.gz\n    - {{ cran_mirror }}/src/contrib/Archive/TreeSim/TreeSim_{{ version }}.tar.gz\n  sha256: 236d1971f8010577a15714c68f4b8deeda276014ff8792322d2ed8218ee8bf5a\n\nbuild:\n  number: 5\n  noarch: generic\n  rpaths:\n    - lib/R/lib/\n    - lib/\n\nrequirements:\n  build:\n    - {{ posix }}zip               # [win]\n  host:\n    - r-base\n    - r-ape\n    - r-geiger\n  run:\n    - r-base\n    - r-ape\n    - r-geiger\n\ntest:\n  commands:\n    - $R -e \"library('TreeSim')\"           # [not win]\n    - \"\\\"%R%\\\" -e \\\"library('TreeSim')\\\"\"  # [win]\n\nabout:\n  home: https://CRAN.R-project.org/package=TreeSim\n  license: GPL-2\n  summary: Simulation methods for phylogenetic trees where (i) all tips are sampled at one time\n    point or (ii) tips are sampled sequentially through time. (i) For sampling at one\n    time point, simulations are performed under a constant rate birth-death process,\n    conditioned on having a fixed number of final tips (sim.bd.taxa()), or a fixed age\n    (sim.bd.age()), or a fixed age and number of tips (sim.bd.taxa.age()). When conditioning\n    on the number of final tips, the method allows for shifts in rates and mass extinction\n    events during the birth-death process (sim.rateshift.taxa()). The function sim.bd.age()\n    (and sim.rateshift.taxa() without extinction) allow the speciation rate to change\n    in a density-dependent way. The LTT plots of the simulations can be displayed using\n    LTT.plot(), LTT.plot.gen() and LTT.average.root(). TreeSim further samples trees\n    with n final tips from a set of trees generated by the common sampling algorithm\n    stopping when a fixed number m>>n of tips is first reached (sim.gsa.taxa()). This\n    latter method is appropriate for m-tip trees generated under a big class of models\n    (details in the sim.gsa.taxa() man page). For incomplete phylogeny, the missing\n    speciation events can be added through simulations (corsim()). (ii) sim.rateshifts.taxa()\n    is generalized to sim.bdsky.stt() for serially sampled trees, where the trees are\n    conditioned on either the number of sampled tips or the age. Furthermore, for a\n    multitype-branching process with sequential sampling, trees on a fixed number of\n    tips can be simulated using sim.bdtypes.stt.taxa(). This function further allows\n    to simulate under epidemiological models with an exposed class. The function sim.genespeciestree()\n    simulates coalescent gene trees within birth-death species trees, and sim.genetree()\n    simulates coalescent gene trees.\n  license_family: GPL2\n  license_file: '{{ environ[\"PREFIX\"] }}/lib/R/share/licenses/GPL-2'\n\nextra:\n  recipe-maintainers:\n    - conda-forge/r\n    - jenzopr\n\n# Package: TreeSim\n# Type: Package\n# Title: Simulating Phylogenetic Trees\n# Version: 2.4\n# Date: 2019-03-08\n# Author: Tanja Stadler\n# Maintainer: Tanja Stadler <tanja.stadler@bsse.ethz.ch>\n# Depends: ape, geiger\n# Description: Simulation methods for phylogenetic trees where (i) all tips are sampled at one time point or (ii) tips are sampled sequentially through time. (i) For sampling at one time point, simulations are performed under a constant rate birth-death process, conditioned on having a fixed number of final tips (sim.bd.taxa()), or a fixed age (sim.bd.age()), or a fixed age and number of tips (sim.bd.taxa.age()). When conditioning on the number of final tips, the method allows for shifts in rates and mass extinction events during the birth-death process (sim.rateshift.taxa()). The function sim.bd.age() (and sim.rateshift.taxa() without extinction) allow the speciation rate to change in a density-dependent way. The LTT plots of the simulations can be displayed using LTT.plot(), LTT.plot.gen() and LTT.average.root(). TreeSim further samples trees with n final tips from a set of trees generated by the common sampling algorithm stopping when a fixed number m>>n of tips is first reached (sim.gsa.taxa()). This latter method is appropriate for m-tip trees generated under a big class of models (details in the sim.gsa.taxa() man page). For incomplete phylogeny, the missing speciation events can be added through simulations (corsim()). (ii) sim.rateshifts.taxa() is generalized to sim.bdsky.stt() for serially sampled trees, where the trees are conditioned on either the number of sampled tips or the age. Furthermore, for a multitype-branching process with sequential sampling, trees on a fixed number of tips can be simulated using sim.bdtypes.stt.taxa(). This function further allows to simulate under epidemiological models with an exposed class. The function sim.genespeciestree() simulates coalescent gene trees within birth-death species trees, and sim.genetree() simulates coalescent gene trees.\n# License: GPL-2\n# LazyLoad: yes\n# NeedsCompilation: no\n# Packaged: 2019-04-08 11:16:27 UTC; tstadler\n# Repository: CRAN\n# Date/Publication: 2019-04-08 16:52:56 UTC\n",
  "req": {
    "__set__": true,
    "elements": [
      "r-ape",
      "r-base",
      "r-geiger"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": []
    },
    "host": {
      "__set__": true,
      "elements": [
        "r-ape",
        "r-base",
        "r-geiger"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "r-ape",
        "r-base",
        "r-geiger"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": []
    },
    "host": {
      "__set__": true,
      "elements": [
        "r-ape",
        "r-base",
        "r-geiger"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "r-ape",
        "r-base",
        "r-geiger"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "url": [
    "https://cran.r-project.org/src/contrib/TreeSim_2.4.tar.gz",
    "https://cran.r-project.org/src/contrib/Archive/TreeSim/TreeSim_2.4.tar.gz"
  ],
  "version": "2.4",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/r-treesim.json"
  }
}