{
  "archived": false,
  "branch": "main",
  "conda-forge.yml": {
    "conda_build": {
      "pkg_format": "2"
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    },
    "provider": {
      "win": "azure"
    }
  },
  "feedstock_name": "polyfempy",
  "hash_type": "sha256",
  "linux_64_meta_yaml": {
    "about": {
      "description": "PolyFEM is a simple C++ and Python finite element library. We provide a wide set of common PDEs including:<br/>\n- Laplace\n- Helmholtz\n- Linear Elasticity\n- Saint-Venant Elasticity\n- Neo-Hookean Elasticity\n- Stokes<br/>\n\nPolyFEM simplicity lies on the interface: just pick a problem, select some boundary condition, and solve.\nNo need to construct complicated function spaces, or learn a new scripting language: everything is set-up trough a the Setting python class.\nFor instance, PolyFEM seamlessly integrates quad/hexes and tri/tets of order up to 4, and integrate state-of-the-art techniques such as the adaptive p-refinement.\nThe library is actively used in our research so expect frequent updates, fixes, and new features!\n",
      "dev_url": "https://github.com/polyfem/polyfem-python",
      "doc_url": "https://polyfem.github.io/",
      "home": "https://polyfem.github.io/",
      "license": "MIT",
      "license_family": "MIT",
      "license_file": "LICENSE.txt",
      "summary": "Easy-to-use powerfull finite element library based on Polyfem"
    },
    "build": {
      "number": "9",
      "script": [
        "PYTHON -m pip install . --no-deps -vv"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "teseoch"
      ]
    },
    "package": {
      "name": "polyfempy",
      "version": "0.5.2"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "cxx_compiler_stub",
        "cmake",
        "make"
      ],
      "host": [
        "python",
        "pip",
        "libblas",
        "libcblas",
        "numpy",
        "suitesparse"
      ],
      "run": [
        "python",
        "numpy",
        "suitesparse"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "c3a1c953736ad75afe901d66293607b98ddf3f538994bd4e0a9422bb2e3be1bd",
      "url": "https://github.com/polyfem/polyfem-python/archive/0.5.2.tar.gz"
    },
    "test": {
      "imports": [
        "polyfempy"
      ]
    }
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "cmake",
        "cxx_compiler_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "libblas",
        "libcblas",
        "numpy",
        "pip",
        "python",
        "suitesparse"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "numpy",
        "python",
        "suitesparse"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "meta_yaml": {
    "about": {
      "description": "PolyFEM is a simple C++ and Python finite element library. We provide a wide set of common PDEs including:<br/>\n- Laplace\n- Helmholtz\n- Linear Elasticity\n- Saint-Venant Elasticity\n- Neo-Hookean Elasticity\n- Stokes<br/>\n\nPolyFEM simplicity lies on the interface: just pick a problem, select some boundary condition, and solve.\nNo need to construct complicated function spaces, or learn a new scripting language: everything is set-up trough a the Setting python class.\nFor instance, PolyFEM seamlessly integrates quad/hexes and tri/tets of order up to 4, and integrate state-of-the-art techniques such as the adaptive p-refinement.\nThe library is actively used in our research so expect frequent updates, fixes, and new features!\n",
      "dev_url": "https://github.com/polyfem/polyfem-python",
      "doc_url": "https://polyfem.github.io/",
      "home": "https://polyfem.github.io/",
      "license": "MIT",
      "license_family": "MIT",
      "license_file": "LICENSE.txt",
      "summary": "Easy-to-use powerfull finite element library based on Polyfem"
    },
    "build": {
      "number": "9",
      "script": [
        "PYTHON -m pip install . --no-deps -vv"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "teseoch"
      ]
    },
    "package": {
      "name": "polyfempy",
      "version": "0.5.2"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "cxx_compiler_stub",
        "cmake",
        "make"
      ],
      "host": [
        "python",
        "pip",
        "libblas",
        "libcblas",
        "numpy",
        "suitesparse"
      ],
      "run": [
        "python",
        "numpy",
        "suitesparse"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "c3a1c953736ad75afe901d66293607b98ddf3f538994bd4e0a9422bb2e3be1bd",
      "url": "https://github.com/polyfem/polyfem-python/archive/0.5.2.tar.gz"
    },
    "test": {
      "imports": [
        "polyfempy"
      ]
    }
  },
  "name": "polyfempy",
  "osx_64_meta_yaml": {
    "about": {
      "description": "PolyFEM is a simple C++ and Python finite element library. We provide a wide set of common PDEs including:<br/>\n- Laplace\n- Helmholtz\n- Linear Elasticity\n- Saint-Venant Elasticity\n- Neo-Hookean Elasticity\n- Stokes<br/>\n\nPolyFEM simplicity lies on the interface: just pick a problem, select some boundary condition, and solve.\nNo need to construct complicated function spaces, or learn a new scripting language: everything is set-up trough a the Setting python class.\nFor instance, PolyFEM seamlessly integrates quad/hexes and tri/tets of order up to 4, and integrate state-of-the-art techniques such as the adaptive p-refinement.\nThe library is actively used in our research so expect frequent updates, fixes, and new features!\n",
      "dev_url": "https://github.com/polyfem/polyfem-python",
      "doc_url": "https://polyfem.github.io/",
      "home": "https://polyfem.github.io/",
      "license": "MIT",
      "license_family": "MIT",
      "license_file": "LICENSE.txt",
      "summary": "Easy-to-use powerfull finite element library based on Polyfem"
    },
    "build": {
      "number": "9",
      "script": [
        "PYTHON -m pip install . --no-deps -vv"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "teseoch"
      ]
    },
    "package": {
      "name": "polyfempy",
      "version": "0.5.2"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "cxx_compiler_stub",
        "cmake",
        "make"
      ],
      "host": [
        "python",
        "pip",
        "libblas",
        "libcblas",
        "numpy",
        "suitesparse"
      ],
      "run": [
        "python",
        "numpy",
        "suitesparse"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "c3a1c953736ad75afe901d66293607b98ddf3f538994bd4e0a9422bb2e3be1bd",
      "url": "https://github.com/polyfem/polyfem-python/archive/0.5.2.tar.gz"
    },
    "test": {
      "imports": [
        "polyfempy"
      ]
    }
  },
  "osx_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "cmake",
        "cxx_compiler_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "libblas",
        "libcblas",
        "numpy",
        "pip",
        "python",
        "suitesparse"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "numpy",
        "python",
        "suitesparse"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "outputs_names": {
    "__set__": true,
    "elements": [
      "polyfempy"
    ]
  },
  "parsing_error": false,
  "platforms": [
    "linux_64",
    "osx_64",
    "win_64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/polyfempy.json"
  },
  "raw_meta_yaml": "{% set name = \"polyfempy\" %}\n{% set version = \"0.5.2\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\n\nsource:\n  url: https://github.com/polyfem/polyfem-python/archive/{{ version }}.tar.gz\n  sha256: c3a1c953736ad75afe901d66293607b98ddf3f538994bd4e0a9422bb2e3be1bd\n\n\nbuild:\n  number: 9\n  skip: True  # [py<31]\n  script:\n    - {{ PYTHON }} -m pip install . --no-deps -vv\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n    - cmake\n    - make\n  host:\n    - python\n    - pip\n    - libblas\n    - libcblas\n    - numpy\n    - suitesparse  # [not ppc64le and not aarch64 and not win]\n  run:\n    - python\n    - {{ pin_compatible('numpy') }}\n    - suitesparse  # [not ppc64le and not aarch64 and not win]\n\ntest:\n  imports:\n    - polyfempy\n\nabout:\n  home: https://polyfem.github.io/\n\n  license: MIT\n  license_family: MIT\n  license_file: LICENSE.txt\n\n  summary: 'Easy-to-use powerfull finite element library based on Polyfem'\n\n  description: |\n    PolyFEM is a simple C++ and Python finite element library. We provide a wide set of common PDEs including:<br/>\n    - Laplace\n    - Helmholtz\n    - Linear Elasticity\n    - Saint-Venant Elasticity\n    - Neo-Hookean Elasticity\n    - Stokes<br/>\n\n    PolyFEM simplicity lies on the interface: just pick a problem, select some boundary condition, and solve.\n    No need to construct complicated function spaces, or learn a new scripting language: everything is set-up trough a the Setting python class.\n    For instance, PolyFEM seamlessly integrates quad/hexes and tri/tets of order up to 4, and integrate state-of-the-art techniques such as the adaptive p-refinement.\n    The library is actively used in our research so expect frequent updates, fixes, and new features!\n  doc_url: https://polyfem.github.io/\n  dev_url: https://github.com/polyfem/polyfem-python\n\nextra:\n  recipe-maintainers:\n    - teseoch\n",
  "req": {
    "__set__": true,
    "elements": [
      "c_compiler_stub",
      "cmake",
      "cxx_compiler_stub",
      "libblas",
      "libcblas",
      "make",
      "numpy",
      "pip",
      "python",
      "suitesparse"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "cmake",
        "cxx_compiler_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "cxx_compiler_stub",
        "libblas",
        "libcblas",
        "numpy",
        "pip",
        "python",
        "suitesparse"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "cxx_compiler_stub",
        "numpy",
        "python",
        "suitesparse"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "cmake",
        "cxx_compiler_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "libblas",
        "libcblas",
        "numpy",
        "pip",
        "python",
        "suitesparse"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "numpy",
        "python",
        "suitesparse"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "url": "https://github.com/polyfem/polyfem-python/archive/0.5.2.tar.gz",
  "version": "0.5.2",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/polyfempy.json"
  },
  "win_64_meta_yaml": {
    "about": {
      "description": "PolyFEM is a simple C++ and Python finite element library. We provide a wide set of common PDEs including:<br/>\n- Laplace\n- Helmholtz\n- Linear Elasticity\n- Saint-Venant Elasticity\n- Neo-Hookean Elasticity\n- Stokes<br/>\n\nPolyFEM simplicity lies on the interface: just pick a problem, select some boundary condition, and solve.\nNo need to construct complicated function spaces, or learn a new scripting language: everything is set-up trough a the Setting python class.\nFor instance, PolyFEM seamlessly integrates quad/hexes and tri/tets of order up to 4, and integrate state-of-the-art techniques such as the adaptive p-refinement.\nThe library is actively used in our research so expect frequent updates, fixes, and new features!\n",
      "dev_url": "https://github.com/polyfem/polyfem-python",
      "doc_url": "https://polyfem.github.io/",
      "home": "https://polyfem.github.io/",
      "license": "MIT",
      "license_family": "MIT",
      "license_file": "LICENSE.txt",
      "summary": "Easy-to-use powerfull finite element library based on Polyfem"
    },
    "build": {
      "number": "9",
      "script": [
        "PYTHON -m pip install . --no-deps -vv"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "teseoch"
      ]
    },
    "package": {
      "name": "polyfempy",
      "version": "0.5.2"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "cxx_compiler_stub",
        "cmake",
        "make"
      ],
      "host": [
        "python",
        "pip",
        "libblas",
        "libcblas",
        "numpy"
      ],
      "run": [
        "python",
        "numpy"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "c3a1c953736ad75afe901d66293607b98ddf3f538994bd4e0a9422bb2e3be1bd",
      "url": "https://github.com/polyfem/polyfem-python/archive/0.5.2.tar.gz"
    },
    "test": {
      "imports": [
        "polyfempy"
      ]
    }
  },
  "win_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "cmake",
        "cxx_compiler_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "libblas",
        "libcblas",
        "numpy",
        "pip",
        "python"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "numpy",
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  }
}