{
  "archived": true,
  "branch": "main",
  "conda-forge.yml": {
    "provider": {
      "linux_aarch64": "azure",
      "linux_ppc64le": "azure"
    }
  },
  "feedstock_name": "cub",
  "hash_type": "sha256",
  "linux_64_meta_yaml": {
    "about": {
      "description": "CUB provides state-of-the-art, reusable software components for every layer of the CUDA\nprogramming model:\n- Parallel primitives\n  - Warp-wide \"collective\" primitives\n    - Cooperative warp-wide prefix scan, reduction, etc.\n    - Safely specialized for each underlying CUDA architecture\n  - Block-wide \"collective\" primitives\n    - Cooperative I/O, sort, scan, reduction, histogram, etc.\n    - Compatible with arbitrary thread block sizes and types\n  - Device-wide primitives\n    - Parallel sort, prefix scan, reduction, histogram, etc.\n    - Compatible with CUDA dynamic parallelism\n- Utilities\n  - Fancy iterators\n  - Thread and thread block I/O\n  - PTX intrinsics\n  - Device, kernel, and storage management\n",
      "dev_url": "https://github.com/thrust/cub",
      "doc_url": "http://nvlabs.github.io/cub/",
      "home": "https://github.com/NVIDIA/cub",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE.TXT",
      "summary": "CUB is a flexible library of cooperative threadblock primitives and other utilities for CUDA\nkernel programming.\n"
    },
    "build": {
      "ignore_run_exports_from": [
        "cuda_compiler_stub"
      ],
      "number": "2"
    },
    "extra": {
      "recipe-maintainers": [
        "rongou",
        "kkraus14",
        "leofang"
      ]
    },
    "package": {
      "name": "cub",
      "version": "1.16.0"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "cxx_compiler_stub",
        "cuda_compiler_stub",
        "cmake >=3.15",
        "make"
      ],
      "run_constrained": [
        "thrust 1.16.0.*",
        "cuda-cccl <0.0.0a0",
        "cuda-cccl-impl <0.0.0a0",
        "cuda-cccl_linux-64 <0.0.0a0"
      ]
    },
    "source": {
      "sha256": "271dc42d0a7ab3bd311eefa4ba8fd19f99ec093cf5e9053426f358914c8983d6",
      "url": "https://github.com/NVIDIA/cub/archive/1.16.0.tar.gz"
    },
    "test": {
      "commands": [
        "test -e \"$PREFIX\"/include/cub/cub.cuh",
        "test -e \"$PREFIX\"/lib/cmake/cub/cub-config.cmake"
      ]
    }
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "cmake",
        "cuda_compiler_stub",
        "cxx_compiler_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": []
    },
    "run": {
      "__set__": true,
      "elements": []
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "linux_aarch64_meta_yaml": {
    "about": {
      "description": "CUB provides state-of-the-art, reusable software components for every layer of the CUDA\nprogramming model:\n- Parallel primitives\n  - Warp-wide \"collective\" primitives\n    - Cooperative warp-wide prefix scan, reduction, etc.\n    - Safely specialized for each underlying CUDA architecture\n  - Block-wide \"collective\" primitives\n    - Cooperative I/O, sort, scan, reduction, histogram, etc.\n    - Compatible with arbitrary thread block sizes and types\n  - Device-wide primitives\n    - Parallel sort, prefix scan, reduction, histogram, etc.\n    - Compatible with CUDA dynamic parallelism\n- Utilities\n  - Fancy iterators\n  - Thread and thread block I/O\n  - PTX intrinsics\n  - Device, kernel, and storage management\n",
      "dev_url": "https://github.com/thrust/cub",
      "doc_url": "http://nvlabs.github.io/cub/",
      "home": "https://github.com/NVIDIA/cub",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE.TXT",
      "summary": "CUB is a flexible library of cooperative threadblock primitives and other utilities for CUDA\nkernel programming.\n"
    },
    "build": {
      "ignore_run_exports_from": [
        "cuda_compiler_stub"
      ],
      "number": "2"
    },
    "extra": {
      "recipe-maintainers": [
        "rongou",
        "kkraus14",
        "leofang"
      ]
    },
    "package": {
      "name": "cub",
      "version": "1.16.0"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "cxx_compiler_stub",
        "cuda_compiler_stub",
        "cmake >=3.15",
        "make"
      ],
      "run_constrained": [
        "thrust 1.16.0.*",
        "cuda-cccl <0.0.0a0",
        "cuda-cccl-impl <0.0.0a0",
        "cuda-cccl_linux-aarch64 <0.0.0a0"
      ]
    },
    "source": {
      "sha256": "271dc42d0a7ab3bd311eefa4ba8fd19f99ec093cf5e9053426f358914c8983d6",
      "url": "https://github.com/NVIDIA/cub/archive/1.16.0.tar.gz"
    },
    "test": {
      "commands": [
        "test -e \"$PREFIX\"/include/cub/cub.cuh",
        "test -e \"$PREFIX\"/lib/cmake/cub/cub-config.cmake"
      ]
    }
  },
  "linux_aarch64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "cmake",
        "cuda_compiler_stub",
        "cxx_compiler_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": []
    },
    "run": {
      "__set__": true,
      "elements": []
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "linux_ppc64le_meta_yaml": {
    "about": {
      "description": "CUB provides state-of-the-art, reusable software components for every layer of the CUDA\nprogramming model:\n- Parallel primitives\n  - Warp-wide \"collective\" primitives\n    - Cooperative warp-wide prefix scan, reduction, etc.\n    - Safely specialized for each underlying CUDA architecture\n  - Block-wide \"collective\" primitives\n    - Cooperative I/O, sort, scan, reduction, histogram, etc.\n    - Compatible with arbitrary thread block sizes and types\n  - Device-wide primitives\n    - Parallel sort, prefix scan, reduction, histogram, etc.\n    - Compatible with CUDA dynamic parallelism\n- Utilities\n  - Fancy iterators\n  - Thread and thread block I/O\n  - PTX intrinsics\n  - Device, kernel, and storage management\n",
      "dev_url": "https://github.com/thrust/cub",
      "doc_url": "http://nvlabs.github.io/cub/",
      "home": "https://github.com/NVIDIA/cub",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE.TXT",
      "summary": "CUB is a flexible library of cooperative threadblock primitives and other utilities for CUDA\nkernel programming.\n"
    },
    "build": {
      "ignore_run_exports_from": [
        "cuda_compiler_stub"
      ],
      "number": "2"
    },
    "extra": {
      "recipe-maintainers": [
        "rongou",
        "kkraus14",
        "leofang"
      ]
    },
    "package": {
      "name": "cub",
      "version": "1.16.0"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "cxx_compiler_stub",
        "cuda_compiler_stub",
        "cmake >=3.15",
        "make"
      ],
      "run_constrained": [
        "thrust 1.16.0.*",
        "cuda-cccl <0.0.0a0",
        "cuda-cccl-impl <0.0.0a0",
        "cuda-cccl_linux-ppc64le <0.0.0a0"
      ]
    },
    "source": {
      "sha256": "271dc42d0a7ab3bd311eefa4ba8fd19f99ec093cf5e9053426f358914c8983d6",
      "url": "https://github.com/NVIDIA/cub/archive/1.16.0.tar.gz"
    },
    "test": {
      "commands": [
        "test -e \"$PREFIX\"/include/cub/cub.cuh",
        "test -e \"$PREFIX\"/lib/cmake/cub/cub-config.cmake"
      ]
    }
  },
  "linux_ppc64le_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "cmake",
        "cuda_compiler_stub",
        "cxx_compiler_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": []
    },
    "run": {
      "__set__": true,
      "elements": []
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "meta_yaml": {
    "about": {
      "description": "CUB provides state-of-the-art, reusable software components for every layer of the CUDA\nprogramming model:\n- Parallel primitives\n  - Warp-wide \"collective\" primitives\n    - Cooperative warp-wide prefix scan, reduction, etc.\n    - Safely specialized for each underlying CUDA architecture\n  - Block-wide \"collective\" primitives\n    - Cooperative I/O, sort, scan, reduction, histogram, etc.\n    - Compatible with arbitrary thread block sizes and types\n  - Device-wide primitives\n    - Parallel sort, prefix scan, reduction, histogram, etc.\n    - Compatible with CUDA dynamic parallelism\n- Utilities\n  - Fancy iterators\n  - Thread and thread block I/O\n  - PTX intrinsics\n  - Device, kernel, and storage management\n",
      "dev_url": "https://github.com/thrust/cub",
      "doc_url": "http://nvlabs.github.io/cub/",
      "home": "https://github.com/NVIDIA/cub",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE.TXT",
      "summary": "CUB is a flexible library of cooperative threadblock primitives and other utilities for CUDA\nkernel programming.\n"
    },
    "build": {
      "ignore_run_exports_from": [
        "cuda_compiler_stub",
        "cuda_compiler_stub",
        "cuda_compiler_stub",
        "cuda_compiler_stub"
      ],
      "number": "2"
    },
    "extra": {
      "recipe-maintainers": [
        "rongou",
        "kkraus14",
        "leofang",
        "rongou",
        "kkraus14",
        "leofang",
        "rongou",
        "kkraus14",
        "leofang",
        "rongou",
        "kkraus14",
        "leofang"
      ]
    },
    "package": {
      "name": "cub",
      "version": "1.16.0"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "cxx_compiler_stub",
        "cuda_compiler_stub",
        "cmake >=3.15",
        "make",
        "c_compiler_stub",
        "cxx_compiler_stub",
        "cuda_compiler_stub",
        "cmake >=3.15",
        "make",
        "c_compiler_stub",
        "cxx_compiler_stub",
        "cuda_compiler_stub",
        "cmake >=3.15",
        "make",
        "c_compiler_stub",
        "cxx_compiler_stub",
        "cuda_compiler_stub",
        "cmake >=3.15",
        "make"
      ],
      "run_constrained": [
        "thrust 1.16.0.*",
        "cuda-cccl <0.0.0a0",
        "cuda-cccl-impl <0.0.0a0",
        "cuda-cccl_linux-64 <0.0.0a0",
        "thrust 1.16.0.*",
        "cuda-cccl <0.0.0a0",
        "cuda-cccl-impl <0.0.0a0",
        "cuda-cccl_linux-aarch64 <0.0.0a0",
        "thrust 1.16.0.*",
        "cuda-cccl <0.0.0a0",
        "cuda-cccl-impl <0.0.0a0",
        "cuda-cccl_linux-ppc64le <0.0.0a0",
        "thrust 1.16.0.*",
        "cuda-cccl <0.0.0a0",
        "cuda-cccl-impl <0.0.0a0",
        "cuda-cccl_win-64 <0.0.0a0"
      ]
    },
    "source": {
      "sha256": "271dc42d0a7ab3bd311eefa4ba8fd19f99ec093cf5e9053426f358914c8983d6",
      "url": "https://github.com/NVIDIA/cub/archive/1.16.0.tar.gz"
    },
    "test": {
      "commands": [
        "test -e \"$PREFIX\"/include/cub/cub.cuh",
        "test -e \"$PREFIX\"/lib/cmake/cub/cub-config.cmake",
        "test -e \"$PREFIX\"/include/cub/cub.cuh",
        "test -e \"$PREFIX\"/lib/cmake/cub/cub-config.cmake",
        "test -e \"$PREFIX\"/include/cub/cub.cuh",
        "test -e \"$PREFIX\"/lib/cmake/cub/cub-config.cmake",
        "if not exist \"%LIBRARY_INC%\"\\cub\\cub.cuh exit 1",
        "if not exist \"%LIBRARY_LIB%\"\\cmake\\cub\\cub-config.cmake exit 1"
      ]
    }
  },
  "name": "cub",
  "outputs_names": {
    "__set__": true,
    "elements": [
      "cub"
    ]
  },
  "parsing_error": false,
  "pr_info": {
    "__lazy_json__": "pr_info/cub.json"
  },
  "raw_meta_yaml": "{% set version = \"1.16.0\" %}\n{% set sha256 = \"271dc42d0a7ab3bd311eefa4ba8fd19f99ec093cf5e9053426f358914c8983d6\" %}\n\npackage:\n  name: cub\n  version: {{ version }}\n\nsource:\n  url: https://github.com/NVIDIA/cub/archive/{{ version }}.tar.gz\n  sha256: {{ sha256 }}\n\nbuild:\n  number: 2\n  skip: true  # [(cuda_compiler_version != \"11.2\")]\n  ignore_run_exports_from:\n    - {{ compiler('cuda') }}\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n    - {{ compiler('cuda') }}\n    - cmake >=3.15\n    - make\n  run_constrained:\n    - thrust {{ version }}.*\n    - cuda-cccl <0.0.0a0\n    - cuda-cccl-impl <0.0.0a0\n    - cuda-cccl_{{ target_platform }} <0.0.0a0\n\ntest:\n  commands:\n    - test -e \"$PREFIX\"/include/cub/cub.cuh  # [not win]\n    - test -e \"$PREFIX\"/lib/cmake/cub/cub-config.cmake  # [not win]\n    - if not exist \"%LIBRARY_INC%\"\\cub\\cub.cuh exit 1  # [win]\n    - if not exist \"%LIBRARY_LIB%\"\\cmake\\cub\\cub-config.cmake exit 1  # [win]\n\nabout:\n  home: https://github.com/NVIDIA/cub\n  license: BSD-3-Clause\n  license_family: BSD\n  license_file: LICENSE.TXT\n  summary: |\n    CUB is a flexible library of cooperative threadblock primitives and other utilities for CUDA\n    kernel programming.\n  description: |\n    CUB provides state-of-the-art, reusable software components for every layer of the CUDA\n    programming model:\n    - Parallel primitives\n      - Warp-wide \"collective\" primitives\n        - Cooperative warp-wide prefix scan, reduction, etc.\n        - Safely specialized for each underlying CUDA architecture\n      - Block-wide \"collective\" primitives\n        - Cooperative I/O, sort, scan, reduction, histogram, etc.\n        - Compatible with arbitrary thread block sizes and types\n      - Device-wide primitives\n        - Parallel sort, prefix scan, reduction, histogram, etc.\n        - Compatible with CUDA dynamic parallelism\n    - Utilities\n      - Fancy iterators\n      - Thread and thread block I/O\n      - PTX intrinsics\n      - Device, kernel, and storage management\n  doc_url: http://nvlabs.github.io/cub/\n  dev_url: https://github.com/thrust/cub\n\nextra:\n  recipe-maintainers:\n    - rongou\n    - kkraus14\n    - leofang\n",
  "req": {
    "__set__": true,
    "elements": [
      "c_compiler_stub",
      "cmake",
      "cuda_compiler_stub",
      "cxx_compiler_stub",
      "make"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "cmake",
        "cuda_compiler_stub",
        "cxx_compiler_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "cuda_compiler_stub",
        "cxx_compiler_stub"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "cuda_compiler_stub",
        "cxx_compiler_stub"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "cmake >=3.15",
        "cuda_compiler_stub",
        "cxx_compiler_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": []
    },
    "run": {
      "__set__": true,
      "elements": []
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "url": "https://github.com/NVIDIA/cub/archive/1.16.0.tar.gz",
  "version": "1.16.0",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/cub.json"
  },
  "win_64_meta_yaml": {
    "about": {
      "description": "CUB provides state-of-the-art, reusable software components for every layer of the CUDA\nprogramming model:\n- Parallel primitives\n  - Warp-wide \"collective\" primitives\n    - Cooperative warp-wide prefix scan, reduction, etc.\n    - Safely specialized for each underlying CUDA architecture\n  - Block-wide \"collective\" primitives\n    - Cooperative I/O, sort, scan, reduction, histogram, etc.\n    - Compatible with arbitrary thread block sizes and types\n  - Device-wide primitives\n    - Parallel sort, prefix scan, reduction, histogram, etc.\n    - Compatible with CUDA dynamic parallelism\n- Utilities\n  - Fancy iterators\n  - Thread and thread block I/O\n  - PTX intrinsics\n  - Device, kernel, and storage management\n",
      "dev_url": "https://github.com/thrust/cub",
      "doc_url": "http://nvlabs.github.io/cub/",
      "home": "https://github.com/NVIDIA/cub",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE.TXT",
      "summary": "CUB is a flexible library of cooperative threadblock primitives and other utilities for CUDA\nkernel programming.\n"
    },
    "build": {
      "ignore_run_exports_from": [
        "cuda_compiler_stub"
      ],
      "number": "2"
    },
    "extra": {
      "recipe-maintainers": [
        "rongou",
        "kkraus14",
        "leofang"
      ]
    },
    "package": {
      "name": "cub",
      "version": "1.16.0"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "cxx_compiler_stub",
        "cuda_compiler_stub",
        "cmake >=3.15",
        "make"
      ],
      "run_constrained": [
        "thrust 1.16.0.*",
        "cuda-cccl <0.0.0a0",
        "cuda-cccl-impl <0.0.0a0",
        "cuda-cccl_win-64 <0.0.0a0"
      ]
    },
    "source": {
      "sha256": "271dc42d0a7ab3bd311eefa4ba8fd19f99ec093cf5e9053426f358914c8983d6",
      "url": "https://github.com/NVIDIA/cub/archive/1.16.0.tar.gz"
    },
    "test": {
      "commands": [
        "if not exist \"%LIBRARY_INC%\"\\cub\\cub.cuh exit 1",
        "if not exist \"%LIBRARY_LIB%\"\\cmake\\cub\\cub-config.cmake exit 1"
      ]
    }
  },
  "win_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "cmake",
        "cuda_compiler_stub",
        "cxx_compiler_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": []
    },
    "run": {
      "__set__": true,
      "elements": []
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  }
}