{
  "archived": false,
  "branch": "main",
  "conda-forge.yml": {
    "compiler_stack": "comp7",
    "conda_build": {
      "pkg_format": "2"
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    },
    "max_py_ver": "37",
    "max_r_ver": "35"
  },
  "feedstock_name": "judy",
  "hash_type": "sha256",
  "linux_64_meta_yaml": {
    "about": {
      "description": "Judy is a C library that implements a dynamic array.  Empty Judy arrays are\ndeclared with null pointers.  A Judy array consumes memory only when\npopulated yet can grow to take advantage of all available memory.  Judy's key\nbenefits are:  scalability, performance, memory efficiency, and ease of use.\nJudy arrays are designed to grow without tuning into the peta-element range,\nscaling near O(log-base-256).\n\nJudy arrays are accessed with insert, retrieve, and delete calls for number\nor string indexes.  Configuration and tuning are not required -- in fact not\npossible.  Judy offers sorting, counting, and neighbor/empty searching.\nIndexes can be sequential, clustered, periodic, or random -- it doesn't\nmatter to the algorithm.  Judy arrays can be arranged hierarchically to\nhandle any bit patterns -- large indexes, sets of keys, etc.\n\nJudy is often an improvement over common data structures such as:  arrays,\nsparse arrays, hash tables, B-trees, binary trees, linear lists, skiplists,\nother sort and search algorithms, and counting functions.\n",
      "dev_url": "http://sourceforge.net/projects/judy",
      "doc_url": "http://judy.sourceforge.net/doc/index.html",
      "home": "http://judy.sourceforge.net/index.html",
      "license": "LGPL-2.1",
      "license_file": "COPYING",
      "summary": "C library for creating and accessing sparse dynamic arrays"
    },
    "build": {
      "number": "2000"
    },
    "extra": {
      "recipe-maintainers": [
        "kalebo"
      ]
    },
    "package": {
      "name": "judy",
      "version": "1.0.5"
    },
    "requirements": {
      "build": [
        "c_compiler_stub"
      ],
      "host": []
    },
    "schema_version": 0,
    "source": {
      "fn": "Judy-1.0.5.tar.gz",
      "sha256": "d2704089f85fdb6f2cd7e77be21170ced4b4375c03ef1ad4cf1075bd414a63eb",
      "url": "https://downloads.sourceforge.net/project/judy/judy/Judy-1.0.5/Judy-1.0.5.tar.gz"
    },
    "test": {
      "commands": [
        "test -f $PREFIX/lib/libJudy.so",
        "test -f $PREFIX/lib/libJudy.a",
        "test -f $PREFIX/include/Judy.h"
      ]
    }
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub"
      ]
    },
    "host": {
      "__set__": true,
      "elements": []
    },
    "run": {
      "__set__": true,
      "elements": []
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "meta_yaml": {
    "about": {
      "description": "Judy is a C library that implements a dynamic array.  Empty Judy arrays are\ndeclared with null pointers.  A Judy array consumes memory only when\npopulated yet can grow to take advantage of all available memory.  Judy's key\nbenefits are:  scalability, performance, memory efficiency, and ease of use.\nJudy arrays are designed to grow without tuning into the peta-element range,\nscaling near O(log-base-256).\n\nJudy arrays are accessed with insert, retrieve, and delete calls for number\nor string indexes.  Configuration and tuning are not required -- in fact not\npossible.  Judy offers sorting, counting, and neighbor/empty searching.\nIndexes can be sequential, clustered, periodic, or random -- it doesn't\nmatter to the algorithm.  Judy arrays can be arranged hierarchically to\nhandle any bit patterns -- large indexes, sets of keys, etc.\n\nJudy is often an improvement over common data structures such as:  arrays,\nsparse arrays, hash tables, B-trees, binary trees, linear lists, skiplists,\nother sort and search algorithms, and counting functions.\n",
      "dev_url": "http://sourceforge.net/projects/judy",
      "doc_url": "http://judy.sourceforge.net/doc/index.html",
      "home": "http://judy.sourceforge.net/index.html",
      "license": "LGPL-2.1",
      "license_file": "COPYING",
      "summary": "C library for creating and accessing sparse dynamic arrays"
    },
    "build": {
      "number": "2000"
    },
    "extra": {
      "recipe-maintainers": [
        "kalebo"
      ]
    },
    "package": {
      "name": "judy",
      "version": "1.0.5"
    },
    "requirements": {
      "build": [
        "c_compiler_stub"
      ],
      "host": []
    },
    "schema_version": 0,
    "source": {
      "fn": "Judy-1.0.5.tar.gz",
      "sha256": "d2704089f85fdb6f2cd7e77be21170ced4b4375c03ef1ad4cf1075bd414a63eb",
      "url": "https://downloads.sourceforge.net/project/judy/judy/Judy-1.0.5/Judy-1.0.5.tar.gz"
    },
    "test": {
      "commands": [
        "test -f $PREFIX/lib/libJudy.so",
        "test -f $PREFIX/lib/libJudy.a",
        "test -f $PREFIX/include/Judy.h",
        "test -f $PREFIX/lib/libJudy.dylib",
        "test -f $PREFIX/lib/libJudy.la"
      ]
    }
  },
  "name": "judy",
  "osx_64_meta_yaml": {
    "about": {
      "description": "Judy is a C library that implements a dynamic array.  Empty Judy arrays are\ndeclared with null pointers.  A Judy array consumes memory only when\npopulated yet can grow to take advantage of all available memory.  Judy's key\nbenefits are:  scalability, performance, memory efficiency, and ease of use.\nJudy arrays are designed to grow without tuning into the peta-element range,\nscaling near O(log-base-256).\n\nJudy arrays are accessed with insert, retrieve, and delete calls for number\nor string indexes.  Configuration and tuning are not required -- in fact not\npossible.  Judy offers sorting, counting, and neighbor/empty searching.\nIndexes can be sequential, clustered, periodic, or random -- it doesn't\nmatter to the algorithm.  Judy arrays can be arranged hierarchically to\nhandle any bit patterns -- large indexes, sets of keys, etc.\n\nJudy is often an improvement over common data structures such as:  arrays,\nsparse arrays, hash tables, B-trees, binary trees, linear lists, skiplists,\nother sort and search algorithms, and counting functions.\n",
      "dev_url": "http://sourceforge.net/projects/judy",
      "doc_url": "http://judy.sourceforge.net/doc/index.html",
      "home": "http://judy.sourceforge.net/index.html",
      "license": "LGPL-2.1",
      "license_file": "COPYING",
      "summary": "C library for creating and accessing sparse dynamic arrays"
    },
    "build": {
      "number": "2000"
    },
    "extra": {
      "recipe-maintainers": [
        "kalebo"
      ]
    },
    "package": {
      "name": "judy",
      "version": "1.0.5"
    },
    "requirements": {
      "build": [
        "c_compiler_stub"
      ],
      "host": []
    },
    "schema_version": 0,
    "source": {
      "fn": "Judy-1.0.5.tar.gz",
      "sha256": "d2704089f85fdb6f2cd7e77be21170ced4b4375c03ef1ad4cf1075bd414a63eb",
      "url": "https://downloads.sourceforge.net/project/judy/judy/Judy-1.0.5/Judy-1.0.5.tar.gz"
    },
    "test": {
      "commands": [
        "test -f $PREFIX/lib/libJudy.dylib",
        "test -f $PREFIX/lib/libJudy.la",
        "test -f $PREFIX/include/Judy.h"
      ]
    }
  },
  "osx_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub"
      ]
    },
    "host": {
      "__set__": true,
      "elements": []
    },
    "run": {
      "__set__": true,
      "elements": []
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "outputs_names": {
    "__set__": true,
    "elements": [
      "judy"
    ]
  },
  "parsing_error": false,
  "platforms": [
    "linux_64",
    "osx_64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/judy.json"
  },
  "raw_meta_yaml": "{% set name = \"Judy\" %}\n{% set version = \"1.0.5\" %}\n{% set sha256 = \"d2704089f85fdb6f2cd7e77be21170ced4b4375c03ef1ad4cf1075bd414a63eb\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  fn: {{ name }}-{{ version }}.tar.gz\n  url: https://downloads.sourceforge.net/project/judy/judy/{{name}}-{{version}}/{{name}}-{{version}}.tar.gz\n  sha256: {{ sha256 }}\n\nbuild:\n  number: 2000\n  skip: true  # [win]\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n  host:\n\ntest:\n  commands:\n    - test -f $PREFIX/lib/libJudy.so  # [linux]\n    - test -f $PREFIX/lib/libJudy.a  # [linux]\n    - test -f $PREFIX/lib/libJudy.dylib  # [osx]\n    - test -f $PREFIX/lib/libJudy.la  # [osx]\n    - test -f $PREFIX/include/Judy.h\n\nabout:\n  home: http://judy.sourceforge.net/index.html\n  license: LGPL-2.1\n  license_file: COPYING\n  summary: 'C library for creating and accessing sparse dynamic arrays'\n\n  # The remaining entries in this section are optional, but recommended\n  description: |\n      Judy is a C library that implements a dynamic array.  Empty Judy arrays are\n      declared with null pointers.  A Judy array consumes memory only when\n      populated yet can grow to take advantage of all available memory.  Judy's key\n      benefits are:  scalability, performance, memory efficiency, and ease of use.\n      Judy arrays are designed to grow without tuning into the peta-element range,\n      scaling near O(log-base-256).\n\n      Judy arrays are accessed with insert, retrieve, and delete calls for number\n      or string indexes.  Configuration and tuning are not required -- in fact not\n      possible.  Judy offers sorting, counting, and neighbor/empty searching.\n      Indexes can be sequential, clustered, periodic, or random -- it doesn't\n      matter to the algorithm.  Judy arrays can be arranged hierarchically to\n      handle any bit patterns -- large indexes, sets of keys, etc.\n\n      Judy is often an improvement over common data structures such as:  arrays,\n      sparse arrays, hash tables, B-trees, binary trees, linear lists, skiplists,\n      other sort and search algorithms, and counting functions.\n  doc_url: http://judy.sourceforge.net/doc/index.html\n  dev_url: http://sourceforge.net/projects/judy\n\nextra:\n  recipe-maintainers:\n    - kalebo\n",
  "req": {
    "__set__": true,
    "elements": [
      "c_compiler_stub"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "c_compiler_stub"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "c_compiler_stub"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub"
      ]
    },
    "host": {
      "__set__": true,
      "elements": []
    },
    "run": {
      "__set__": true,
      "elements": []
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "url": "https://downloads.sourceforge.net/project/judy/judy/Judy-1.0.5/Judy-1.0.5.tar.gz",
  "version": "1.0.5",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/judy.json"
  }
}