{
  "archived": false,
  "branch": "main",
  "conda-forge.yml": {
    "conda_build": {
      "error_overlinking": true
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    }
  },
  "feedstock_hash": "13a4be03384df4f3d9fe73d0dfb4330c4e884617",
  "feedstock_hash_ts": 1761046598,
  "feedstock_name": "rendercanvas",
  "hash_type": "sha256",
  "linux_64_meta_yaml": {
    "about": {
      "description": "See how the two windows above look the same? That's the idea; they also\nlook the same to the code that renders to them. Yet, the GUI systems are\nvery different (Qt vs glfw in this case). Now that's a powerful\nabstraction!\n\n* Provide a generic canvas API to render to.\n* Provide an event loop for scheduling events and draws.\n* Provide a simple but powerful event system with standardized event objects.\n* Provide various canvas implementations:\n    * One that is light and easily installed (glfw).\n    * For various GUI libraries (e.g. qt and wx), so visuzalizations can be embedded in a GUI.\n    * For specific platforms (e.g. Jupyter, browser).\n\nThe main use-case is rendering with wgpu, but rendercanvascan be used by\nanything that can render based on a window-id or by producing bitmap\nimages.\n",
      "home": "https://github.com/pygfx/rendercanvas/",
      "license": "BSD-2-Clause",
      "license_file": "LICENSE",
      "summary": "One canvas API, multiple backends"
    },
    "build": {
      "noarch": "python",
      "number": "1",
      "script": "PYTHON -m pip install . -vv --no-deps --no-build-isolation"
    },
    "extra": {
      "recipe-maintainers": [
        "hmaarrfk"
      ]
    },
    "package": {
      "name": "rendercanvas",
      "version": "2.2.1"
    },
    "requirements": {
      "host": [
        "python 3.10",
        "flit-core >=3.2,<4",
        "pip"
      ],
      "run": [
        "python >=3.10",
        "sniffio"
      ]
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "no_qt_aa_warning.patch"
      ],
      "sha256": "270540441c69ddc3e2ae3d864a08ccf0e9c3f0221948d717781bbb04ed22c176",
      "url": "https://pypi.org/packages/source/r/rendercanvas/rendercanvas-2.2.1.tar.gz"
    },
    "test": {
      "commands": [
        "pip check"
      ],
      "imports": [
        "rendercanvas"
      ],
      "requires": [
        "pip",
        "python 3.10"
      ]
    }
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": []
    },
    "host": {
      "__set__": true,
      "elements": [
        "flit-core",
        "pip",
        "python"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "python",
        "sniffio"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "pip",
        "python"
      ]
    }
  },
  "meta_yaml": {
    "about": {
      "description": "See how the two windows above look the same? That's the idea; they also\nlook the same to the code that renders to them. Yet, the GUI systems are\nvery different (Qt vs glfw in this case). Now that's a powerful\nabstraction!\n\n* Provide a generic canvas API to render to.\n* Provide an event loop for scheduling events and draws.\n* Provide a simple but powerful event system with standardized event objects.\n* Provide various canvas implementations:\n    * One that is light and easily installed (glfw).\n    * For various GUI libraries (e.g. qt and wx), so visuzalizations can be embedded in a GUI.\n    * For specific platforms (e.g. Jupyter, browser).\n\nThe main use-case is rendering with wgpu, but rendercanvascan be used by\nanything that can render based on a window-id or by producing bitmap\nimages.\n",
      "home": "https://github.com/pygfx/rendercanvas/",
      "license": "BSD-2-Clause",
      "license_file": "LICENSE",
      "summary": "One canvas API, multiple backends"
    },
    "build": {
      "noarch": "python",
      "number": "1",
      "script": "PYTHON -m pip install . -vv --no-deps --no-build-isolation"
    },
    "extra": {
      "recipe-maintainers": [
        "hmaarrfk"
      ]
    },
    "package": {
      "name": "rendercanvas",
      "version": "2.2.1"
    },
    "requirements": {
      "host": [
        "python 3.10",
        "flit-core >=3.2,<4",
        "pip"
      ],
      "run": [
        "python >=3.10",
        "sniffio"
      ]
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "no_qt_aa_warning.patch"
      ],
      "sha256": "270540441c69ddc3e2ae3d864a08ccf0e9c3f0221948d717781bbb04ed22c176",
      "url": "https://pypi.org/packages/source/r/rendercanvas/rendercanvas-2.2.1.tar.gz"
    },
    "test": {
      "commands": [
        "pip check"
      ],
      "imports": [
        "rendercanvas"
      ],
      "requires": [
        "pip",
        "python 3.10"
      ]
    }
  },
  "name": "rendercanvas",
  "outputs_names": {
    "__set__": true,
    "elements": [
      "rendercanvas"
    ]
  },
  "parsing_error": false,
  "platforms": [
    "linux_64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/rendercanvas.json"
  },
  "raw_meta_yaml": "{% set version = \"2.2.1\" %}\n\npackage:\n  name: rendercanvas\n  version: {{ version }}\n\nsource:\n  url: https://pypi.org/packages/source/r/rendercanvas/rendercanvas-{{ version }}.tar.gz\n  sha256: 270540441c69ddc3e2ae3d864a08ccf0e9c3f0221948d717781bbb04ed22c176\n  patches:\n    - no_qt_aa_warning.patch\n\nbuild:\n  noarch: python\n  script: {{ PYTHON }} -m pip install . -vv --no-deps --no-build-isolation\n  number: 1\n\nrequirements:\n  host:\n    - python {{ python_min }}\n    - flit-core >=3.2,<4\n    - pip\n  run:\n    - python >={{ python_min }}\n    - sniffio\n\ntest:\n  imports:\n    - rendercanvas\n  commands:\n    - pip check\n  requires:\n    - pip\n    - python {{ python_min }}\n\nabout:\n  summary: One canvas API, multiple backends\n  license: BSD-2-Clause\n  license_file: LICENSE\n  home: https://github.com/pygfx/rendercanvas/\n  description: |\n    See how the two windows above look the same? That's the idea; they also\n    look the same to the code that renders to them. Yet, the GUI systems are\n    very different (Qt vs glfw in this case). Now that's a powerful\n    abstraction!\n\n    * Provide a generic canvas API to render to.\n    * Provide an event loop for scheduling events and draws.\n    * Provide a simple but powerful event system with standardized event objects.\n    * Provide various canvas implementations:\n        * One that is light and easily installed (glfw).\n        * For various GUI libraries (e.g. qt and wx), so visuzalizations can be embedded in a GUI.\n        * For specific platforms (e.g. Jupyter, browser).\n\n    The main use-case is rendering with wgpu, but rendercanvascan be used by\n    anything that can render based on a window-id or by producing bitmap\n    images.\n\nextra:\n  recipe-maintainers:\n    - hmaarrfk\n",
  "req": {
    "__set__": true,
    "elements": [
      "flit-core",
      "pip",
      "python",
      "sniffio"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": []
    },
    "host": {
      "__set__": true,
      "elements": [
        "flit-core",
        "pip",
        "python"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "python",
        "sniffio"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "pip",
        "python"
      ]
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": []
    },
    "host": {
      "__set__": true,
      "elements": [
        "flit-core >=3.2,<4",
        "pip",
        "python 3.10"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "python >=3.10",
        "sniffio"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "pip",
        "python 3.10"
      ]
    }
  },
  "url": "https://pypi.org/packages/source/r/rendercanvas/rendercanvas-2.2.1.tar.gz",
  "version": "2.2.1",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/rendercanvas.json"
  }
}