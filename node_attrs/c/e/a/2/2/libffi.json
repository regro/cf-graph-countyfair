{
  "archived": false,
  "branch": "main",
  "conda-forge.yml": {
    "build_platform": {
      "linux_aarch64": "linux_64",
      "linux_ppc64le": "linux_64",
      "osx_arm64": "osx_64"
    },
    "conda_build": {
      "pkg_format": "2"
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    },
    "provider": {
      "linux_aarch64": "default",
      "linux_ppc64le": "default"
    }
  },
  "feedstock_hash": "3eba65799142716bceeda38efa8cdd58fd3bd962",
  "feedstock_hash_ts": 1760295108,
  "feedstock_name": "libffi",
  "hash_type": "sha256",
  "linux_64_meta_yaml": {
    "about": {
      "description": "The libffi library provides a portable, high level programming interface\nto various calling conventions. This allows a programmer to call any\nfunction specified by a call interface description at run-time.\n",
      "dev_url": "https://github.com/libffi/libffi",
      "doc_url": "https://sourceware.org/libffi/",
      "home": "https://sourceware.org/libffi/",
      "license": "MIT",
      "license_file": "LICENSE",
      "summary": "A Portable Foreign Function Interface Library."
    },
    "build": {
      "number": "0",
      "run_exports": [
        "libffi"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "stefan-balke",
        "scopatz",
        "isuruf"
      ]
    },
    "package": {
      "name": "libffi",
      "version": "3.5.2"
    },
    "requirements": {
      "build": [
        "make",
        "autoconf",
        "libtool",
        "patch",
        "automake <1.17",
        "texinfo",
        "c_compiler_stub",
        "c_stdlib_stub"
      ],
      "host": [],
      "run": []
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "0001-arm64-use-a-dedicated-dylib-for-trampolines-so-it-ca.patch",
        "0002-Add-support-for-ffi_find_closure_for_code_np-on-Appl.patch"
      ],
      "sha256": "f3a3082a23b37c293a4fcd1053147b371f2ff91fa7ea1b2a52e335676bac82dc",
      "url": "https://github.com/libffi/libffi/releases/download/v3.5.2/libffi-3.5.2.tar.gz"
    },
    "test": {
      "commands": [
        "test -e $PREFIX/lib/libffi${SHLIB_EXT}",
        "test -e $PREFIX/lib/libffi.a",
        "test -e $PREFIX/include/ffi.h",
        "test -e $PREFIX/include/ffitarget.h"
      ],
      "requires": null
    }
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "autoconf",
        "automake",
        "c_compiler_stub",
        "c_stdlib_stub",
        "libtool",
        "make",
        "patch",
        "texinfo"
      ]
    },
    "host": {
      "__set__": true,
      "elements": []
    },
    "run": {
      "__set__": true,
      "elements": []
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "linux_aarch64_meta_yaml": {
    "about": {
      "description": "The libffi library provides a portable, high level programming interface\nto various calling conventions. This allows a programmer to call any\nfunction specified by a call interface description at run-time.\n",
      "dev_url": "https://github.com/libffi/libffi",
      "doc_url": "https://sourceware.org/libffi/",
      "home": "https://sourceware.org/libffi/",
      "license": "MIT",
      "license_file": "LICENSE",
      "summary": "A Portable Foreign Function Interface Library."
    },
    "build": {
      "number": "0",
      "run_exports": [
        "libffi"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "stefan-balke",
        "scopatz",
        "isuruf"
      ]
    },
    "package": {
      "name": "libffi",
      "version": "3.5.2"
    },
    "requirements": {
      "build": [
        "make",
        "autoconf",
        "libtool",
        "patch",
        "automake <1.17",
        "texinfo",
        "c_compiler_stub",
        "c_stdlib_stub"
      ],
      "host": [],
      "run": []
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "0001-arm64-use-a-dedicated-dylib-for-trampolines-so-it-ca.patch",
        "0002-Add-support-for-ffi_find_closure_for_code_np-on-Appl.patch"
      ],
      "sha256": "f3a3082a23b37c293a4fcd1053147b371f2ff91fa7ea1b2a52e335676bac82dc",
      "url": "https://github.com/libffi/libffi/releases/download/v3.5.2/libffi-3.5.2.tar.gz"
    },
    "test": {
      "commands": [
        "test -e $PREFIX/lib/libffi${SHLIB_EXT}",
        "test -e $PREFIX/lib/libffi.a",
        "test -e $PREFIX/include/ffi.h",
        "test -e $PREFIX/include/ffitarget.h"
      ],
      "requires": null
    }
  },
  "linux_aarch64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "autoconf",
        "automake",
        "c_compiler_stub",
        "c_stdlib_stub",
        "libtool",
        "make",
        "patch",
        "texinfo"
      ]
    },
    "host": {
      "__set__": true,
      "elements": []
    },
    "run": {
      "__set__": true,
      "elements": []
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "linux_ppc64le_meta_yaml": {
    "about": {
      "description": "The libffi library provides a portable, high level programming interface\nto various calling conventions. This allows a programmer to call any\nfunction specified by a call interface description at run-time.\n",
      "dev_url": "https://github.com/libffi/libffi",
      "doc_url": "https://sourceware.org/libffi/",
      "home": "https://sourceware.org/libffi/",
      "license": "MIT",
      "license_file": "LICENSE",
      "summary": "A Portable Foreign Function Interface Library."
    },
    "build": {
      "number": "0",
      "run_exports": [
        "libffi"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "stefan-balke",
        "scopatz",
        "isuruf"
      ]
    },
    "package": {
      "name": "libffi",
      "version": "3.5.2"
    },
    "requirements": {
      "build": [
        "make",
        "autoconf",
        "libtool",
        "patch",
        "automake <1.17",
        "texinfo",
        "c_compiler_stub",
        "c_stdlib_stub"
      ],
      "host": [],
      "run": []
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "0001-arm64-use-a-dedicated-dylib-for-trampolines-so-it-ca.patch",
        "0002-Add-support-for-ffi_find_closure_for_code_np-on-Appl.patch"
      ],
      "sha256": "f3a3082a23b37c293a4fcd1053147b371f2ff91fa7ea1b2a52e335676bac82dc",
      "url": "https://github.com/libffi/libffi/releases/download/v3.5.2/libffi-3.5.2.tar.gz"
    },
    "test": {
      "commands": [
        "test -e $PREFIX/lib/libffi${SHLIB_EXT}",
        "test -e $PREFIX/lib/libffi.a",
        "test -e $PREFIX/include/ffi.h",
        "test -e $PREFIX/include/ffitarget.h"
      ],
      "requires": null
    }
  },
  "linux_ppc64le_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "autoconf",
        "automake",
        "c_compiler_stub",
        "c_stdlib_stub",
        "libtool",
        "make",
        "patch",
        "texinfo"
      ]
    },
    "host": {
      "__set__": true,
      "elements": []
    },
    "run": {
      "__set__": true,
      "elements": []
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "meta_yaml": {
    "about": {
      "description": "The libffi library provides a portable, high level programming interface\nto various calling conventions. This allows a programmer to call any\nfunction specified by a call interface description at run-time.\n",
      "dev_url": "https://github.com/libffi/libffi",
      "doc_url": "https://sourceware.org/libffi/",
      "home": "https://sourceware.org/libffi/",
      "license": "MIT",
      "license_file": "LICENSE",
      "summary": "A Portable Foreign Function Interface Library."
    },
    "build": {
      "number": "0",
      "run_exports": [
        "libffi"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "stefan-balke",
        "scopatz",
        "isuruf"
      ]
    },
    "package": {
      "name": "libffi",
      "version": "3.5.2"
    },
    "requirements": {
      "build": [
        "make",
        "autoconf",
        "libtool",
        "patch",
        "automake <1.17",
        "texinfo",
        "c_compiler_stub",
        "c_stdlib_stub",
        "autotools_clang_conda"
      ],
      "host": [],
      "run": []
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "0001-arm64-use-a-dedicated-dylib-for-trampolines-so-it-ca.patch",
        "0002-Add-support-for-ffi_find_closure_for_code_np-on-Appl.patch",
        "0004-Don-t-define-FFI_COMPLEX_TYPEDEF-ifndef-FFI_TARGET_H.patch"
      ],
      "sha256": "f3a3082a23b37c293a4fcd1053147b371f2ff91fa7ea1b2a52e335676bac82dc",
      "url": "https://github.com/libffi/libffi/releases/download/v3.5.2/libffi-3.5.2.tar.gz"
    },
    "test": {
      "commands": [
        "test -e $PREFIX/lib/libffi${SHLIB_EXT}",
        "test -e $PREFIX/lib/libffi.a",
        "test -e $PREFIX/include/ffi.h",
        "test -e $PREFIX/include/ffitarget.h",
        "if not exist %LIBRARY_PREFIX%/bin/ffi-8.dll exit /b 1",
        "if not exist %LIBRARY_PREFIX%/lib/libffi.lib exit /b 1",
        "if not exist %LIBRARY_PREFIX%/lib/ffi.lib exit /b 1",
        "if not exist %LIBRARY_PREFIX%/include/ffi.h exit /b 1",
        "if not exist %LIBRARY_PREFIX%/include/ffitarget.h exit /b 1",
        "llvm-nm %LIBRARY_PREFIX%/lib/libffi.lib | grep \"__imp_ffi_type_void\""
      ],
      "requires": [
        "llvm-tools",
        "m2-grep"
      ]
    }
  },
  "name": "libffi",
  "osx_64_meta_yaml": {
    "about": {
      "description": "The libffi library provides a portable, high level programming interface\nto various calling conventions. This allows a programmer to call any\nfunction specified by a call interface description at run-time.\n",
      "dev_url": "https://github.com/libffi/libffi",
      "doc_url": "https://sourceware.org/libffi/",
      "home": "https://sourceware.org/libffi/",
      "license": "MIT",
      "license_file": "LICENSE",
      "summary": "A Portable Foreign Function Interface Library."
    },
    "build": {
      "number": "0",
      "run_exports": [
        "libffi"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "stefan-balke",
        "scopatz",
        "isuruf"
      ]
    },
    "package": {
      "name": "libffi",
      "version": "3.5.2"
    },
    "requirements": {
      "build": [
        "make",
        "autoconf",
        "libtool",
        "patch",
        "automake <1.17",
        "texinfo",
        "c_compiler_stub",
        "c_stdlib_stub"
      ],
      "host": [],
      "run": []
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "0001-arm64-use-a-dedicated-dylib-for-trampolines-so-it-ca.patch",
        "0002-Add-support-for-ffi_find_closure_for_code_np-on-Appl.patch"
      ],
      "sha256": "f3a3082a23b37c293a4fcd1053147b371f2ff91fa7ea1b2a52e335676bac82dc",
      "url": "https://github.com/libffi/libffi/releases/download/v3.5.2/libffi-3.5.2.tar.gz"
    },
    "test": {
      "commands": [
        "test -e $PREFIX/lib/libffi${SHLIB_EXT}",
        "test -e $PREFIX/lib/libffi.a",
        "test -e $PREFIX/include/ffi.h",
        "test -e $PREFIX/include/ffitarget.h"
      ],
      "requires": null
    }
  },
  "osx_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "autoconf",
        "automake",
        "c_compiler_stub",
        "c_stdlib_stub",
        "libtool",
        "make",
        "patch",
        "texinfo"
      ]
    },
    "host": {
      "__set__": true,
      "elements": []
    },
    "run": {
      "__set__": true,
      "elements": []
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "osx_arm64_meta_yaml": {
    "about": {
      "description": "The libffi library provides a portable, high level programming interface\nto various calling conventions. This allows a programmer to call any\nfunction specified by a call interface description at run-time.\n",
      "dev_url": "https://github.com/libffi/libffi",
      "doc_url": "https://sourceware.org/libffi/",
      "home": "https://sourceware.org/libffi/",
      "license": "MIT",
      "license_file": "LICENSE",
      "summary": "A Portable Foreign Function Interface Library."
    },
    "build": {
      "number": "0",
      "run_exports": [
        "libffi"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "stefan-balke",
        "scopatz",
        "isuruf"
      ]
    },
    "package": {
      "name": "libffi",
      "version": "3.5.2"
    },
    "requirements": {
      "build": [
        "make",
        "autoconf",
        "libtool",
        "patch",
        "automake <1.17",
        "texinfo",
        "c_compiler_stub",
        "c_stdlib_stub"
      ],
      "host": [],
      "run": []
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "0001-arm64-use-a-dedicated-dylib-for-trampolines-so-it-ca.patch",
        "0002-Add-support-for-ffi_find_closure_for_code_np-on-Appl.patch"
      ],
      "sha256": "f3a3082a23b37c293a4fcd1053147b371f2ff91fa7ea1b2a52e335676bac82dc",
      "url": "https://github.com/libffi/libffi/releases/download/v3.5.2/libffi-3.5.2.tar.gz"
    },
    "test": {
      "commands": [
        "test -e $PREFIX/lib/libffi${SHLIB_EXT}",
        "test -e $PREFIX/lib/libffi.a",
        "test -e $PREFIX/include/ffi.h",
        "test -e $PREFIX/include/ffitarget.h"
      ],
      "requires": null
    }
  },
  "osx_arm64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "autoconf",
        "automake",
        "c_compiler_stub",
        "c_stdlib_stub",
        "libtool",
        "make",
        "patch",
        "texinfo"
      ]
    },
    "host": {
      "__set__": true,
      "elements": []
    },
    "run": {
      "__set__": true,
      "elements": []
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "outputs_names": {
    "__set__": true,
    "elements": [
      "libffi"
    ]
  },
  "parsing_error": false,
  "platforms": [
    "linux_64",
    "linux_aarch64",
    "linux_ppc64le",
    "osx_64",
    "osx_arm64",
    "win_64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/libffi.json"
  },
  "raw_meta_yaml": "{% set version = \"3.5.2\" %}\n{% set posix = 'm2-' if win else '' %}\n\npackage:\n  name: libffi\n  version: {{ version }}\n\nsource:\n  url: https://github.com/libffi/libffi/releases/download/v{{ version }}/libffi-{{ version }}.tar.gz\n  sha256: f3a3082a23b37c293a4fcd1053147b371f2ff91fa7ea1b2a52e335676bac82dc\n  patches:\n    - 0001-arm64-use-a-dedicated-dylib-for-trampolines-so-it-ca.patch\n    - 0002-Add-support-for-ffi_find_closure_for_code_np-on-Appl.patch\n    # Windows-specific:\n    - 0004-Don-t-define-FFI_COMPLEX_TYPEDEF-ifndef-FFI_TARGET_H.patch  # [win]\n\nbuild:\n  number: 0\n  run_exports:\n    # good history: https://abi-laboratory.pro/tracker/timeline/libffi/\n    - {{ pin_subpackage('libffi', max_pin=\"x.x\") }}\n\nrequirements:\n  build:\n    - autotools_clang_conda  # [win]\n    - make                   # [unix]\n    - autoconf               # [unix]\n    - libtool                # [unix]\n    - patch                  # [unix]\n    - automake <1.17         # [unix]\n    - {{ posix }}texinfo\n    - {{ compiler('c') }}\n    - {{ stdlib('c') }}\n  host:\n  run:\n\ntest:\n  requires:\n    - llvm-tools  # [win]\n    - m2-grep     # [win]\n  commands:\n    - test -e $PREFIX/lib/libffi${SHLIB_EXT}                                # [not win]\n    - test -e $PREFIX/lib/libffi.a                                          # [not win]\n    - test -e $PREFIX/include/ffi.h                                         # [not win]\n    - test -e $PREFIX/include/ffitarget.h                                   # [not win]\n    - if not exist %LIBRARY_PREFIX%/bin/ffi-8.dll exit /b 1                 # [win]\n    - if not exist %LIBRARY_PREFIX%/lib/libffi.lib exit /b 1                # [win]\n    - if not exist %LIBRARY_PREFIX%/lib/ffi.lib exit /b 1                   # [win]\n    - if not exist %LIBRARY_PREFIX%/include/ffi.h exit /b 1                 # [win]\n    - if not exist %LIBRARY_PREFIX%/include/ffitarget.h exit /b 1           # [win]\n    - llvm-nm %LIBRARY_PREFIX%/lib/libffi.lib | grep \"__imp_ffi_type_void\"  # [win]\n\nabout:\n  home: https://sourceware.org/libffi/\n  license: MIT\n  license_file: LICENSE\n  summary: A Portable Foreign Function Interface Library.\n\n  description: |\n    The libffi library provides a portable, high level programming interface\n    to various calling conventions. This allows a programmer to call any\n    function specified by a call interface description at run-time.\n  doc_url: https://sourceware.org/libffi/\n  dev_url: https://github.com/libffi/libffi\n\nextra:\n  recipe-maintainers:\n    - stefan-balke\n    - scopatz\n    - isuruf\n",
  "req": {
    "__set__": true,
    "elements": [
      "autoconf",
      "automake",
      "autotools_clang_conda",
      "c_compiler_stub",
      "c_stdlib_stub",
      "libtool",
      "make",
      "patch",
      "texinfo"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "autoconf",
        "automake",
        "autotools_clang_conda",
        "c_compiler_stub",
        "c_stdlib_stub",
        "libtool",
        "make",
        "patch",
        "texinfo"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "llvm-tools",
        "m2-grep"
      ]
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "autoconf",
        "automake <1.17",
        "autotools_clang_conda",
        "c_compiler_stub",
        "c_stdlib_stub",
        "libtool",
        "make",
        "patch",
        "texinfo"
      ]
    },
    "host": {
      "__set__": true,
      "elements": []
    },
    "run": {
      "__set__": true,
      "elements": []
    },
    "test": {
      "__set__": true,
      "elements": [
        "llvm-tools",
        "m2-grep"
      ]
    }
  },
  "url": "https://github.com/libffi/libffi/releases/download/v3.5.2/libffi-3.5.2.tar.gz",
  "version": "3.5.2",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/libffi.json"
  },
  "win_64_meta_yaml": {
    "about": {
      "description": "The libffi library provides a portable, high level programming interface\nto various calling conventions. This allows a programmer to call any\nfunction specified by a call interface description at run-time.\n",
      "dev_url": "https://github.com/libffi/libffi",
      "doc_url": "https://sourceware.org/libffi/",
      "home": "https://sourceware.org/libffi/",
      "license": "MIT",
      "license_file": "LICENSE",
      "summary": "A Portable Foreign Function Interface Library."
    },
    "build": {
      "number": "0",
      "run_exports": [
        "libffi"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "stefan-balke",
        "scopatz",
        "isuruf"
      ]
    },
    "package": {
      "name": "libffi",
      "version": "3.5.2"
    },
    "requirements": {
      "build": [
        "autotools_clang_conda",
        "texinfo",
        "c_compiler_stub",
        "c_stdlib_stub"
      ],
      "host": [],
      "run": []
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "0001-arm64-use-a-dedicated-dylib-for-trampolines-so-it-ca.patch",
        "0002-Add-support-for-ffi_find_closure_for_code_np-on-Appl.patch",
        "0004-Don-t-define-FFI_COMPLEX_TYPEDEF-ifndef-FFI_TARGET_H.patch"
      ],
      "sha256": "f3a3082a23b37c293a4fcd1053147b371f2ff91fa7ea1b2a52e335676bac82dc",
      "url": "https://github.com/libffi/libffi/releases/download/v3.5.2/libffi-3.5.2.tar.gz"
    },
    "test": {
      "commands": [
        "if not exist %LIBRARY_PREFIX%/bin/ffi-8.dll exit /b 1",
        "if not exist %LIBRARY_PREFIX%/lib/libffi.lib exit /b 1",
        "if not exist %LIBRARY_PREFIX%/lib/ffi.lib exit /b 1",
        "if not exist %LIBRARY_PREFIX%/include/ffi.h exit /b 1",
        "if not exist %LIBRARY_PREFIX%/include/ffitarget.h exit /b 1",
        "llvm-nm %LIBRARY_PREFIX%/lib/libffi.lib | grep \"__imp_ffi_type_void\""
      ],
      "requires": [
        "llvm-tools",
        "m2-grep"
      ]
    }
  },
  "win_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "autotools_clang_conda",
        "c_compiler_stub",
        "c_stdlib_stub",
        "texinfo"
      ]
    },
    "host": {
      "__set__": true,
      "elements": []
    },
    "run": {
      "__set__": true,
      "elements": []
    },
    "test": {
      "__set__": true,
      "elements": [
        "llvm-tools",
        "m2-grep"
      ]
    }
  }
}