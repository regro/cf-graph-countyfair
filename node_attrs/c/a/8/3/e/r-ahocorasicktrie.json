{
  "archived": false,
  "branch": "main",
  "conda-forge.yml": {
    "bot": {
      "automerge": true
    },
    "conda_build": {
      "pkg_format": "2"
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    },
    "provider": {
      "win": "azure"
    }
  },
  "feedstock_name": "r-ahocorasicktrie",
  "hash_type": "sha256",
  "linux_64_meta_yaml": {
    "about": {
      "home": "https://github.com/chambm/AhoCorasickTrie",
      "license": "Apache-2.0",
      "license_family": "APACHE",
      "license_file": [
        "LICENSE-2.0.txt"
      ],
      "summary": "Aho-Corasick is an optimal algorithm for finding many keywords in a text. It can locate all matches in a text in O(N+M) time; i.e., the time needed scales linearly with the number of keywords (N) and the size of the text (M). Compare this to the naive approach which takes O(N*M) time to loop through each pattern and scan for it in the text. This implementation builds the trie (the generic name of the data structure) and runs the search in a single function call. If you want to search multiple texts with the same trie, the function will take a list or vector of texts and return a list of matches to each text. By default, all 128 ASCII characters are allowed in both the keywords and the text. A more efficient trie is possible if the alphabet size can be reduced. For example, DNA sequences use at most 19 distinct characters and usually only 4; protein sequences use at most 26 distinct characters and usually only 20. UTF-8 (Unicode) matching is not currently supported."
    },
    "build": {
      "number": "1",
      "rpaths": [
        "lib/R/lib/",
        "lib/"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "conda-forge/r"
      ]
    },
    "package": {
      "name": "r-ahocorasicktrie",
      "version": "0.1.3"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "make"
      ],
      "host": [
        "r-base",
        "r-rcpp >=0.12.5"
      ],
      "run": [
        "r-base",
        "r-rcpp >=0.12.5"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "fad2fc2ec469740ccaed90aa068fadff5b2f2422d667c851653deb834a267833",
      "url": [
        "https://cran.r-project.org/src/contrib/AhoCorasickTrie_0.1.3.tar.gz",
        "https://cran.r-project.org/src/contrib/Archive/AhoCorasickTrie/AhoCorasickTrie_0.1.3.tar.gz"
      ]
    },
    "test": {
      "commands": [
        "$R -e \"library('AhoCorasickTrie')\""
      ]
    }
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "r-base",
        "r-rcpp"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "r-base",
        "r-rcpp"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "meta_yaml": {
    "about": {
      "home": "https://github.com/chambm/AhoCorasickTrie",
      "license": "Apache-2.0",
      "license_family": "APACHE",
      "license_file": [
        "LICENSE-2.0.txt"
      ],
      "summary": "Aho-Corasick is an optimal algorithm for finding many keywords in a text. It can locate all matches in a text in O(N+M) time; i.e., the time needed scales linearly with the number of keywords (N) and the size of the text (M). Compare this to the naive approach which takes O(N*M) time to loop through each pattern and scan for it in the text. This implementation builds the trie (the generic name of the data structure) and runs the search in a single function call. If you want to search multiple texts with the same trie, the function will take a list or vector of texts and return a list of matches to each text. By default, all 128 ASCII characters are allowed in both the keywords and the text. A more efficient trie is possible if the alphabet size can be reduced. For example, DNA sequences use at most 19 distinct characters and usually only 4; protein sequences use at most 26 distinct characters and usually only 20. UTF-8 (Unicode) matching is not currently supported."
    },
    "build": {
      "number": "1",
      "rpaths": [
        "lib/R/lib/",
        "lib/"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "conda-forge/r"
      ]
    },
    "package": {
      "name": "r-ahocorasicktrie",
      "version": "0.1.3"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "make",
        "m2w64_c_compiler_stub",
        "m2w64_c_stdlib_stub",
        "m2w64_cxx_compiler_stub",
        "filesystem",
        "sed",
        "coreutils",
        "zip"
      ],
      "host": [
        "r-base",
        "r-rcpp >=0.12.5"
      ],
      "run": [
        "r-base",
        "r-rcpp >=0.12.5"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "fad2fc2ec469740ccaed90aa068fadff5b2f2422d667c851653deb834a267833",
      "url": [
        "https://cran.r-project.org/src/contrib/AhoCorasickTrie_0.1.3.tar.gz",
        "https://cran.r-project.org/src/contrib/Archive/AhoCorasickTrie/AhoCorasickTrie_0.1.3.tar.gz"
      ]
    },
    "test": {
      "commands": [
        "$R -e \"library('AhoCorasickTrie')\"",
        "\"%R%\" -e \"library('AhoCorasickTrie')\""
      ]
    }
  },
  "name": "r-ahocorasicktrie",
  "osx_64_meta_yaml": {
    "about": {
      "home": "https://github.com/chambm/AhoCorasickTrie",
      "license": "Apache-2.0",
      "license_family": "APACHE",
      "license_file": [
        "LICENSE-2.0.txt"
      ],
      "summary": "Aho-Corasick is an optimal algorithm for finding many keywords in a text. It can locate all matches in a text in O(N+M) time; i.e., the time needed scales linearly with the number of keywords (N) and the size of the text (M). Compare this to the naive approach which takes O(N*M) time to loop through each pattern and scan for it in the text. This implementation builds the trie (the generic name of the data structure) and runs the search in a single function call. If you want to search multiple texts with the same trie, the function will take a list or vector of texts and return a list of matches to each text. By default, all 128 ASCII characters are allowed in both the keywords and the text. A more efficient trie is possible if the alphabet size can be reduced. For example, DNA sequences use at most 19 distinct characters and usually only 4; protein sequences use at most 26 distinct characters and usually only 20. UTF-8 (Unicode) matching is not currently supported."
    },
    "build": {
      "number": "1",
      "rpaths": [
        "lib/R/lib/",
        "lib/"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "conda-forge/r"
      ]
    },
    "package": {
      "name": "r-ahocorasicktrie",
      "version": "0.1.3"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "make"
      ],
      "host": [
        "r-base",
        "r-rcpp >=0.12.5"
      ],
      "run": [
        "r-base",
        "r-rcpp >=0.12.5"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "fad2fc2ec469740ccaed90aa068fadff5b2f2422d667c851653deb834a267833",
      "url": [
        "https://cran.r-project.org/src/contrib/AhoCorasickTrie_0.1.3.tar.gz",
        "https://cran.r-project.org/src/contrib/Archive/AhoCorasickTrie/AhoCorasickTrie_0.1.3.tar.gz"
      ]
    },
    "test": {
      "commands": [
        "$R -e \"library('AhoCorasickTrie')\""
      ]
    }
  },
  "osx_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "r-base",
        "r-rcpp"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "r-base",
        "r-rcpp"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "outputs_names": {
    "__set__": true,
    "elements": [
      "r-ahocorasicktrie"
    ]
  },
  "parsing_error": false,
  "platforms": [
    "linux_64",
    "osx_64",
    "win_64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/r-ahocorasicktrie.json"
  },
  "raw_meta_yaml": "{% set version = \"0.1.3\" %}\n{% set posix = 'm2-' if win else '' %}\n\npackage:\n  name: r-ahocorasicktrie\n  version: {{ version|replace(\"-\", \"_\") }}\n\nsource:\n  url:\n    - {{ cran_mirror }}/src/contrib/AhoCorasickTrie_{{ version }}.tar.gz\n    - {{ cran_mirror }}/src/contrib/Archive/AhoCorasickTrie/AhoCorasickTrie_{{ version }}.tar.gz\n  sha256: fad2fc2ec469740ccaed90aa068fadff5b2f2422d667c851653deb834a267833\n\nbuild:\n  number: 1\n  rpaths:\n    - lib/R/lib/\n    - lib/\n\nrequirements:\n  build:\n    - {{ compiler('c') }}        # [not win]\n    - {{ stdlib(\"c\") }}          # [not win]\n    - {{ compiler('cxx') }}      # [not win]\n    - {{ compiler('m2w64_c') }}        # [win]\n    - {{ stdlib(\"m2w64_c\") }}          # [win]\n    - {{ compiler('m2w64_cxx') }}        # [win]\n    - {{ posix }}filesystem        # [win]\n    - {{ posix }}make\n    - {{ posix }}sed               # [win]\n    - {{ posix }}coreutils         # [win]\n    - {{ posix }}zip               # [win]\n  host:\n    - r-base\n    - r-rcpp >=0.12.5\n  run:\n    - r-base\n    - r-rcpp >=0.12.5\n\ntest:\n  commands:\n    - $R -e \"library('AhoCorasickTrie')\"           # [not win]\n    - \"\\\"%R%\\\" -e \\\"library('AhoCorasickTrie')\\\"\"  # [win]\n\nabout:\n  home: https://github.com/chambm/AhoCorasickTrie\n  license: Apache-2.0\n  summary: Aho-Corasick is an optimal algorithm for finding many keywords in a text. It can locate all matches in a text in O(N+M) time; i.e., the time needed scales linearly with the number of keywords (N) and the size of the text (M). Compare this to the naive approach which takes O(N*M) time to loop through each pattern\n    and scan for it in the text. This implementation builds the trie (the generic name of the data structure) and runs the search in a single function call. If you want to search multiple texts with the same trie, the function will take a list or vector of texts and return a list of matches to each text. By default, all\n    128 ASCII characters are allowed in both the keywords and the text. A more efficient trie is possible if the alphabet size can be reduced. For example, DNA sequences use at most 19 distinct characters and usually only 4; protein sequences use at most 26 distinct characters and usually only 20. UTF-8 (Unicode) matching\n    is not currently supported.\n  license_family: APACHE\n  license_file:\n    - LICENSE-2.0.txt\n\nextra:\n  recipe-maintainers:\n    - conda-forge/r\n",
  "req": {
    "__set__": true,
    "elements": [
      "c_compiler_stub",
      "c_stdlib_stub",
      "coreutils",
      "cxx_compiler_stub",
      "filesystem",
      "m2w64_c_compiler_stub",
      "m2w64_c_stdlib_stub",
      "m2w64_cxx_compiler_stub",
      "make",
      "r-base",
      "r-rcpp",
      "sed",
      "zip"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "coreutils",
        "cxx_compiler_stub",
        "filesystem",
        "m2w64_c_compiler_stub",
        "m2w64_c_stdlib_stub",
        "m2w64_cxx_compiler_stub",
        "make",
        "sed",
        "zip"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "r-base",
        "r-rcpp"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "r-base",
        "r-rcpp"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "coreutils",
        "cxx_compiler_stub",
        "filesystem",
        "m2w64_c_compiler_stub",
        "m2w64_c_stdlib_stub",
        "m2w64_cxx_compiler_stub",
        "make",
        "sed",
        "zip"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "r-base",
        "r-rcpp >=0.12.5"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "r-base",
        "r-rcpp >=0.12.5"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "url": [
    "https://cran.r-project.org/src/contrib/AhoCorasickTrie_0.1.3.tar.gz",
    "https://cran.r-project.org/src/contrib/Archive/AhoCorasickTrie/AhoCorasickTrie_0.1.3.tar.gz",
    "https://cran.r-project.org/src/contrib/AhoCorasickTrie_0.1.3.tar.gz",
    "https://cran.r-project.org/src/contrib/Archive/AhoCorasickTrie/AhoCorasickTrie_0.1.3.tar.gz",
    "https://cran.r-project.org/src/contrib/AhoCorasickTrie_0.1.3.tar.gz",
    "https://cran.r-project.org/src/contrib/Archive/AhoCorasickTrie/AhoCorasickTrie_0.1.3.tar.gz"
  ],
  "version": "0.1.3",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/r-ahocorasicktrie.json"
  },
  "win_64_meta_yaml": {
    "about": {
      "home": "https://github.com/chambm/AhoCorasickTrie",
      "license": "Apache-2.0",
      "license_family": "APACHE",
      "license_file": [
        "LICENSE-2.0.txt"
      ],
      "summary": "Aho-Corasick is an optimal algorithm for finding many keywords in a text. It can locate all matches in a text in O(N+M) time; i.e., the time needed scales linearly with the number of keywords (N) and the size of the text (M). Compare this to the naive approach which takes O(N*M) time to loop through each pattern and scan for it in the text. This implementation builds the trie (the generic name of the data structure) and runs the search in a single function call. If you want to search multiple texts with the same trie, the function will take a list or vector of texts and return a list of matches to each text. By default, all 128 ASCII characters are allowed in both the keywords and the text. A more efficient trie is possible if the alphabet size can be reduced. For example, DNA sequences use at most 19 distinct characters and usually only 4; protein sequences use at most 26 distinct characters and usually only 20. UTF-8 (Unicode) matching is not currently supported."
    },
    "build": {
      "number": "1",
      "rpaths": [
        "lib/R/lib/",
        "lib/"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "conda-forge/r"
      ]
    },
    "package": {
      "name": "r-ahocorasicktrie",
      "version": "0.1.3"
    },
    "requirements": {
      "build": [
        "m2w64_c_compiler_stub",
        "m2w64_c_stdlib_stub",
        "m2w64_cxx_compiler_stub",
        "filesystem",
        "make",
        "sed",
        "coreutils",
        "zip"
      ],
      "host": [
        "r-base",
        "r-rcpp >=0.12.5"
      ],
      "run": [
        "r-base",
        "r-rcpp >=0.12.5"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "fad2fc2ec469740ccaed90aa068fadff5b2f2422d667c851653deb834a267833",
      "url": [
        "https://cran.r-project.org/src/contrib/AhoCorasickTrie_0.1.3.tar.gz",
        "https://cran.r-project.org/src/contrib/Archive/AhoCorasickTrie/AhoCorasickTrie_0.1.3.tar.gz"
      ]
    },
    "test": {
      "commands": [
        "\"%R%\" -e \"library('AhoCorasickTrie')\""
      ]
    }
  },
  "win_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "coreutils",
        "filesystem",
        "m2w64_c_compiler_stub",
        "m2w64_c_stdlib_stub",
        "m2w64_cxx_compiler_stub",
        "make",
        "sed",
        "zip"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "r-base",
        "r-rcpp"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "r-base",
        "r-rcpp"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  }
}