{
  "archived": false,
  "branch": "main",
  "conda-forge.yml": {
    "build_platform": {
      "linux_aarch64": "linux_64",
      "osx_arm64": "osx_64"
    },
    "conda_build": {
      "pkg_format": "2"
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    },
    "test": "native_and_emulated"
  },
  "feedstock_name": "include-what-you-use",
  "hash_type": "sha256",
  "linux_64_meta_yaml": {
    "about": {
      "description": "\"Include what you use\" means this: for every symbol (type, function, variable, or macro)\nthat you use in foo.cc (or foo.cpp), either foo.cc or foo.h should include a .h file that\nexports the declaration of that symbol. (Similarly, for foo_test.cc, either foo_test.cc or foo.h\nshould do the including.) Obviously symbols defined in foo.cc itself are excluded from this requirement.\n",
      "dev_url": "https://github.com/include-what-you-use/include-what-you-use",
      "doc_url": "https://include-what-you-use.org",
      "home": "https://include-what-you-use.org",
      "license": "NCSA",
      "license_family": "OTHER",
      "license_file": "LICENSE.TXT",
      "summary": "A tool for use with clang to analyze #includes in C and C++ source files"
    },
    "build": {
      "number": "0"
    },
    "extra": {
      "recipe-maintainers": [
        "xmnlab",
        "xylar",
        "galexite"
      ]
    },
    "package": {
      "name": "include-what-you-use",
      "version": "0.25"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "cmake",
        "python",
        "ninja"
      ],
      "host": [
        "clangdev 21.*",
        "llvmdev 21.*",
        "llvm 21.*",
        "libclang-cpp 21.*",
        "lld 21.*"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "2e8381368ec0a6ecb770834bce00fc62efa09a2b2f9710ed569acbb823ead9cc",
      "url": "https://github.com/include-what-you-use/include-what-you-use/archive/refs/tags/0.25.tar.gz"
    },
    "test": {
      "commands": [
        "include-what-you-use --version",
        "include-what-you-use --help",
        "iwyu_tool.py --help",
        "fix_includes.py --help"
      ],
      "requires": [
        "python >=3.8"
      ]
    }
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "ninja",
        "python"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "clangdev",
        "libclang-cpp",
        "lld",
        "llvm",
        "llvmdev"
      ]
    },
    "run": {
      "__set__": true,
      "elements": []
    },
    "test": {
      "__set__": true,
      "elements": [
        "python"
      ]
    }
  },
  "linux_aarch64_meta_yaml": {
    "about": {
      "description": "\"Include what you use\" means this: for every symbol (type, function, variable, or macro)\nthat you use in foo.cc (or foo.cpp), either foo.cc or foo.h should include a .h file that\nexports the declaration of that symbol. (Similarly, for foo_test.cc, either foo_test.cc or foo.h\nshould do the including.) Obviously symbols defined in foo.cc itself are excluded from this requirement.\n",
      "dev_url": "https://github.com/include-what-you-use/include-what-you-use",
      "doc_url": "https://include-what-you-use.org",
      "home": "https://include-what-you-use.org",
      "license": "NCSA",
      "license_family": "OTHER",
      "license_file": "LICENSE.TXT",
      "summary": "A tool for use with clang to analyze #includes in C and C++ source files"
    },
    "build": {
      "number": "0"
    },
    "extra": {
      "recipe-maintainers": [
        "xmnlab",
        "xylar",
        "galexite"
      ]
    },
    "package": {
      "name": "include-what-you-use",
      "version": "0.25"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "cmake",
        "python",
        "ninja"
      ],
      "host": [
        "clangdev 21.*",
        "llvmdev 21.*",
        "llvm 21.*",
        "libclang-cpp 21.*",
        "lld 21.*"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "2e8381368ec0a6ecb770834bce00fc62efa09a2b2f9710ed569acbb823ead9cc",
      "url": "https://github.com/include-what-you-use/include-what-you-use/archive/refs/tags/0.25.tar.gz"
    },
    "test": {
      "commands": [
        "include-what-you-use --version",
        "include-what-you-use --help",
        "iwyu_tool.py --help",
        "fix_includes.py --help"
      ],
      "requires": [
        "python >=3.8"
      ]
    }
  },
  "linux_aarch64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "ninja",
        "python"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "clangdev",
        "libclang-cpp",
        "lld",
        "llvm",
        "llvmdev"
      ]
    },
    "run": {
      "__set__": true,
      "elements": []
    },
    "test": {
      "__set__": true,
      "elements": [
        "python"
      ]
    }
  },
  "meta_yaml": {
    "about": {
      "description": "\"Include what you use\" means this: for every symbol (type, function, variable, or macro)\nthat you use in foo.cc (or foo.cpp), either foo.cc or foo.h should include a .h file that\nexports the declaration of that symbol. (Similarly, for foo_test.cc, either foo_test.cc or foo.h\nshould do the including.) Obviously symbols defined in foo.cc itself are excluded from this requirement.\n",
      "dev_url": "https://github.com/include-what-you-use/include-what-you-use",
      "doc_url": "https://include-what-you-use.org",
      "home": "https://include-what-you-use.org",
      "license": "NCSA",
      "license_family": "OTHER",
      "license_file": "LICENSE.TXT",
      "summary": "A tool for use with clang to analyze #includes in C and C++ source files"
    },
    "build": {
      "number": "0"
    },
    "extra": {
      "recipe-maintainers": [
        "xmnlab",
        "xylar",
        "galexite"
      ]
    },
    "package": {
      "name": "include-what-you-use",
      "version": "0.25"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "cmake",
        "python",
        "ninja",
        "zlib"
      ],
      "host": [
        "clangdev 21.*",
        "llvmdev 21.*",
        "llvm 21.*",
        "libclang-cpp 21.*",
        "lld 21.*"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "2e8381368ec0a6ecb770834bce00fc62efa09a2b2f9710ed569acbb823ead9cc",
      "url": "https://github.com/include-what-you-use/include-what-you-use/archive/refs/tags/0.25.tar.gz"
    },
    "test": {
      "commands": [
        "include-what-you-use --version",
        "include-what-you-use --help",
        "iwyu_tool.py --help",
        "fix_includes.py --help"
      ],
      "requires": [
        "python >=3.8"
      ]
    }
  },
  "name": "include-what-you-use",
  "osx_64_meta_yaml": {
    "about": {
      "description": "\"Include what you use\" means this: for every symbol (type, function, variable, or macro)\nthat you use in foo.cc (or foo.cpp), either foo.cc or foo.h should include a .h file that\nexports the declaration of that symbol. (Similarly, for foo_test.cc, either foo_test.cc or foo.h\nshould do the including.) Obviously symbols defined in foo.cc itself are excluded from this requirement.\n",
      "dev_url": "https://github.com/include-what-you-use/include-what-you-use",
      "doc_url": "https://include-what-you-use.org",
      "home": "https://include-what-you-use.org",
      "license": "NCSA",
      "license_family": "OTHER",
      "license_file": "LICENSE.TXT",
      "summary": "A tool for use with clang to analyze #includes in C and C++ source files"
    },
    "build": {
      "number": "0"
    },
    "extra": {
      "recipe-maintainers": [
        "xmnlab",
        "xylar",
        "galexite"
      ]
    },
    "package": {
      "name": "include-what-you-use",
      "version": "0.25"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "cmake",
        "python",
        "ninja"
      ],
      "host": [
        "clangdev 21.*",
        "llvmdev 21.*",
        "llvm 21.*",
        "libclang-cpp 21.*",
        "lld 21.*"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "2e8381368ec0a6ecb770834bce00fc62efa09a2b2f9710ed569acbb823ead9cc",
      "url": "https://github.com/include-what-you-use/include-what-you-use/archive/refs/tags/0.25.tar.gz"
    },
    "test": {
      "commands": [
        "include-what-you-use --version",
        "include-what-you-use --help",
        "iwyu_tool.py --help",
        "fix_includes.py --help"
      ],
      "requires": [
        "python >=3.8"
      ]
    }
  },
  "osx_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "ninja",
        "python"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "clangdev",
        "libclang-cpp",
        "lld",
        "llvm",
        "llvmdev"
      ]
    },
    "run": {
      "__set__": true,
      "elements": []
    },
    "test": {
      "__set__": true,
      "elements": [
        "python"
      ]
    }
  },
  "osx_arm64_meta_yaml": {
    "about": {
      "description": "\"Include what you use\" means this: for every symbol (type, function, variable, or macro)\nthat you use in foo.cc (or foo.cpp), either foo.cc or foo.h should include a .h file that\nexports the declaration of that symbol. (Similarly, for foo_test.cc, either foo_test.cc or foo.h\nshould do the including.) Obviously symbols defined in foo.cc itself are excluded from this requirement.\n",
      "dev_url": "https://github.com/include-what-you-use/include-what-you-use",
      "doc_url": "https://include-what-you-use.org",
      "home": "https://include-what-you-use.org",
      "license": "NCSA",
      "license_family": "OTHER",
      "license_file": "LICENSE.TXT",
      "summary": "A tool for use with clang to analyze #includes in C and C++ source files"
    },
    "build": {
      "number": "0"
    },
    "extra": {
      "recipe-maintainers": [
        "xmnlab",
        "xylar",
        "galexite"
      ]
    },
    "package": {
      "name": "include-what-you-use",
      "version": "0.25"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "cmake",
        "python",
        "ninja"
      ],
      "host": [
        "clangdev 21.*",
        "llvmdev 21.*",
        "llvm 21.*",
        "libclang-cpp 21.*",
        "lld 21.*"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "2e8381368ec0a6ecb770834bce00fc62efa09a2b2f9710ed569acbb823ead9cc",
      "url": "https://github.com/include-what-you-use/include-what-you-use/archive/refs/tags/0.25.tar.gz"
    },
    "test": {
      "commands": [
        "include-what-you-use --version",
        "include-what-you-use --help",
        "iwyu_tool.py --help",
        "fix_includes.py --help"
      ],
      "requires": [
        "python >=3.8"
      ]
    }
  },
  "osx_arm64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "ninja",
        "python"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "clangdev",
        "libclang-cpp",
        "lld",
        "llvm",
        "llvmdev"
      ]
    },
    "run": {
      "__set__": true,
      "elements": []
    },
    "test": {
      "__set__": true,
      "elements": [
        "python"
      ]
    }
  },
  "outputs_names": {
    "__set__": true,
    "elements": [
      "include-what-you-use"
    ]
  },
  "parsing_error": false,
  "platforms": [
    "linux_64",
    "linux_aarch64",
    "osx_64",
    "osx_arm64",
    "win_64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/include-what-you-use.json"
  },
  "raw_meta_yaml": "{% set name = \"include-what-you-use\" %}\n{% set version = \"0.25\" %}\n{% set llvm_version = \"21.*\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://github.com/{{ name }}/{{ name }}/archive/refs/tags/{{ version }}.tar.gz\n  sha256: 2e8381368ec0a6ecb770834bce00fc62efa09a2b2f9710ed569acbb823ead9cc\n\nbuild:\n  number: 0\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ stdlib(\"c\") }}\n    - {{ compiler('cxx') }}\n    - cmake\n    - python\n    - ninja\n    - zlib  # [win]\n  host:\n    - clangdev {{ llvm_version }}\n    - llvmdev {{ llvm_version }}\n    - llvm {{ llvm_version }}\n    - libclang-cpp {{ llvm_version }}\n    - lld {{ llvm_version }}\ntest:\n  requires:\n    - python >=3.8\n  commands:\n    - {{ name }} --version\n    - {{ name }} --help\n    - iwyu_tool.py --help\n    - fix_includes.py --help\n\n\nabout:\n  home: https://include-what-you-use.org\n  summary: 'A tool for use with clang to analyze #includes in C and C++ source files'\n  description: |\n    \"Include what you use\" means this: for every symbol (type, function, variable, or macro)\n    that you use in foo.cc (or foo.cpp), either foo.cc or foo.h should include a .h file that\n    exports the declaration of that symbol. (Similarly, for foo_test.cc, either foo_test.cc or foo.h\n    should do the including.) Obviously symbols defined in foo.cc itself are excluded from this requirement.\n  license: NCSA  # University of Illinois/NCSA Open Source\n  license_family: OTHER  # NCSA\n  license_file: LICENSE.TXT\n  doc_url: https://include-what-you-use.org\n  dev_url: https://github.com/include-what-you-use/include-what-you-use\n\nextra:\n  recipe-maintainers:\n    - xmnlab\n    - xylar\n    - galexite\n",
  "req": {
    "__set__": true,
    "elements": [
      "c_compiler_stub",
      "c_stdlib_stub",
      "clangdev",
      "cmake",
      "cxx_compiler_stub",
      "libclang-cpp",
      "lld",
      "llvm",
      "llvmdev",
      "ninja",
      "python",
      "zlib"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "ninja",
        "python",
        "zlib"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "clangdev",
        "cxx_compiler_stub",
        "libclang-cpp",
        "lld",
        "llvm",
        "llvmdev"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "python"
      ]
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "ninja",
        "python",
        "zlib"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "clangdev 21.*",
        "libclang-cpp 21.*",
        "lld 21.*",
        "llvm 21.*",
        "llvmdev 21.*"
      ]
    },
    "run": {
      "__set__": true,
      "elements": []
    },
    "test": {
      "__set__": true,
      "elements": [
        "python >=3.8"
      ]
    }
  },
  "url": "https://github.com/include-what-you-use/include-what-you-use/archive/refs/tags/0.25.tar.gz",
  "version": "0.25",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/include-what-you-use.json"
  },
  "win_64_meta_yaml": {
    "about": {
      "description": "\"Include what you use\" means this: for every symbol (type, function, variable, or macro)\nthat you use in foo.cc (or foo.cpp), either foo.cc or foo.h should include a .h file that\nexports the declaration of that symbol. (Similarly, for foo_test.cc, either foo_test.cc or foo.h\nshould do the including.) Obviously symbols defined in foo.cc itself are excluded from this requirement.\n",
      "dev_url": "https://github.com/include-what-you-use/include-what-you-use",
      "doc_url": "https://include-what-you-use.org",
      "home": "https://include-what-you-use.org",
      "license": "NCSA",
      "license_family": "OTHER",
      "license_file": "LICENSE.TXT",
      "summary": "A tool for use with clang to analyze #includes in C and C++ source files"
    },
    "build": {
      "number": "0"
    },
    "extra": {
      "recipe-maintainers": [
        "xmnlab",
        "xylar",
        "galexite"
      ]
    },
    "package": {
      "name": "include-what-you-use",
      "version": "0.25"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "cmake",
        "python",
        "ninja",
        "zlib"
      ],
      "host": [
        "clangdev 21.*",
        "llvmdev 21.*",
        "llvm 21.*",
        "libclang-cpp 21.*",
        "lld 21.*"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "2e8381368ec0a6ecb770834bce00fc62efa09a2b2f9710ed569acbb823ead9cc",
      "url": "https://github.com/include-what-you-use/include-what-you-use/archive/refs/tags/0.25.tar.gz"
    },
    "test": {
      "commands": [
        "include-what-you-use --version",
        "include-what-you-use --help",
        "iwyu_tool.py --help",
        "fix_includes.py --help"
      ],
      "requires": [
        "python >=3.8"
      ]
    }
  },
  "win_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "ninja",
        "python",
        "zlib"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "clangdev",
        "libclang-cpp",
        "lld",
        "llvm",
        "llvmdev"
      ]
    },
    "run": {
      "__set__": true,
      "elements": []
    },
    "test": {
      "__set__": true,
      "elements": [
        "python"
      ]
    }
  }
}