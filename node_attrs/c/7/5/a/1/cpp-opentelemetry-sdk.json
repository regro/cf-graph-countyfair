{
  "archived": false,
  "branch": "main",
  "conda-forge.yml": {
    "build_platform": {
      "linux_aarch64": "linux_64",
      "linux_ppc64le": "linux_64",
      "osx_arm64": "osx_64"
    },
    "conda_build": {
      "pkg_format": "2"
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    },
    "provider": {
      "linux_aarch64": "default",
      "linux_ppc64le": "default"
    },
    "test": "native_and_emulated"
  },
  "feedstock_hash": "65df2a5f44a25469c93327a5cfe43913ea3f4b87",
  "feedstock_hash_ts": 1751782205,
  "feedstock_name": "cpp-opentelemetry-sdk",
  "hash_type": "sha256",
  "linux_64_meta_yaml": {
    "about": {
      "description": "OpenTelemetry is a collection of tools, APIs, and SDKs. Use it to\ninstrument, generate, collect, and export telemetry data (metrics,\nlogs, and traces) to help you analyze your softwareâ€™s performance\nand behavior.\n",
      "dev_url": "https://github.com/open-telemetry/opentelemetry-cpp",
      "doc_url": "https://opentelemetry.io/docs/instrumentation/cpp/",
      "home": "https://github.com/open-telemetry/opentelemetry-cpp",
      "license": "Apache-2.0",
      "license_family": "APACHE",
      "license_file": "LICENSE",
      "summary": "The OpenTelemetry C++ Client"
    },
    "build": {
      "number": "1"
    },
    "extra": {
      "feedstock-name": "cpp-opentelemetry-sdk",
      "recipe-maintainers": [
        "lidavidm",
        "h-vetinari"
      ]
    },
    "outputs": [
      {
        "name": "libopentelemetry-cpp-headers",
        "requirements": {
          "build": [
            "cmake"
          ]
        },
        "script": "install.sh",
        "test": {
          "commands": [
            "test -d $PREFIX/include/opentelemetry",
            "test ! -f $PREFIX/lib/libopentelemetry_common.a",
            "test ! -f $PREFIX/lib/libopentelemetry_common.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_in_memory.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_in_memory.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_metrics.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_metrics.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_span.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_span.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_client.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_client.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_log.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_log.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_metrics.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_metrics.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_client.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_client.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_metric.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_metric.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_prometheus.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_prometheus.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_zipkin_trace.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_zipkin_trace.so",
            "test ! -f $PREFIX/lib/libopentelemetry_http_client_curl.a",
            "test ! -f $PREFIX/lib/libopentelemetry_http_client_curl.so",
            "test ! -f $PREFIX/lib/libopentelemetry_metrics.a",
            "test ! -f $PREFIX/lib/libopentelemetry_metrics.so",
            "test ! -f $PREFIX/lib/libopentelemetry_otlp_recordable.a",
            "test ! -f $PREFIX/lib/libopentelemetry_otlp_recordable.so",
            "test ! -f $PREFIX/lib/libopentelemetry_resources.a",
            "test ! -f $PREFIX/lib/libopentelemetry_resources.so",
            "test ! -f $PREFIX/lib/libopentelemetry_trace.a",
            "test ! -f $PREFIX/lib/libopentelemetry_trace.so",
            "test ! -f $PREFIX/lib/libopentelemetry_version.a",
            "test ! -f $PREFIX/lib/libopentelemetry_version.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_logs.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_logs.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_log.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_log.so",
            "test ! -f $PREFIX/lib/libopentelemetry_logs.a",
            "test ! -f $PREFIX/lib/libopentelemetry_logs.so",
            "test ! -f $PREFIX/lib/libopentelemetry_proto.a",
            "test ! -f $PREFIX/lib/libopentelemetry_proto.so",
            "test ! -d $PREFIX/lib/cmake/opentelemetry-cpp"
          ]
        }
      },
      {
        "name": "cpp-opentelemetry-api",
        "requirements": {
          "host": [
            "libopentelemetry-cpp-headers"
          ],
          "run": [
            "libopentelemetry-cpp-headers"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other output\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "libopentelemetry-cpp"
          ]
        },
        "name": "libopentelemetry-cpp",
        "requirements": {
          "build": [
            "cmake"
          ],
          "host": [
            "libopentelemetry-cpp-headers",
            "libabseil",
            "libcurl",
            "libgrpc",
            "libprotobuf",
            "nlohmann_json >=3.10.5",
            "zlib",
            "prometheus-cpp"
          ],
          "run": [
            "libopentelemetry-cpp-headers",
            "nlohmann_json",
            "prometheus-cpp"
          ],
          "run_constrained": [
            "cpp-opentelemetry-sdk =1.21.0"
          ]
        },
        "script": "install.sh",
        "test": {
          "commands": [
            "test -f $PREFIX/include/opentelemetry/exporters/ostream/common_utils.h || (echo \"exporters/ostream/common_utils.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/exporters/otlp/otlp_http.h || (echo \"exporters/otlp/otlp_http.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/exporters/prometheus/collector.h || (echo \"exporters/prometheus/collector.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/ext/http/common/url_parser.h || (echo \"ext/http/common/url_parser.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/proto/common/v1/common.pb.h || (echo \"proto/common/v1/common.pb.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/common/atomic_shared_ptr.h || (echo \"sdk/common/atomic_shared_ptr.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/metrics/data/point_data.h || (echo \"sdk/metrics/data/point_data.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/metrics/meter.h || (echo \"sdk/metrics/meter.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/resource/resource.h || (echo \"sdk/resource/resource.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/trace/sampler.h || (echo \"sdk/trace/sampler.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/version/version.h || (echo \"sdk/version/version.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/logs/logger.h || (echo \"sdk/logs/logger.h not found\" && exit 1)",
            "test -f $PREFIX/lib/libopentelemetry_common.so",
            "test ! -f $PREFIX/lib/libopentelemetry_common.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_in_memory.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_in_memory.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_ostream_metrics.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_metrics.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_ostream_span.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_span.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_client.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_client.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_log.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_log.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_metrics.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_metrics.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_http.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_client.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_client.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_metric.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_metric.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_prometheus.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_prometheus.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_zipkin_trace.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_zipkin_trace.a",
            "test -f $PREFIX/lib/libopentelemetry_http_client_curl.so",
            "test ! -f $PREFIX/lib/libopentelemetry_http_client_curl.a",
            "test -f $PREFIX/lib/libopentelemetry_metrics.so",
            "test ! -f $PREFIX/lib/libopentelemetry_metrics.a",
            "test -f $PREFIX/lib/libopentelemetry_otlp_recordable.so",
            "test ! -f $PREFIX/lib/libopentelemetry_otlp_recordable.a",
            "test -f $PREFIX/lib/libopentelemetry_resources.so",
            "test ! -f $PREFIX/lib/libopentelemetry_resources.a",
            "test -f $PREFIX/lib/libopentelemetry_trace.so",
            "test ! -f $PREFIX/lib/libopentelemetry_trace.a",
            "test -f $PREFIX/lib/libopentelemetry_version.so",
            "test ! -f $PREFIX/lib/libopentelemetry_version.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_ostream_logs.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_logs.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_log.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_log.a",
            "test -f $PREFIX/lib/libopentelemetry_logs.so",
            "test ! -f $PREFIX/lib/libopentelemetry_logs.a",
            "test -f $PREFIX/lib/libopentelemetry_proto.so",
            "test ! -f $PREFIX/lib/libopentelemetry_proto.a",
            "test -f ${PREFIX}/lib/cmake/opentelemetry-cpp/opentelemetry-cpp-config.cmake"
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "libopentelemetry-cpp"
          ]
        },
        "name": "cpp-opentelemetry-sdk",
        "requirements": {
          "host": [
            "libabseil",
            "libcurl",
            "libgrpc",
            "libprotobuf",
            "nlohmann_json",
            "zlib",
            "prometheus-cpp",
            "libopentelemetry-cpp"
          ],
          "run": [
            "libopentelemetry-cpp"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other output\""
          ]
        }
      }
    ],
    "package": {
      "name": "opentelemetry-sdk",
      "version": "1.21.0"
    },
    "requirements": {
      "build": [
        "cxx_compiler_stub",
        "c_stdlib_stub",
        "cmake >=3.1",
        "ninja",
        "proto-opentelemetry-proto =1.6.0"
      ],
      "host": [
        "libabseil",
        "libcurl",
        "libgrpc",
        "libprotobuf",
        "nlohmann_json >=3.10.5",
        "zlib",
        "prometheus-cpp"
      ]
    },
    "schema_version": 0,
    "source": [
      {
        "patches": [
          "patches/0002-add-missing-shared-library-dependencies.patch",
          "patches/0003-add-necessary-abseil-linkage.patch"
        ],
        "sha256": "98e5546f577a11b52a57faed1f4cc60d8c1daa44760eba393f43eab5a8ec46a2",
        "url": "https://github.com/open-telemetry/opentelemetry-cpp/archive/refs/tags/v1.21.0.tar.gz"
      }
    ]
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "ninja",
        "proto-opentelemetry-proto"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "libabseil",
        "libcurl",
        "libgrpc",
        "libopentelemetry-cpp",
        "libopentelemetry-cpp-headers",
        "libprotobuf",
        "nlohmann_json",
        "prometheus-cpp",
        "zlib"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "libopentelemetry-cpp",
        "libopentelemetry-cpp-headers",
        "nlohmann_json",
        "prometheus-cpp"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "linux_aarch64_meta_yaml": {
    "about": {
      "description": "OpenTelemetry is a collection of tools, APIs, and SDKs. Use it to\ninstrument, generate, collect, and export telemetry data (metrics,\nlogs, and traces) to help you analyze your softwareâ€™s performance\nand behavior.\n",
      "dev_url": "https://github.com/open-telemetry/opentelemetry-cpp",
      "doc_url": "https://opentelemetry.io/docs/instrumentation/cpp/",
      "home": "https://github.com/open-telemetry/opentelemetry-cpp",
      "license": "Apache-2.0",
      "license_family": "APACHE",
      "license_file": "LICENSE",
      "summary": "The OpenTelemetry C++ Client"
    },
    "build": {
      "number": "1"
    },
    "extra": {
      "feedstock-name": "cpp-opentelemetry-sdk",
      "recipe-maintainers": [
        "lidavidm",
        "h-vetinari"
      ]
    },
    "outputs": [
      {
        "name": "libopentelemetry-cpp-headers",
        "requirements": {
          "build": [
            "cmake"
          ]
        },
        "script": "install.sh",
        "test": {
          "commands": [
            "test -d $PREFIX/include/opentelemetry",
            "test ! -f $PREFIX/lib/libopentelemetry_common.a",
            "test ! -f $PREFIX/lib/libopentelemetry_common.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_in_memory.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_in_memory.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_metrics.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_metrics.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_span.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_span.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_client.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_client.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_log.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_log.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_metrics.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_metrics.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_client.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_client.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_metric.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_metric.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_prometheus.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_prometheus.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_zipkin_trace.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_zipkin_trace.so",
            "test ! -f $PREFIX/lib/libopentelemetry_http_client_curl.a",
            "test ! -f $PREFIX/lib/libopentelemetry_http_client_curl.so",
            "test ! -f $PREFIX/lib/libopentelemetry_metrics.a",
            "test ! -f $PREFIX/lib/libopentelemetry_metrics.so",
            "test ! -f $PREFIX/lib/libopentelemetry_otlp_recordable.a",
            "test ! -f $PREFIX/lib/libopentelemetry_otlp_recordable.so",
            "test ! -f $PREFIX/lib/libopentelemetry_resources.a",
            "test ! -f $PREFIX/lib/libopentelemetry_resources.so",
            "test ! -f $PREFIX/lib/libopentelemetry_trace.a",
            "test ! -f $PREFIX/lib/libopentelemetry_trace.so",
            "test ! -f $PREFIX/lib/libopentelemetry_version.a",
            "test ! -f $PREFIX/lib/libopentelemetry_version.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_logs.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_logs.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_log.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_log.so",
            "test ! -f $PREFIX/lib/libopentelemetry_logs.a",
            "test ! -f $PREFIX/lib/libopentelemetry_logs.so",
            "test ! -f $PREFIX/lib/libopentelemetry_proto.a",
            "test ! -f $PREFIX/lib/libopentelemetry_proto.so",
            "test ! -d $PREFIX/lib/cmake/opentelemetry-cpp"
          ]
        }
      },
      {
        "name": "cpp-opentelemetry-api",
        "requirements": {
          "host": [
            "libopentelemetry-cpp-headers"
          ],
          "run": [
            "libopentelemetry-cpp-headers"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other output\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "libopentelemetry-cpp"
          ]
        },
        "name": "libopentelemetry-cpp",
        "requirements": {
          "build": [
            "cmake"
          ],
          "host": [
            "libopentelemetry-cpp-headers",
            "libabseil",
            "libcurl",
            "libgrpc",
            "libprotobuf",
            "nlohmann_json >=3.10.5",
            "zlib",
            "prometheus-cpp"
          ],
          "run": [
            "libopentelemetry-cpp-headers",
            "nlohmann_json",
            "prometheus-cpp"
          ],
          "run_constrained": [
            "cpp-opentelemetry-sdk =1.21.0"
          ]
        },
        "script": "install.sh",
        "test": {
          "commands": [
            "test -f $PREFIX/include/opentelemetry/exporters/ostream/common_utils.h || (echo \"exporters/ostream/common_utils.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/exporters/otlp/otlp_http.h || (echo \"exporters/otlp/otlp_http.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/exporters/prometheus/collector.h || (echo \"exporters/prometheus/collector.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/ext/http/common/url_parser.h || (echo \"ext/http/common/url_parser.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/proto/common/v1/common.pb.h || (echo \"proto/common/v1/common.pb.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/common/atomic_shared_ptr.h || (echo \"sdk/common/atomic_shared_ptr.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/metrics/data/point_data.h || (echo \"sdk/metrics/data/point_data.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/metrics/meter.h || (echo \"sdk/metrics/meter.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/resource/resource.h || (echo \"sdk/resource/resource.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/trace/sampler.h || (echo \"sdk/trace/sampler.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/version/version.h || (echo \"sdk/version/version.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/logs/logger.h || (echo \"sdk/logs/logger.h not found\" && exit 1)",
            "test -f $PREFIX/lib/libopentelemetry_common.so",
            "test ! -f $PREFIX/lib/libopentelemetry_common.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_in_memory.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_in_memory.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_ostream_metrics.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_metrics.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_ostream_span.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_span.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_client.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_client.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_log.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_log.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_metrics.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_metrics.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_http.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_client.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_client.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_metric.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_metric.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_prometheus.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_prometheus.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_zipkin_trace.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_zipkin_trace.a",
            "test -f $PREFIX/lib/libopentelemetry_http_client_curl.so",
            "test ! -f $PREFIX/lib/libopentelemetry_http_client_curl.a",
            "test -f $PREFIX/lib/libopentelemetry_metrics.so",
            "test ! -f $PREFIX/lib/libopentelemetry_metrics.a",
            "test -f $PREFIX/lib/libopentelemetry_otlp_recordable.so",
            "test ! -f $PREFIX/lib/libopentelemetry_otlp_recordable.a",
            "test -f $PREFIX/lib/libopentelemetry_resources.so",
            "test ! -f $PREFIX/lib/libopentelemetry_resources.a",
            "test -f $PREFIX/lib/libopentelemetry_trace.so",
            "test ! -f $PREFIX/lib/libopentelemetry_trace.a",
            "test -f $PREFIX/lib/libopentelemetry_version.so",
            "test ! -f $PREFIX/lib/libopentelemetry_version.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_ostream_logs.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_logs.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_log.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_log.a",
            "test -f $PREFIX/lib/libopentelemetry_logs.so",
            "test ! -f $PREFIX/lib/libopentelemetry_logs.a",
            "test -f $PREFIX/lib/libopentelemetry_proto.so",
            "test ! -f $PREFIX/lib/libopentelemetry_proto.a",
            "test -f ${PREFIX}/lib/cmake/opentelemetry-cpp/opentelemetry-cpp-config.cmake"
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "libopentelemetry-cpp"
          ]
        },
        "name": "cpp-opentelemetry-sdk",
        "requirements": {
          "host": [
            "libabseil",
            "libcurl",
            "libgrpc",
            "libprotobuf",
            "nlohmann_json",
            "zlib",
            "prometheus-cpp",
            "libopentelemetry-cpp"
          ],
          "run": [
            "libopentelemetry-cpp"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other output\""
          ]
        }
      }
    ],
    "package": {
      "name": "opentelemetry-sdk",
      "version": "1.21.0"
    },
    "requirements": {
      "build": [
        "cxx_compiler_stub",
        "c_stdlib_stub",
        "cmake >=3.1",
        "ninja",
        "proto-opentelemetry-proto =1.6.0"
      ],
      "host": [
        "libabseil",
        "libcurl",
        "libgrpc",
        "libprotobuf",
        "nlohmann_json >=3.10.5",
        "zlib",
        "prometheus-cpp"
      ]
    },
    "schema_version": 0,
    "source": [
      {
        "patches": [
          "patches/0002-add-missing-shared-library-dependencies.patch",
          "patches/0003-add-necessary-abseil-linkage.patch"
        ],
        "sha256": "98e5546f577a11b52a57faed1f4cc60d8c1daa44760eba393f43eab5a8ec46a2",
        "url": "https://github.com/open-telemetry/opentelemetry-cpp/archive/refs/tags/v1.21.0.tar.gz"
      }
    ]
  },
  "linux_aarch64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "ninja",
        "proto-opentelemetry-proto"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "libabseil",
        "libcurl",
        "libgrpc",
        "libopentelemetry-cpp",
        "libopentelemetry-cpp-headers",
        "libprotobuf",
        "nlohmann_json",
        "prometheus-cpp",
        "zlib"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "libopentelemetry-cpp",
        "libopentelemetry-cpp-headers",
        "nlohmann_json",
        "prometheus-cpp"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "linux_ppc64le_meta_yaml": {
    "about": {
      "description": "OpenTelemetry is a collection of tools, APIs, and SDKs. Use it to\ninstrument, generate, collect, and export telemetry data (metrics,\nlogs, and traces) to help you analyze your softwareâ€™s performance\nand behavior.\n",
      "dev_url": "https://github.com/open-telemetry/opentelemetry-cpp",
      "doc_url": "https://opentelemetry.io/docs/instrumentation/cpp/",
      "home": "https://github.com/open-telemetry/opentelemetry-cpp",
      "license": "Apache-2.0",
      "license_family": "APACHE",
      "license_file": "LICENSE",
      "summary": "The OpenTelemetry C++ Client"
    },
    "build": {
      "number": "1"
    },
    "extra": {
      "feedstock-name": "cpp-opentelemetry-sdk",
      "recipe-maintainers": [
        "lidavidm",
        "h-vetinari"
      ]
    },
    "outputs": [
      {
        "name": "libopentelemetry-cpp-headers",
        "requirements": {
          "build": [
            "cmake"
          ]
        },
        "script": "install.sh",
        "test": {
          "commands": [
            "test -d $PREFIX/include/opentelemetry",
            "test ! -f $PREFIX/lib/libopentelemetry_common.a",
            "test ! -f $PREFIX/lib/libopentelemetry_common.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_in_memory.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_in_memory.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_metrics.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_metrics.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_span.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_span.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_client.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_client.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_log.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_log.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_metrics.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_metrics.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_client.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_client.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_metric.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_metric.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_prometheus.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_prometheus.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_zipkin_trace.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_zipkin_trace.so",
            "test ! -f $PREFIX/lib/libopentelemetry_http_client_curl.a",
            "test ! -f $PREFIX/lib/libopentelemetry_http_client_curl.so",
            "test ! -f $PREFIX/lib/libopentelemetry_metrics.a",
            "test ! -f $PREFIX/lib/libopentelemetry_metrics.so",
            "test ! -f $PREFIX/lib/libopentelemetry_otlp_recordable.a",
            "test ! -f $PREFIX/lib/libopentelemetry_otlp_recordable.so",
            "test ! -f $PREFIX/lib/libopentelemetry_resources.a",
            "test ! -f $PREFIX/lib/libopentelemetry_resources.so",
            "test ! -f $PREFIX/lib/libopentelemetry_trace.a",
            "test ! -f $PREFIX/lib/libopentelemetry_trace.so",
            "test ! -f $PREFIX/lib/libopentelemetry_version.a",
            "test ! -f $PREFIX/lib/libopentelemetry_version.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_logs.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_logs.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_log.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_log.so",
            "test ! -f $PREFIX/lib/libopentelemetry_logs.a",
            "test ! -f $PREFIX/lib/libopentelemetry_logs.so",
            "test ! -f $PREFIX/lib/libopentelemetry_proto.a",
            "test ! -f $PREFIX/lib/libopentelemetry_proto.so",
            "test ! -d $PREFIX/lib/cmake/opentelemetry-cpp"
          ]
        }
      },
      {
        "name": "cpp-opentelemetry-api",
        "requirements": {
          "host": [
            "libopentelemetry-cpp-headers"
          ],
          "run": [
            "libopentelemetry-cpp-headers"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other output\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "libopentelemetry-cpp"
          ]
        },
        "name": "libopentelemetry-cpp",
        "requirements": {
          "build": [
            "cmake"
          ],
          "host": [
            "libopentelemetry-cpp-headers",
            "libabseil",
            "libcurl",
            "libgrpc",
            "libprotobuf",
            "nlohmann_json >=3.10.5",
            "zlib",
            "prometheus-cpp"
          ],
          "run": [
            "libopentelemetry-cpp-headers",
            "nlohmann_json",
            "prometheus-cpp"
          ],
          "run_constrained": [
            "cpp-opentelemetry-sdk =1.21.0"
          ]
        },
        "script": "install.sh",
        "test": {
          "commands": [
            "test -f $PREFIX/include/opentelemetry/exporters/ostream/common_utils.h || (echo \"exporters/ostream/common_utils.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/exporters/otlp/otlp_http.h || (echo \"exporters/otlp/otlp_http.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/exporters/prometheus/collector.h || (echo \"exporters/prometheus/collector.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/ext/http/common/url_parser.h || (echo \"ext/http/common/url_parser.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/proto/common/v1/common.pb.h || (echo \"proto/common/v1/common.pb.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/common/atomic_shared_ptr.h || (echo \"sdk/common/atomic_shared_ptr.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/metrics/data/point_data.h || (echo \"sdk/metrics/data/point_data.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/metrics/meter.h || (echo \"sdk/metrics/meter.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/resource/resource.h || (echo \"sdk/resource/resource.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/trace/sampler.h || (echo \"sdk/trace/sampler.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/version/version.h || (echo \"sdk/version/version.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/logs/logger.h || (echo \"sdk/logs/logger.h not found\" && exit 1)",
            "test -f $PREFIX/lib/libopentelemetry_common.so",
            "test ! -f $PREFIX/lib/libopentelemetry_common.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_in_memory.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_in_memory.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_ostream_metrics.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_metrics.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_ostream_span.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_span.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_client.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_client.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_log.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_log.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_metrics.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_metrics.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_http.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_client.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_client.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_metric.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_metric.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_prometheus.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_prometheus.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_zipkin_trace.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_zipkin_trace.a",
            "test -f $PREFIX/lib/libopentelemetry_http_client_curl.so",
            "test ! -f $PREFIX/lib/libopentelemetry_http_client_curl.a",
            "test -f $PREFIX/lib/libopentelemetry_metrics.so",
            "test ! -f $PREFIX/lib/libopentelemetry_metrics.a",
            "test -f $PREFIX/lib/libopentelemetry_otlp_recordable.so",
            "test ! -f $PREFIX/lib/libopentelemetry_otlp_recordable.a",
            "test -f $PREFIX/lib/libopentelemetry_resources.so",
            "test ! -f $PREFIX/lib/libopentelemetry_resources.a",
            "test -f $PREFIX/lib/libopentelemetry_trace.so",
            "test ! -f $PREFIX/lib/libopentelemetry_trace.a",
            "test -f $PREFIX/lib/libopentelemetry_version.so",
            "test ! -f $PREFIX/lib/libopentelemetry_version.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_ostream_logs.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_logs.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_log.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_log.a",
            "test -f $PREFIX/lib/libopentelemetry_logs.so",
            "test ! -f $PREFIX/lib/libopentelemetry_logs.a",
            "test -f $PREFIX/lib/libopentelemetry_proto.so",
            "test ! -f $PREFIX/lib/libopentelemetry_proto.a",
            "test -f ${PREFIX}/lib/cmake/opentelemetry-cpp/opentelemetry-cpp-config.cmake"
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "libopentelemetry-cpp"
          ]
        },
        "name": "cpp-opentelemetry-sdk",
        "requirements": {
          "host": [
            "libabseil",
            "libcurl",
            "libgrpc",
            "libprotobuf",
            "nlohmann_json",
            "zlib",
            "prometheus-cpp",
            "libopentelemetry-cpp"
          ],
          "run": [
            "libopentelemetry-cpp"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other output\""
          ]
        }
      }
    ],
    "package": {
      "name": "opentelemetry-sdk",
      "version": "1.21.0"
    },
    "requirements": {
      "build": [
        "cxx_compiler_stub",
        "c_stdlib_stub",
        "cmake >=3.1",
        "ninja",
        "proto-opentelemetry-proto =1.6.0"
      ],
      "host": [
        "libabseil",
        "libcurl",
        "libgrpc",
        "libprotobuf",
        "nlohmann_json >=3.10.5",
        "zlib",
        "prometheus-cpp"
      ]
    },
    "schema_version": 0,
    "source": [
      {
        "patches": [
          "patches/0002-add-missing-shared-library-dependencies.patch",
          "patches/0003-add-necessary-abseil-linkage.patch"
        ],
        "sha256": "98e5546f577a11b52a57faed1f4cc60d8c1daa44760eba393f43eab5a8ec46a2",
        "url": "https://github.com/open-telemetry/opentelemetry-cpp/archive/refs/tags/v1.21.0.tar.gz"
      }
    ]
  },
  "linux_ppc64le_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "ninja",
        "proto-opentelemetry-proto"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "libabseil",
        "libcurl",
        "libgrpc",
        "libopentelemetry-cpp",
        "libopentelemetry-cpp-headers",
        "libprotobuf",
        "nlohmann_json",
        "prometheus-cpp",
        "zlib"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "libopentelemetry-cpp",
        "libopentelemetry-cpp-headers",
        "nlohmann_json",
        "prometheus-cpp"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "meta_yaml": {
    "about": {
      "description": "OpenTelemetry is a collection of tools, APIs, and SDKs. Use it to\ninstrument, generate, collect, and export telemetry data (metrics,\nlogs, and traces) to help you analyze your softwareâ€™s performance\nand behavior.\n",
      "dev_url": "https://github.com/open-telemetry/opentelemetry-cpp",
      "doc_url": "https://opentelemetry.io/docs/instrumentation/cpp/",
      "home": "https://github.com/open-telemetry/opentelemetry-cpp",
      "license": "Apache-2.0",
      "license_family": "APACHE",
      "license_file": "LICENSE",
      "summary": "The OpenTelemetry C++ Client"
    },
    "build": {
      "number": "1"
    },
    "extra": {
      "feedstock-name": "cpp-opentelemetry-sdk",
      "recipe-maintainers": [
        "lidavidm",
        "h-vetinari"
      ]
    },
    "outputs": [
      {
        "name": "libopentelemetry-cpp-headers",
        "requirements": {
          "build": [
            "cmake"
          ]
        },
        "script": "install.sh",
        "test": {
          "commands": [
            "test -d $PREFIX/include/opentelemetry",
            "test ! -f $PREFIX/lib/libopentelemetry_common.a",
            "test ! -f $PREFIX/lib/libopentelemetry_common.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_in_memory.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_in_memory.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_metrics.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_metrics.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_span.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_span.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_client.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_client.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_log.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_log.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_metrics.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_metrics.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_client.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_client.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_metric.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_metric.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_prometheus.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_prometheus.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_zipkin_trace.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_zipkin_trace.so",
            "test ! -f $PREFIX/lib/libopentelemetry_http_client_curl.a",
            "test ! -f $PREFIX/lib/libopentelemetry_http_client_curl.so",
            "test ! -f $PREFIX/lib/libopentelemetry_metrics.a",
            "test ! -f $PREFIX/lib/libopentelemetry_metrics.so",
            "test ! -f $PREFIX/lib/libopentelemetry_otlp_recordable.a",
            "test ! -f $PREFIX/lib/libopentelemetry_otlp_recordable.so",
            "test ! -f $PREFIX/lib/libopentelemetry_resources.a",
            "test ! -f $PREFIX/lib/libopentelemetry_resources.so",
            "test ! -f $PREFIX/lib/libopentelemetry_trace.a",
            "test ! -f $PREFIX/lib/libopentelemetry_trace.so",
            "test ! -f $PREFIX/lib/libopentelemetry_version.a",
            "test ! -f $PREFIX/lib/libopentelemetry_version.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_logs.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_logs.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_log.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_log.so",
            "test ! -f $PREFIX/lib/libopentelemetry_logs.a",
            "test ! -f $PREFIX/lib/libopentelemetry_logs.so",
            "test ! -f $PREFIX/lib/libopentelemetry_proto.a",
            "test ! -f $PREFIX/lib/libopentelemetry_proto.so",
            "test ! -d $PREFIX/lib/cmake/opentelemetry-cpp"
          ]
        }
      },
      {
        "name": "cpp-opentelemetry-api",
        "requirements": {
          "host": [
            "libopentelemetry-cpp-headers"
          ],
          "run": [
            "libopentelemetry-cpp-headers"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other output\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "libopentelemetry-cpp"
          ]
        },
        "name": "libopentelemetry-cpp",
        "requirements": {
          "build": [
            "cmake"
          ],
          "host": [
            "libopentelemetry-cpp-headers",
            "libabseil",
            "libcurl",
            "libgrpc",
            "libprotobuf",
            "nlohmann_json >=3.10.5",
            "zlib",
            "prometheus-cpp"
          ],
          "run": [
            "libopentelemetry-cpp-headers",
            "nlohmann_json",
            "prometheus-cpp"
          ],
          "run_constrained": [
            "cpp-opentelemetry-sdk =1.21.0"
          ]
        },
        "script": "install.sh",
        "test": {
          "commands": [
            "test -f $PREFIX/include/opentelemetry/exporters/ostream/common_utils.h || (echo \"exporters/ostream/common_utils.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/exporters/otlp/otlp_http.h || (echo \"exporters/otlp/otlp_http.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/exporters/prometheus/collector.h || (echo \"exporters/prometheus/collector.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/ext/http/common/url_parser.h || (echo \"ext/http/common/url_parser.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/proto/common/v1/common.pb.h || (echo \"proto/common/v1/common.pb.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/common/atomic_shared_ptr.h || (echo \"sdk/common/atomic_shared_ptr.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/metrics/data/point_data.h || (echo \"sdk/metrics/data/point_data.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/metrics/meter.h || (echo \"sdk/metrics/meter.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/resource/resource.h || (echo \"sdk/resource/resource.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/trace/sampler.h || (echo \"sdk/trace/sampler.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/version/version.h || (echo \"sdk/version/version.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/logs/logger.h || (echo \"sdk/logs/logger.h not found\" && exit 1)",
            "test -f $PREFIX/lib/libopentelemetry_common.so",
            "test ! -f $PREFIX/lib/libopentelemetry_common.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_in_memory.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_in_memory.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_ostream_metrics.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_metrics.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_ostream_span.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_span.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_client.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_client.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_log.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_log.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_metrics.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_metrics.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_http.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_client.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_client.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_metric.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_metric.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_prometheus.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_prometheus.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_zipkin_trace.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_zipkin_trace.a",
            "test -f $PREFIX/lib/libopentelemetry_http_client_curl.so",
            "test ! -f $PREFIX/lib/libopentelemetry_http_client_curl.a",
            "test -f $PREFIX/lib/libopentelemetry_metrics.so",
            "test ! -f $PREFIX/lib/libopentelemetry_metrics.a",
            "test -f $PREFIX/lib/libopentelemetry_otlp_recordable.so",
            "test ! -f $PREFIX/lib/libopentelemetry_otlp_recordable.a",
            "test -f $PREFIX/lib/libopentelemetry_resources.so",
            "test ! -f $PREFIX/lib/libopentelemetry_resources.a",
            "test -f $PREFIX/lib/libopentelemetry_trace.so",
            "test ! -f $PREFIX/lib/libopentelemetry_trace.a",
            "test -f $PREFIX/lib/libopentelemetry_version.so",
            "test ! -f $PREFIX/lib/libopentelemetry_version.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_ostream_logs.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_logs.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_log.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_log.a",
            "test -f $PREFIX/lib/libopentelemetry_logs.so",
            "test ! -f $PREFIX/lib/libopentelemetry_logs.a",
            "test -f $PREFIX/lib/libopentelemetry_proto.so",
            "test ! -f $PREFIX/lib/libopentelemetry_proto.a",
            "test -f ${PREFIX}/lib/cmake/opentelemetry-cpp/opentelemetry-cpp-config.cmake"
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "libopentelemetry-cpp"
          ]
        },
        "name": "cpp-opentelemetry-sdk",
        "requirements": {
          "host": [
            "libabseil",
            "libcurl",
            "libgrpc",
            "libprotobuf",
            "nlohmann_json",
            "zlib",
            "prometheus-cpp",
            "libopentelemetry-cpp"
          ],
          "run": [
            "libopentelemetry-cpp"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other output\""
          ]
        }
      },
      {
        "name": "libopentelemetry-cpp-headers",
        "requirements": {
          "build": [
            "cmake"
          ]
        },
        "script": "install.sh",
        "test": {
          "commands": [
            "test -d $PREFIX/include/opentelemetry",
            "test ! -f $PREFIX/lib/libopentelemetry_common.a",
            "test ! -f $PREFIX/lib/libopentelemetry_common.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_in_memory.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_in_memory.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_metrics.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_metrics.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_span.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_span.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_client.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_client.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_log.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_log.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_metrics.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_metrics.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_client.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_client.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_metric.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_metric.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_prometheus.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_prometheus.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_zipkin_trace.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_zipkin_trace.so",
            "test ! -f $PREFIX/lib/libopentelemetry_http_client_curl.a",
            "test ! -f $PREFIX/lib/libopentelemetry_http_client_curl.so",
            "test ! -f $PREFIX/lib/libopentelemetry_metrics.a",
            "test ! -f $PREFIX/lib/libopentelemetry_metrics.so",
            "test ! -f $PREFIX/lib/libopentelemetry_otlp_recordable.a",
            "test ! -f $PREFIX/lib/libopentelemetry_otlp_recordable.so",
            "test ! -f $PREFIX/lib/libopentelemetry_resources.a",
            "test ! -f $PREFIX/lib/libopentelemetry_resources.so",
            "test ! -f $PREFIX/lib/libopentelemetry_trace.a",
            "test ! -f $PREFIX/lib/libopentelemetry_trace.so",
            "test ! -f $PREFIX/lib/libopentelemetry_version.a",
            "test ! -f $PREFIX/lib/libopentelemetry_version.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_logs.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_logs.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_log.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_log.so",
            "test ! -f $PREFIX/lib/libopentelemetry_logs.a",
            "test ! -f $PREFIX/lib/libopentelemetry_logs.so",
            "test ! -f $PREFIX/lib/libopentelemetry_proto.a",
            "test ! -f $PREFIX/lib/libopentelemetry_proto.so",
            "test ! -d $PREFIX/lib/cmake/opentelemetry-cpp"
          ]
        }
      },
      {
        "name": "cpp-opentelemetry-api",
        "requirements": {
          "host": [
            "libopentelemetry-cpp-headers"
          ],
          "run": [
            "libopentelemetry-cpp-headers"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other output\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "libopentelemetry-cpp"
          ]
        },
        "name": "libopentelemetry-cpp",
        "requirements": {
          "build": [
            "cmake"
          ],
          "host": [
            "libopentelemetry-cpp-headers",
            "libabseil",
            "libcurl",
            "libgrpc",
            "libprotobuf",
            "nlohmann_json >=3.10.5",
            "zlib",
            "prometheus-cpp"
          ],
          "run": [
            "libopentelemetry-cpp-headers",
            "nlohmann_json",
            "prometheus-cpp"
          ],
          "run_constrained": [
            "cpp-opentelemetry-sdk =1.21.0"
          ]
        },
        "script": "install.sh",
        "test": {
          "commands": [
            "test -f $PREFIX/include/opentelemetry/exporters/ostream/common_utils.h || (echo \"exporters/ostream/common_utils.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/exporters/otlp/otlp_http.h || (echo \"exporters/otlp/otlp_http.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/exporters/prometheus/collector.h || (echo \"exporters/prometheus/collector.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/ext/http/common/url_parser.h || (echo \"ext/http/common/url_parser.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/proto/common/v1/common.pb.h || (echo \"proto/common/v1/common.pb.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/common/atomic_shared_ptr.h || (echo \"sdk/common/atomic_shared_ptr.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/metrics/data/point_data.h || (echo \"sdk/metrics/data/point_data.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/metrics/meter.h || (echo \"sdk/metrics/meter.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/resource/resource.h || (echo \"sdk/resource/resource.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/trace/sampler.h || (echo \"sdk/trace/sampler.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/version/version.h || (echo \"sdk/version/version.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/logs/logger.h || (echo \"sdk/logs/logger.h not found\" && exit 1)",
            "test -f $PREFIX/lib/libopentelemetry_common.so",
            "test ! -f $PREFIX/lib/libopentelemetry_common.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_in_memory.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_in_memory.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_ostream_metrics.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_metrics.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_ostream_span.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_span.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_client.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_client.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_log.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_log.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_metrics.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_metrics.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_http.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_client.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_client.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_metric.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_metric.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_prometheus.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_prometheus.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_zipkin_trace.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_zipkin_trace.a",
            "test -f $PREFIX/lib/libopentelemetry_http_client_curl.so",
            "test ! -f $PREFIX/lib/libopentelemetry_http_client_curl.a",
            "test -f $PREFIX/lib/libopentelemetry_metrics.so",
            "test ! -f $PREFIX/lib/libopentelemetry_metrics.a",
            "test -f $PREFIX/lib/libopentelemetry_otlp_recordable.so",
            "test ! -f $PREFIX/lib/libopentelemetry_otlp_recordable.a",
            "test -f $PREFIX/lib/libopentelemetry_resources.so",
            "test ! -f $PREFIX/lib/libopentelemetry_resources.a",
            "test -f $PREFIX/lib/libopentelemetry_trace.so",
            "test ! -f $PREFIX/lib/libopentelemetry_trace.a",
            "test -f $PREFIX/lib/libopentelemetry_version.so",
            "test ! -f $PREFIX/lib/libopentelemetry_version.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_ostream_logs.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_logs.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_log.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_log.a",
            "test -f $PREFIX/lib/libopentelemetry_logs.so",
            "test ! -f $PREFIX/lib/libopentelemetry_logs.a",
            "test -f $PREFIX/lib/libopentelemetry_proto.so",
            "test ! -f $PREFIX/lib/libopentelemetry_proto.a",
            "test -f ${PREFIX}/lib/cmake/opentelemetry-cpp/opentelemetry-cpp-config.cmake"
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "libopentelemetry-cpp"
          ]
        },
        "name": "cpp-opentelemetry-sdk",
        "requirements": {
          "host": [
            "libabseil",
            "libcurl",
            "libgrpc",
            "libprotobuf",
            "nlohmann_json",
            "zlib",
            "prometheus-cpp",
            "libopentelemetry-cpp"
          ],
          "run": [
            "libopentelemetry-cpp"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other output\""
          ]
        }
      },
      {
        "name": "libopentelemetry-cpp-headers",
        "requirements": {
          "build": [
            "cmake"
          ]
        },
        "script": "install.sh",
        "test": {
          "commands": [
            "test -d $PREFIX/include/opentelemetry",
            "test ! -f $PREFIX/lib/libopentelemetry_common.a",
            "test ! -f $PREFIX/lib/libopentelemetry_common.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_in_memory.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_in_memory.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_metrics.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_metrics.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_span.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_span.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_client.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_client.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_log.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_log.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_metrics.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_metrics.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_client.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_client.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_metric.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_metric.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_prometheus.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_prometheus.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_zipkin_trace.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_zipkin_trace.so",
            "test ! -f $PREFIX/lib/libopentelemetry_http_client_curl.a",
            "test ! -f $PREFIX/lib/libopentelemetry_http_client_curl.so",
            "test ! -f $PREFIX/lib/libopentelemetry_metrics.a",
            "test ! -f $PREFIX/lib/libopentelemetry_metrics.so",
            "test ! -f $PREFIX/lib/libopentelemetry_otlp_recordable.a",
            "test ! -f $PREFIX/lib/libopentelemetry_otlp_recordable.so",
            "test ! -f $PREFIX/lib/libopentelemetry_resources.a",
            "test ! -f $PREFIX/lib/libopentelemetry_resources.so",
            "test ! -f $PREFIX/lib/libopentelemetry_trace.a",
            "test ! -f $PREFIX/lib/libopentelemetry_trace.so",
            "test ! -f $PREFIX/lib/libopentelemetry_version.a",
            "test ! -f $PREFIX/lib/libopentelemetry_version.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_logs.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_logs.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_log.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_log.so",
            "test ! -f $PREFIX/lib/libopentelemetry_logs.a",
            "test ! -f $PREFIX/lib/libopentelemetry_logs.so",
            "test ! -f $PREFIX/lib/libopentelemetry_proto.a",
            "test ! -f $PREFIX/lib/libopentelemetry_proto.so",
            "test ! -d $PREFIX/lib/cmake/opentelemetry-cpp"
          ]
        }
      },
      {
        "name": "cpp-opentelemetry-api",
        "requirements": {
          "host": [
            "libopentelemetry-cpp-headers"
          ],
          "run": [
            "libopentelemetry-cpp-headers"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other output\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "libopentelemetry-cpp"
          ]
        },
        "name": "libopentelemetry-cpp",
        "requirements": {
          "build": [
            "cmake"
          ],
          "host": [
            "libopentelemetry-cpp-headers",
            "libabseil",
            "libcurl",
            "libgrpc",
            "libprotobuf",
            "nlohmann_json >=3.10.5",
            "zlib",
            "prometheus-cpp"
          ],
          "run": [
            "libopentelemetry-cpp-headers",
            "nlohmann_json",
            "prometheus-cpp"
          ],
          "run_constrained": [
            "cpp-opentelemetry-sdk =1.21.0"
          ]
        },
        "script": "install.sh",
        "test": {
          "commands": [
            "test -f $PREFIX/include/opentelemetry/exporters/ostream/common_utils.h || (echo \"exporters/ostream/common_utils.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/exporters/otlp/otlp_http.h || (echo \"exporters/otlp/otlp_http.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/exporters/prometheus/collector.h || (echo \"exporters/prometheus/collector.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/ext/http/common/url_parser.h || (echo \"ext/http/common/url_parser.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/proto/common/v1/common.pb.h || (echo \"proto/common/v1/common.pb.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/common/atomic_shared_ptr.h || (echo \"sdk/common/atomic_shared_ptr.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/metrics/data/point_data.h || (echo \"sdk/metrics/data/point_data.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/metrics/meter.h || (echo \"sdk/metrics/meter.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/resource/resource.h || (echo \"sdk/resource/resource.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/trace/sampler.h || (echo \"sdk/trace/sampler.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/version/version.h || (echo \"sdk/version/version.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/logs/logger.h || (echo \"sdk/logs/logger.h not found\" && exit 1)",
            "test -f $PREFIX/lib/libopentelemetry_common.so",
            "test ! -f $PREFIX/lib/libopentelemetry_common.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_in_memory.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_in_memory.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_ostream_metrics.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_metrics.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_ostream_span.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_span.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_client.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_client.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_log.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_log.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_metrics.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_metrics.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_http.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_client.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_client.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_metric.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_metric.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_prometheus.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_prometheus.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_zipkin_trace.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_zipkin_trace.a",
            "test -f $PREFIX/lib/libopentelemetry_http_client_curl.so",
            "test ! -f $PREFIX/lib/libopentelemetry_http_client_curl.a",
            "test -f $PREFIX/lib/libopentelemetry_metrics.so",
            "test ! -f $PREFIX/lib/libopentelemetry_metrics.a",
            "test -f $PREFIX/lib/libopentelemetry_otlp_recordable.so",
            "test ! -f $PREFIX/lib/libopentelemetry_otlp_recordable.a",
            "test -f $PREFIX/lib/libopentelemetry_resources.so",
            "test ! -f $PREFIX/lib/libopentelemetry_resources.a",
            "test -f $PREFIX/lib/libopentelemetry_trace.so",
            "test ! -f $PREFIX/lib/libopentelemetry_trace.a",
            "test -f $PREFIX/lib/libopentelemetry_version.so",
            "test ! -f $PREFIX/lib/libopentelemetry_version.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_ostream_logs.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_logs.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_log.so",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_log.a",
            "test -f $PREFIX/lib/libopentelemetry_logs.so",
            "test ! -f $PREFIX/lib/libopentelemetry_logs.a",
            "test -f $PREFIX/lib/libopentelemetry_proto.so",
            "test ! -f $PREFIX/lib/libopentelemetry_proto.a",
            "test -f ${PREFIX}/lib/cmake/opentelemetry-cpp/opentelemetry-cpp-config.cmake"
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "libopentelemetry-cpp"
          ]
        },
        "name": "cpp-opentelemetry-sdk",
        "requirements": {
          "host": [
            "libabseil",
            "libcurl",
            "libgrpc",
            "libprotobuf",
            "nlohmann_json",
            "zlib",
            "prometheus-cpp",
            "libopentelemetry-cpp"
          ],
          "run": [
            "libopentelemetry-cpp"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other output\""
          ]
        }
      },
      {
        "name": "libopentelemetry-cpp-headers",
        "requirements": {
          "build": [
            "cmake"
          ]
        },
        "script": "install.sh",
        "test": {
          "commands": [
            "test -d $PREFIX/include/opentelemetry",
            "test ! -f $PREFIX/lib/libopentelemetry_common.a",
            "test ! -f $PREFIX/lib/libopentelemetry_common.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_in_memory.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_in_memory.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_metrics.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_metrics.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_span.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_span.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_client.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_client.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_log.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_log.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_metrics.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_metrics.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_client.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_client.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_metric.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_metric.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_prometheus.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_prometheus.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_zipkin_trace.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_zipkin_trace.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_http_client_curl.a",
            "test ! -f $PREFIX/lib/libopentelemetry_http_client_curl.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_metrics.a",
            "test ! -f $PREFIX/lib/libopentelemetry_metrics.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_otlp_recordable.a",
            "test ! -f $PREFIX/lib/libopentelemetry_otlp_recordable.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_resources.a",
            "test ! -f $PREFIX/lib/libopentelemetry_resources.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_trace.a",
            "test ! -f $PREFIX/lib/libopentelemetry_trace.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_version.a",
            "test ! -f $PREFIX/lib/libopentelemetry_version.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_logs.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_logs.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_log.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_log.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_logs.a",
            "test ! -f $PREFIX/lib/libopentelemetry_logs.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_proto.a",
            "test ! -f $PREFIX/lib/libopentelemetry_proto.dylib",
            "test ! -d $PREFIX/lib/cmake/opentelemetry-cpp"
          ]
        }
      },
      {
        "name": "cpp-opentelemetry-api",
        "requirements": {
          "host": [
            "libopentelemetry-cpp-headers"
          ],
          "run": [
            "libopentelemetry-cpp-headers"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other output\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "libopentelemetry-cpp"
          ]
        },
        "name": "libopentelemetry-cpp",
        "requirements": {
          "build": [
            "cmake"
          ],
          "host": [
            "libopentelemetry-cpp-headers",
            "libabseil",
            "libcurl",
            "libgrpc",
            "libprotobuf",
            "nlohmann_json >=3.10.5",
            "zlib",
            "prometheus-cpp"
          ],
          "run": [
            "libopentelemetry-cpp-headers",
            "nlohmann_json",
            "prometheus-cpp"
          ],
          "run_constrained": [
            "cpp-opentelemetry-sdk =1.21.0"
          ]
        },
        "script": "install.sh",
        "test": {
          "commands": [
            "test -f $PREFIX/include/opentelemetry/exporters/ostream/common_utils.h || (echo \"exporters/ostream/common_utils.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/exporters/otlp/otlp_http.h || (echo \"exporters/otlp/otlp_http.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/exporters/prometheus/collector.h || (echo \"exporters/prometheus/collector.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/ext/http/common/url_parser.h || (echo \"ext/http/common/url_parser.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/proto/common/v1/common.pb.h || (echo \"proto/common/v1/common.pb.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/common/atomic_shared_ptr.h || (echo \"sdk/common/atomic_shared_ptr.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/metrics/data/point_data.h || (echo \"sdk/metrics/data/point_data.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/metrics/meter.h || (echo \"sdk/metrics/meter.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/resource/resource.h || (echo \"sdk/resource/resource.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/trace/sampler.h || (echo \"sdk/trace/sampler.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/version/version.h || (echo \"sdk/version/version.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/logs/logger.h || (echo \"sdk/logs/logger.h not found\" && exit 1)",
            "test -f $PREFIX/lib/libopentelemetry_common.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_common.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_in_memory.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_in_memory.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_ostream_metrics.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_metrics.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_ostream_span.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_span.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_client.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_client.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_log.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_log.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_metrics.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_metrics.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_http.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_client.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_client.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_metric.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_metric.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_prometheus.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_prometheus.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_zipkin_trace.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_zipkin_trace.a",
            "test -f $PREFIX/lib/libopentelemetry_http_client_curl.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_http_client_curl.a",
            "test -f $PREFIX/lib/libopentelemetry_metrics.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_metrics.a",
            "test -f $PREFIX/lib/libopentelemetry_otlp_recordable.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_otlp_recordable.a",
            "test -f $PREFIX/lib/libopentelemetry_resources.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_resources.a",
            "test -f $PREFIX/lib/libopentelemetry_trace.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_trace.a",
            "test -f $PREFIX/lib/libopentelemetry_version.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_version.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_ostream_logs.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_logs.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_log.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_log.a",
            "test -f $PREFIX/lib/libopentelemetry_logs.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_logs.a",
            "test -f $PREFIX/lib/libopentelemetry_proto.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_proto.a",
            "test -f ${PREFIX}/lib/cmake/opentelemetry-cpp/opentelemetry-cpp-config.cmake"
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "libopentelemetry-cpp"
          ]
        },
        "name": "cpp-opentelemetry-sdk",
        "requirements": {
          "host": [
            "libabseil",
            "libcurl",
            "libgrpc",
            "libprotobuf",
            "nlohmann_json",
            "zlib",
            "prometheus-cpp",
            "libopentelemetry-cpp"
          ],
          "run": [
            "libopentelemetry-cpp"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other output\""
          ]
        }
      },
      {
        "name": "libopentelemetry-cpp-headers",
        "requirements": {
          "build": [
            "cmake"
          ]
        },
        "script": "install.sh",
        "test": {
          "commands": [
            "test -d $PREFIX/include/opentelemetry",
            "test ! -f $PREFIX/lib/libopentelemetry_common.a",
            "test ! -f $PREFIX/lib/libopentelemetry_common.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_in_memory.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_in_memory.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_metrics.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_metrics.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_span.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_span.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_client.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_client.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_log.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_log.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_metrics.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_metrics.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_client.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_client.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_metric.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_metric.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_prometheus.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_prometheus.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_zipkin_trace.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_zipkin_trace.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_http_client_curl.a",
            "test ! -f $PREFIX/lib/libopentelemetry_http_client_curl.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_metrics.a",
            "test ! -f $PREFIX/lib/libopentelemetry_metrics.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_otlp_recordable.a",
            "test ! -f $PREFIX/lib/libopentelemetry_otlp_recordable.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_resources.a",
            "test ! -f $PREFIX/lib/libopentelemetry_resources.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_trace.a",
            "test ! -f $PREFIX/lib/libopentelemetry_trace.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_version.a",
            "test ! -f $PREFIX/lib/libopentelemetry_version.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_logs.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_logs.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_log.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_log.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_logs.a",
            "test ! -f $PREFIX/lib/libopentelemetry_logs.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_proto.a",
            "test ! -f $PREFIX/lib/libopentelemetry_proto.dylib",
            "test ! -d $PREFIX/lib/cmake/opentelemetry-cpp"
          ]
        }
      },
      {
        "name": "cpp-opentelemetry-api",
        "requirements": {
          "host": [
            "libopentelemetry-cpp-headers"
          ],
          "run": [
            "libopentelemetry-cpp-headers"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other output\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "libopentelemetry-cpp"
          ]
        },
        "name": "libopentelemetry-cpp",
        "requirements": {
          "build": [
            "cmake"
          ],
          "host": [
            "libopentelemetry-cpp-headers",
            "libabseil",
            "libcurl",
            "libgrpc",
            "libprotobuf",
            "nlohmann_json >=3.10.5",
            "zlib",
            "prometheus-cpp"
          ],
          "run": [
            "libopentelemetry-cpp-headers",
            "nlohmann_json",
            "prometheus-cpp"
          ],
          "run_constrained": [
            "cpp-opentelemetry-sdk =1.21.0"
          ]
        },
        "script": "install.sh",
        "test": {
          "commands": [
            "test -f $PREFIX/include/opentelemetry/exporters/ostream/common_utils.h || (echo \"exporters/ostream/common_utils.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/exporters/otlp/otlp_http.h || (echo \"exporters/otlp/otlp_http.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/exporters/prometheus/collector.h || (echo \"exporters/prometheus/collector.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/ext/http/common/url_parser.h || (echo \"ext/http/common/url_parser.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/proto/common/v1/common.pb.h || (echo \"proto/common/v1/common.pb.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/common/atomic_shared_ptr.h || (echo \"sdk/common/atomic_shared_ptr.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/metrics/data/point_data.h || (echo \"sdk/metrics/data/point_data.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/metrics/meter.h || (echo \"sdk/metrics/meter.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/resource/resource.h || (echo \"sdk/resource/resource.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/trace/sampler.h || (echo \"sdk/trace/sampler.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/version/version.h || (echo \"sdk/version/version.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/logs/logger.h || (echo \"sdk/logs/logger.h not found\" && exit 1)",
            "test -f $PREFIX/lib/libopentelemetry_common.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_common.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_in_memory.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_in_memory.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_ostream_metrics.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_metrics.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_ostream_span.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_span.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_client.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_client.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_log.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_log.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_metrics.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_metrics.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_http.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_client.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_client.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_metric.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_metric.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_prometheus.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_prometheus.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_zipkin_trace.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_zipkin_trace.a",
            "test -f $PREFIX/lib/libopentelemetry_http_client_curl.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_http_client_curl.a",
            "test -f $PREFIX/lib/libopentelemetry_metrics.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_metrics.a",
            "test -f $PREFIX/lib/libopentelemetry_otlp_recordable.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_otlp_recordable.a",
            "test -f $PREFIX/lib/libopentelemetry_resources.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_resources.a",
            "test -f $PREFIX/lib/libopentelemetry_trace.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_trace.a",
            "test -f $PREFIX/lib/libopentelemetry_version.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_version.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_ostream_logs.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_logs.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_log.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_log.a",
            "test -f $PREFIX/lib/libopentelemetry_logs.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_logs.a",
            "test -f $PREFIX/lib/libopentelemetry_proto.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_proto.a",
            "test -f ${PREFIX}/lib/cmake/opentelemetry-cpp/opentelemetry-cpp-config.cmake"
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "libopentelemetry-cpp"
          ]
        },
        "name": "cpp-opentelemetry-sdk",
        "requirements": {
          "host": [
            "libabseil",
            "libcurl",
            "libgrpc",
            "libprotobuf",
            "nlohmann_json",
            "zlib",
            "prometheus-cpp",
            "libopentelemetry-cpp"
          ],
          "run": [
            "libopentelemetry-cpp"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other output\""
          ]
        }
      },
      {
        "name": "libopentelemetry-cpp-headers",
        "requirements": {
          "build": [
            "cmake"
          ]
        },
        "script": "install.bat",
        "test": {
          "commands": [
            "if not exist %LIBRARY_INC%\\opentelemetry exit 1",
            "if exist %LIBRARY_BIN%\\opentelemetry_common.dll exit 1",
            "if exist %LIBRARY_LIB%\\opentelemetry_common.lib exit 1",
            "if exist %LIBRARY_BIN%\\opentelemetry_exporter_in_memory.dll exit 1",
            "if exist %LIBRARY_LIB%\\opentelemetry_exporter_in_memory.lib exit 1",
            "if exist %LIBRARY_BIN%\\opentelemetry_exporter_ostream_metrics.dll exit 1",
            "if exist %LIBRARY_LIB%\\opentelemetry_exporter_ostream_metrics.lib exit 1",
            "if exist %LIBRARY_BIN%\\opentelemetry_exporter_ostream_span.dll exit 1",
            "if exist %LIBRARY_LIB%\\opentelemetry_exporter_ostream_span.lib exit 1",
            "if exist %LIBRARY_BIN%\\opentelemetry_exporter_otlp_grpc.dll exit 1",
            "if exist %LIBRARY_LIB%\\opentelemetry_exporter_otlp_grpc.lib exit 1",
            "if exist %LIBRARY_BIN%\\opentelemetry_exporter_otlp_grpc_client.dll exit 1",
            "if exist %LIBRARY_LIB%\\opentelemetry_exporter_otlp_grpc_client.lib exit 1",
            "if exist %LIBRARY_BIN%\\opentelemetry_exporter_otlp_grpc_log.dll exit 1",
            "if exist %LIBRARY_LIB%\\opentelemetry_exporter_otlp_grpc_log.lib exit 1",
            "if exist %LIBRARY_BIN%\\opentelemetry_exporter_otlp_grpc_metrics.dll exit 1",
            "if exist %LIBRARY_LIB%\\opentelemetry_exporter_otlp_grpc_metrics.lib exit 1",
            "if exist %LIBRARY_BIN%\\opentelemetry_exporter_otlp_http.dll exit 1",
            "if exist %LIBRARY_LIB%\\opentelemetry_exporter_otlp_http.lib exit 1",
            "if exist %LIBRARY_BIN%\\opentelemetry_exporter_otlp_http_client.dll exit 1",
            "if exist %LIBRARY_LIB%\\opentelemetry_exporter_otlp_http_client.lib exit 1",
            "if exist %LIBRARY_BIN%\\opentelemetry_exporter_otlp_http_metric.dll exit 1",
            "if exist %LIBRARY_LIB%\\opentelemetry_exporter_otlp_http_metric.lib exit 1",
            "if exist %LIBRARY_BIN%\\opentelemetry_exporter_prometheus.dll exit 1",
            "if exist %LIBRARY_LIB%\\opentelemetry_exporter_prometheus.lib exit 1",
            "if exist %LIBRARY_BIN%\\opentelemetry_exporter_zipkin_trace.dll exit 1",
            "if exist %LIBRARY_LIB%\\opentelemetry_exporter_zipkin_trace.lib exit 1",
            "if exist %LIBRARY_BIN%\\opentelemetry_http_client_curl.dll exit 1",
            "if exist %LIBRARY_LIB%\\opentelemetry_http_client_curl.lib exit 1",
            "if exist %LIBRARY_BIN%\\opentelemetry_metrics.dll exit 1",
            "if exist %LIBRARY_LIB%\\opentelemetry_metrics.lib exit 1",
            "if exist %LIBRARY_BIN%\\opentelemetry_otlp_recordable.dll exit 1",
            "if exist %LIBRARY_LIB%\\opentelemetry_otlp_recordable.lib exit 1",
            "if exist %LIBRARY_BIN%\\opentelemetry_resources.dll exit 1",
            "if exist %LIBRARY_LIB%\\opentelemetry_resources.lib exit 1",
            "if exist %LIBRARY_BIN%\\opentelemetry_trace.dll exit 1",
            "if exist %LIBRARY_LIB%\\opentelemetry_trace.lib exit 1",
            "if exist %LIBRARY_BIN%\\opentelemetry_version.dll exit 1",
            "if exist %LIBRARY_LIB%\\opentelemetry_version.lib exit 1",
            "if exist %LIBRARY_BIN%\\opentelemetry_exporter_ostream_logs.dll exit 1",
            "if exist %LIBRARY_LIB%\\opentelemetry_exporter_ostream_logs.lib exit 1",
            "if exist %LIBRARY_BIN%\\opentelemetry_exporter_otlp_http_log.dll exit 1",
            "if exist %LIBRARY_LIB%\\opentelemetry_exporter_otlp_http_log.lib exit 1",
            "if exist %LIBRARY_BIN%\\opentelemetry_logs.dll exit 1",
            "if exist %LIBRARY_LIB%\\opentelemetry_logs.lib exit 1",
            "if exist %LIBRARY_BIN%\\opentelemetry_proto.dll exit 1",
            "if exist %LIBRARY_LIB%\\opentelemetry_proto.lib exit 1",
            "if exist %LIBRARY_LIB%\\cmake\\opentelemetry-cpp exit 1"
          ]
        }
      },
      {
        "name": "cpp-opentelemetry-api",
        "requirements": {
          "host": [
            "libopentelemetry-cpp-headers"
          ],
          "run": [
            "libopentelemetry-cpp-headers"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other output\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "libopentelemetry-cpp"
          ]
        },
        "name": "libopentelemetry-cpp",
        "requirements": {
          "build": [
            "cmake"
          ],
          "host": [
            "libopentelemetry-cpp-headers",
            "libabseil",
            "libcurl",
            "libgrpc",
            "libprotobuf",
            "nlohmann_json >=3.10.5",
            "zlib",
            "prometheus-cpp"
          ],
          "run": [
            "libopentelemetry-cpp-headers",
            "nlohmann_json",
            "prometheus-cpp"
          ],
          "run_constrained": [
            "cpp-opentelemetry-sdk =1.21.0"
          ]
        },
        "script": "install.bat",
        "test": {
          "commands": [
            "if not exist %LIBRARY_INC%\\opentelemetry\\exporters\\ostream\\common_utils.h exit 1",
            "if not exist %LIBRARY_INC%\\opentelemetry\\exporters\\otlp\\otlp_http.h exit 1",
            "if not exist %LIBRARY_INC%\\opentelemetry\\exporters\\prometheus\\collector.h exit 1",
            "if not exist %LIBRARY_INC%\\opentelemetry\\ext\\http\\common\\url_parser.h exit 1",
            "if not exist %LIBRARY_INC%\\opentelemetry\\proto\\common\\v1\\common.pb.h exit 1",
            "if not exist %LIBRARY_INC%\\opentelemetry\\sdk\\common\\atomic_shared_ptr.h exit 1",
            "if not exist %LIBRARY_INC%\\opentelemetry\\sdk\\metrics\\data\\point_data.h exit 1",
            "if not exist %LIBRARY_INC%\\opentelemetry\\sdk\\metrics\\meter.h exit 1",
            "if not exist %LIBRARY_INC%\\opentelemetry\\sdk\\resource\\resource.h exit 1",
            "if not exist %LIBRARY_INC%\\opentelemetry\\sdk\\trace\\sampler.h exit 1",
            "if not exist %LIBRARY_INC%\\opentelemetry\\sdk\\version\\version.h exit 1",
            "if not exist %LIBRARY_INC%\\opentelemetry\\sdk\\logs\\logger.h exit 1",
            "if not exist %LIBRARY_BIN%\\opentelemetry_common.dll exit 1",
            "if not exist %LIBRARY_LIB%\\opentelemetry_common.lib exit 1",
            "if not exist %LIBRARY_BIN%\\opentelemetry_exporter_in_memory.dll exit 1",
            "if not exist %LIBRARY_LIB%\\opentelemetry_exporter_in_memory.lib exit 1",
            "if not exist %LIBRARY_BIN%\\opentelemetry_exporter_ostream_metrics.dll exit 1",
            "if not exist %LIBRARY_LIB%\\opentelemetry_exporter_ostream_metrics.lib exit 1",
            "if not exist %LIBRARY_BIN%\\opentelemetry_exporter_ostream_span.dll exit 1",
            "if not exist %LIBRARY_LIB%\\opentelemetry_exporter_ostream_span.lib exit 1",
            "if not exist %LIBRARY_BIN%\\opentelemetry_exporter_otlp_grpc.dll exit 1",
            "if not exist %LIBRARY_LIB%\\opentelemetry_exporter_otlp_grpc.lib exit 1",
            "if not exist %LIBRARY_BIN%\\opentelemetry_exporter_otlp_grpc_client.dll exit 1",
            "if not exist %LIBRARY_LIB%\\opentelemetry_exporter_otlp_grpc_client.lib exit 1",
            "if not exist %LIBRARY_BIN%\\opentelemetry_exporter_otlp_grpc_log.dll exit 1",
            "if not exist %LIBRARY_LIB%\\opentelemetry_exporter_otlp_grpc_log.lib exit 1",
            "if not exist %LIBRARY_BIN%\\opentelemetry_exporter_otlp_grpc_metrics.dll exit 1",
            "if not exist %LIBRARY_LIB%\\opentelemetry_exporter_otlp_grpc_metrics.lib exit 1",
            "if not exist %LIBRARY_BIN%\\opentelemetry_exporter_otlp_http.dll exit 1",
            "if not exist %LIBRARY_LIB%\\opentelemetry_exporter_otlp_http.lib exit 1",
            "if not exist %LIBRARY_BIN%\\opentelemetry_exporter_otlp_http_client.dll exit 1",
            "if not exist %LIBRARY_LIB%\\opentelemetry_exporter_otlp_http_client.lib exit 1",
            "if not exist %LIBRARY_BIN%\\opentelemetry_exporter_otlp_http_metric.dll exit 1",
            "if not exist %LIBRARY_LIB%\\opentelemetry_exporter_otlp_http_metric.lib exit 1",
            "if not exist %LIBRARY_BIN%\\opentelemetry_exporter_prometheus.dll exit 1",
            "if not exist %LIBRARY_LIB%\\opentelemetry_exporter_prometheus.lib exit 1",
            "if not exist %LIBRARY_BIN%\\opentelemetry_exporter_zipkin_trace.dll exit 1",
            "if not exist %LIBRARY_LIB%\\opentelemetry_exporter_zipkin_trace.lib exit 1",
            "if not exist %LIBRARY_BIN%\\opentelemetry_http_client_curl.dll exit 1",
            "if not exist %LIBRARY_LIB%\\opentelemetry_http_client_curl.lib exit 1",
            "if not exist %LIBRARY_BIN%\\opentelemetry_metrics.dll exit 1",
            "if not exist %LIBRARY_LIB%\\opentelemetry_metrics.lib exit 1",
            "if not exist %LIBRARY_BIN%\\opentelemetry_otlp_recordable.dll exit 1",
            "if not exist %LIBRARY_LIB%\\opentelemetry_otlp_recordable.lib exit 1",
            "if not exist %LIBRARY_BIN%\\opentelemetry_resources.dll exit 1",
            "if not exist %LIBRARY_LIB%\\opentelemetry_resources.lib exit 1",
            "if not exist %LIBRARY_BIN%\\opentelemetry_trace.dll exit 1",
            "if not exist %LIBRARY_LIB%\\opentelemetry_trace.lib exit 1",
            "if not exist %LIBRARY_BIN%\\opentelemetry_version.dll exit 1",
            "if not exist %LIBRARY_LIB%\\opentelemetry_version.lib exit 1",
            "if not exist %LIBRARY_BIN%\\opentelemetry_exporter_ostream_logs.dll exit 1",
            "if not exist %LIBRARY_LIB%\\opentelemetry_exporter_ostream_logs.lib exit 1",
            "if not exist %LIBRARY_BIN%\\opentelemetry_exporter_otlp_http_log.dll exit 1",
            "if not exist %LIBRARY_LIB%\\opentelemetry_exporter_otlp_http_log.lib exit 1",
            "if not exist %LIBRARY_BIN%\\opentelemetry_logs.dll exit 1",
            "if not exist %LIBRARY_LIB%\\opentelemetry_logs.lib exit 1",
            "if not exist %LIBRARY_BIN%\\opentelemetry_proto.dll exit 1",
            "if not exist %LIBRARY_LIB%\\opentelemetry_proto.lib exit 1",
            "if not exist %LIBRARY_LIB%\\cmake\\opentelemetry-cpp\\opentelemetry-cpp-config.cmake exit 1"
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "libopentelemetry-cpp"
          ]
        },
        "name": "cpp-opentelemetry-sdk",
        "requirements": {
          "host": [
            "libabseil",
            "libcurl",
            "libgrpc",
            "libprotobuf",
            "nlohmann_json",
            "zlib",
            "prometheus-cpp",
            "libopentelemetry-cpp"
          ],
          "run": [
            "libopentelemetry-cpp"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other output\""
          ]
        }
      }
    ],
    "package": {
      "name": "opentelemetry-sdk",
      "version": "1.21.0"
    },
    "requirements": {
      "build": [
        "cxx_compiler_stub",
        "c_stdlib_stub",
        "cmake >=3.1",
        "ninja",
        "proto-opentelemetry-proto =1.6.0"
      ],
      "host": [
        "libabseil",
        "libcurl",
        "libgrpc",
        "libprotobuf",
        "nlohmann_json >=3.10.5",
        "zlib",
        "prometheus-cpp"
      ]
    },
    "schema_version": 0,
    "source": [
      {
        "patches": [
          "patches/0002-add-missing-shared-library-dependencies.patch",
          "patches/0003-add-necessary-abseil-linkage.patch"
        ],
        "sha256": "98e5546f577a11b52a57faed1f4cc60d8c1daa44760eba393f43eab5a8ec46a2",
        "url": "https://github.com/open-telemetry/opentelemetry-cpp/archive/refs/tags/v1.21.0.tar.gz"
      },
      {
        "patches": [
          "patches/0002-add-missing-shared-library-dependencies.patch",
          "patches/0003-add-necessary-abseil-linkage.patch"
        ],
        "sha256": "98e5546f577a11b52a57faed1f4cc60d8c1daa44760eba393f43eab5a8ec46a2",
        "url": "https://github.com/open-telemetry/opentelemetry-cpp/archive/refs/tags/v1.21.0.tar.gz"
      },
      {
        "patches": [
          "patches/0002-add-missing-shared-library-dependencies.patch",
          "patches/0003-add-necessary-abseil-linkage.patch"
        ],
        "sha256": "98e5546f577a11b52a57faed1f4cc60d8c1daa44760eba393f43eab5a8ec46a2",
        "url": "https://github.com/open-telemetry/opentelemetry-cpp/archive/refs/tags/v1.21.0.tar.gz"
      },
      {
        "patches": [
          "patches/0002-add-missing-shared-library-dependencies.patch",
          "patches/0003-add-necessary-abseil-linkage.patch"
        ],
        "sha256": "98e5546f577a11b52a57faed1f4cc60d8c1daa44760eba393f43eab5a8ec46a2",
        "url": "https://github.com/open-telemetry/opentelemetry-cpp/archive/refs/tags/v1.21.0.tar.gz"
      },
      {
        "patches": [
          "patches/0002-add-missing-shared-library-dependencies.patch",
          "patches/0003-add-necessary-abseil-linkage.patch"
        ],
        "sha256": "98e5546f577a11b52a57faed1f4cc60d8c1daa44760eba393f43eab5a8ec46a2",
        "url": "https://github.com/open-telemetry/opentelemetry-cpp/archive/refs/tags/v1.21.0.tar.gz"
      },
      {
        "patches": [
          "patches/0002-add-missing-shared-library-dependencies.patch",
          "patches/0003-add-necessary-abseil-linkage.patch",
          "patches/0004-Define-NOMINMAX-for-Windows.patch"
        ],
        "sha256": "98e5546f577a11b52a57faed1f4cc60d8c1daa44760eba393f43eab5a8ec46a2",
        "url": "https://github.com/open-telemetry/opentelemetry-cpp/archive/refs/tags/v1.21.0.tar.gz"
      }
    ]
  },
  "name": "opentelemetry-sdk",
  "osx_64_meta_yaml": {
    "about": {
      "description": "OpenTelemetry is a collection of tools, APIs, and SDKs. Use it to\ninstrument, generate, collect, and export telemetry data (metrics,\nlogs, and traces) to help you analyze your softwareâ€™s performance\nand behavior.\n",
      "dev_url": "https://github.com/open-telemetry/opentelemetry-cpp",
      "doc_url": "https://opentelemetry.io/docs/instrumentation/cpp/",
      "home": "https://github.com/open-telemetry/opentelemetry-cpp",
      "license": "Apache-2.0",
      "license_family": "APACHE",
      "license_file": "LICENSE",
      "summary": "The OpenTelemetry C++ Client"
    },
    "build": {
      "number": "1"
    },
    "extra": {
      "feedstock-name": "cpp-opentelemetry-sdk",
      "recipe-maintainers": [
        "lidavidm",
        "h-vetinari"
      ]
    },
    "outputs": [
      {
        "name": "libopentelemetry-cpp-headers",
        "requirements": {
          "build": [
            "cmake"
          ]
        },
        "script": "install.sh",
        "test": {
          "commands": [
            "test -d $PREFIX/include/opentelemetry",
            "test ! -f $PREFIX/lib/libopentelemetry_common.a",
            "test ! -f $PREFIX/lib/libopentelemetry_common.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_in_memory.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_in_memory.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_metrics.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_metrics.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_span.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_span.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_client.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_client.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_log.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_log.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_metrics.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_metrics.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_client.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_client.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_metric.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_metric.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_prometheus.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_prometheus.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_zipkin_trace.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_zipkin_trace.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_http_client_curl.a",
            "test ! -f $PREFIX/lib/libopentelemetry_http_client_curl.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_metrics.a",
            "test ! -f $PREFIX/lib/libopentelemetry_metrics.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_otlp_recordable.a",
            "test ! -f $PREFIX/lib/libopentelemetry_otlp_recordable.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_resources.a",
            "test ! -f $PREFIX/lib/libopentelemetry_resources.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_trace.a",
            "test ! -f $PREFIX/lib/libopentelemetry_trace.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_version.a",
            "test ! -f $PREFIX/lib/libopentelemetry_version.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_logs.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_logs.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_log.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_log.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_logs.a",
            "test ! -f $PREFIX/lib/libopentelemetry_logs.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_proto.a",
            "test ! -f $PREFIX/lib/libopentelemetry_proto.dylib",
            "test ! -d $PREFIX/lib/cmake/opentelemetry-cpp"
          ]
        }
      },
      {
        "name": "cpp-opentelemetry-api",
        "requirements": {
          "host": [
            "libopentelemetry-cpp-headers"
          ],
          "run": [
            "libopentelemetry-cpp-headers"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other output\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "libopentelemetry-cpp"
          ]
        },
        "name": "libopentelemetry-cpp",
        "requirements": {
          "build": [
            "cmake"
          ],
          "host": [
            "libopentelemetry-cpp-headers",
            "libabseil",
            "libcurl",
            "libgrpc",
            "libprotobuf",
            "nlohmann_json >=3.10.5",
            "zlib",
            "prometheus-cpp"
          ],
          "run": [
            "libopentelemetry-cpp-headers",
            "nlohmann_json",
            "prometheus-cpp"
          ],
          "run_constrained": [
            "cpp-opentelemetry-sdk =1.21.0"
          ]
        },
        "script": "install.sh",
        "test": {
          "commands": [
            "test -f $PREFIX/include/opentelemetry/exporters/ostream/common_utils.h || (echo \"exporters/ostream/common_utils.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/exporters/otlp/otlp_http.h || (echo \"exporters/otlp/otlp_http.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/exporters/prometheus/collector.h || (echo \"exporters/prometheus/collector.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/ext/http/common/url_parser.h || (echo \"ext/http/common/url_parser.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/proto/common/v1/common.pb.h || (echo \"proto/common/v1/common.pb.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/common/atomic_shared_ptr.h || (echo \"sdk/common/atomic_shared_ptr.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/metrics/data/point_data.h || (echo \"sdk/metrics/data/point_data.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/metrics/meter.h || (echo \"sdk/metrics/meter.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/resource/resource.h || (echo \"sdk/resource/resource.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/trace/sampler.h || (echo \"sdk/trace/sampler.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/version/version.h || (echo \"sdk/version/version.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/logs/logger.h || (echo \"sdk/logs/logger.h not found\" && exit 1)",
            "test -f $PREFIX/lib/libopentelemetry_common.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_common.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_in_memory.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_in_memory.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_ostream_metrics.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_metrics.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_ostream_span.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_span.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_client.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_client.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_log.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_log.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_metrics.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_metrics.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_http.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_client.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_client.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_metric.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_metric.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_prometheus.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_prometheus.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_zipkin_trace.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_zipkin_trace.a",
            "test -f $PREFIX/lib/libopentelemetry_http_client_curl.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_http_client_curl.a",
            "test -f $PREFIX/lib/libopentelemetry_metrics.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_metrics.a",
            "test -f $PREFIX/lib/libopentelemetry_otlp_recordable.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_otlp_recordable.a",
            "test -f $PREFIX/lib/libopentelemetry_resources.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_resources.a",
            "test -f $PREFIX/lib/libopentelemetry_trace.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_trace.a",
            "test -f $PREFIX/lib/libopentelemetry_version.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_version.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_ostream_logs.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_logs.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_log.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_log.a",
            "test -f $PREFIX/lib/libopentelemetry_logs.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_logs.a",
            "test -f $PREFIX/lib/libopentelemetry_proto.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_proto.a",
            "test -f ${PREFIX}/lib/cmake/opentelemetry-cpp/opentelemetry-cpp-config.cmake"
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "libopentelemetry-cpp"
          ]
        },
        "name": "cpp-opentelemetry-sdk",
        "requirements": {
          "host": [
            "libabseil",
            "libcurl",
            "libgrpc",
            "libprotobuf",
            "nlohmann_json",
            "zlib",
            "prometheus-cpp",
            "libopentelemetry-cpp"
          ],
          "run": [
            "libopentelemetry-cpp"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other output\""
          ]
        }
      }
    ],
    "package": {
      "name": "opentelemetry-sdk",
      "version": "1.21.0"
    },
    "requirements": {
      "build": [
        "cxx_compiler_stub",
        "c_stdlib_stub",
        "cmake >=3.1",
        "ninja",
        "proto-opentelemetry-proto =1.6.0"
      ],
      "host": [
        "libabseil",
        "libcurl",
        "libgrpc",
        "libprotobuf",
        "nlohmann_json >=3.10.5",
        "zlib",
        "prometheus-cpp"
      ]
    },
    "schema_version": 0,
    "source": [
      {
        "patches": [
          "patches/0002-add-missing-shared-library-dependencies.patch",
          "patches/0003-add-necessary-abseil-linkage.patch"
        ],
        "sha256": "98e5546f577a11b52a57faed1f4cc60d8c1daa44760eba393f43eab5a8ec46a2",
        "url": "https://github.com/open-telemetry/opentelemetry-cpp/archive/refs/tags/v1.21.0.tar.gz"
      }
    ]
  },
  "osx_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "ninja",
        "proto-opentelemetry-proto"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "libabseil",
        "libcurl",
        "libgrpc",
        "libopentelemetry-cpp",
        "libopentelemetry-cpp-headers",
        "libprotobuf",
        "nlohmann_json",
        "prometheus-cpp",
        "zlib"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "libopentelemetry-cpp",
        "libopentelemetry-cpp-headers",
        "nlohmann_json",
        "prometheus-cpp"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "osx_arm64_meta_yaml": {
    "about": {
      "description": "OpenTelemetry is a collection of tools, APIs, and SDKs. Use it to\ninstrument, generate, collect, and export telemetry data (metrics,\nlogs, and traces) to help you analyze your softwareâ€™s performance\nand behavior.\n",
      "dev_url": "https://github.com/open-telemetry/opentelemetry-cpp",
      "doc_url": "https://opentelemetry.io/docs/instrumentation/cpp/",
      "home": "https://github.com/open-telemetry/opentelemetry-cpp",
      "license": "Apache-2.0",
      "license_family": "APACHE",
      "license_file": "LICENSE",
      "summary": "The OpenTelemetry C++ Client"
    },
    "build": {
      "number": "1"
    },
    "extra": {
      "feedstock-name": "cpp-opentelemetry-sdk",
      "recipe-maintainers": [
        "lidavidm",
        "h-vetinari"
      ]
    },
    "outputs": [
      {
        "name": "libopentelemetry-cpp-headers",
        "requirements": {
          "build": [
            "cmake"
          ]
        },
        "script": "install.sh",
        "test": {
          "commands": [
            "test -d $PREFIX/include/opentelemetry",
            "test ! -f $PREFIX/lib/libopentelemetry_common.a",
            "test ! -f $PREFIX/lib/libopentelemetry_common.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_in_memory.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_in_memory.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_metrics.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_metrics.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_span.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_span.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_client.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_client.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_log.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_log.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_metrics.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_metrics.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_client.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_client.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_metric.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_metric.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_prometheus.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_prometheus.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_zipkin_trace.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_zipkin_trace.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_http_client_curl.a",
            "test ! -f $PREFIX/lib/libopentelemetry_http_client_curl.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_metrics.a",
            "test ! -f $PREFIX/lib/libopentelemetry_metrics.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_otlp_recordable.a",
            "test ! -f $PREFIX/lib/libopentelemetry_otlp_recordable.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_resources.a",
            "test ! -f $PREFIX/lib/libopentelemetry_resources.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_trace.a",
            "test ! -f $PREFIX/lib/libopentelemetry_trace.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_version.a",
            "test ! -f $PREFIX/lib/libopentelemetry_version.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_logs.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_logs.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_log.a",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_log.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_logs.a",
            "test ! -f $PREFIX/lib/libopentelemetry_logs.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_proto.a",
            "test ! -f $PREFIX/lib/libopentelemetry_proto.dylib",
            "test ! -d $PREFIX/lib/cmake/opentelemetry-cpp"
          ]
        }
      },
      {
        "name": "cpp-opentelemetry-api",
        "requirements": {
          "host": [
            "libopentelemetry-cpp-headers"
          ],
          "run": [
            "libopentelemetry-cpp-headers"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other output\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "libopentelemetry-cpp"
          ]
        },
        "name": "libopentelemetry-cpp",
        "requirements": {
          "build": [
            "cmake"
          ],
          "host": [
            "libopentelemetry-cpp-headers",
            "libabseil",
            "libcurl",
            "libgrpc",
            "libprotobuf",
            "nlohmann_json >=3.10.5",
            "zlib",
            "prometheus-cpp"
          ],
          "run": [
            "libopentelemetry-cpp-headers",
            "nlohmann_json",
            "prometheus-cpp"
          ],
          "run_constrained": [
            "cpp-opentelemetry-sdk =1.21.0"
          ]
        },
        "script": "install.sh",
        "test": {
          "commands": [
            "test -f $PREFIX/include/opentelemetry/exporters/ostream/common_utils.h || (echo \"exporters/ostream/common_utils.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/exporters/otlp/otlp_http.h || (echo \"exporters/otlp/otlp_http.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/exporters/prometheus/collector.h || (echo \"exporters/prometheus/collector.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/ext/http/common/url_parser.h || (echo \"ext/http/common/url_parser.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/proto/common/v1/common.pb.h || (echo \"proto/common/v1/common.pb.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/common/atomic_shared_ptr.h || (echo \"sdk/common/atomic_shared_ptr.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/metrics/data/point_data.h || (echo \"sdk/metrics/data/point_data.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/metrics/meter.h || (echo \"sdk/metrics/meter.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/resource/resource.h || (echo \"sdk/resource/resource.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/trace/sampler.h || (echo \"sdk/trace/sampler.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/version/version.h || (echo \"sdk/version/version.h not found\" && exit 1)",
            "test -f $PREFIX/include/opentelemetry/sdk/logs/logger.h || (echo \"sdk/logs/logger.h not found\" && exit 1)",
            "test -f $PREFIX/lib/libopentelemetry_common.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_common.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_in_memory.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_in_memory.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_ostream_metrics.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_metrics.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_ostream_span.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_span.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_client.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_client.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_log.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_log.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_metrics.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_grpc_metrics.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_http.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_client.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_client.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_metric.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_metric.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_prometheus.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_prometheus.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_zipkin_trace.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_zipkin_trace.a",
            "test -f $PREFIX/lib/libopentelemetry_http_client_curl.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_http_client_curl.a",
            "test -f $PREFIX/lib/libopentelemetry_metrics.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_metrics.a",
            "test -f $PREFIX/lib/libopentelemetry_otlp_recordable.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_otlp_recordable.a",
            "test -f $PREFIX/lib/libopentelemetry_resources.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_resources.a",
            "test -f $PREFIX/lib/libopentelemetry_trace.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_trace.a",
            "test -f $PREFIX/lib/libopentelemetry_version.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_version.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_ostream_logs.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_ostream_logs.a",
            "test -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_log.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_exporter_otlp_http_log.a",
            "test -f $PREFIX/lib/libopentelemetry_logs.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_logs.a",
            "test -f $PREFIX/lib/libopentelemetry_proto.dylib",
            "test ! -f $PREFIX/lib/libopentelemetry_proto.a",
            "test -f ${PREFIX}/lib/cmake/opentelemetry-cpp/opentelemetry-cpp-config.cmake"
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "libopentelemetry-cpp"
          ]
        },
        "name": "cpp-opentelemetry-sdk",
        "requirements": {
          "host": [
            "libabseil",
            "libcurl",
            "libgrpc",
            "libprotobuf",
            "nlohmann_json",
            "zlib",
            "prometheus-cpp",
            "libopentelemetry-cpp"
          ],
          "run": [
            "libopentelemetry-cpp"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other output\""
          ]
        }
      }
    ],
    "package": {
      "name": "opentelemetry-sdk",
      "version": "1.21.0"
    },
    "requirements": {
      "build": [
        "cxx_compiler_stub",
        "c_stdlib_stub",
        "cmake >=3.1",
        "ninja",
        "proto-opentelemetry-proto =1.6.0"
      ],
      "host": [
        "libabseil",
        "libcurl",
        "libgrpc",
        "libprotobuf",
        "nlohmann_json >=3.10.5",
        "zlib",
        "prometheus-cpp"
      ]
    },
    "schema_version": 0,
    "source": [
      {
        "patches": [
          "patches/0002-add-missing-shared-library-dependencies.patch",
          "patches/0003-add-necessary-abseil-linkage.patch"
        ],
        "sha256": "98e5546f577a11b52a57faed1f4cc60d8c1daa44760eba393f43eab5a8ec46a2",
        "url": "https://github.com/open-telemetry/opentelemetry-cpp/archive/refs/tags/v1.21.0.tar.gz"
      }
    ]
  },
  "osx_arm64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "ninja",
        "proto-opentelemetry-proto"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "libabseil",
        "libcurl",
        "libgrpc",
        "libopentelemetry-cpp",
        "libopentelemetry-cpp-headers",
        "libprotobuf",
        "nlohmann_json",
        "prometheus-cpp",
        "zlib"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "libopentelemetry-cpp",
        "libopentelemetry-cpp-headers",
        "nlohmann_json",
        "prometheus-cpp"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "outputs_names": {
    "__set__": true,
    "elements": [
      "cpp-opentelemetry-api",
      "cpp-opentelemetry-sdk",
      "libopentelemetry-cpp",
      "libopentelemetry-cpp-headers"
    ]
  },
  "parsing_error": false,
  "platforms": [
    "linux_64",
    "linux_aarch64",
    "linux_ppc64le",
    "osx_64",
    "osx_arm64",
    "win_64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/cpp-opentelemetry-sdk.json"
  },
  "raw_meta_yaml": "# code: language: jinja-yaml\n{% set version = \"1.21.0\" %}\n\n{% set libs = [\n    \"common\", \"exporter_in_memory\", \"exporter_ostream_metrics\",\n    \"exporter_ostream_span\", \"exporter_otlp_grpc\", \"exporter_otlp_grpc_client\",\n    \"exporter_otlp_grpc_log\", \"exporter_otlp_grpc_metrics\", \"exporter_otlp_http\",\n    \"exporter_otlp_http_client\", \"exporter_otlp_http_metric\", \"exporter_prometheus\",\n    \"exporter_zipkin_trace\", \"http_client_curl\", \"metrics\", \"otlp_recordable\",\n    \"resources\", \"trace\", \"version\"\n] %}\n# not available on windows\n{% set libs = libs + [\"exporter_ostream_logs\", \"exporter_otlp_http_log\", \"logs\", \"proto\"] %}  # [not win]\n# libopentelemetry_proto is static on windows even for BUILD_SHARED_LIBS=ON\n{% set libs_always_static = [\"proto\"] if win else [] %}\n\npackage:\n  name: opentelemetry-sdk\n  version: {{ version }}\n\nsource:\n  - url: https://github.com/open-telemetry/opentelemetry-cpp/archive/refs/tags/v{{ version }}.tar.gz\n    sha256: 98e5546f577a11b52a57faed1f4cc60d8c1daa44760eba393f43eab5a8ec46a2\n    patches:\n      - patches/0001-cross_compile_grpc_cpp_plugin_path.patch  # [build_platform != target_platform]\n      - patches/0002-add-missing-shared-library-dependencies.patch\n      - patches/0003-add-necessary-abseil-linkage.patch\n      - patches/0004-Define-NOMINMAX-for-Windows.patch  # [win]\n\nbuild:\n  number: 1\n\nrequirements:\n  build:\n    - {{ compiler('cxx') }}\n    - {{ stdlib(\"c\") }}\n    - cmake >=3.1\n    - ninja\n    - proto-opentelemetry-proto =1.6.0\n\n    # For cross-compiling\n    - curl                    # [build_platform != target_platform]\n    - libgrpc                 # [build_platform != target_platform]\n    - libprotobuf             # [build_platform != target_platform]\n    - nlohmann_json >=3.10.5  # [build_platform != target_platform]\n    - zlib                    # [build_platform != target_platform]\n    - prometheus-cpp          # [build_platform != target_platform]\n  host:\n    - libabseil\n    - libcurl\n    - libgrpc\n    - libprotobuf\n    - nlohmann_json >=3.10.5\n    - zlib\n    - prometheus-cpp\n    # because the windows builds of libgrpc before 1.55 are static, we need\n    # _their_ (not yet present) host dependencies to be able to link correctly\n    - c-ares         # [win and libprotobuf == \"3.21\"]\n    - openssl        # [win and libprotobuf == \"3.21\"]\n    - re2            # [win and libprotobuf == \"3.21\"]\n\noutputs:\n  - name: libopentelemetry-cpp-headers\n    script: install.sh  # [unix]\n    script: install.bat  # [win]\n    requirements:\n      build:\n        - cmake\n    test:\n      commands:\n        # headers\n        - test -d $PREFIX/include/opentelemetry                  # [unix]\n        - if not exist %LIBRARY_INC%\\opentelemetry exit 1        # [win]\n\n        # absence of all libraries (static & shared)\n        {% for each_lib in libs + libs_always_static %}\n        - test ! -f $PREFIX/lib/libopentelemetry_{{ each_lib }}.a                # [unix]\n        - test ! -f $PREFIX/lib/libopentelemetry_{{ each_lib }}.so               # [linux]\n        - test ! -f $PREFIX/lib/libopentelemetry_{{ each_lib }}.dylib            # [osx]\n        - if exist %LIBRARY_BIN%\\opentelemetry_{{ each_lib }}.dll exit 1         # [win]\n        - if exist %LIBRARY_LIB%\\opentelemetry_{{ each_lib }}.lib exit 1         # [win]\n        {% endfor %}\n\n        # absence of CMake metadata (reserved for libopentelemetry-cpp)\n        - test ! -d $PREFIX/lib/cmake/opentelemetry-cpp          # [unix]\n        - if exist %LIBRARY_LIB%\\cmake\\opentelemetry-cpp exit 1  # [win]\n\n  # compatibility output for old naming convention\n  - name: cpp-opentelemetry-api\n    requirements:\n      host:\n        - {{ pin_subpackage(\"libopentelemetry-cpp-headers\", exact=True) }}\n      run:\n        - {{ pin_subpackage(\"libopentelemetry-cpp-headers\", exact=True) }}\n    test:\n      commands:\n        - echo \"tested in other output\"\n\n  - name: libopentelemetry-cpp\n    script: install.sh  # [unix]\n    script: install.bat  # [win]\n    build:\n      run_exports:\n        - {{ pin_subpackage(\"libopentelemetry-cpp\", max_pin=\"x.x\") }}\n    requirements:\n      build:\n        - cmake\n      host:\n        - {{ pin_subpackage(\"libopentelemetry-cpp-headers\", exact=True) }}\n        - libabseil\n        - libcurl\n        - libgrpc\n        - libprotobuf\n        - nlohmann_json >=3.10.5\n        - zlib\n        - prometheus-cpp\n        # because the windows builds of libgrpc before 1.55 are static, we need\n        # _their_ (not yet present) host dependencies to be able to link correctly\n        - c-ares         # [win and libprotobuf == \"3.21\"]\n        - openssl        # [win and libprotobuf == \"3.21\"]\n        - re2            # [win and libprotobuf == \"3.21\"]\n      run:\n        - {{ pin_subpackage(\"libopentelemetry-cpp-headers\", exact=True) }}\n        - nlohmann_json\n        - prometheus-cpp\n      run_constrained:\n        # make sure we don't co-install with old version of old package name\n        - cpp-opentelemetry-sdk ={{ version }}\n\n    test:\n      commands:\n        # headers; not exhaustive, just a subset for testing\n        {% set headers = [\n            \"exporters/ostream/common_utils.h\", \"exporters/otlp/otlp_http.h\",\n            \"exporters/prometheus/collector.h\", \"ext/http/common/url_parser.h\",\n            \"proto/common/v1/common.pb.h\", \"sdk/common/atomic_shared_ptr.h\",\n            \"sdk/metrics/data/point_data.h\", \"sdk/metrics/meter.h\",\n            \"sdk/resource/resource.h\", \"sdk/trace/sampler.h\", \"sdk/version/version.h\"\n        ] %}\n        # not available on windows\n        {% set headers = headers + [\"sdk/logs/logger.h\"] %}  # [not win]\n        {% for each_header in headers %}\n        - test -f $PREFIX/include/opentelemetry/{{ each_header }} || (echo \"{{ each_header }} not found\" && exit 1)  # [unix]\n        - if not exist %LIBRARY_INC%\\opentelemetry\\{{ \"\\\\\".join(each_header.split(\"/\")) }} exit 1                    # [win]\n        {% endfor %}\n\n        # libraries\n        {% for each_lib in libs %}\n        # shared\n        - test -f $PREFIX/lib/libopentelemetry_{{ each_lib }}.so                 # [linux]\n        - test -f $PREFIX/lib/libopentelemetry_{{ each_lib }}.dylib              # [osx]\n        - if not exist %LIBRARY_BIN%\\opentelemetry_{{ each_lib }}.dll exit 1     # [win]\n        - if not exist %LIBRARY_LIB%\\opentelemetry_{{ each_lib }}.lib exit 1     # [win]\n\n        # absence of static libraries\n        - test ! -f $PREFIX/lib/libopentelemetry_{{ each_lib }}.a                # [unix]\n        {% endfor %}\n\n        {% for each_lib in libs_always_static %}\n        # static libraries\n        - test -f $PREFIX/lib/libopentelemetry_{{ each_lib }}.a                  # [unix]\n        - if not exist %LIBRARY_LIB%\\opentelemetry_{{ each_lib }}.lib exit 1     # [win]\n\n        # absence of shared libraries\n        - test ! -f $PREFIX/lib/libopentelemetry_{{ each_lib }}.so               # [linux]\n        - test ! -f $PREFIX/lib/libopentelemetry_{{ each_lib }}.dylib            # [osx]\n        - if exist %LIBRARY_BIN%\\opentelemetry_{{ each_lib }}.dll exit 1         # [win]\n        {% endfor %}\n\n        # cmake\n        - test -f ${PREFIX}/lib/cmake/opentelemetry-cpp/opentelemetry-cpp-config.cmake              # [unix]\n        - if not exist %LIBRARY_LIB%\\cmake\\opentelemetry-cpp\\opentelemetry-cpp-config.cmake exit 1  # [win]\n\n  # compatibility output for old naming convention\n  - name: cpp-opentelemetry-sdk\n    build:\n      run_exports:\n        - {{ pin_subpackage(\"libopentelemetry-cpp\", max_pin=\"x.x\") }}\n    requirements:\n      host:\n        # match host deps to avoid hash collisions between wrappers\n        - libabseil\n        - libcurl\n        - libgrpc\n        - libprotobuf\n        - nlohmann_json\n        - zlib\n        - prometheus-cpp\n        - {{ pin_subpackage(\"libopentelemetry-cpp\", exact=True) }}\n      run:\n        - {{ pin_subpackage(\"libopentelemetry-cpp\", exact=True) }}\n    test:\n      commands:\n        - echo \"tested in other output\"\nabout:\n  home: https://github.com/open-telemetry/opentelemetry-cpp\n  license: Apache-2.0\n  license_family: APACHE\n  license_file: LICENSE\n  summary: The OpenTelemetry C++ Client\n  description: |\n    OpenTelemetry is a collection of tools, APIs, and SDKs. Use it to\n    instrument, generate, collect, and export telemetry data (metrics,\n    logs, and traces) to help you analyze your softwareâ€™s performance\n    and behavior.\n  doc_url: https://opentelemetry.io/docs/instrumentation/cpp/\n  dev_url: https://github.com/open-telemetry/opentelemetry-cpp\n\nextra:\n  recipe-maintainers:\n    - lidavidm\n    - h-vetinari\n  feedstock-name: cpp-opentelemetry-sdk\n",
  "req": {
    "__set__": true,
    "elements": [
      "c_stdlib_stub",
      "cmake",
      "cxx_compiler_stub",
      "libabseil",
      "libcurl",
      "libgrpc",
      "libopentelemetry-cpp",
      "libopentelemetry-cpp-headers",
      "libprotobuf",
      "ninja",
      "nlohmann_json",
      "prometheus-cpp",
      "proto-opentelemetry-proto",
      "zlib"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "ninja",
        "proto-opentelemetry-proto"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "libabseil",
        "libcurl",
        "libgrpc",
        "libopentelemetry-cpp",
        "libopentelemetry-cpp-headers",
        "libprotobuf",
        "nlohmann_json",
        "prometheus-cpp",
        "zlib"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "libopentelemetry-cpp",
        "libopentelemetry-cpp-headers",
        "nlohmann_json",
        "prometheus-cpp"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_stdlib_stub",
        "cmake",
        "cmake >=3.1",
        "cxx_compiler_stub",
        "ninja",
        "proto-opentelemetry-proto =1.6.0"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "libabseil",
        "libcurl",
        "libgrpc",
        "libopentelemetry-cpp",
        "libopentelemetry-cpp-headers",
        "libprotobuf",
        "nlohmann_json",
        "nlohmann_json >=3.10.5",
        "prometheus-cpp",
        "zlib"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "libopentelemetry-cpp",
        "libopentelemetry-cpp-headers",
        "nlohmann_json",
        "prometheus-cpp"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "url": "https://github.com/open-telemetry/opentelemetry-cpp/archive/refs/tags/v1.21.0.tar.gz",
  "version": "1.21.0",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/cpp-opentelemetry-sdk.json"
  },
  "win_64_meta_yaml": {
    "about": {
      "description": "OpenTelemetry is a collection of tools, APIs, and SDKs. Use it to\ninstrument, generate, collect, and export telemetry data (metrics,\nlogs, and traces) to help you analyze your softwareâ€™s performance\nand behavior.\n",
      "dev_url": "https://github.com/open-telemetry/opentelemetry-cpp",
      "doc_url": "https://opentelemetry.io/docs/instrumentation/cpp/",
      "home": "https://github.com/open-telemetry/opentelemetry-cpp",
      "license": "Apache-2.0",
      "license_family": "APACHE",
      "license_file": "LICENSE",
      "summary": "The OpenTelemetry C++ Client"
    },
    "build": {
      "number": "1"
    },
    "extra": {
      "feedstock-name": "cpp-opentelemetry-sdk",
      "recipe-maintainers": [
        "lidavidm",
        "h-vetinari"
      ]
    },
    "outputs": [
      {
        "name": "libopentelemetry-cpp-headers",
        "requirements": {
          "build": [
            "cmake"
          ]
        },
        "script": "install.bat",
        "test": {
          "commands": [
            "if not exist %LIBRARY_INC%\\opentelemetry exit 1",
            "if exist %LIBRARY_BIN%\\opentelemetry_common.dll exit 1",
            "if exist %LIBRARY_LIB%\\opentelemetry_common.lib exit 1",
            "if exist %LIBRARY_BIN%\\opentelemetry_exporter_in_memory.dll exit 1",
            "if exist %LIBRARY_LIB%\\opentelemetry_exporter_in_memory.lib exit 1",
            "if exist %LIBRARY_BIN%\\opentelemetry_exporter_ostream_metrics.dll exit 1",
            "if exist %LIBRARY_LIB%\\opentelemetry_exporter_ostream_metrics.lib exit 1",
            "if exist %LIBRARY_BIN%\\opentelemetry_exporter_ostream_span.dll exit 1",
            "if exist %LIBRARY_LIB%\\opentelemetry_exporter_ostream_span.lib exit 1",
            "if exist %LIBRARY_BIN%\\opentelemetry_exporter_otlp_grpc.dll exit 1",
            "if exist %LIBRARY_LIB%\\opentelemetry_exporter_otlp_grpc.lib exit 1",
            "if exist %LIBRARY_BIN%\\opentelemetry_exporter_otlp_grpc_client.dll exit 1",
            "if exist %LIBRARY_LIB%\\opentelemetry_exporter_otlp_grpc_client.lib exit 1",
            "if exist %LIBRARY_BIN%\\opentelemetry_exporter_otlp_grpc_log.dll exit 1",
            "if exist %LIBRARY_LIB%\\opentelemetry_exporter_otlp_grpc_log.lib exit 1",
            "if exist %LIBRARY_BIN%\\opentelemetry_exporter_otlp_grpc_metrics.dll exit 1",
            "if exist %LIBRARY_LIB%\\opentelemetry_exporter_otlp_grpc_metrics.lib exit 1",
            "if exist %LIBRARY_BIN%\\opentelemetry_exporter_otlp_http.dll exit 1",
            "if exist %LIBRARY_LIB%\\opentelemetry_exporter_otlp_http.lib exit 1",
            "if exist %LIBRARY_BIN%\\opentelemetry_exporter_otlp_http_client.dll exit 1",
            "if exist %LIBRARY_LIB%\\opentelemetry_exporter_otlp_http_client.lib exit 1",
            "if exist %LIBRARY_BIN%\\opentelemetry_exporter_otlp_http_metric.dll exit 1",
            "if exist %LIBRARY_LIB%\\opentelemetry_exporter_otlp_http_metric.lib exit 1",
            "if exist %LIBRARY_BIN%\\opentelemetry_exporter_prometheus.dll exit 1",
            "if exist %LIBRARY_LIB%\\opentelemetry_exporter_prometheus.lib exit 1",
            "if exist %LIBRARY_BIN%\\opentelemetry_exporter_zipkin_trace.dll exit 1",
            "if exist %LIBRARY_LIB%\\opentelemetry_exporter_zipkin_trace.lib exit 1",
            "if exist %LIBRARY_BIN%\\opentelemetry_http_client_curl.dll exit 1",
            "if exist %LIBRARY_LIB%\\opentelemetry_http_client_curl.lib exit 1",
            "if exist %LIBRARY_BIN%\\opentelemetry_metrics.dll exit 1",
            "if exist %LIBRARY_LIB%\\opentelemetry_metrics.lib exit 1",
            "if exist %LIBRARY_BIN%\\opentelemetry_otlp_recordable.dll exit 1",
            "if exist %LIBRARY_LIB%\\opentelemetry_otlp_recordable.lib exit 1",
            "if exist %LIBRARY_BIN%\\opentelemetry_resources.dll exit 1",
            "if exist %LIBRARY_LIB%\\opentelemetry_resources.lib exit 1",
            "if exist %LIBRARY_BIN%\\opentelemetry_trace.dll exit 1",
            "if exist %LIBRARY_LIB%\\opentelemetry_trace.lib exit 1",
            "if exist %LIBRARY_BIN%\\opentelemetry_version.dll exit 1",
            "if exist %LIBRARY_LIB%\\opentelemetry_version.lib exit 1",
            "if exist %LIBRARY_BIN%\\opentelemetry_exporter_ostream_logs.dll exit 1",
            "if exist %LIBRARY_LIB%\\opentelemetry_exporter_ostream_logs.lib exit 1",
            "if exist %LIBRARY_BIN%\\opentelemetry_exporter_otlp_http_log.dll exit 1",
            "if exist %LIBRARY_LIB%\\opentelemetry_exporter_otlp_http_log.lib exit 1",
            "if exist %LIBRARY_BIN%\\opentelemetry_logs.dll exit 1",
            "if exist %LIBRARY_LIB%\\opentelemetry_logs.lib exit 1",
            "if exist %LIBRARY_BIN%\\opentelemetry_proto.dll exit 1",
            "if exist %LIBRARY_LIB%\\opentelemetry_proto.lib exit 1",
            "if exist %LIBRARY_LIB%\\cmake\\opentelemetry-cpp exit 1"
          ]
        }
      },
      {
        "name": "cpp-opentelemetry-api",
        "requirements": {
          "host": [
            "libopentelemetry-cpp-headers"
          ],
          "run": [
            "libopentelemetry-cpp-headers"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other output\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "libopentelemetry-cpp"
          ]
        },
        "name": "libopentelemetry-cpp",
        "requirements": {
          "build": [
            "cmake"
          ],
          "host": [
            "libopentelemetry-cpp-headers",
            "libabseil",
            "libcurl",
            "libgrpc",
            "libprotobuf",
            "nlohmann_json >=3.10.5",
            "zlib",
            "prometheus-cpp"
          ],
          "run": [
            "libopentelemetry-cpp-headers",
            "nlohmann_json",
            "prometheus-cpp"
          ],
          "run_constrained": [
            "cpp-opentelemetry-sdk =1.21.0"
          ]
        },
        "script": "install.bat",
        "test": {
          "commands": [
            "if not exist %LIBRARY_INC%\\opentelemetry\\exporters\\ostream\\common_utils.h exit 1",
            "if not exist %LIBRARY_INC%\\opentelemetry\\exporters\\otlp\\otlp_http.h exit 1",
            "if not exist %LIBRARY_INC%\\opentelemetry\\exporters\\prometheus\\collector.h exit 1",
            "if not exist %LIBRARY_INC%\\opentelemetry\\ext\\http\\common\\url_parser.h exit 1",
            "if not exist %LIBRARY_INC%\\opentelemetry\\proto\\common\\v1\\common.pb.h exit 1",
            "if not exist %LIBRARY_INC%\\opentelemetry\\sdk\\common\\atomic_shared_ptr.h exit 1",
            "if not exist %LIBRARY_INC%\\opentelemetry\\sdk\\metrics\\data\\point_data.h exit 1",
            "if not exist %LIBRARY_INC%\\opentelemetry\\sdk\\metrics\\meter.h exit 1",
            "if not exist %LIBRARY_INC%\\opentelemetry\\sdk\\resource\\resource.h exit 1",
            "if not exist %LIBRARY_INC%\\opentelemetry\\sdk\\trace\\sampler.h exit 1",
            "if not exist %LIBRARY_INC%\\opentelemetry\\sdk\\version\\version.h exit 1",
            "if not exist %LIBRARY_INC%\\opentelemetry\\sdk\\logs\\logger.h exit 1",
            "if not exist %LIBRARY_BIN%\\opentelemetry_common.dll exit 1",
            "if not exist %LIBRARY_LIB%\\opentelemetry_common.lib exit 1",
            "if not exist %LIBRARY_BIN%\\opentelemetry_exporter_in_memory.dll exit 1",
            "if not exist %LIBRARY_LIB%\\opentelemetry_exporter_in_memory.lib exit 1",
            "if not exist %LIBRARY_BIN%\\opentelemetry_exporter_ostream_metrics.dll exit 1",
            "if not exist %LIBRARY_LIB%\\opentelemetry_exporter_ostream_metrics.lib exit 1",
            "if not exist %LIBRARY_BIN%\\opentelemetry_exporter_ostream_span.dll exit 1",
            "if not exist %LIBRARY_LIB%\\opentelemetry_exporter_ostream_span.lib exit 1",
            "if not exist %LIBRARY_BIN%\\opentelemetry_exporter_otlp_grpc.dll exit 1",
            "if not exist %LIBRARY_LIB%\\opentelemetry_exporter_otlp_grpc.lib exit 1",
            "if not exist %LIBRARY_BIN%\\opentelemetry_exporter_otlp_grpc_client.dll exit 1",
            "if not exist %LIBRARY_LIB%\\opentelemetry_exporter_otlp_grpc_client.lib exit 1",
            "if not exist %LIBRARY_BIN%\\opentelemetry_exporter_otlp_grpc_log.dll exit 1",
            "if not exist %LIBRARY_LIB%\\opentelemetry_exporter_otlp_grpc_log.lib exit 1",
            "if not exist %LIBRARY_BIN%\\opentelemetry_exporter_otlp_grpc_metrics.dll exit 1",
            "if not exist %LIBRARY_LIB%\\opentelemetry_exporter_otlp_grpc_metrics.lib exit 1",
            "if not exist %LIBRARY_BIN%\\opentelemetry_exporter_otlp_http.dll exit 1",
            "if not exist %LIBRARY_LIB%\\opentelemetry_exporter_otlp_http.lib exit 1",
            "if not exist %LIBRARY_BIN%\\opentelemetry_exporter_otlp_http_client.dll exit 1",
            "if not exist %LIBRARY_LIB%\\opentelemetry_exporter_otlp_http_client.lib exit 1",
            "if not exist %LIBRARY_BIN%\\opentelemetry_exporter_otlp_http_metric.dll exit 1",
            "if not exist %LIBRARY_LIB%\\opentelemetry_exporter_otlp_http_metric.lib exit 1",
            "if not exist %LIBRARY_BIN%\\opentelemetry_exporter_prometheus.dll exit 1",
            "if not exist %LIBRARY_LIB%\\opentelemetry_exporter_prometheus.lib exit 1",
            "if not exist %LIBRARY_BIN%\\opentelemetry_exporter_zipkin_trace.dll exit 1",
            "if not exist %LIBRARY_LIB%\\opentelemetry_exporter_zipkin_trace.lib exit 1",
            "if not exist %LIBRARY_BIN%\\opentelemetry_http_client_curl.dll exit 1",
            "if not exist %LIBRARY_LIB%\\opentelemetry_http_client_curl.lib exit 1",
            "if not exist %LIBRARY_BIN%\\opentelemetry_metrics.dll exit 1",
            "if not exist %LIBRARY_LIB%\\opentelemetry_metrics.lib exit 1",
            "if not exist %LIBRARY_BIN%\\opentelemetry_otlp_recordable.dll exit 1",
            "if not exist %LIBRARY_LIB%\\opentelemetry_otlp_recordable.lib exit 1",
            "if not exist %LIBRARY_BIN%\\opentelemetry_resources.dll exit 1",
            "if not exist %LIBRARY_LIB%\\opentelemetry_resources.lib exit 1",
            "if not exist %LIBRARY_BIN%\\opentelemetry_trace.dll exit 1",
            "if not exist %LIBRARY_LIB%\\opentelemetry_trace.lib exit 1",
            "if not exist %LIBRARY_BIN%\\opentelemetry_version.dll exit 1",
            "if not exist %LIBRARY_LIB%\\opentelemetry_version.lib exit 1",
            "if not exist %LIBRARY_BIN%\\opentelemetry_exporter_ostream_logs.dll exit 1",
            "if not exist %LIBRARY_LIB%\\opentelemetry_exporter_ostream_logs.lib exit 1",
            "if not exist %LIBRARY_BIN%\\opentelemetry_exporter_otlp_http_log.dll exit 1",
            "if not exist %LIBRARY_LIB%\\opentelemetry_exporter_otlp_http_log.lib exit 1",
            "if not exist %LIBRARY_BIN%\\opentelemetry_logs.dll exit 1",
            "if not exist %LIBRARY_LIB%\\opentelemetry_logs.lib exit 1",
            "if not exist %LIBRARY_BIN%\\opentelemetry_proto.dll exit 1",
            "if not exist %LIBRARY_LIB%\\opentelemetry_proto.lib exit 1",
            "if not exist %LIBRARY_LIB%\\cmake\\opentelemetry-cpp\\opentelemetry-cpp-config.cmake exit 1"
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "libopentelemetry-cpp"
          ]
        },
        "name": "cpp-opentelemetry-sdk",
        "requirements": {
          "host": [
            "libabseil",
            "libcurl",
            "libgrpc",
            "libprotobuf",
            "nlohmann_json",
            "zlib",
            "prometheus-cpp",
            "libopentelemetry-cpp"
          ],
          "run": [
            "libopentelemetry-cpp"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other output\""
          ]
        }
      }
    ],
    "package": {
      "name": "opentelemetry-sdk",
      "version": "1.21.0"
    },
    "requirements": {
      "build": [
        "cxx_compiler_stub",
        "c_stdlib_stub",
        "cmake >=3.1",
        "ninja",
        "proto-opentelemetry-proto =1.6.0"
      ],
      "host": [
        "libabseil",
        "libcurl",
        "libgrpc",
        "libprotobuf",
        "nlohmann_json >=3.10.5",
        "zlib",
        "prometheus-cpp"
      ]
    },
    "schema_version": 0,
    "source": [
      {
        "patches": [
          "patches/0002-add-missing-shared-library-dependencies.patch",
          "patches/0003-add-necessary-abseil-linkage.patch",
          "patches/0004-Define-NOMINMAX-for-Windows.patch"
        ],
        "sha256": "98e5546f577a11b52a57faed1f4cc60d8c1daa44760eba393f43eab5a8ec46a2",
        "url": "https://github.com/open-telemetry/opentelemetry-cpp/archive/refs/tags/v1.21.0.tar.gz"
      }
    ]
  },
  "win_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "ninja",
        "proto-opentelemetry-proto"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "libabseil",
        "libcurl",
        "libgrpc",
        "libopentelemetry-cpp",
        "libopentelemetry-cpp-headers",
        "libprotobuf",
        "nlohmann_json",
        "prometheus-cpp",
        "zlib"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "libopentelemetry-cpp",
        "libopentelemetry-cpp-headers",
        "nlohmann_json",
        "prometheus-cpp"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  }
}