{
  "archived": false,
  "branch": "main",
  "conda-forge.yml": {
    "build_platform": {
      "linux_aarch64": "linux_64",
      "linux_ppc64le": "linux_64",
      "osx_arm64": "osx_64"
    },
    "conda_build": {
      "pkg_format": "2"
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    },
    "provider": {
      "linux_aarch64": "default",
      "linux_ppc64le": "default"
    },
    "test": "native_and_emulated"
  },
  "feedstock_name": "libdrs",
  "hash_type": "sha256",
  "linux_64_meta_yaml": {
    "about": {
      "description": "libdrs is suitable for the data generated and used in climate model research.\nIt is oriented toward use with models generating very large datasets on\nsupercomputers, as well as with graphics workstations used for analysis and\ndisplay of smaller subsets of data.\n",
      "dev_url": "http://github.com/CDAT/libdrs",
      "home": "http://cdat.llnl.gov",
      "license": "BSD-3-Clause",
      "license_file": "bsd-3-clause.txt",
      "summary": "Data Retrieval and Storage DRS software Fortran library"
    },
    "build": {
      "number": "120"
    },
    "extra": {
      "recipe-maintainers": [
        "dnadeau4",
        "doutriaux1",
        "downiec",
        "jasonb5",
        "xylar"
      ]
    },
    "package": {
      "name": "libdrs",
      "version": "3.1.2"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "fortran_compiler_stub",
        "make"
      ],
      "host": [
        "libnetcdf * nompi_*",
        "g2clib"
      ],
      "run": [
        "libnetcdf"
      ]
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "0001-remove-mtune-option.patch"
      ],
      "sha256": "90e10191116a78228739276078a0ddcf0d6458516f192e9e79fecb2beeceb3fa",
      "url": "https://github.com/CDAT/libdrs/archive/v3.1.2.tar.gz"
    },
    "test": {
      "commands": [
        "test -f $PREFIX/lib/libdrs.a"
      ]
    }
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "fortran_compiler_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "g2clib",
        "libnetcdf"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "libnetcdf"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "linux_aarch64_meta_yaml": {
    "about": {
      "description": "libdrs is suitable for the data generated and used in climate model research.\nIt is oriented toward use with models generating very large datasets on\nsupercomputers, as well as with graphics workstations used for analysis and\ndisplay of smaller subsets of data.\n",
      "dev_url": "http://github.com/CDAT/libdrs",
      "home": "http://cdat.llnl.gov",
      "license": "BSD-3-Clause",
      "license_file": "bsd-3-clause.txt",
      "summary": "Data Retrieval and Storage DRS software Fortran library"
    },
    "build": {
      "number": "120"
    },
    "extra": {
      "recipe-maintainers": [
        "dnadeau4",
        "doutriaux1",
        "downiec",
        "jasonb5",
        "xylar"
      ]
    },
    "package": {
      "name": "libdrs",
      "version": "3.1.2"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "fortran_compiler_stub",
        "make"
      ],
      "host": [
        "libnetcdf * nompi_*",
        "g2clib"
      ],
      "run": [
        "libnetcdf"
      ]
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "0001-remove-mtune-option.patch",
        "0002-remove-lgfortran.patch"
      ],
      "sha256": "90e10191116a78228739276078a0ddcf0d6458516f192e9e79fecb2beeceb3fa",
      "url": "https://github.com/CDAT/libdrs/archive/v3.1.2.tar.gz"
    },
    "test": {
      "commands": [
        "test -f $PREFIX/lib/libdrs.a"
      ]
    }
  },
  "linux_aarch64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "fortran_compiler_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "g2clib",
        "libnetcdf"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "libnetcdf"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "linux_ppc64le_meta_yaml": {
    "about": {
      "description": "libdrs is suitable for the data generated and used in climate model research.\nIt is oriented toward use with models generating very large datasets on\nsupercomputers, as well as with graphics workstations used for analysis and\ndisplay of smaller subsets of data.\n",
      "dev_url": "http://github.com/CDAT/libdrs",
      "home": "http://cdat.llnl.gov",
      "license": "BSD-3-Clause",
      "license_file": "bsd-3-clause.txt",
      "summary": "Data Retrieval and Storage DRS software Fortran library"
    },
    "build": {
      "number": "120"
    },
    "extra": {
      "recipe-maintainers": [
        "dnadeau4",
        "doutriaux1",
        "downiec",
        "jasonb5",
        "xylar"
      ]
    },
    "package": {
      "name": "libdrs",
      "version": "3.1.2"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "fortran_compiler_stub",
        "make"
      ],
      "host": [
        "libnetcdf * nompi_*",
        "g2clib"
      ],
      "run": [
        "libnetcdf"
      ]
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "0001-remove-mtune-option.patch",
        "0002-remove-lgfortran.patch"
      ],
      "sha256": "90e10191116a78228739276078a0ddcf0d6458516f192e9e79fecb2beeceb3fa",
      "url": "https://github.com/CDAT/libdrs/archive/v3.1.2.tar.gz"
    },
    "test": {
      "commands": [
        "test -f $PREFIX/lib/libdrs.a"
      ]
    }
  },
  "linux_ppc64le_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "fortran_compiler_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "g2clib",
        "libnetcdf"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "libnetcdf"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "meta_yaml": {
    "about": {
      "description": "libdrs is suitable for the data generated and used in climate model research.\nIt is oriented toward use with models generating very large datasets on\nsupercomputers, as well as with graphics workstations used for analysis and\ndisplay of smaller subsets of data.\n",
      "dev_url": "http://github.com/CDAT/libdrs",
      "home": "http://cdat.llnl.gov",
      "license": "BSD-3-Clause",
      "license_file": "bsd-3-clause.txt",
      "summary": "Data Retrieval and Storage DRS software Fortran library"
    },
    "build": {
      "number": "120"
    },
    "extra": {
      "recipe-maintainers": [
        "dnadeau4",
        "doutriaux1",
        "downiec",
        "jasonb5",
        "xylar"
      ]
    },
    "package": {
      "name": "libdrs",
      "version": "3.1.2"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "fortran_compiler_stub",
        "make"
      ],
      "host": [
        "libnetcdf * nompi_*",
        "g2clib"
      ],
      "run": [
        "libnetcdf"
      ]
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "0001-remove-mtune-option.patch",
        "0002-remove-lgfortran.patch",
        "0003-remove-lgrib2c.patch"
      ],
      "sha256": "90e10191116a78228739276078a0ddcf0d6458516f192e9e79fecb2beeceb3fa",
      "url": "https://github.com/CDAT/libdrs/archive/v3.1.2.tar.gz"
    },
    "test": {
      "commands": [
        "test -f $PREFIX/lib/libdrs.a"
      ]
    }
  },
  "name": "libdrs",
  "osx_64_meta_yaml": {
    "about": {
      "description": "libdrs is suitable for the data generated and used in climate model research.\nIt is oriented toward use with models generating very large datasets on\nsupercomputers, as well as with graphics workstations used for analysis and\ndisplay of smaller subsets of data.\n",
      "dev_url": "http://github.com/CDAT/libdrs",
      "home": "http://cdat.llnl.gov",
      "license": "BSD-3-Clause",
      "license_file": "bsd-3-clause.txt",
      "summary": "Data Retrieval and Storage DRS software Fortran library"
    },
    "build": {
      "number": "120"
    },
    "extra": {
      "recipe-maintainers": [
        "dnadeau4",
        "doutriaux1",
        "downiec",
        "jasonb5",
        "xylar"
      ]
    },
    "package": {
      "name": "libdrs",
      "version": "3.1.2"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "fortran_compiler_stub",
        "make"
      ],
      "host": [
        "libnetcdf * nompi_*",
        "g2clib"
      ],
      "run": [
        "libnetcdf"
      ]
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "0001-remove-mtune-option.patch",
        "0003-remove-lgrib2c.patch"
      ],
      "sha256": "90e10191116a78228739276078a0ddcf0d6458516f192e9e79fecb2beeceb3fa",
      "url": "https://github.com/CDAT/libdrs/archive/v3.1.2.tar.gz"
    },
    "test": {
      "commands": [
        "test -f $PREFIX/lib/libdrs.a"
      ]
    }
  },
  "osx_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "fortran_compiler_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "g2clib",
        "libnetcdf"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "libnetcdf"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "osx_arm64_meta_yaml": {
    "about": {
      "description": "libdrs is suitable for the data generated and used in climate model research.\nIt is oriented toward use with models generating very large datasets on\nsupercomputers, as well as with graphics workstations used for analysis and\ndisplay of smaller subsets of data.\n",
      "dev_url": "http://github.com/CDAT/libdrs",
      "home": "http://cdat.llnl.gov",
      "license": "BSD-3-Clause",
      "license_file": "bsd-3-clause.txt",
      "summary": "Data Retrieval and Storage DRS software Fortran library"
    },
    "build": {
      "number": "120"
    },
    "extra": {
      "recipe-maintainers": [
        "dnadeau4",
        "doutriaux1",
        "downiec",
        "jasonb5",
        "xylar"
      ]
    },
    "package": {
      "name": "libdrs",
      "version": "3.1.2"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "fortran_compiler_stub",
        "make"
      ],
      "host": [
        "libnetcdf * nompi_*",
        "g2clib"
      ],
      "run": [
        "libnetcdf"
      ]
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "0001-remove-mtune-option.patch",
        "0003-remove-lgrib2c.patch"
      ],
      "sha256": "90e10191116a78228739276078a0ddcf0d6458516f192e9e79fecb2beeceb3fa",
      "url": "https://github.com/CDAT/libdrs/archive/v3.1.2.tar.gz"
    },
    "test": {
      "commands": [
        "test -f $PREFIX/lib/libdrs.a"
      ]
    }
  },
  "osx_arm64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "fortran_compiler_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "g2clib",
        "libnetcdf"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "libnetcdf"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "outputs_names": {
    "__set__": true,
    "elements": [
      "libdrs"
    ]
  },
  "parsing_error": "feedstock parsing error: Error running 'conda-forge-tick-container parse-feedstock --existing-feedstock-node-attrs - --log-level info --mark-not-archived' in container - error RuntimeError raised:\n'conda build error: CondaBuildUserError: Invalid selector in meta.yaml line 14:\noffending selector:\n  [linux & (ppc64le | aarch64)]\nexception:\n  ValidationException: Node type 'BitAnd' is not allowed. (whitelist it manually)\n\nTraceback (most recent call last):\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/metadata.py\", line 396, in select_lines\n    if selector_cache[selector]:\n       ~~~~~~~~~~~~~~^^^^^^^^^^\nKeyError: 'linux & (ppc64le | aarch64)'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/metadata.py\", line 401, in select_lines\n    value = bool(eval_selector(selector, namespace, variants_in_place))\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/metadata.py\", line 339, in eval_selector\n    expression = Expr(selector_string.lstrip(), model=evalidate_model()).code\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/evalidate/__init__.py\", line 122, in __init__\n    v.visit(self.node)\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/ast.py\", line 418, in visit\n    return visitor(node)\n           ^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/evalidate/__init__.py\", line 79, in generic_visit\n    ast.NodeVisitor.generic_visit(self, node)\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/ast.py\", line 428, in generic_visit\n    self.visit(value)\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/ast.py\", line 418, in visit\n    return visitor(node)\n           ^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/evalidate/__init__.py\", line 79, in generic_visit\n    ast.NodeVisitor.generic_visit(self, node)\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/ast.py\", line 428, in generic_visit\n    self.visit(value)\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/ast.py\", line 418, in visit\n    return visitor(node)\n           ^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/evalidate/__init__.py\", line 81, in generic_visit\n    raise ValidationException(\nevalidate.ValidationException: Node type 'BitAnd' is not allowed. (whitelist it manually)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/opt/autotick-bot/conda_forge_tick/utils.py\", line 1002, in parse_meta_yaml_local\n    return _run(use_orig_cbc_path=True)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/autotick-bot/conda_forge_tick/utils.py\", line 989, in _run\n    return _parse_meta_yaml_impl(\n           ^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/autotick-bot/conda_forge_tick/utils.py\", line 1090, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/metadata.py\", line 1250, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/metadata.py\", line 1339, in parse_again\n    self._get_contents(\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/metadata.py\", line 2062, in _get_contents\n    env.globals.update(get_dict(m=self, skip_build_id=skip_build_id))\n                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/environ.py\", line 359, in get_dict\n    m.config._merge_build_host = m.build_is_host\n                                 ^^^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/metadata.py\", line 3080, in build_is_host\n    and not self.uses_new_style_compiler_activation\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/metadata.py\", line 2380, in uses_new_style_compiler_activation\n    text = self.extract_requirements_text()\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/metadata.py\", line 2258, in extract_requirements_text\n    if \"package:\" in self.get_recipe_text(force_top_level=force_top_level):\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/metadata.py\", line 2248, in get_recipe_text\n    recipe_text = select_lines(\n                  ^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/metadata.py\", line 406, in select_lines\n    raise CondaBuildUserError(\nconda_build.exceptions.CondaBuildUserError: Invalid selector in meta.yaml line 14:\noffending selector:\n  [linux & (ppc64le | aarch64)]\nexception:\n  ValidationException: Node type 'BitAnd' is not allowed. (whitelist it manually)\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/metadata.py\", line 396, in select_lines\n    if selector_cache[selector]:\n       ~~~~~~~~~~~~~~^^^^^^^^^^\nKeyError: 'linux & (ppc64le | aarch64)'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/metadata.py\", line 401, in select_lines\n    value = bool(eval_selector(selector, namespace, variants_in_place))\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/metadata.py\", line 339, in eval_selector\n    expression = Expr(selector_string.lstrip(), model=evalidate_model()).code\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/evalidate/__init__.py\", line 122, in __init__\n    v.visit(self.node)\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/ast.py\", line 418, in visit\n    return visitor(node)\n           ^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/evalidate/__init__.py\", line 79, in generic_visit\n    ast.NodeVisitor.generic_visit(self, node)\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/ast.py\", line 428, in generic_visit\n    self.visit(value)\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/ast.py\", line 418, in visit\n    return visitor(node)\n           ^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/evalidate/__init__.py\", line 79, in generic_visit\n    ast.NodeVisitor.generic_visit(self, node)\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/ast.py\", line 428, in generic_visit\n    self.visit(value)\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/ast.py\", line 418, in visit\n    return visitor(node)\n           ^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/evalidate/__init__.py\", line 81, in generic_visit\n    raise ValidationException(\nevalidate.ValidationException: Node type 'BitAnd' is not allowed. (whitelist it manually)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/opt/autotick-bot/conda_forge_tick/utils.py\", line 1006, in parse_meta_yaml_local\n    return _run(use_orig_cbc_path=False)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/autotick-bot/conda_forge_tick/utils.py\", line 989, in _run\n    return _parse_meta_yaml_impl(\n           ^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/autotick-bot/conda_forge_tick/utils.py\", line 1090, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/metadata.py\", line 1250, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/metadata.py\", line 1339, in parse_again\n    self._get_contents(\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/metadata.py\", line 2062, in _get_contents\n    env.globals.update(get_dict(m=self, skip_build_id=skip_build_id))\n                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/environ.py\", line 359, in get_dict\n    m.config._merge_build_host = m.build_is_host\n                                 ^^^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/metadata.py\", line 3080, in build_is_host\n    and not self.uses_new_style_compiler_activation\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/metadata.py\", line 2380, in uses_new_style_compiler_activation\n    text = self.extract_requirements_text()\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/metadata.py\", line 2258, in extract_requirements_text\n    if \"package:\" in self.get_recipe_text(force_top_level=force_top_level):\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/metadata.py\", line 2248, in get_recipe_text\n    recipe_text = select_lines(\n                  ^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/metadata.py\", line 406, in select_lines\n    raise CondaBuildUserError(\nconda_build.exceptions.CondaBuildUserError: Invalid selector in meta.yaml line 14:\noffending selector:\n  [linux & (ppc64le | aarch64)]\nexception:\n  ValidationException: Node type 'BitAnd' is not allowed. (whitelist it manually)\n\n'\nTraceback (most recent call last):\n  File \"/home/runner/work/cf-scripts/cf-scripts/cf-scripts/conda_forge_tick/make_graph.py\", line 107, in try_load_feedstock\n    data = load_feedstock(name, attrs.data, mark_not_archived=mark_not_archived)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/cf-scripts/cf-scripts/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 756, in load_feedstock\n    return load_feedstock_containerized(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/cf-scripts/cf-scripts/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 703, in load_feedstock_containerized\n    data = run_container_operation(\n           ^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/micromamba/envs/cf-scripts/lib/python3.11/site-packages/conda_forge_feedstock_ops/container_utils.py\", line 232, in run_container_operation\n    raise ContainerRuntimeError(\nconda_forge_feedstock_ops.container_utils.ContainerRuntimeError: Error running 'conda-forge-tick-container parse-feedstock --existing-feedstock-node-attrs - --log-level info --mark-not-archived' in container - error RuntimeError raised:\n'conda build error: CondaBuildUserError: Invalid selector in meta.yaml line 14:\noffending selector:\n  [linux & (ppc64le | aarch64)]\nexception:\n  ValidationException: Node type 'BitAnd' is not allowed. (whitelist it manually)\n\nTraceback (most recent call last):\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/metadata.py\", line 396, in select_lines\n    if selector_cache[selector]:\n       ~~~~~~~~~~~~~~^^^^^^^^^^\nKeyError: 'linux & (ppc64le | aarch64)'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/metadata.py\", line 401, in select_lines\n    value = bool(eval_selector(selector, namespace, variants_in_place))\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/metadata.py\", line 339, in eval_selector\n    expression = Expr(selector_string.lstrip(), model=evalidate_model()).code\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/evalidate/__init__.py\", line 122, in __init__\n    v.visit(self.node)\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/ast.py\", line 418, in visit\n    return visitor(node)\n           ^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/evalidate/__init__.py\", line 79, in generic_visit\n    ast.NodeVisitor.generic_visit(self, node)\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/ast.py\", line 428, in generic_visit\n    self.visit(value)\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/ast.py\", line 418, in visit\n    return visitor(node)\n           ^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/evalidate/__init__.py\", line 79, in generic_visit\n    ast.NodeVisitor.generic_visit(self, node)\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/ast.py\", line 428, in generic_visit\n    self.visit(value)\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/ast.py\", line 418, in visit\n    return visitor(node)\n           ^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/evalidate/__init__.py\", line 81, in generic_visit\n    raise ValidationException(\nevalidate.ValidationException: Node type 'BitAnd' is not allowed. (whitelist it manually)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/opt/autotick-bot/conda_forge_tick/utils.py\", line 1002, in parse_meta_yaml_local\n    return _run(use_orig_cbc_path=True)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/autotick-bot/conda_forge_tick/utils.py\", line 989, in _run\n    return _parse_meta_yaml_impl(\n           ^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/autotick-bot/conda_forge_tick/utils.py\", line 1090, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/metadata.py\", line 1250, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/metadata.py\", line 1339, in parse_again\n    self._get_contents(\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/metadata.py\", line 2062, in _get_contents\n    env.globals.update(get_dict(m=self, skip_build_id=skip_build_id))\n                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/environ.py\", line 359, in get_dict\n    m.config._merge_build_host = m.build_is_host\n                                 ^^^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/metadata.py\", line 3080, in build_is_host\n    and not self.uses_new_style_compiler_activation\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/metadata.py\", line 2380, in uses_new_style_compiler_activation\n    text = self.extract_requirements_text()\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/metadata.py\", line 2258, in extract_requirements_text\n    if \"package:\" in self.get_recipe_text(force_top_level=force_top_level):\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/metadata.py\", line 2248, in get_recipe_text\n    recipe_text = select_lines(\n                  ^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/metadata.py\", line 406, in select_lines\n    raise CondaBuildUserError(\nconda_build.exceptions.CondaBuildUserError: Invalid selector in meta.yaml line 14:\noffending selector:\n  [linux & (ppc64le | aarch64)]\nexception:\n  ValidationException: Node type 'BitAnd' is not allowed. (whitelist it manually)\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/metadata.py\", line 396, in select_lines\n    if selector_cache[selector]:\n       ~~~~~~~~~~~~~~^^^^^^^^^^\nKeyError: 'linux & (ppc64le | aarch64)'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/metadata.py\", line 401, in select_lines\n    value = bool(eval_selector(selector, namespace, variants_in_place))\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/metadata.py\", line 339, in eval_selector\n    expression = Expr(selector_string.lstrip(), model=evalidate_model()).code\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/evalidate/__init__.py\", line 122, in __init__\n    v.visit(self.node)\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/ast.py\", line 418, in visit\n    return visitor(node)\n           ^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/evalidate/__init__.py\", line 79, in generic_visit\n    ast.NodeVisitor.generic_visit(self, node)\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/ast.py\", line 428, in generic_visit\n    self.visit(value)\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/ast.py\", line 418, in visit\n    return visitor(node)\n           ^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/evalidate/__init__.py\", line 79, in generic_visit\n    ast.NodeVisitor.generic_visit(self, node)\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/ast.py\", line 428, in generic_visit\n    self.visit(value)\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/ast.py\", line 418, in visit\n    return visitor(node)\n           ^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/evalidate/__init__.py\", line 81, in generic_visit\n    raise ValidationException(\nevalidate.ValidationException: Node type 'BitAnd' is not allowed. (whitelist it manually)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/opt/autotick-bot/conda_forge_tick/utils.py\", line 1006, in parse_meta_yaml_local\n    return _run(use_orig_cbc_path=False)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/autotick-bot/conda_forge_tick/utils.py\", line 989, in _run\n    return _parse_meta_yaml_impl(\n           ^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/autotick-bot/conda_forge_tick/utils.py\", line 1090, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/metadata.py\", line 1250, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/metadata.py\", line 1339, in parse_again\n    self._get_contents(\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/metadata.py\", line 2062, in _get_contents\n    env.globals.update(get_dict(m=self, skip_build_id=skip_build_id))\n                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/environ.py\", line 359, in get_dict\n    m.config._merge_build_host = m.build_is_host\n                                 ^^^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/metadata.py\", line 3080, in build_is_host\n    and not self.uses_new_style_compiler_activation\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/metadata.py\", line 2380, in uses_new_style_compiler_activation\n    text = self.extract_requirements_text()\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/metadata.py\", line 2258, in extract_requirements_text\n    if \"package:\" in self.get_recipe_text(force_top_level=force_top_level):\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/metadata.py\", line 2248, in get_recipe_text\n    recipe_text = select_lines(\n                  ^^^^^^^^^^^^^\n  File \"/opt/conda/envs/cf-scripts/lib/python3.11/site-packages/conda_build/metadata.py\", line 406, in select_lines\n    raise CondaBuildUserError(\nconda_build.exceptions.CondaBuildUserError: Invalid selector in meta.yaml line 14:\noffending selector:\n  [linux & (ppc64le | aarch64)]\nexception:\n  ValidationException: Node type 'BitAnd' is not allowed. (whitelist it manually)\n\n'\n",
  "platforms": [
    "linux_64",
    "linux_aarch64",
    "linux_ppc64le",
    "osx_64",
    "osx_arm64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/libdrs.json"
  },
  "raw_meta_yaml": "{% set name = \"libdrs\" %}\n{% set version = \"3.1.2\" %}\n{% set build = 120 %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://github.com/CDAT/libdrs/archive/v{{ version }}.tar.gz\n  sha256: 90e10191116a78228739276078a0ddcf0d6458516f192e9e79fecb2beeceb3fa\n  patches:\n    - 0001-remove-mtune-option.patch\n    - 0002-remove-lgfortran.patch  # [linux & (ppc64le | aarch64)]\n    - 0003-remove-lgrib2c.patch  # [osx] \n\nbuild:\n  number: {{ build }}\n  skip: True  # [win]\n\nrequirements:\n  build:\n    - {{ compiler('c') }}         # need gcc7 to link library\n    - {{ compiler('fortran') }}   # (_gmalloc_fortran) issue without gfortran7\n    - make\n  host:\n    - libnetcdf * nompi_*\n    - g2clib\n  run:\n    - libnetcdf\n\ntest:\n  commands:\n    - test -f $PREFIX/lib/libdrs.a\n\nabout:\n  home:  http://cdat.llnl.gov\n  summary: 'Data Retrieval and Storage DRS software Fortran library'\n  license: BSD-3-Clause\n  license_file: bsd-3-clause.txt\n  description: |\n    libdrs is suitable for the data generated and used in climate model research.\n    It is oriented toward use with models generating very large datasets on\n    supercomputers, as well as with graphics workstations used for analysis and\n    display of smaller subsets of data.\n  dev_url: http://github.com/CDAT/libdrs\n\nextra:\n  recipe-maintainers:\n    - dnadeau4\n    - doutriaux1\n    - downiec\n    - jasonb5\n    - xylar\n",
  "req": {
    "__set__": true,
    "elements": [
      "c_compiler_stub",
      "fortran_compiler_stub",
      "g2clib",
      "libnetcdf",
      "make"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "fortran_compiler_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "fortran_compiler_stub",
        "g2clib",
        "libnetcdf"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "fortran_compiler_stub",
        "libnetcdf"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "fortran_compiler_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "g2clib",
        "libnetcdf * nompi_*"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "libnetcdf"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "url": "https://github.com/CDAT/libdrs/archive/v3.1.2.tar.gz",
  "version": "3.1.2",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/libdrs.json"
  }
}