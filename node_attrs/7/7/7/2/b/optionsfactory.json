{
  "archived": false,
  "branch": "main",
  "conda-forge.yml": {
    "conda_build": {
      "pkg_format": "2"
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    }
  },
  "feedstock_name": "optionsfactory",
  "hash_type": "sha256",
  "linux_64_meta_yaml": {
    "about": {
      "description": "OptionsFactory allows you to define a set of options, which can have (if you like): default\nvalues (which may be expressions depending on other options); documentation for each option;\nan allowed type or list of types; a check that the value option is on an allowed list;\nchecks that the value of an option satisfies some tests.\nOnce the options are defined in an OptionsFactory, you create a particular instance of the\noptions by passing some user settings (a dict or YAML file). The OptionsFactory uses the\nvalues passed, sets the remaining options from the default values or expressions and returns\nan Options object. Options are immutable so that you do not have to worry about the options\nbeing accidentally changed during execution - however, the package also provides\nMutableOptionsFactory if you do want to be able to update the options dynamically.\n",
      "dev_url": "https://github.com/johnomotani/optionsfactory",
      "home": "https://github.com/johnomotani/optionsfactory",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE",
      "summary": "Python package for handling user-provided options with flexible defaults, documentation and checking"
    },
    "build": {
      "noarch": "python",
      "number": "1",
      "script": "PYTHON -m pip install . -vv"
    },
    "extra": {
      "recipe-maintainers": [
        "johnomotani"
      ]
    },
    "package": {
      "name": "optionsfactory",
      "version": "1.0.11"
    },
    "requirements": {
      "host": [
        "python 3.9",
        "pip",
        "setuptools"
      ],
      "run": [
        "python >=3.9"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "dc5e316b2734ed210bcff333c800ec06d97c7cf75f41d79d7a0a7c6fa608d403",
      "url": "https://pypi.org/packages/source/o/optionsfactory/optionsfactory-1.0.11.tar.gz"
    },
    "test": {
      "commands": [
        "pytest --pyargs optionsfactory"
      ],
      "imports": [
        "optionsfactory"
      ],
      "requires": [
        "pytest",
        "pyyaml",
        "dill",
        "python 3.9"
      ]
    }
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": []
    },
    "host": {
      "__set__": true,
      "elements": [
        "pip",
        "python",
        "setuptools"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "dill",
        "pytest",
        "python",
        "pyyaml"
      ]
    }
  },
  "meta_yaml": {
    "about": {
      "description": "OptionsFactory allows you to define a set of options, which can have (if you like): default\nvalues (which may be expressions depending on other options); documentation for each option;\nan allowed type or list of types; a check that the value option is on an allowed list;\nchecks that the value of an option satisfies some tests.\nOnce the options are defined in an OptionsFactory, you create a particular instance of the\noptions by passing some user settings (a dict or YAML file). The OptionsFactory uses the\nvalues passed, sets the remaining options from the default values or expressions and returns\nan Options object. Options are immutable so that you do not have to worry about the options\nbeing accidentally changed during execution - however, the package also provides\nMutableOptionsFactory if you do want to be able to update the options dynamically.\n",
      "dev_url": "https://github.com/johnomotani/optionsfactory",
      "home": "https://github.com/johnomotani/optionsfactory",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE",
      "summary": "Python package for handling user-provided options with flexible defaults, documentation and checking"
    },
    "build": {
      "noarch": "python",
      "number": "1",
      "script": "PYTHON -m pip install . -vv"
    },
    "extra": {
      "recipe-maintainers": [
        "johnomotani"
      ]
    },
    "package": {
      "name": "optionsfactory",
      "version": "1.0.11"
    },
    "requirements": {
      "host": [
        "python 3.9",
        "pip",
        "setuptools"
      ],
      "run": [
        "python >=3.9"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "dc5e316b2734ed210bcff333c800ec06d97c7cf75f41d79d7a0a7c6fa608d403",
      "url": "https://pypi.org/packages/source/o/optionsfactory/optionsfactory-1.0.11.tar.gz"
    },
    "test": {
      "commands": [
        "pytest --pyargs optionsfactory"
      ],
      "imports": [
        "optionsfactory"
      ],
      "requires": [
        "pytest",
        "pyyaml",
        "dill",
        "python 3.9"
      ]
    }
  },
  "name": "optionsfactory",
  "outputs_names": {
    "__set__": true,
    "elements": [
      "optionsfactory"
    ]
  },
  "parsing_error": false,
  "platforms": [
    "linux_64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/optionsfactory.json"
  },
  "raw_meta_yaml": "{% set name = \"optionsfactory\" %}\n{% set version = \"1.0.11\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.org/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: dc5e316b2734ed210bcff333c800ec06d97c7cf75f41d79d7a0a7c6fa608d403\n\nbuild:\n  noarch: python\n  number: 1\n  script: {{ PYTHON }} -m pip install . -vv\n\nrequirements:\n  host:\n    - python {{ python_min }}\n    - pip\n    - setuptools\n  run:\n    - python >={{ python_min }}\n\ntest:\n  imports:\n    - optionsfactory\n  requires:\n    - pytest\n    - pyyaml\n    - dill\n    - python {{ python_min }}\n  commands:\n    - pytest --pyargs optionsfactory\n\nabout:\n  home: https://github.com/johnomotani/optionsfactory\n  license: BSD-3-Clause\n  license_family: BSD\n  license_file: LICENSE\n  summary: Python package for handling user-provided options with flexible defaults, documentation and checking\n\n  description: |\n    OptionsFactory allows you to define a set of options, which can have (if you like): default\n    values (which may be expressions depending on other options); documentation for each option;\n    an allowed type or list of types; a check that the value option is on an allowed list;\n    checks that the value of an option satisfies some tests.\n    Once the options are defined in an OptionsFactory, you create a particular instance of the\n    options by passing some user settings (a dict or YAML file). The OptionsFactory uses the\n    values passed, sets the remaining options from the default values or expressions and returns\n    an Options object. Options are immutable so that you do not have to worry about the options\n    being accidentally changed during execution - however, the package also provides\n    MutableOptionsFactory if you do want to be able to update the options dynamically.\n  dev_url: https://github.com/johnomotani/optionsfactory\n\nextra:\n  recipe-maintainers:\n    - johnomotani\n",
  "req": {
    "__set__": true,
    "elements": [
      "pip",
      "python",
      "setuptools"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": []
    },
    "host": {
      "__set__": true,
      "elements": [
        "pip",
        "python",
        "setuptools"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "dill",
        "pytest",
        "python",
        "pyyaml"
      ]
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": []
    },
    "host": {
      "__set__": true,
      "elements": [
        "pip",
        "python 3.9",
        "setuptools"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "python >=3.9"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "dill",
        "pytest",
        "python 3.9",
        "pyyaml"
      ]
    }
  },
  "url": "https://pypi.org/packages/source/o/optionsfactory/optionsfactory-1.0.11.tar.gz",
  "version": "1.0.11",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/optionsfactory.json"
  }
}