{
  "archived": false,
  "branch": "main",
  "conda-forge.yml": {
    "azure": {
      "store_build_artifacts": true
    },
    "bot": {
      "automerge": true
    },
    "build_platform": {
      "linux_aarch64": "linux_64",
      "linux_ppc64le": "linux_64",
      "osx_arm64": "osx_64"
    },
    "conda_build": {
      "pkg_format": "2"
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    },
    "provider": {
      "linux_aarch64": "default",
      "linux_ppc64le": "default"
    },
    "test": "native_and_emulated"
  },
  "feedstock_name": "digital_rf",
  "hash_type": "sha256",
  "linux_64_meta_yaml": {
    "about": {
      "description": "The Digital RF project encompasses a standardized HDF5 format for reading\nand writing of radio frequency data and the software for doing so. The\nformat is designed to be self-documenting for data archive and to allow\nrapid random access for data processing. For details on the format, refer\nto the documentation.\n\nThis suite of software includes libraries for reading and writing data in\nthe Digital RF HDF5 format in C (``libdigital_rf``), Python\n(``digital_rf``) with blocks for GNU Radio (``gr_digital_rf``), and\nMATLAB. It also contains the `thor` UHD radio recorder script, Python\ntools for managing and processing Digital RF data, example scripts that\ndemonstrate basic usage, and example applications that encompass a\ncomplete data recording and processing chain for various use cases.\n",
      "dev_url": "https://github.com/MITHaystack/digital_rf",
      "doc_url": "https://github.com/MITHaystack/digital_rf/tree/master/docs",
      "home": "https://github.com/MITHaystack/digital_rf",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE",
      "summary": "Work with data in the Digital RF and Digital Metadata formats."
    },
    "build": {
      "entry_points": [
        "drf = digital_rf.drf_command:main"
      ],
      "number": "1",
      "run_exports": [
        "digital_rf"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "ryanvolz"
      ]
    },
    "package": {
      "name": "digital_rf",
      "version": "2.6.12"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake >=3.15",
        "ninja"
      ],
      "host": [
        "hdf5",
        "mako",
        "numpy",
        "numpy >=2.0",
        "python",
        "python-build",
        "scikit-build-core",
        "setuptools-scm"
      ],
      "run": [
        "h5py",
        "packaging",
        "python",
        "python-dateutil",
        "six",
        "watchdog"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "c41f423c12001143da14f0d3f48b665a09e86cf6ec91a8510220c828a5ce925d",
      "url": "https://github.com/MITHaystack/digital_rf/releases/download/2.6.12/digital_rf-2.6.12.tar.gz"
    },
    "test": {
      "commands": [
        "test -f $PREFIX/include/digital_rf/digital_rf.h",
        "test -f $PREFIX/include/digital_rf/digital_rf_version.h",
        "test -f $PREFIX/lib/pkgconfig/digital_rf.pc",
        "test -f $PREFIX/lib/libdigital_rf${SHLIB_EXT}",
        "test -f `pkg-config --variable=libdir --dont-define-prefix digital_rf`/libdigital_rf${SHLIB_EXT}",
        "test -f $PREFIX/lib/cmake/libdigital_rf/libdigital_rfConfig.cmake",
        "test -f $PREFIX/lib/cmake/libdigital_rf/libdigital_rfConfigVersion.cmake",
        "test -f $PREFIX/lib/cmake/libdigital_rf/libdigital_rfTargets-release.cmake",
        "test -f $PREFIX/lib/cmake/libdigital_rf/libdigital_rfTargets.cmake",
        "test -f $PREFIX/share/gnuradio/grc/blocks/gr_digital_rf_digital_rf_channel_sink.block.yml",
        "test -f $PREFIX/share/gnuradio/grc/blocks/gr_digital_rf_digital_rf_channel_source.block.yml",
        "test -f $PREFIX/share/gnuradio/grc/blocks/gr_digital_rf_digital_rf_sink.block.yml",
        "test -f $PREFIX/share/gnuradio/grc/blocks/gr_digital_rf_digital_rf_source.block.yml",
        "drf --help",
        "pytest",
        "python python/examples/example_write_digital_metadata.py",
        "python python/examples/example_read_digital_metadata.py"
      ],
      "imports": [
        "digital_rf",
        "digital_rf.digital_rf_hdf5",
        "gr_digital_rf"
      ],
      "requires": [
        "gnuradio-core",
        "pkg-config",
        "pytest >=3.6"
      ],
      "source_files": [
        "python/tests/*.py",
        "python/examples/*.py"
      ]
    }
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "ninja"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "hdf5",
        "mako",
        "numpy",
        "python",
        "python-build",
        "scikit-build-core",
        "setuptools-scm"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "h5py",
        "packaging",
        "python",
        "python-dateutil",
        "six",
        "watchdog"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "gnuradio-core",
        "pkg-config",
        "pytest"
      ]
    }
  },
  "linux_aarch64_meta_yaml": {
    "about": {
      "description": "The Digital RF project encompasses a standardized HDF5 format for reading\nand writing of radio frequency data and the software for doing so. The\nformat is designed to be self-documenting for data archive and to allow\nrapid random access for data processing. For details on the format, refer\nto the documentation.\n\nThis suite of software includes libraries for reading and writing data in\nthe Digital RF HDF5 format in C (``libdigital_rf``), Python\n(``digital_rf``) with blocks for GNU Radio (``gr_digital_rf``), and\nMATLAB. It also contains the `thor` UHD radio recorder script, Python\ntools for managing and processing Digital RF data, example scripts that\ndemonstrate basic usage, and example applications that encompass a\ncomplete data recording and processing chain for various use cases.\n",
      "dev_url": "https://github.com/MITHaystack/digital_rf",
      "doc_url": "https://github.com/MITHaystack/digital_rf/tree/master/docs",
      "home": "https://github.com/MITHaystack/digital_rf",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE",
      "summary": "Work with data in the Digital RF and Digital Metadata formats."
    },
    "build": {
      "entry_points": [
        "drf = digital_rf.drf_command:main"
      ],
      "number": "1",
      "run_exports": [
        "digital_rf"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "ryanvolz"
      ]
    },
    "package": {
      "name": "digital_rf",
      "version": "2.6.12"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake >=3.15",
        "ninja"
      ],
      "host": [
        "hdf5",
        "mako",
        "numpy",
        "numpy >=2.0",
        "python",
        "python-build",
        "scikit-build-core",
        "setuptools-scm"
      ],
      "run": [
        "h5py",
        "packaging",
        "python",
        "python-dateutil",
        "six",
        "watchdog"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "c41f423c12001143da14f0d3f48b665a09e86cf6ec91a8510220c828a5ce925d",
      "url": "https://github.com/MITHaystack/digital_rf/releases/download/2.6.12/digital_rf-2.6.12.tar.gz"
    },
    "test": {
      "commands": [
        "test -f $PREFIX/include/digital_rf/digital_rf.h",
        "test -f $PREFIX/include/digital_rf/digital_rf_version.h",
        "test -f $PREFIX/lib/pkgconfig/digital_rf.pc",
        "test -f $PREFIX/lib/libdigital_rf${SHLIB_EXT}",
        "test -f `pkg-config --variable=libdir --dont-define-prefix digital_rf`/libdigital_rf${SHLIB_EXT}",
        "test -f $PREFIX/lib/cmake/libdigital_rf/libdigital_rfConfig.cmake",
        "test -f $PREFIX/lib/cmake/libdigital_rf/libdigital_rfConfigVersion.cmake",
        "test -f $PREFIX/lib/cmake/libdigital_rf/libdigital_rfTargets-release.cmake",
        "test -f $PREFIX/lib/cmake/libdigital_rf/libdigital_rfTargets.cmake",
        "test -f $PREFIX/share/gnuradio/grc/blocks/gr_digital_rf_digital_rf_channel_sink.block.yml",
        "test -f $PREFIX/share/gnuradio/grc/blocks/gr_digital_rf_digital_rf_channel_source.block.yml",
        "test -f $PREFIX/share/gnuradio/grc/blocks/gr_digital_rf_digital_rf_sink.block.yml",
        "test -f $PREFIX/share/gnuradio/grc/blocks/gr_digital_rf_digital_rf_source.block.yml",
        "drf --help",
        "pytest",
        "python python/examples/example_write_digital_metadata.py",
        "python python/examples/example_read_digital_metadata.py"
      ],
      "imports": [
        "digital_rf",
        "digital_rf.digital_rf_hdf5",
        "gr_digital_rf"
      ],
      "requires": [
        "gnuradio-core",
        "pkg-config",
        "pytest >=3.6"
      ],
      "source_files": [
        "python/tests/*.py",
        "python/examples/*.py"
      ]
    }
  },
  "linux_aarch64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "ninja"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "hdf5",
        "mako",
        "numpy",
        "python",
        "python-build",
        "scikit-build-core",
        "setuptools-scm"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "h5py",
        "packaging",
        "python",
        "python-dateutil",
        "six",
        "watchdog"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "gnuradio-core",
        "pkg-config",
        "pytest"
      ]
    }
  },
  "linux_ppc64le_meta_yaml": {
    "about": {
      "description": "The Digital RF project encompasses a standardized HDF5 format for reading\nand writing of radio frequency data and the software for doing so. The\nformat is designed to be self-documenting for data archive and to allow\nrapid random access for data processing. For details on the format, refer\nto the documentation.\n\nThis suite of software includes libraries for reading and writing data in\nthe Digital RF HDF5 format in C (``libdigital_rf``), Python\n(``digital_rf``) with blocks for GNU Radio (``gr_digital_rf``), and\nMATLAB. It also contains the `thor` UHD radio recorder script, Python\ntools for managing and processing Digital RF data, example scripts that\ndemonstrate basic usage, and example applications that encompass a\ncomplete data recording and processing chain for various use cases.\n",
      "dev_url": "https://github.com/MITHaystack/digital_rf",
      "doc_url": "https://github.com/MITHaystack/digital_rf/tree/master/docs",
      "home": "https://github.com/MITHaystack/digital_rf",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE",
      "summary": "Work with data in the Digital RF and Digital Metadata formats."
    },
    "build": {
      "entry_points": [
        "drf = digital_rf.drf_command:main"
      ],
      "number": "1",
      "run_exports": [
        "digital_rf"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "ryanvolz"
      ]
    },
    "package": {
      "name": "digital_rf",
      "version": "2.6.12"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake >=3.15",
        "ninja"
      ],
      "host": [
        "hdf5",
        "mako",
        "numpy",
        "numpy >=2.0",
        "python",
        "python-build",
        "scikit-build-core",
        "setuptools-scm"
      ],
      "run": [
        "h5py",
        "packaging",
        "python",
        "python-dateutil",
        "six",
        "watchdog"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "c41f423c12001143da14f0d3f48b665a09e86cf6ec91a8510220c828a5ce925d",
      "url": "https://github.com/MITHaystack/digital_rf/releases/download/2.6.12/digital_rf-2.6.12.tar.gz"
    },
    "test": {
      "commands": [
        "test -f $PREFIX/include/digital_rf/digital_rf.h",
        "test -f $PREFIX/include/digital_rf/digital_rf_version.h",
        "test -f $PREFIX/lib/pkgconfig/digital_rf.pc",
        "test -f $PREFIX/lib/libdigital_rf${SHLIB_EXT}",
        "test -f `pkg-config --variable=libdir --dont-define-prefix digital_rf`/libdigital_rf${SHLIB_EXT}",
        "test -f $PREFIX/lib/cmake/libdigital_rf/libdigital_rfConfig.cmake",
        "test -f $PREFIX/lib/cmake/libdigital_rf/libdigital_rfConfigVersion.cmake",
        "test -f $PREFIX/lib/cmake/libdigital_rf/libdigital_rfTargets-release.cmake",
        "test -f $PREFIX/lib/cmake/libdigital_rf/libdigital_rfTargets.cmake",
        "test -f $PREFIX/share/gnuradio/grc/blocks/gr_digital_rf_digital_rf_channel_sink.block.yml",
        "test -f $PREFIX/share/gnuradio/grc/blocks/gr_digital_rf_digital_rf_channel_source.block.yml",
        "test -f $PREFIX/share/gnuradio/grc/blocks/gr_digital_rf_digital_rf_sink.block.yml",
        "test -f $PREFIX/share/gnuradio/grc/blocks/gr_digital_rf_digital_rf_source.block.yml",
        "drf --help",
        "pytest",
        "python python/examples/example_write_digital_metadata.py",
        "python python/examples/example_read_digital_metadata.py"
      ],
      "imports": [
        "digital_rf",
        "digital_rf.digital_rf_hdf5",
        "gr_digital_rf"
      ],
      "requires": [
        "gnuradio-core",
        "pkg-config",
        "pytest >=3.6"
      ],
      "source_files": [
        "python/tests/*.py",
        "python/examples/*.py"
      ]
    }
  },
  "linux_ppc64le_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "ninja"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "hdf5",
        "mako",
        "numpy",
        "python",
        "python-build",
        "scikit-build-core",
        "setuptools-scm"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "h5py",
        "packaging",
        "python",
        "python-dateutil",
        "six",
        "watchdog"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "gnuradio-core",
        "pkg-config",
        "pytest"
      ]
    }
  },
  "meta_yaml": {
    "about": {
      "description": "The Digital RF project encompasses a standardized HDF5 format for reading\nand writing of radio frequency data and the software for doing so. The\nformat is designed to be self-documenting for data archive and to allow\nrapid random access for data processing. For details on the format, refer\nto the documentation.\n\nThis suite of software includes libraries for reading and writing data in\nthe Digital RF HDF5 format in C (``libdigital_rf``), Python\n(``digital_rf``) with blocks for GNU Radio (``gr_digital_rf``), and\nMATLAB. It also contains the `thor` UHD radio recorder script, Python\ntools for managing and processing Digital RF data, example scripts that\ndemonstrate basic usage, and example applications that encompass a\ncomplete data recording and processing chain for various use cases.\n",
      "dev_url": "https://github.com/MITHaystack/digital_rf",
      "doc_url": "https://github.com/MITHaystack/digital_rf/tree/master/docs",
      "home": "https://github.com/MITHaystack/digital_rf",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE",
      "summary": "Work with data in the Digital RF and Digital Metadata formats."
    },
    "build": {
      "entry_points": [
        "drf = digital_rf.drf_command:main"
      ],
      "number": "1",
      "run_exports": [
        "digital_rf"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "ryanvolz"
      ]
    },
    "package": {
      "name": "digital_rf",
      "version": "2.6.12"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake >=3.15",
        "ninja"
      ],
      "host": [
        "hdf5",
        "mako",
        "numpy",
        "numpy >=2.0",
        "python",
        "python-build",
        "scikit-build-core",
        "setuptools-scm"
      ],
      "run": [
        "h5py",
        "packaging",
        "python",
        "python-dateutil",
        "six",
        "watchdog"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "c41f423c12001143da14f0d3f48b665a09e86cf6ec91a8510220c828a5ce925d",
      "url": "https://github.com/MITHaystack/digital_rf/releases/download/2.6.12/digital_rf-2.6.12.tar.gz"
    },
    "test": {
      "commands": [
        "test -f $PREFIX/include/digital_rf/digital_rf.h",
        "test -f $PREFIX/include/digital_rf/digital_rf_version.h",
        "test -f $PREFIX/lib/pkgconfig/digital_rf.pc",
        "test -f $PREFIX/lib/libdigital_rf${SHLIB_EXT}",
        "test -f `pkg-config --variable=libdir --dont-define-prefix digital_rf`/libdigital_rf${SHLIB_EXT}",
        "test -f $PREFIX/lib/cmake/libdigital_rf/libdigital_rfConfig.cmake",
        "test -f $PREFIX/lib/cmake/libdigital_rf/libdigital_rfConfigVersion.cmake",
        "test -f $PREFIX/lib/cmake/libdigital_rf/libdigital_rfTargets-release.cmake",
        "test -f $PREFIX/lib/cmake/libdigital_rf/libdigital_rfTargets.cmake",
        "test -f $PREFIX/share/gnuradio/grc/blocks/gr_digital_rf_digital_rf_channel_sink.block.yml",
        "test -f $PREFIX/share/gnuradio/grc/blocks/gr_digital_rf_digital_rf_channel_source.block.yml",
        "test -f $PREFIX/share/gnuradio/grc/blocks/gr_digital_rf_digital_rf_sink.block.yml",
        "test -f $PREFIX/share/gnuradio/grc/blocks/gr_digital_rf_digital_rf_source.block.yml",
        "drf --help",
        "pytest",
        "python python/examples/example_write_digital_metadata.py",
        "python python/examples/example_read_digital_metadata.py",
        "if not exist %LIBRARY_INC%\\\\digital_rf\\\\digital_rf.h exit 1",
        "if not exist %LIBRARY_INC%\\\\digital_rf\\\\digital_rf_version.h exit 1",
        "if not exist %PREFIX%\\\\Library\\\\lib\\\\pkgconfig\\\\digital_rf.pc exit 1",
        "if not exist %LIBRARY_BIN%\\\\digital_rf.dll exit 1",
        "for /f \"usebackq tokens=*\" %%a in (`pkg-config --variable=exec_prefix --dont-define-prefix digital_rf`) do if not exist \"%%a/bin/digital_rf.dll\" exit 1",
        "if not exist %LIBRARY_LIB%\\\\digital_rf.lib exit 1",
        "for /f \"usebackq tokens=*\" %%a in (`pkg-config --variable=libdir --dont-define-prefix digital_rf`) do if not exist \"%%a/digital_rf.lib\" exit 1",
        "if not exist %LIBRARY_LIB%\\\\cmake\\\\libdigital_rf\\\\libdigital_rfConfig.cmake exit 1",
        "if not exist %LIBRARY_LIB%\\\\cmake\\\\libdigital_rf\\\\libdigital_rfConfigVersion.cmake exit 1",
        "if not exist %LIBRARY_LIB%\\\\cmake\\\\libdigital_rf\\\\libdigital_rfTargets-release.cmake exit 1",
        "if not exist %LIBRARY_LIB%\\\\cmake\\\\libdigital_rf\\\\libdigital_rfTargets.cmake exit 1",
        "if not exist %LIBRARY_PREFIX%\\\\share\\\\gnuradio\\\\grc\\\\blocks\\\\gr_digital_rf_digital_rf_channel_sink.block.yml exit 1",
        "if not exist %LIBRARY_PREFIX%\\\\share\\\\gnuradio\\\\grc\\\\blocks\\\\gr_digital_rf_digital_rf_channel_source.block.yml exit 1",
        "if not exist %LIBRARY_PREFIX%\\\\share\\\\gnuradio\\\\grc\\\\blocks\\\\gr_digital_rf_digital_rf_sink.block.yml exit 1",
        "if not exist %LIBRARY_PREFIX%\\\\share\\\\gnuradio\\\\grc\\\\blocks\\\\gr_digital_rf_digital_rf_source.block.yml exit 1"
      ],
      "imports": [
        "digital_rf",
        "digital_rf.digital_rf_hdf5",
        "gr_digital_rf"
      ],
      "requires": [
        "gnuradio-core",
        "pkg-config",
        "pytest >=3.6"
      ],
      "source_files": [
        "python/tests/*.py",
        "python/examples/*.py"
      ]
    }
  },
  "name": "digital_rf",
  "osx_64_meta_yaml": {
    "about": {
      "description": "The Digital RF project encompasses a standardized HDF5 format for reading\nand writing of radio frequency data and the software for doing so. The\nformat is designed to be self-documenting for data archive and to allow\nrapid random access for data processing. For details on the format, refer\nto the documentation.\n\nThis suite of software includes libraries for reading and writing data in\nthe Digital RF HDF5 format in C (``libdigital_rf``), Python\n(``digital_rf``) with blocks for GNU Radio (``gr_digital_rf``), and\nMATLAB. It also contains the `thor` UHD radio recorder script, Python\ntools for managing and processing Digital RF data, example scripts that\ndemonstrate basic usage, and example applications that encompass a\ncomplete data recording and processing chain for various use cases.\n",
      "dev_url": "https://github.com/MITHaystack/digital_rf",
      "doc_url": "https://github.com/MITHaystack/digital_rf/tree/master/docs",
      "home": "https://github.com/MITHaystack/digital_rf",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE",
      "summary": "Work with data in the Digital RF and Digital Metadata formats."
    },
    "build": {
      "entry_points": [
        "drf = digital_rf.drf_command:main"
      ],
      "number": "1",
      "run_exports": [
        "digital_rf"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "ryanvolz"
      ]
    },
    "package": {
      "name": "digital_rf",
      "version": "2.6.12"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake >=3.15",
        "ninja"
      ],
      "host": [
        "hdf5",
        "mako",
        "numpy",
        "numpy >=2.0",
        "python",
        "python-build",
        "scikit-build-core",
        "setuptools-scm"
      ],
      "run": [
        "h5py",
        "packaging",
        "python",
        "python-dateutil",
        "six",
        "watchdog"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "c41f423c12001143da14f0d3f48b665a09e86cf6ec91a8510220c828a5ce925d",
      "url": "https://github.com/MITHaystack/digital_rf/releases/download/2.6.12/digital_rf-2.6.12.tar.gz"
    },
    "test": {
      "commands": [
        "test -f $PREFIX/include/digital_rf/digital_rf.h",
        "test -f $PREFIX/include/digital_rf/digital_rf_version.h",
        "test -f $PREFIX/lib/pkgconfig/digital_rf.pc",
        "test -f $PREFIX/lib/libdigital_rf${SHLIB_EXT}",
        "test -f `pkg-config --variable=libdir --dont-define-prefix digital_rf`/libdigital_rf${SHLIB_EXT}",
        "test -f $PREFIX/lib/cmake/libdigital_rf/libdigital_rfConfig.cmake",
        "test -f $PREFIX/lib/cmake/libdigital_rf/libdigital_rfConfigVersion.cmake",
        "test -f $PREFIX/lib/cmake/libdigital_rf/libdigital_rfTargets-release.cmake",
        "test -f $PREFIX/lib/cmake/libdigital_rf/libdigital_rfTargets.cmake",
        "test -f $PREFIX/share/gnuradio/grc/blocks/gr_digital_rf_digital_rf_channel_sink.block.yml",
        "test -f $PREFIX/share/gnuradio/grc/blocks/gr_digital_rf_digital_rf_channel_source.block.yml",
        "test -f $PREFIX/share/gnuradio/grc/blocks/gr_digital_rf_digital_rf_sink.block.yml",
        "test -f $PREFIX/share/gnuradio/grc/blocks/gr_digital_rf_digital_rf_source.block.yml",
        "drf --help",
        "pytest",
        "python python/examples/example_write_digital_metadata.py",
        "python python/examples/example_read_digital_metadata.py"
      ],
      "imports": [
        "digital_rf",
        "digital_rf.digital_rf_hdf5",
        "gr_digital_rf"
      ],
      "requires": [
        "gnuradio-core",
        "pkg-config",
        "pytest >=3.6"
      ],
      "source_files": [
        "python/tests/*.py",
        "python/examples/*.py"
      ]
    }
  },
  "osx_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "ninja"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "hdf5",
        "mako",
        "numpy",
        "python",
        "python-build",
        "scikit-build-core",
        "setuptools-scm"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "h5py",
        "packaging",
        "python",
        "python-dateutil",
        "six",
        "watchdog"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "gnuradio-core",
        "pkg-config",
        "pytest"
      ]
    }
  },
  "osx_arm64_meta_yaml": {
    "about": {
      "description": "The Digital RF project encompasses a standardized HDF5 format for reading\nand writing of radio frequency data and the software for doing so. The\nformat is designed to be self-documenting for data archive and to allow\nrapid random access for data processing. For details on the format, refer\nto the documentation.\n\nThis suite of software includes libraries for reading and writing data in\nthe Digital RF HDF5 format in C (``libdigital_rf``), Python\n(``digital_rf``) with blocks for GNU Radio (``gr_digital_rf``), and\nMATLAB. It also contains the `thor` UHD radio recorder script, Python\ntools for managing and processing Digital RF data, example scripts that\ndemonstrate basic usage, and example applications that encompass a\ncomplete data recording and processing chain for various use cases.\n",
      "dev_url": "https://github.com/MITHaystack/digital_rf",
      "doc_url": "https://github.com/MITHaystack/digital_rf/tree/master/docs",
      "home": "https://github.com/MITHaystack/digital_rf",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE",
      "summary": "Work with data in the Digital RF and Digital Metadata formats."
    },
    "build": {
      "entry_points": [
        "drf = digital_rf.drf_command:main"
      ],
      "number": "1",
      "run_exports": [
        "digital_rf"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "ryanvolz"
      ]
    },
    "package": {
      "name": "digital_rf",
      "version": "2.6.12"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake >=3.15",
        "ninja"
      ],
      "host": [
        "hdf5",
        "mako",
        "numpy",
        "numpy >=2.0",
        "python",
        "python-build",
        "scikit-build-core",
        "setuptools-scm"
      ],
      "run": [
        "h5py",
        "packaging",
        "python",
        "python-dateutil",
        "six",
        "watchdog"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "c41f423c12001143da14f0d3f48b665a09e86cf6ec91a8510220c828a5ce925d",
      "url": "https://github.com/MITHaystack/digital_rf/releases/download/2.6.12/digital_rf-2.6.12.tar.gz"
    },
    "test": {
      "commands": [
        "test -f $PREFIX/include/digital_rf/digital_rf.h",
        "test -f $PREFIX/include/digital_rf/digital_rf_version.h",
        "test -f $PREFIX/lib/pkgconfig/digital_rf.pc",
        "test -f $PREFIX/lib/libdigital_rf${SHLIB_EXT}",
        "test -f `pkg-config --variable=libdir --dont-define-prefix digital_rf`/libdigital_rf${SHLIB_EXT}",
        "test -f $PREFIX/lib/cmake/libdigital_rf/libdigital_rfConfig.cmake",
        "test -f $PREFIX/lib/cmake/libdigital_rf/libdigital_rfConfigVersion.cmake",
        "test -f $PREFIX/lib/cmake/libdigital_rf/libdigital_rfTargets-release.cmake",
        "test -f $PREFIX/lib/cmake/libdigital_rf/libdigital_rfTargets.cmake",
        "test -f $PREFIX/share/gnuradio/grc/blocks/gr_digital_rf_digital_rf_channel_sink.block.yml",
        "test -f $PREFIX/share/gnuradio/grc/blocks/gr_digital_rf_digital_rf_channel_source.block.yml",
        "test -f $PREFIX/share/gnuradio/grc/blocks/gr_digital_rf_digital_rf_sink.block.yml",
        "test -f $PREFIX/share/gnuradio/grc/blocks/gr_digital_rf_digital_rf_source.block.yml",
        "drf --help",
        "pytest",
        "python python/examples/example_write_digital_metadata.py",
        "python python/examples/example_read_digital_metadata.py"
      ],
      "imports": [
        "digital_rf",
        "digital_rf.digital_rf_hdf5",
        "gr_digital_rf"
      ],
      "requires": [
        "gnuradio-core",
        "pkg-config",
        "pytest >=3.6"
      ],
      "source_files": [
        "python/tests/*.py",
        "python/examples/*.py"
      ]
    }
  },
  "osx_arm64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "ninja"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "hdf5",
        "mako",
        "numpy",
        "python",
        "python-build",
        "scikit-build-core",
        "setuptools-scm"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "h5py",
        "packaging",
        "python",
        "python-dateutil",
        "six",
        "watchdog"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "gnuradio-core",
        "pkg-config",
        "pytest"
      ]
    }
  },
  "outputs_names": {
    "__set__": true,
    "elements": [
      "digital_rf"
    ]
  },
  "parsing_error": false,
  "platforms": [
    "linux_64",
    "linux_aarch64",
    "linux_ppc64le",
    "osx_64",
    "osx_arm64",
    "win_64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/digital_rf.json"
  },
  "raw_meta_yaml": "{% set version = \"2.6.12\" %}\n\npackage:\n  name: digital_rf\n  version: {{ version }}\n\nsource:\n  url: https://github.com/MITHaystack/digital_rf/releases/download/{{ version }}/digital_rf-{{ version }}.tar.gz\n  sha256: c41f423c12001143da14f0d3f48b665a09e86cf6ec91a8510220c828a5ce925d\n\nbuild:\n  number: 1\n  # there are dependency conflicts for Python 2 on Windows\n  skip: true  # [win and py2k]\n  run_exports:\n    - {{ pin_subpackage('digital_rf') }}\n  entry_points:\n    - drf = digital_rf.drf_command:main\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ stdlib(\"c\") }}\n    - cmake >=3.15\n    - ninja\n    # cross-compilation dependencies\n    - python                                 # [build_platform != target_platform]\n    - cross-python_{{ target_platform }}     # [build_platform != target_platform]\n    - numpy                                  # [build_platform != target_platform]\n    - numpy >=2.0                            # [build_platform != target_platform]\n\n  host:\n    - hdf5\n    - mako\n    - numpy\n    - numpy >=2.0\n    - python\n    - python-build\n    - scikit-build-core\n    - setuptools-scm\n\n  run:\n    - h5py\n    - packaging\n    - python\n    - python-dateutil\n    - six\n    - watchdog\n\ntest:\n  requires:\n    - gnuradio-core\n    - pkg-config\n    - pytest >=3.6\n  imports:\n    - digital_rf\n    - digital_rf.digital_rf_hdf5\n    - gr_digital_rf\n  source_files:\n    - python/tests/*.py\n    - python/examples/*.py\n  commands:\n    # verify that headers get installed\n    - test -f $PREFIX/include/digital_rf/digital_rf.h  # [unix]\n    - test -f $PREFIX/include/digital_rf/digital_rf_version.h  # [unix]\n    - if not exist %LIBRARY_INC%\\\\digital_rf\\\\digital_rf.h exit 1  # [win]\n    - if not exist %LIBRARY_INC%\\\\digital_rf\\\\digital_rf_version.h exit 1  # [win]\n\n    # verify that pkgconfig files get installed\n    - test -f $PREFIX/lib/pkgconfig/digital_rf.pc  # [unix]\n    - if not exist %PREFIX%\\\\Library\\\\lib\\\\pkgconfig\\\\digital_rf.pc exit 1  # [win]\n\n    # verify that libs get installed and can be located through pkg-config\n    - test -f $PREFIX/lib/libdigital_rf${SHLIB_EXT}  # [unix]\n    - test -f `pkg-config --variable=libdir --dont-define-prefix digital_rf`/libdigital_rf${SHLIB_EXT}  # [unix]\n    - if not exist %LIBRARY_BIN%\\\\digital_rf.dll exit 1  # [win]\n    - for /f \"usebackq tokens=*\" %%a in (`pkg-config --variable=exec_prefix --dont-define-prefix digital_rf`) do if not exist \"%%a/bin/digital_rf.dll\" exit 1  # [win]\n    - if not exist %LIBRARY_LIB%\\\\digital_rf.lib exit 1  # [win]\n    - for /f \"usebackq tokens=*\" %%a in (`pkg-config --variable=libdir --dont-define-prefix digital_rf`) do if not exist \"%%a/digital_rf.lib\" exit 1  # [win]\n\n    # verify that CMake files get installed\n    {% set cms = [\"Config\", \"ConfigVersion\", \"Targets-release\", \"Targets\"] %}\n    {% for cm in cms %}\n    - test -f $PREFIX/lib/cmake/libdigital_rf/libdigital_rf{{ cm }}.cmake  # [unix]\n    - if not exist %LIBRARY_LIB%\\\\cmake\\\\libdigital_rf\\\\libdigital_rf{{ cm }}.cmake exit 1  # [win]\n    {% endfor %}\n\n    # verify that (some) GRC blocks get installed\n    {% set blocks = [\"digital_rf_channel_sink\", \"digital_rf_channel_source\"] %}\n    {% set blocks = blocks + [\"digital_rf_sink\", \"digital_rf_source\"] %}\n    {% for block in blocks %}\n    - test -f $PREFIX/share/gnuradio/grc/blocks/gr_digital_rf_{{ block }}.block.yml  # [unix]\n    - if not exist %LIBRARY_PREFIX%\\\\share\\\\gnuradio\\\\grc\\\\blocks\\\\gr_digital_rf_{{ block }}.block.yml exit 1  # [win]\n    {% endfor %}\n\n    # verify that commands run\n    - drf --help\n\n    # run test suite and examples\n    - pytest\n    - python python/examples/example_write_digital_metadata.py\n    - python python/examples/example_read_digital_metadata.py\n\nabout:\n  home: https://github.com/MITHaystack/digital_rf\n  license: BSD-3-Clause\n  license_family: BSD\n  license_file: LICENSE\n  summary: Work with data in the Digital RF and Digital Metadata formats.\n  description: |\n    The Digital RF project encompasses a standardized HDF5 format for reading\n    and writing of radio frequency data and the software for doing so. The\n    format is designed to be self-documenting for data archive and to allow\n    rapid random access for data processing. For details on the format, refer\n    to the documentation.\n\n    This suite of software includes libraries for reading and writing data in\n    the Digital RF HDF5 format in C (``libdigital_rf``), Python\n    (``digital_rf``) with blocks for GNU Radio (``gr_digital_rf``), and\n    MATLAB. It also contains the `thor` UHD radio recorder script, Python\n    tools for managing and processing Digital RF data, example scripts that\n    demonstrate basic usage, and example applications that encompass a\n    complete data recording and processing chain for various use cases.\n\n  doc_url: https://github.com/MITHaystack/digital_rf/tree/master/docs\n  dev_url: https://github.com/MITHaystack/digital_rf\n\nextra:\n  recipe-maintainers:\n    - ryanvolz\n",
  "req": {
    "__set__": true,
    "elements": [
      "c_compiler_stub",
      "c_stdlib_stub",
      "cmake",
      "h5py",
      "hdf5",
      "mako",
      "ninja",
      "numpy",
      "packaging",
      "python",
      "python-build",
      "python-dateutil",
      "scikit-build-core",
      "setuptools-scm",
      "six",
      "watchdog"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "ninja"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "hdf5",
        "mako",
        "numpy",
        "python",
        "python-build",
        "scikit-build-core",
        "setuptools-scm"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "h5py",
        "packaging",
        "python",
        "python-dateutil",
        "six",
        "watchdog"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "gnuradio-core",
        "pkg-config",
        "pytest"
      ]
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake >=3.15",
        "ninja"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "hdf5",
        "mako",
        "numpy",
        "numpy >=2.0",
        "python",
        "python-build",
        "scikit-build-core",
        "setuptools-scm"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "h5py",
        "packaging",
        "python",
        "python-dateutil",
        "six",
        "watchdog"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "gnuradio-core",
        "pkg-config",
        "pytest >=3.6"
      ]
    }
  },
  "url": "https://github.com/MITHaystack/digital_rf/releases/download/2.6.12/digital_rf-2.6.12.tar.gz",
  "version": "2.6.12",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/digital_rf.json"
  },
  "win_64_meta_yaml": {
    "about": {
      "description": "The Digital RF project encompasses a standardized HDF5 format for reading\nand writing of radio frequency data and the software for doing so. The\nformat is designed to be self-documenting for data archive and to allow\nrapid random access for data processing. For details on the format, refer\nto the documentation.\n\nThis suite of software includes libraries for reading and writing data in\nthe Digital RF HDF5 format in C (``libdigital_rf``), Python\n(``digital_rf``) with blocks for GNU Radio (``gr_digital_rf``), and\nMATLAB. It also contains the `thor` UHD radio recorder script, Python\ntools for managing and processing Digital RF data, example scripts that\ndemonstrate basic usage, and example applications that encompass a\ncomplete data recording and processing chain for various use cases.\n",
      "dev_url": "https://github.com/MITHaystack/digital_rf",
      "doc_url": "https://github.com/MITHaystack/digital_rf/tree/master/docs",
      "home": "https://github.com/MITHaystack/digital_rf",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE",
      "summary": "Work with data in the Digital RF and Digital Metadata formats."
    },
    "build": {
      "entry_points": [
        "drf = digital_rf.drf_command:main"
      ],
      "number": "1",
      "run_exports": [
        "digital_rf"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "ryanvolz"
      ]
    },
    "package": {
      "name": "digital_rf",
      "version": "2.6.12"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake >=3.15",
        "ninja"
      ],
      "host": [
        "hdf5",
        "mako",
        "numpy",
        "numpy >=2.0",
        "python",
        "python-build",
        "scikit-build-core",
        "setuptools-scm"
      ],
      "run": [
        "h5py",
        "packaging",
        "python",
        "python-dateutil",
        "six",
        "watchdog"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "c41f423c12001143da14f0d3f48b665a09e86cf6ec91a8510220c828a5ce925d",
      "url": "https://github.com/MITHaystack/digital_rf/releases/download/2.6.12/digital_rf-2.6.12.tar.gz"
    },
    "test": {
      "commands": [
        "if not exist %LIBRARY_INC%\\\\digital_rf\\\\digital_rf.h exit 1",
        "if not exist %LIBRARY_INC%\\\\digital_rf\\\\digital_rf_version.h exit 1",
        "if not exist %PREFIX%\\\\Library\\\\lib\\\\pkgconfig\\\\digital_rf.pc exit 1",
        "if not exist %LIBRARY_BIN%\\\\digital_rf.dll exit 1",
        "for /f \"usebackq tokens=*\" %%a in (`pkg-config --variable=exec_prefix --dont-define-prefix digital_rf`) do if not exist \"%%a/bin/digital_rf.dll\" exit 1",
        "if not exist %LIBRARY_LIB%\\\\digital_rf.lib exit 1",
        "for /f \"usebackq tokens=*\" %%a in (`pkg-config --variable=libdir --dont-define-prefix digital_rf`) do if not exist \"%%a/digital_rf.lib\" exit 1",
        "if not exist %LIBRARY_LIB%\\\\cmake\\\\libdigital_rf\\\\libdigital_rfConfig.cmake exit 1",
        "if not exist %LIBRARY_LIB%\\\\cmake\\\\libdigital_rf\\\\libdigital_rfConfigVersion.cmake exit 1",
        "if not exist %LIBRARY_LIB%\\\\cmake\\\\libdigital_rf\\\\libdigital_rfTargets-release.cmake exit 1",
        "if not exist %LIBRARY_LIB%\\\\cmake\\\\libdigital_rf\\\\libdigital_rfTargets.cmake exit 1",
        "if not exist %LIBRARY_PREFIX%\\\\share\\\\gnuradio\\\\grc\\\\blocks\\\\gr_digital_rf_digital_rf_channel_sink.block.yml exit 1",
        "if not exist %LIBRARY_PREFIX%\\\\share\\\\gnuradio\\\\grc\\\\blocks\\\\gr_digital_rf_digital_rf_channel_source.block.yml exit 1",
        "if not exist %LIBRARY_PREFIX%\\\\share\\\\gnuradio\\\\grc\\\\blocks\\\\gr_digital_rf_digital_rf_sink.block.yml exit 1",
        "if not exist %LIBRARY_PREFIX%\\\\share\\\\gnuradio\\\\grc\\\\blocks\\\\gr_digital_rf_digital_rf_source.block.yml exit 1",
        "drf --help",
        "pytest",
        "python python/examples/example_write_digital_metadata.py",
        "python python/examples/example_read_digital_metadata.py"
      ],
      "imports": [
        "digital_rf",
        "digital_rf.digital_rf_hdf5",
        "gr_digital_rf"
      ],
      "requires": [
        "gnuradio-core",
        "pkg-config",
        "pytest >=3.6"
      ],
      "source_files": [
        "python/tests/*.py",
        "python/examples/*.py"
      ]
    }
  },
  "win_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "ninja"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "hdf5",
        "mako",
        "numpy",
        "python",
        "python-build",
        "scikit-build-core",
        "setuptools-scm"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "h5py",
        "packaging",
        "python",
        "python-dateutil",
        "six",
        "watchdog"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "gnuradio-core",
        "pkg-config",
        "pytest"
      ]
    }
  }
}