{
  "archived": false,
  "branch": "main",
  "conda-forge.yml": {
    "build_platform": {
      "osx_arm64": "osx_64"
    },
    "conda_build": {
      "pkg_format": "2"
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    },
    "test": "native_and_emulated"
  },
  "feedstock_name": "opty",
  "hash_type": "sha256",
  "linux_64_meta_yaml": {
    "about": {
      "description": "opty utilizes symbolic descriptions of differential algebraic equations\nexpressed with SymPy to form the constraints needed to solve optimal\ncontrol and parameter identification problems using the direct collocation\nmethod and non-linear programming (NLP). In general, if one can express the\ncontinuous first order differential algebraic equations of the system as\nsymbolic expressions opty will automatically generate a function to\nefficiently evaluate the dynamical constraints and a function that\nevaluates the sparse Jacobian of the constraints, which have been optimized\nfor speed and memory consumption. The translation of the dynamical system\ndescription to the NLP form, primarily the formation of the constraints and\nthe Jacobian of the constraints, manually is a time consuming and error\nprone process. opty eliminates both of those issues.\n",
      "dev_url": "http://github.com/csu-hmc/opty",
      "home": "http://github.com/csu-hmc/opty",
      "license": "BSD-2-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE",
      "summary": "Tool for optimizing dynamic systems using direct collocation."
    },
    "build": {
      "number": "1",
      "script": "PYTHON -m pip install --no-deps --no-build-isolatio -vv ."
    },
    "extra": {
      "recipe-maintainers": [
        "moorepants"
      ]
    },
    "package": {
      "name": "opty",
      "version": "1.4.0"
    },
    "requirements": {
      "build": [],
      "host": [
        "pip",
        "python",
        "setuptools"
      ],
      "run": [
        "cyipopt >=1.1.0",
        "cython >=0.29.19",
        "numpy >=1.19.0",
        "python",
        "setuptools",
        "sympy >=1.6.0"
      ],
      "run_constrained": [
        "scipy >=1.5.0",
        "matplotlib-base >=3.2.0"
      ]
    },
    "schema_version": 0,
    "source": {
      "fn": "opty-1.4.0.tar.gz",
      "sha256": "5d814c4d592276d8abae559bfc2bd6eb5bcdba863deb7ece0672cf79b0a159ab",
      "url": "https://pypi.org/packages/source/o/opty/opty-1.4.0.tar.gz"
    },
    "test": {
      "commands": [
        "which python",
        "python test_setup.py build_ext --inplace",
        "python -c \"from opty.tests.test_utils import test_ufuncify_matrix;test_ufuncify_matrix()\"",
        "python betts2003.py"
      ],
      "files": [
        "betts2003.py",
        "helloworld.pyx",
        "test_setup.py"
      ],
      "imports": [
        "opty",
        "opty.direct_collocation",
        "opty.parameter_identification",
        "opty.utils",
        "opty.tests"
      ],
      "requires": [
        "c_compiler_stub",
        "pytest",
        "scipy >=1.5.0"
      ]
    }
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": []
    },
    "host": {
      "__set__": true,
      "elements": [
        "pip",
        "python",
        "setuptools"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "cyipopt",
        "cython",
        "numpy",
        "python",
        "setuptools",
        "sympy"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "pytest",
        "scipy"
      ]
    }
  },
  "meta_yaml": {
    "about": {
      "description": "opty utilizes symbolic descriptions of differential algebraic equations\nexpressed with SymPy to form the constraints needed to solve optimal\ncontrol and parameter identification problems using the direct collocation\nmethod and non-linear programming (NLP). In general, if one can express the\ncontinuous first order differential algebraic equations of the system as\nsymbolic expressions opty will automatically generate a function to\nefficiently evaluate the dynamical constraints and a function that\nevaluates the sparse Jacobian of the constraints, which have been optimized\nfor speed and memory consumption. The translation of the dynamical system\ndescription to the NLP form, primarily the formation of the constraints and\nthe Jacobian of the constraints, manually is a time consuming and error\nprone process. opty eliminates both of those issues.\n",
      "dev_url": "http://github.com/csu-hmc/opty",
      "home": "http://github.com/csu-hmc/opty",
      "license": "BSD-2-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE",
      "summary": "Tool for optimizing dynamic systems using direct collocation."
    },
    "build": {
      "number": "1",
      "script": "PYTHON -m pip install --no-deps --no-build-isolatio -vv ."
    },
    "extra": {
      "recipe-maintainers": [
        "moorepants"
      ]
    },
    "package": {
      "name": "opty",
      "version": "1.4.0"
    },
    "requirements": {
      "build": [],
      "host": [
        "pip",
        "python",
        "setuptools"
      ],
      "run": [
        "cyipopt >=1.1.0",
        "cython >=0.29.19",
        "numpy >=1.19.0",
        "python",
        "setuptools",
        "sympy >=1.6.0"
      ],
      "run_constrained": [
        "scipy >=1.5.0",
        "matplotlib-base >=3.2.0"
      ]
    },
    "schema_version": 0,
    "source": {
      "fn": "opty-1.4.0.tar.gz",
      "sha256": "5d814c4d592276d8abae559bfc2bd6eb5bcdba863deb7ece0672cf79b0a159ab",
      "url": "https://pypi.org/packages/source/o/opty/opty-1.4.0.tar.gz"
    },
    "test": {
      "commands": [
        "which python",
        "python test_setup.py build_ext --inplace",
        "python -c \"from opty.tests.test_utils import test_ufuncify_matrix;test_ufuncify_matrix()\"",
        "python betts2003.py"
      ],
      "files": [
        "betts2003.py",
        "helloworld.pyx",
        "test_setup.py"
      ],
      "imports": [
        "opty",
        "opty.direct_collocation",
        "opty.parameter_identification",
        "opty.utils",
        "opty.tests"
      ],
      "requires": [
        "c_compiler_stub",
        "pytest",
        "scipy >=1.5.0"
      ]
    }
  },
  "name": "opty",
  "osx_64_meta_yaml": {
    "about": {
      "description": "opty utilizes symbolic descriptions of differential algebraic equations\nexpressed with SymPy to form the constraints needed to solve optimal\ncontrol and parameter identification problems using the direct collocation\nmethod and non-linear programming (NLP). In general, if one can express the\ncontinuous first order differential algebraic equations of the system as\nsymbolic expressions opty will automatically generate a function to\nefficiently evaluate the dynamical constraints and a function that\nevaluates the sparse Jacobian of the constraints, which have been optimized\nfor speed and memory consumption. The translation of the dynamical system\ndescription to the NLP form, primarily the formation of the constraints and\nthe Jacobian of the constraints, manually is a time consuming and error\nprone process. opty eliminates both of those issues.\n",
      "dev_url": "http://github.com/csu-hmc/opty",
      "home": "http://github.com/csu-hmc/opty",
      "license": "BSD-2-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE",
      "summary": "Tool for optimizing dynamic systems using direct collocation."
    },
    "build": {
      "number": "1",
      "script": "PYTHON -m pip install --no-deps --no-build-isolatio -vv ."
    },
    "extra": {
      "recipe-maintainers": [
        "moorepants"
      ]
    },
    "package": {
      "name": "opty",
      "version": "1.4.0"
    },
    "requirements": {
      "build": [],
      "host": [
        "pip",
        "python",
        "setuptools"
      ],
      "run": [
        "cyipopt >=1.1.0",
        "cython >=0.29.19",
        "numpy >=1.19.0",
        "python",
        "setuptools",
        "sympy >=1.6.0"
      ],
      "run_constrained": [
        "scipy >=1.5.0",
        "matplotlib-base >=3.2.0"
      ]
    },
    "schema_version": 0,
    "source": {
      "fn": "opty-1.4.0.tar.gz",
      "sha256": "5d814c4d592276d8abae559bfc2bd6eb5bcdba863deb7ece0672cf79b0a159ab",
      "url": "https://pypi.org/packages/source/o/opty/opty-1.4.0.tar.gz"
    },
    "test": {
      "commands": [
        "which python",
        "python test_setup.py build_ext --inplace",
        "python -c \"from opty.tests.test_utils import test_ufuncify_matrix;test_ufuncify_matrix()\"",
        "python betts2003.py"
      ],
      "files": [
        "betts2003.py",
        "helloworld.pyx",
        "test_setup.py"
      ],
      "imports": [
        "opty",
        "opty.direct_collocation",
        "opty.parameter_identification",
        "opty.utils",
        "opty.tests"
      ],
      "requires": [
        "c_compiler_stub",
        "pytest",
        "scipy >=1.5.0"
      ]
    }
  },
  "osx_64_requirements": {
    "build": {
      "__set__": true,
      "elements": []
    },
    "host": {
      "__set__": true,
      "elements": [
        "pip",
        "python",
        "setuptools"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "cyipopt",
        "cython",
        "numpy",
        "python",
        "setuptools",
        "sympy"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "pytest",
        "scipy"
      ]
    }
  },
  "osx_arm64_meta_yaml": {
    "about": {
      "description": "opty utilizes symbolic descriptions of differential algebraic equations\nexpressed with SymPy to form the constraints needed to solve optimal\ncontrol and parameter identification problems using the direct collocation\nmethod and non-linear programming (NLP). In general, if one can express the\ncontinuous first order differential algebraic equations of the system as\nsymbolic expressions opty will automatically generate a function to\nefficiently evaluate the dynamical constraints and a function that\nevaluates the sparse Jacobian of the constraints, which have been optimized\nfor speed and memory consumption. The translation of the dynamical system\ndescription to the NLP form, primarily the formation of the constraints and\nthe Jacobian of the constraints, manually is a time consuming and error\nprone process. opty eliminates both of those issues.\n",
      "dev_url": "http://github.com/csu-hmc/opty",
      "home": "http://github.com/csu-hmc/opty",
      "license": "BSD-2-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE",
      "summary": "Tool for optimizing dynamic systems using direct collocation."
    },
    "build": {
      "number": "1",
      "script": "PYTHON -m pip install --no-deps --no-build-isolatio -vv ."
    },
    "extra": {
      "recipe-maintainers": [
        "moorepants"
      ]
    },
    "package": {
      "name": "opty",
      "version": "1.4.0"
    },
    "requirements": {
      "build": [],
      "host": [
        "pip",
        "python",
        "setuptools"
      ],
      "run": [
        "cyipopt >=1.1.0",
        "cython >=0.29.19",
        "numpy >=1.19.0",
        "python",
        "setuptools",
        "sympy >=1.6.0"
      ],
      "run_constrained": [
        "scipy >=1.5.0",
        "matplotlib-base >=3.2.0"
      ]
    },
    "schema_version": 0,
    "source": {
      "fn": "opty-1.4.0.tar.gz",
      "sha256": "5d814c4d592276d8abae559bfc2bd6eb5bcdba863deb7ece0672cf79b0a159ab",
      "url": "https://pypi.org/packages/source/o/opty/opty-1.4.0.tar.gz"
    },
    "test": {
      "commands": [
        "which python",
        "python test_setup.py build_ext --inplace",
        "python -c \"from opty.tests.test_utils import test_ufuncify_matrix;test_ufuncify_matrix()\"",
        "python betts2003.py"
      ],
      "files": [
        "betts2003.py",
        "helloworld.pyx",
        "test_setup.py"
      ],
      "imports": [
        "opty",
        "opty.direct_collocation",
        "opty.parameter_identification",
        "opty.utils",
        "opty.tests"
      ],
      "requires": [
        "c_compiler_stub",
        "pytest",
        "scipy >=1.5.0"
      ]
    }
  },
  "osx_arm64_requirements": {
    "build": {
      "__set__": true,
      "elements": []
    },
    "host": {
      "__set__": true,
      "elements": [
        "pip",
        "python",
        "setuptools"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "cyipopt",
        "cython",
        "numpy",
        "python",
        "setuptools",
        "sympy"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "pytest",
        "scipy"
      ]
    }
  },
  "outputs_names": {
    "__set__": true,
    "elements": [
      "opty"
    ]
  },
  "parsing_error": false,
  "platforms": [
    "linux_64",
    "osx_64",
    "osx_arm64",
    "win_64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/opty.json"
  },
  "raw_meta_yaml": "{% set name = \"opty\" %}\n{% set version = \"1.4.0\" %}\n{% set sha256 = \"5d814c4d592276d8abae559bfc2bd6eb5bcdba863deb7ece0672cf79b0a159ab\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  fn: {{ name }}-{{ version }}.tar.gz\n  url: https://pypi.org/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: {{ sha256 }}\n\nbuild:\n  number: 1\n  script: {{ PYTHON }} -m pip install --no-deps --no-build-isolatio -vv .\nrequirements:\n  build:\n    - python                                 # [build_platform != target_platform]\n    - cross-python_{{ target_platform }}     # [build_platform != target_platform]\n  host:\n    - pip\n    - python\n    - setuptools\n  run:\n    - cyipopt >=1.1.0\n    - cython >=0.29.19\n    - numpy >=1.19.0\n    - python\n    - setuptools\n    - sympy >=1.6.0\n  run_constrained:\n    - scipy >=1.5.0\n    - matplotlib-base >=3.2.0\n\ntest:\n  requires:\n    - {{ compiler('c') }}\n    - pytest\n    - scipy >=1.5.0\n  imports:\n    - opty\n    - opty.direct_collocation\n    - opty.parameter_identification\n    - opty.utils\n    - opty.tests\n  files:\n    - betts2003.py\n    - helloworld.pyx\n    - test_setup.py\n  commands:\n    - which python  # [unix]\n    # NOTE : Try to build a simple Cython extension. ufuncify_matrix() does not\n    # seem to print error info on this command with subprocess.call() and this\n    # sample gives better feedback until ufuncify_matrix() is improved.\n    - python test_setup.py build_ext --inplace\n    - python -c \"from opty.tests.test_utils import test_ufuncify_matrix;test_ufuncify_matrix()\"  # [unix]\n    - python betts2003.py\n\nabout:\n  home: http://github.com/csu-hmc/opty\n  license: BSD-2-Clause\n  license_family: BSD\n  license_file: LICENSE\n  summary: Tool for optimizing dynamic systems using direct collocation.\n  description: |\n    opty utilizes symbolic descriptions of differential algebraic equations\n    expressed with SymPy to form the constraints needed to solve optimal\n    control and parameter identification problems using the direct collocation\n    method and non-linear programming (NLP). In general, if one can express the\n    continuous first order differential algebraic equations of the system as\n    symbolic expressions opty will automatically generate a function to\n    efficiently evaluate the dynamical constraints and a function that\n    evaluates the sparse Jacobian of the constraints, which have been optimized\n    for speed and memory consumption. The translation of the dynamical system\n    description to the NLP form, primarily the formation of the constraints and\n    the Jacobian of the constraints, manually is a time consuming and error\n    prone process. opty eliminates both of those issues.\n  dev_url: http://github.com/csu-hmc/opty\n\nextra:\n  recipe-maintainers:\n    - moorepants\n",
  "req": {
    "__set__": true,
    "elements": [
      "cyipopt",
      "cython",
      "numpy",
      "pip",
      "python",
      "setuptools",
      "sympy"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": []
    },
    "host": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "pip",
        "python",
        "setuptools"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "cyipopt",
        "cython",
        "numpy",
        "python",
        "setuptools",
        "sympy"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "pytest",
        "scipy"
      ]
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": []
    },
    "host": {
      "__set__": true,
      "elements": [
        "pip",
        "python",
        "setuptools"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "cyipopt >=1.1.0",
        "cython >=0.29.19",
        "numpy >=1.19.0",
        "python",
        "setuptools",
        "sympy >=1.6.0"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "pytest",
        "scipy >=1.5.0"
      ]
    }
  },
  "url": "https://pypi.org/packages/source/o/opty/opty-1.4.0.tar.gz",
  "version": "1.4.0",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/opty.json"
  },
  "win_64_meta_yaml": {
    "about": {
      "description": "opty utilizes symbolic descriptions of differential algebraic equations\nexpressed with SymPy to form the constraints needed to solve optimal\ncontrol and parameter identification problems using the direct collocation\nmethod and non-linear programming (NLP). In general, if one can express the\ncontinuous first order differential algebraic equations of the system as\nsymbolic expressions opty will automatically generate a function to\nefficiently evaluate the dynamical constraints and a function that\nevaluates the sparse Jacobian of the constraints, which have been optimized\nfor speed and memory consumption. The translation of the dynamical system\ndescription to the NLP form, primarily the formation of the constraints and\nthe Jacobian of the constraints, manually is a time consuming and error\nprone process. opty eliminates both of those issues.\n",
      "dev_url": "http://github.com/csu-hmc/opty",
      "home": "http://github.com/csu-hmc/opty",
      "license": "BSD-2-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE",
      "summary": "Tool for optimizing dynamic systems using direct collocation."
    },
    "build": {
      "number": "1",
      "script": "PYTHON -m pip install --no-deps --no-build-isolatio -vv ."
    },
    "extra": {
      "recipe-maintainers": [
        "moorepants"
      ]
    },
    "package": {
      "name": "opty",
      "version": "1.4.0"
    },
    "requirements": {
      "build": [],
      "host": [
        "pip",
        "python",
        "setuptools"
      ],
      "run": [
        "cyipopt >=1.1.0",
        "cython >=0.29.19",
        "numpy >=1.19.0",
        "python",
        "setuptools",
        "sympy >=1.6.0"
      ],
      "run_constrained": [
        "scipy >=1.5.0",
        "matplotlib-base >=3.2.0"
      ]
    },
    "schema_version": 0,
    "source": {
      "fn": "opty-1.4.0.tar.gz",
      "sha256": "5d814c4d592276d8abae559bfc2bd6eb5bcdba863deb7ece0672cf79b0a159ab",
      "url": "https://pypi.org/packages/source/o/opty/opty-1.4.0.tar.gz"
    },
    "test": {
      "commands": [
        "python test_setup.py build_ext --inplace",
        "python betts2003.py"
      ],
      "files": [
        "betts2003.py",
        "helloworld.pyx",
        "test_setup.py"
      ],
      "imports": [
        "opty",
        "opty.direct_collocation",
        "opty.parameter_identification",
        "opty.utils",
        "opty.tests"
      ],
      "requires": [
        "c_compiler_stub",
        "pytest",
        "scipy >=1.5.0"
      ]
    }
  },
  "win_64_requirements": {
    "build": {
      "__set__": true,
      "elements": []
    },
    "host": {
      "__set__": true,
      "elements": [
        "pip",
        "python",
        "setuptools"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "cyipopt",
        "cython",
        "numpy",
        "python",
        "setuptools",
        "sympy"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "pytest",
        "scipy"
      ]
    }
  }
}