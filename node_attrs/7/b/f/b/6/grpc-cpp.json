{
  "archived": false,
  "branch": "main",
  "conda-forge.yml": {
    "azure": {
      "free_disk_space": true,
      "settings_linux": {
        "swapfile_size": "10GiB"
      }
    },
    "build_platform": {
      "linux_aarch64": "linux_64",
      "linux_ppc64le": "linux_64",
      "osx_arm64": "osx_64"
    },
    "conda_build": {
      "pkg_format": "2"
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    },
    "test": "native_and_emulated"
  },
  "feedstock_hash": "2567511ef762fb1622d2e996a642916ad4dfdd26",
  "feedstock_hash_ts": 1760633715,
  "feedstock_name": "grpc-cpp",
  "hash_type": "sha256",
  "linux_64_meta_yaml": {
    "about": {
      "description": "gRPC is a modern, open source, high-performance remote procedure call\n(RPC) framework that can run anywhere. gRPC enables client and server\napplications to communicate transparently, and simplifies the building\nof connected systems.\n\nThis package contains the gRPC C++ libraries and header files, as well\nas the code generation plugins.\n",
      "dev_url": "https://github.com/grpc/grpc",
      "doc_url": "https://grpc.io/docs/",
      "home": "https://grpc.io/",
      "license": "Apache-2.0",
      "license_family": "APACHE",
      "license_file": "LICENSE",
      "summary": "gRPC - A high-performance, open-source universal RPC framework"
    },
    "build": {
      "number": "1"
    },
    "extra": {
      "feedstock-name": "grpc-cpp",
      "recipe-maintainers": [
        "pitrou",
        "xhochy",
        "wesm",
        "h-vetinari",
        "mariusvniekerk",
        "jjerphan",
        "JohanMabille"
      ]
    },
    "outputs": [
      {
        "build": {
          "run_exports": [
            "libgrpc"
          ]
        },
        "name": "libgrpc",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cmake",
            "ninja"
          ],
          "host": [
            "libabseil",
            "c-ares",
            "libprotobuf",
            "re2",
            "openssl",
            "zlib"
          ],
          "run": [],
          "run_constrained": [
            "grpc-cpp =1.74.1"
          ]
        },
        "script": "build-cpp.sh",
        "test": {
          "commands": [
            "test -f $PREFIX/lib/libgpr.so",
            "test ! -f $PREFIX/lib/libgpr.a",
            "test -f $PREFIX/lib/libgrpc.so",
            "test ! -f $PREFIX/lib/libgrpc.a",
            "test -f $PREFIX/lib/libgrpc_unsecure.so",
            "test ! -f $PREFIX/lib/libgrpc_unsecure.a",
            "test -f $PREFIX/lib/libgrpc++.so",
            "test ! -f $PREFIX/lib/libgrpc++.a",
            "test -f $PREFIX/lib/libgrpc++_unsecure.so",
            "test ! -f $PREFIX/lib/libgrpc++_unsecure.a",
            "test -f $PREFIX/lib/libaddress_sorting.so",
            "test ! -f $PREFIX/lib/libaddress_sorting.a",
            "test -f $PREFIX/bin/grpc_cpp_plugin",
            "test -f $PREFIX/bin/grpc_csharp_plugin",
            "test -f $PREFIX/bin/grpc_node_plugin",
            "test -f $PREFIX/bin/grpc_objective_c_plugin",
            "test -f $PREFIX/bin/grpc_php_plugin",
            "test -f $PREFIX/bin/grpc_python_plugin",
            "test -f $PREFIX/bin/grpc_ruby_plugin",
            "pkg-config --print-errors --exact-version \"49.0.0\" gpr",
            "pkg-config --print-errors --exact-version \"49.0.0\" grpc",
            "pkg-config --print-errors --exact-version \"49.0.0\" grpc_unsecure",
            "pkg-config --print-errors --exact-version \"1.74.1\" grpc++",
            "pkg-config --print-errors --exact-version \"1.74.1\" grpc++_unsecure",
            "./test_grpc.sh",
            "cd cmake_test",
            "cmake -GNinja -DCMAKE_CXX_STANDARD=17 $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/",
            "hello.proto",
            "test_grpc.sh",
            "test_grpc.bat"
          ],
          "requires": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cmake",
            "ninja",
            "pkg-config",
            "zlib"
          ],
          "source_files": [
            "examples/cpp/helloworld/",
            "examples/cpp/cmake/",
            "examples/protos/helloworld.proto"
          ]
        }
      },
      {
        "name": "grpcio",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub"
          ],
          "host": [
            "python",
            "pip",
            "setuptools",
            "cython",
            "libgrpc",
            "pthread-stubs",
            "zlib"
          ],
          "run": [
            "python",
            "libgrpc"
          ]
        },
        "script": "build-grpcio.sh",
        "test": {
          "commands": [
            "python -m pip check",
            "python grpcio_distribtest.py",
            "cd examples/python/helloworld",
            "python -m grpc_tools.protoc -I../../protos --python_out=. --pyi_out=. --grpc_python_out=. ../../protos/helloworld.proto",
            "cp ../../../test_grpcio_helloworld.py .",
            "python test_grpcio_helloworld.py"
          ],
          "files": [
            "grpcio_distribtest.py",
            "test_grpcio_helloworld.py"
          ],
          "imports": [
            "grpc",
            "grpc._cython",
            "grpc._cython._cygrpc",
            "grpc.beta",
            "grpc.framework",
            "grpc.framework.common",
            "grpc.framework.foundation",
            "grpc.framework.interfaces",
            "grpc.framework.interfaces.base",
            "grpc.framework.interfaces.face"
          ],
          "requires": [
            "pip",
            "grpcio-tools"
          ],
          "source_files": [
            "examples/python/helloworld/",
            "examples/protos/helloworld.proto"
          ]
        }
      },
      {
        "build": {
          "script": [
            "cd tools/distrib/python/grpcio_tools",
            "export GRPC_PYTHON_BUILD_WITH_CYTHON=true",
            "python -m pip install . -vv"
          ]
        },
        "name": "grpcio-tools",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub"
          ],
          "host": [
            "grpcio 1.74.1 *_1",
            "python",
            "cython",
            "pip",
            "setuptools",
            "libabseil",
            "libprotobuf"
          ],
          "run": [
            "grpcio 1.74.1 *_1",
            "python",
            "protobuf",
            "setuptools"
          ]
        },
        "test": {
          "commands": [
            "pip check",
            "test \"$(python -m grpc_tools.protoc --version)\" == \"$(protoc --version)\""
          ],
          "imports": [
            "grpc_tools"
          ],
          "requires": [
            "pip"
          ]
        }
      }
    ],
    "package": {
      "name": "grpc-split",
      "version": "1.74.1"
    },
    "schema_version": 0,
    "source": [
      {
        "patches": [
          "patches/0001-windows-ssl-lib-names.patch",
          "patches/0002-fix-win-setup-cmds.patch",
          "patches/0003-Link-against-grpc-and-abseil.patch",
          "patches/0004-force-protoc-executable.patch",
          "patches/0005-mark-linkages-of-grpc-_unsecure-as-private.patch",
          "patches/0006-for-main-targets-set-_DLL_EXPORTS-when-building-and-.patch",
          "patches/0007-add-missing-linkages-for-gRPC_BUILD_TESTS-ON.patch",
          "patches/0008-add-enable_testing-so-tests-get-run.patch",
          "patches/0009-unvendor-upb-and-utf8_range-use-protobuf-s-version.patch",
          "patches/0010-reduce-buildtests_cxx-target-to-end2end-tests.patch",
          "patches/0011-build-grpcio-tools-from-source.patch",
          "patches/0013-reduce-grpc-symbol-explosion-with-autogenerated-expo.patch",
          "patches/0014-update-GRPC_DLL-instances-where-necessary.patch"
        ],
        "sha256": "7bf97c11cf3808d650a3a025bbf9c5f922c844a590826285067765dfd055d228",
        "url": "https://github.com/grpc/grpc/archive/v1.74.1.tar.gz"
      },
      {
        "folder": "third_party/benchmark",
        "git_rev": "12235e24652fc7f809373e7c11a5f73c5763fc4c",
        "git_url": "https://github.com/google/benchmark.git"
      },
      {
        "folder": "third_party/envoy-api",
        "git_rev": "4de3c74cf21a9958c1cf26d8993c55c6e0d28b49",
        "git_url": "https://github.com/envoyproxy/data-plane-api.git"
      },
      {
        "folder": "third_party/googleapis",
        "git_rev": "fe8ba054ad4f7eca946c2d14a63c3f07c0b586a0",
        "git_url": "https://github.com/googleapis/googleapis.git"
      },
      {
        "folder": "third_party/googletest",
        "git_rev": "52eb8108c5bdec04579160ae17225d66034bd723",
        "git_url": "https://github.com/google/googletest.git"
      },
      {
        "folder": "third_party/protoc-gen-validate",
        "git_rev": "32c2415389a3538082507ae537e7edd9578c64ed",
        "git_url": "https://github.com/envoyproxy/protoc-gen-validate.git"
      },
      {
        "folder": "third_party/xds",
        "git_rev": "3a472e524827f72d1ad621c4983dd5af54c46776",
        "git_url": "https://github.com/cncf/xds.git"
      }
    ]
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "ninja"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "c-ares",
        "cython",
        "grpcio",
        "libabseil",
        "libgrpc",
        "libprotobuf",
        "openssl",
        "pip",
        "pthread-stubs",
        "python",
        "re2",
        "setuptools",
        "zlib"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "grpcio",
        "libgrpc",
        "protobuf",
        "python",
        "setuptools"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "cmake",
        "cxx_compiler_stub",
        "grpcio-tools",
        "ninja",
        "pip",
        "pkg-config",
        "zlib"
      ]
    }
  },
  "linux_aarch64_meta_yaml": {
    "about": {
      "description": "gRPC is a modern, open source, high-performance remote procedure call\n(RPC) framework that can run anywhere. gRPC enables client and server\napplications to communicate transparently, and simplifies the building\nof connected systems.\n\nThis package contains the gRPC C++ libraries and header files, as well\nas the code generation plugins.\n",
      "dev_url": "https://github.com/grpc/grpc",
      "doc_url": "https://grpc.io/docs/",
      "home": "https://grpc.io/",
      "license": "Apache-2.0",
      "license_family": "APACHE",
      "license_file": "LICENSE",
      "summary": "gRPC - A high-performance, open-source universal RPC framework"
    },
    "build": {
      "number": "1"
    },
    "extra": {
      "feedstock-name": "grpc-cpp",
      "recipe-maintainers": [
        "pitrou",
        "xhochy",
        "wesm",
        "h-vetinari",
        "mariusvniekerk",
        "jjerphan",
        "JohanMabille"
      ]
    },
    "outputs": [
      {
        "build": {
          "run_exports": [
            "libgrpc"
          ]
        },
        "name": "libgrpc",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cmake",
            "ninja"
          ],
          "host": [
            "libabseil",
            "c-ares",
            "libprotobuf",
            "re2",
            "openssl",
            "zlib"
          ],
          "run": [],
          "run_constrained": [
            "grpc-cpp =1.74.1"
          ]
        },
        "script": "build-cpp.sh",
        "test": {
          "commands": [
            "test -f $PREFIX/lib/libgpr.so",
            "test ! -f $PREFIX/lib/libgpr.a",
            "test -f $PREFIX/lib/libgrpc.so",
            "test ! -f $PREFIX/lib/libgrpc.a",
            "test -f $PREFIX/lib/libgrpc_unsecure.so",
            "test ! -f $PREFIX/lib/libgrpc_unsecure.a",
            "test -f $PREFIX/lib/libgrpc++.so",
            "test ! -f $PREFIX/lib/libgrpc++.a",
            "test -f $PREFIX/lib/libgrpc++_unsecure.so",
            "test ! -f $PREFIX/lib/libgrpc++_unsecure.a",
            "test -f $PREFIX/lib/libaddress_sorting.so",
            "test ! -f $PREFIX/lib/libaddress_sorting.a",
            "test -f $PREFIX/bin/grpc_cpp_plugin",
            "test -f $PREFIX/bin/grpc_csharp_plugin",
            "test -f $PREFIX/bin/grpc_node_plugin",
            "test -f $PREFIX/bin/grpc_objective_c_plugin",
            "test -f $PREFIX/bin/grpc_php_plugin",
            "test -f $PREFIX/bin/grpc_python_plugin",
            "test -f $PREFIX/bin/grpc_ruby_plugin",
            "pkg-config --print-errors --exact-version \"49.0.0\" gpr",
            "pkg-config --print-errors --exact-version \"49.0.0\" grpc",
            "pkg-config --print-errors --exact-version \"49.0.0\" grpc_unsecure",
            "pkg-config --print-errors --exact-version \"1.74.1\" grpc++",
            "pkg-config --print-errors --exact-version \"1.74.1\" grpc++_unsecure",
            "./test_grpc.sh",
            "cd cmake_test",
            "cmake -GNinja -DCMAKE_CXX_STANDARD=17 $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/",
            "hello.proto",
            "test_grpc.sh",
            "test_grpc.bat"
          ],
          "requires": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cmake",
            "ninja",
            "pkg-config",
            "zlib"
          ],
          "source_files": [
            "examples/cpp/helloworld/",
            "examples/cpp/cmake/",
            "examples/protos/helloworld.proto"
          ]
        }
      },
      {
        "name": "grpcio",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub"
          ],
          "host": [
            "python",
            "pip",
            "setuptools",
            "cython",
            "libgrpc",
            "pthread-stubs",
            "zlib"
          ],
          "run": [
            "python",
            "libgrpc"
          ]
        },
        "script": "build-grpcio.sh",
        "test": {
          "commands": [
            "python -m pip check",
            "python grpcio_distribtest.py",
            "cd examples/python/helloworld",
            "python -m grpc_tools.protoc -I../../protos --python_out=. --pyi_out=. --grpc_python_out=. ../../protos/helloworld.proto",
            "cp ../../../test_grpcio_helloworld.py .",
            "python test_grpcio_helloworld.py"
          ],
          "files": [
            "grpcio_distribtest.py",
            "test_grpcio_helloworld.py"
          ],
          "imports": [
            "grpc",
            "grpc._cython",
            "grpc._cython._cygrpc",
            "grpc.beta",
            "grpc.framework",
            "grpc.framework.common",
            "grpc.framework.foundation",
            "grpc.framework.interfaces",
            "grpc.framework.interfaces.base",
            "grpc.framework.interfaces.face"
          ],
          "requires": [
            "pip",
            "grpcio-tools"
          ],
          "source_files": [
            "examples/python/helloworld/",
            "examples/protos/helloworld.proto"
          ]
        }
      },
      {
        "build": {
          "script": [
            "cd tools/distrib/python/grpcio_tools",
            "export GRPC_PYTHON_BUILD_WITH_CYTHON=true",
            "python -m pip install . -vv"
          ]
        },
        "name": "grpcio-tools",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub"
          ],
          "host": [
            "grpcio 1.74.1 *_1",
            "python",
            "cython",
            "pip",
            "setuptools",
            "libabseil",
            "libprotobuf"
          ],
          "run": [
            "grpcio 1.74.1 *_1",
            "python",
            "protobuf",
            "setuptools"
          ]
        },
        "test": {
          "commands": [
            "pip check",
            "test \"$(python -m grpc_tools.protoc --version)\" == \"$(protoc --version)\""
          ],
          "imports": [
            "grpc_tools"
          ],
          "requires": [
            "pip"
          ]
        }
      }
    ],
    "package": {
      "name": "grpc-split",
      "version": "1.74.1"
    },
    "schema_version": 0,
    "source": [
      {
        "patches": [
          "patches/0001-windows-ssl-lib-names.patch",
          "patches/0002-fix-win-setup-cmds.patch",
          "patches/0003-Link-against-grpc-and-abseil.patch",
          "patches/0004-force-protoc-executable.patch",
          "patches/0005-mark-linkages-of-grpc-_unsecure-as-private.patch",
          "patches/0006-for-main-targets-set-_DLL_EXPORTS-when-building-and-.patch",
          "patches/0007-add-missing-linkages-for-gRPC_BUILD_TESTS-ON.patch",
          "patches/0008-add-enable_testing-so-tests-get-run.patch",
          "patches/0009-unvendor-upb-and-utf8_range-use-protobuf-s-version.patch",
          "patches/0010-reduce-buildtests_cxx-target-to-end2end-tests.patch",
          "patches/0011-build-grpcio-tools-from-source.patch",
          "patches/0013-reduce-grpc-symbol-explosion-with-autogenerated-expo.patch",
          "patches/0014-update-GRPC_DLL-instances-where-necessary.patch"
        ],
        "sha256": "7bf97c11cf3808d650a3a025bbf9c5f922c844a590826285067765dfd055d228",
        "url": "https://github.com/grpc/grpc/archive/v1.74.1.tar.gz"
      },
      {
        "folder": "third_party/benchmark",
        "git_rev": "12235e24652fc7f809373e7c11a5f73c5763fc4c",
        "git_url": "https://github.com/google/benchmark.git"
      },
      {
        "folder": "third_party/envoy-api",
        "git_rev": "4de3c74cf21a9958c1cf26d8993c55c6e0d28b49",
        "git_url": "https://github.com/envoyproxy/data-plane-api.git"
      },
      {
        "folder": "third_party/googleapis",
        "git_rev": "fe8ba054ad4f7eca946c2d14a63c3f07c0b586a0",
        "git_url": "https://github.com/googleapis/googleapis.git"
      },
      {
        "folder": "third_party/googletest",
        "git_rev": "52eb8108c5bdec04579160ae17225d66034bd723",
        "git_url": "https://github.com/google/googletest.git"
      },
      {
        "folder": "third_party/protoc-gen-validate",
        "git_rev": "32c2415389a3538082507ae537e7edd9578c64ed",
        "git_url": "https://github.com/envoyproxy/protoc-gen-validate.git"
      },
      {
        "folder": "third_party/xds",
        "git_rev": "3a472e524827f72d1ad621c4983dd5af54c46776",
        "git_url": "https://github.com/cncf/xds.git"
      }
    ]
  },
  "linux_aarch64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "ninja"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "c-ares",
        "cython",
        "grpcio",
        "libabseil",
        "libgrpc",
        "libprotobuf",
        "openssl",
        "pip",
        "pthread-stubs",
        "python",
        "re2",
        "setuptools",
        "zlib"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "grpcio",
        "libgrpc",
        "protobuf",
        "python",
        "setuptools"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "cmake",
        "cxx_compiler_stub",
        "grpcio-tools",
        "ninja",
        "pip",
        "pkg-config",
        "zlib"
      ]
    }
  },
  "linux_ppc64le_meta_yaml": {
    "about": {
      "description": "gRPC is a modern, open source, high-performance remote procedure call\n(RPC) framework that can run anywhere. gRPC enables client and server\napplications to communicate transparently, and simplifies the building\nof connected systems.\n\nThis package contains the gRPC C++ libraries and header files, as well\nas the code generation plugins.\n",
      "dev_url": "https://github.com/grpc/grpc",
      "doc_url": "https://grpc.io/docs/",
      "home": "https://grpc.io/",
      "license": "Apache-2.0",
      "license_family": "APACHE",
      "license_file": "LICENSE",
      "summary": "gRPC - A high-performance, open-source universal RPC framework"
    },
    "build": {
      "number": "1"
    },
    "extra": {
      "feedstock-name": "grpc-cpp",
      "recipe-maintainers": [
        "pitrou",
        "xhochy",
        "wesm",
        "h-vetinari",
        "mariusvniekerk",
        "jjerphan",
        "JohanMabille"
      ]
    },
    "outputs": [
      {
        "build": {
          "run_exports": [
            "libgrpc"
          ]
        },
        "name": "libgrpc",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cmake",
            "ninja"
          ],
          "host": [
            "libabseil",
            "c-ares",
            "libprotobuf",
            "re2",
            "openssl",
            "zlib"
          ],
          "run": [],
          "run_constrained": [
            "grpc-cpp =1.74.1"
          ]
        },
        "script": "build-cpp.sh",
        "test": {
          "commands": [
            "test -f $PREFIX/lib/libgpr.so",
            "test ! -f $PREFIX/lib/libgpr.a",
            "test -f $PREFIX/lib/libgrpc.so",
            "test ! -f $PREFIX/lib/libgrpc.a",
            "test -f $PREFIX/lib/libgrpc_unsecure.so",
            "test ! -f $PREFIX/lib/libgrpc_unsecure.a",
            "test -f $PREFIX/lib/libgrpc++.so",
            "test ! -f $PREFIX/lib/libgrpc++.a",
            "test -f $PREFIX/lib/libgrpc++_unsecure.so",
            "test ! -f $PREFIX/lib/libgrpc++_unsecure.a",
            "test -f $PREFIX/lib/libaddress_sorting.so",
            "test ! -f $PREFIX/lib/libaddress_sorting.a",
            "test -f $PREFIX/bin/grpc_cpp_plugin",
            "test -f $PREFIX/bin/grpc_csharp_plugin",
            "test -f $PREFIX/bin/grpc_node_plugin",
            "test -f $PREFIX/bin/grpc_objective_c_plugin",
            "test -f $PREFIX/bin/grpc_php_plugin",
            "test -f $PREFIX/bin/grpc_python_plugin",
            "test -f $PREFIX/bin/grpc_ruby_plugin",
            "pkg-config --print-errors --exact-version \"49.0.0\" gpr",
            "pkg-config --print-errors --exact-version \"49.0.0\" grpc",
            "pkg-config --print-errors --exact-version \"49.0.0\" grpc_unsecure",
            "pkg-config --print-errors --exact-version \"1.74.1\" grpc++",
            "pkg-config --print-errors --exact-version \"1.74.1\" grpc++_unsecure",
            "./test_grpc.sh",
            "cd cmake_test",
            "cmake -GNinja -DCMAKE_CXX_STANDARD=17 $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/",
            "hello.proto",
            "test_grpc.sh",
            "test_grpc.bat"
          ],
          "requires": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cmake",
            "ninja",
            "pkg-config",
            "zlib"
          ],
          "source_files": [
            "examples/cpp/helloworld/",
            "examples/cpp/cmake/",
            "examples/protos/helloworld.proto"
          ]
        }
      },
      {
        "name": "grpcio",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub"
          ],
          "host": [
            "python",
            "pip",
            "setuptools",
            "cython",
            "libgrpc",
            "pthread-stubs",
            "zlib"
          ],
          "run": [
            "python",
            "libgrpc"
          ]
        },
        "script": "build-grpcio.sh",
        "test": {
          "commands": [
            "python -m pip check",
            "python grpcio_distribtest.py",
            "cd examples/python/helloworld",
            "python -m grpc_tools.protoc -I../../protos --python_out=. --pyi_out=. --grpc_python_out=. ../../protos/helloworld.proto",
            "cp ../../../test_grpcio_helloworld.py .",
            "python test_grpcio_helloworld.py"
          ],
          "files": [
            "grpcio_distribtest.py",
            "test_grpcio_helloworld.py"
          ],
          "imports": [
            "grpc",
            "grpc._cython",
            "grpc._cython._cygrpc",
            "grpc.beta",
            "grpc.framework",
            "grpc.framework.common",
            "grpc.framework.foundation",
            "grpc.framework.interfaces",
            "grpc.framework.interfaces.base",
            "grpc.framework.interfaces.face"
          ],
          "requires": [
            "pip",
            "grpcio-tools"
          ],
          "source_files": [
            "examples/python/helloworld/",
            "examples/protos/helloworld.proto"
          ]
        }
      },
      {
        "build": {
          "script": [
            "cd tools/distrib/python/grpcio_tools",
            "export GRPC_PYTHON_BUILD_WITH_CYTHON=true",
            "python -m pip install . -vv"
          ]
        },
        "name": "grpcio-tools",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub"
          ],
          "host": [
            "grpcio 1.74.1 *_1",
            "python",
            "cython",
            "pip",
            "setuptools",
            "libabseil",
            "libprotobuf"
          ],
          "run": [
            "grpcio 1.74.1 *_1",
            "python",
            "protobuf",
            "setuptools"
          ]
        },
        "test": {
          "commands": [
            "pip check",
            "test \"$(python -m grpc_tools.protoc --version)\" == \"$(protoc --version)\""
          ],
          "imports": [
            "grpc_tools"
          ],
          "requires": [
            "pip"
          ]
        }
      }
    ],
    "package": {
      "name": "grpc-split",
      "version": "1.74.1"
    },
    "schema_version": 0,
    "source": [
      {
        "patches": [
          "patches/0001-windows-ssl-lib-names.patch",
          "patches/0002-fix-win-setup-cmds.patch",
          "patches/0003-Link-against-grpc-and-abseil.patch",
          "patches/0004-force-protoc-executable.patch",
          "patches/0005-mark-linkages-of-grpc-_unsecure-as-private.patch",
          "patches/0006-for-main-targets-set-_DLL_EXPORTS-when-building-and-.patch",
          "patches/0007-add-missing-linkages-for-gRPC_BUILD_TESTS-ON.patch",
          "patches/0008-add-enable_testing-so-tests-get-run.patch",
          "patches/0009-unvendor-upb-and-utf8_range-use-protobuf-s-version.patch",
          "patches/0010-reduce-buildtests_cxx-target-to-end2end-tests.patch",
          "patches/0011-build-grpcio-tools-from-source.patch",
          "patches/0013-reduce-grpc-symbol-explosion-with-autogenerated-expo.patch",
          "patches/0014-update-GRPC_DLL-instances-where-necessary.patch"
        ],
        "sha256": "7bf97c11cf3808d650a3a025bbf9c5f922c844a590826285067765dfd055d228",
        "url": "https://github.com/grpc/grpc/archive/v1.74.1.tar.gz"
      },
      {
        "folder": "third_party/benchmark",
        "git_rev": "12235e24652fc7f809373e7c11a5f73c5763fc4c",
        "git_url": "https://github.com/google/benchmark.git"
      },
      {
        "folder": "third_party/envoy-api",
        "git_rev": "4de3c74cf21a9958c1cf26d8993c55c6e0d28b49",
        "git_url": "https://github.com/envoyproxy/data-plane-api.git"
      },
      {
        "folder": "third_party/googleapis",
        "git_rev": "fe8ba054ad4f7eca946c2d14a63c3f07c0b586a0",
        "git_url": "https://github.com/googleapis/googleapis.git"
      },
      {
        "folder": "third_party/googletest",
        "git_rev": "52eb8108c5bdec04579160ae17225d66034bd723",
        "git_url": "https://github.com/google/googletest.git"
      },
      {
        "folder": "third_party/protoc-gen-validate",
        "git_rev": "32c2415389a3538082507ae537e7edd9578c64ed",
        "git_url": "https://github.com/envoyproxy/protoc-gen-validate.git"
      },
      {
        "folder": "third_party/xds",
        "git_rev": "3a472e524827f72d1ad621c4983dd5af54c46776",
        "git_url": "https://github.com/cncf/xds.git"
      }
    ]
  },
  "linux_ppc64le_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "ninja"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "c-ares",
        "cython",
        "grpcio",
        "libabseil",
        "libgrpc",
        "libprotobuf",
        "openssl",
        "pip",
        "pthread-stubs",
        "python",
        "re2",
        "setuptools",
        "zlib"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "grpcio",
        "libgrpc",
        "protobuf",
        "python",
        "setuptools"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "cmake",
        "cxx_compiler_stub",
        "grpcio-tools",
        "ninja",
        "pip",
        "pkg-config",
        "zlib"
      ]
    }
  },
  "meta_yaml": {
    "about": {
      "description": "gRPC is a modern, open source, high-performance remote procedure call\n(RPC) framework that can run anywhere. gRPC enables client and server\napplications to communicate transparently, and simplifies the building\nof connected systems.\n\nThis package contains the gRPC C++ libraries and header files, as well\nas the code generation plugins.\n",
      "dev_url": "https://github.com/grpc/grpc",
      "doc_url": "https://grpc.io/docs/",
      "home": "https://grpc.io/",
      "license": "Apache-2.0",
      "license_family": "APACHE",
      "license_file": "LICENSE",
      "summary": "gRPC - A high-performance, open-source universal RPC framework"
    },
    "build": {
      "number": "1"
    },
    "extra": {
      "feedstock-name": "grpc-cpp",
      "recipe-maintainers": [
        "pitrou",
        "xhochy",
        "wesm",
        "h-vetinari",
        "mariusvniekerk",
        "jjerphan",
        "JohanMabille"
      ]
    },
    "outputs": [
      {
        "build": {
          "run_exports": [
            "libgrpc"
          ]
        },
        "name": "libgrpc",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cmake",
            "ninja"
          ],
          "host": [
            "libabseil",
            "c-ares",
            "libprotobuf",
            "re2",
            "openssl",
            "zlib"
          ],
          "run": [],
          "run_constrained": [
            "grpc-cpp =1.74.1"
          ]
        },
        "script": "build-cpp.sh",
        "test": {
          "commands": [
            "test -f $PREFIX/lib/libgpr.so",
            "test ! -f $PREFIX/lib/libgpr.a",
            "test -f $PREFIX/lib/libgrpc.so",
            "test ! -f $PREFIX/lib/libgrpc.a",
            "test -f $PREFIX/lib/libgrpc_unsecure.so",
            "test ! -f $PREFIX/lib/libgrpc_unsecure.a",
            "test -f $PREFIX/lib/libgrpc++.so",
            "test ! -f $PREFIX/lib/libgrpc++.a",
            "test -f $PREFIX/lib/libgrpc++_unsecure.so",
            "test ! -f $PREFIX/lib/libgrpc++_unsecure.a",
            "test -f $PREFIX/lib/libaddress_sorting.so",
            "test ! -f $PREFIX/lib/libaddress_sorting.a",
            "test -f $PREFIX/bin/grpc_cpp_plugin",
            "test -f $PREFIX/bin/grpc_csharp_plugin",
            "test -f $PREFIX/bin/grpc_node_plugin",
            "test -f $PREFIX/bin/grpc_objective_c_plugin",
            "test -f $PREFIX/bin/grpc_php_plugin",
            "test -f $PREFIX/bin/grpc_python_plugin",
            "test -f $PREFIX/bin/grpc_ruby_plugin",
            "pkg-config --print-errors --exact-version \"49.0.0\" gpr",
            "pkg-config --print-errors --exact-version \"49.0.0\" grpc",
            "pkg-config --print-errors --exact-version \"49.0.0\" grpc_unsecure",
            "pkg-config --print-errors --exact-version \"1.74.1\" grpc++",
            "pkg-config --print-errors --exact-version \"1.74.1\" grpc++_unsecure",
            "./test_grpc.sh",
            "cd cmake_test",
            "cmake -GNinja -DCMAKE_CXX_STANDARD=17 $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/",
            "hello.proto",
            "test_grpc.sh",
            "test_grpc.bat"
          ],
          "requires": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cmake",
            "ninja",
            "pkg-config",
            "zlib"
          ],
          "source_files": [
            "examples/cpp/helloworld/",
            "examples/cpp/cmake/",
            "examples/protos/helloworld.proto"
          ]
        }
      },
      {
        "name": "grpcio",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub"
          ],
          "host": [
            "python",
            "pip",
            "setuptools",
            "cython",
            "libgrpc",
            "pthread-stubs",
            "zlib"
          ],
          "run": [
            "python",
            "libgrpc"
          ]
        },
        "script": "build-grpcio.sh",
        "test": {
          "commands": [
            "python -m pip check",
            "python grpcio_distribtest.py",
            "cd examples/python/helloworld",
            "python -m grpc_tools.protoc -I../../protos --python_out=. --pyi_out=. --grpc_python_out=. ../../protos/helloworld.proto",
            "cp ../../../test_grpcio_helloworld.py .",
            "python test_grpcio_helloworld.py"
          ],
          "files": [
            "grpcio_distribtest.py",
            "test_grpcio_helloworld.py"
          ],
          "imports": [
            "grpc",
            "grpc._cython",
            "grpc._cython._cygrpc",
            "grpc.beta",
            "grpc.framework",
            "grpc.framework.common",
            "grpc.framework.foundation",
            "grpc.framework.interfaces",
            "grpc.framework.interfaces.base",
            "grpc.framework.interfaces.face"
          ],
          "requires": [
            "pip",
            "grpcio-tools"
          ],
          "source_files": [
            "examples/python/helloworld/",
            "examples/protos/helloworld.proto"
          ]
        }
      },
      {
        "build": {
          "script": [
            "cd tools/distrib/python/grpcio_tools",
            "export GRPC_PYTHON_BUILD_WITH_CYTHON=true",
            "python -m pip install . -vv"
          ]
        },
        "name": "grpcio-tools",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub"
          ],
          "host": [
            "grpcio 1.74.1 *_1",
            "python",
            "cython",
            "pip",
            "setuptools",
            "libabseil",
            "libprotobuf"
          ],
          "run": [
            "grpcio 1.74.1 *_1",
            "python",
            "protobuf",
            "setuptools"
          ]
        },
        "test": {
          "commands": [
            "pip check",
            "test \"$(python -m grpc_tools.protoc --version)\" == \"$(protoc --version)\""
          ],
          "imports": [
            "grpc_tools"
          ],
          "requires": [
            "pip"
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "libgrpc"
          ]
        },
        "name": "libgrpc",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cmake",
            "ninja"
          ],
          "host": [
            "libabseil",
            "c-ares",
            "libprotobuf",
            "re2",
            "openssl",
            "zlib"
          ],
          "run": [],
          "run_constrained": [
            "grpc-cpp =1.74.1"
          ]
        },
        "script": "build-cpp.sh",
        "test": {
          "commands": [
            "test -f $PREFIX/lib/libgpr.so",
            "test ! -f $PREFIX/lib/libgpr.a",
            "test -f $PREFIX/lib/libgrpc.so",
            "test ! -f $PREFIX/lib/libgrpc.a",
            "test -f $PREFIX/lib/libgrpc_unsecure.so",
            "test ! -f $PREFIX/lib/libgrpc_unsecure.a",
            "test -f $PREFIX/lib/libgrpc++.so",
            "test ! -f $PREFIX/lib/libgrpc++.a",
            "test -f $PREFIX/lib/libgrpc++_unsecure.so",
            "test ! -f $PREFIX/lib/libgrpc++_unsecure.a",
            "test -f $PREFIX/lib/libaddress_sorting.so",
            "test ! -f $PREFIX/lib/libaddress_sorting.a",
            "test -f $PREFIX/bin/grpc_cpp_plugin",
            "test -f $PREFIX/bin/grpc_csharp_plugin",
            "test -f $PREFIX/bin/grpc_node_plugin",
            "test -f $PREFIX/bin/grpc_objective_c_plugin",
            "test -f $PREFIX/bin/grpc_php_plugin",
            "test -f $PREFIX/bin/grpc_python_plugin",
            "test -f $PREFIX/bin/grpc_ruby_plugin",
            "pkg-config --print-errors --exact-version \"49.0.0\" gpr",
            "pkg-config --print-errors --exact-version \"49.0.0\" grpc",
            "pkg-config --print-errors --exact-version \"49.0.0\" grpc_unsecure",
            "pkg-config --print-errors --exact-version \"1.74.1\" grpc++",
            "pkg-config --print-errors --exact-version \"1.74.1\" grpc++_unsecure",
            "./test_grpc.sh",
            "cd cmake_test",
            "cmake -GNinja -DCMAKE_CXX_STANDARD=17 $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/",
            "hello.proto",
            "test_grpc.sh",
            "test_grpc.bat"
          ],
          "requires": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cmake",
            "ninja",
            "pkg-config",
            "zlib"
          ],
          "source_files": [
            "examples/cpp/helloworld/",
            "examples/cpp/cmake/",
            "examples/protos/helloworld.proto"
          ]
        }
      },
      {
        "name": "grpcio",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub"
          ],
          "host": [
            "python",
            "pip",
            "setuptools",
            "cython",
            "libgrpc",
            "pthread-stubs",
            "zlib"
          ],
          "run": [
            "python",
            "libgrpc"
          ]
        },
        "script": "build-grpcio.sh",
        "test": {
          "commands": [
            "python -m pip check",
            "python grpcio_distribtest.py",
            "cd examples/python/helloworld",
            "python -m grpc_tools.protoc -I../../protos --python_out=. --pyi_out=. --grpc_python_out=. ../../protos/helloworld.proto",
            "cp ../../../test_grpcio_helloworld.py .",
            "python test_grpcio_helloworld.py"
          ],
          "files": [
            "grpcio_distribtest.py",
            "test_grpcio_helloworld.py"
          ],
          "imports": [
            "grpc",
            "grpc._cython",
            "grpc._cython._cygrpc",
            "grpc.beta",
            "grpc.framework",
            "grpc.framework.common",
            "grpc.framework.foundation",
            "grpc.framework.interfaces",
            "grpc.framework.interfaces.base",
            "grpc.framework.interfaces.face"
          ],
          "requires": [
            "pip",
            "grpcio-tools"
          ],
          "source_files": [
            "examples/python/helloworld/",
            "examples/protos/helloworld.proto"
          ]
        }
      },
      {
        "build": {
          "script": [
            "cd tools/distrib/python/grpcio_tools",
            "export GRPC_PYTHON_BUILD_WITH_CYTHON=true",
            "python -m pip install . -vv"
          ]
        },
        "name": "grpcio-tools",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub"
          ],
          "host": [
            "grpcio 1.74.1 *_1",
            "python",
            "cython",
            "pip",
            "setuptools",
            "libabseil",
            "libprotobuf"
          ],
          "run": [
            "grpcio 1.74.1 *_1",
            "python",
            "protobuf",
            "setuptools"
          ]
        },
        "test": {
          "commands": [
            "pip check",
            "test \"$(python -m grpc_tools.protoc --version)\" == \"$(protoc --version)\""
          ],
          "imports": [
            "grpc_tools"
          ],
          "requires": [
            "pip"
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "libgrpc"
          ]
        },
        "name": "libgrpc",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cmake",
            "ninja"
          ],
          "host": [
            "libabseil",
            "c-ares",
            "libprotobuf",
            "re2",
            "openssl",
            "zlib"
          ],
          "run": [],
          "run_constrained": [
            "grpc-cpp =1.74.1"
          ]
        },
        "script": "build-cpp.sh",
        "test": {
          "commands": [
            "test -f $PREFIX/lib/libgpr.so",
            "test ! -f $PREFIX/lib/libgpr.a",
            "test -f $PREFIX/lib/libgrpc.so",
            "test ! -f $PREFIX/lib/libgrpc.a",
            "test -f $PREFIX/lib/libgrpc_unsecure.so",
            "test ! -f $PREFIX/lib/libgrpc_unsecure.a",
            "test -f $PREFIX/lib/libgrpc++.so",
            "test ! -f $PREFIX/lib/libgrpc++.a",
            "test -f $PREFIX/lib/libgrpc++_unsecure.so",
            "test ! -f $PREFIX/lib/libgrpc++_unsecure.a",
            "test -f $PREFIX/lib/libaddress_sorting.so",
            "test ! -f $PREFIX/lib/libaddress_sorting.a",
            "test -f $PREFIX/bin/grpc_cpp_plugin",
            "test -f $PREFIX/bin/grpc_csharp_plugin",
            "test -f $PREFIX/bin/grpc_node_plugin",
            "test -f $PREFIX/bin/grpc_objective_c_plugin",
            "test -f $PREFIX/bin/grpc_php_plugin",
            "test -f $PREFIX/bin/grpc_python_plugin",
            "test -f $PREFIX/bin/grpc_ruby_plugin",
            "pkg-config --print-errors --exact-version \"49.0.0\" gpr",
            "pkg-config --print-errors --exact-version \"49.0.0\" grpc",
            "pkg-config --print-errors --exact-version \"49.0.0\" grpc_unsecure",
            "pkg-config --print-errors --exact-version \"1.74.1\" grpc++",
            "pkg-config --print-errors --exact-version \"1.74.1\" grpc++_unsecure",
            "./test_grpc.sh",
            "cd cmake_test",
            "cmake -GNinja -DCMAKE_CXX_STANDARD=17 $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/",
            "hello.proto",
            "test_grpc.sh",
            "test_grpc.bat"
          ],
          "requires": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cmake",
            "ninja",
            "pkg-config",
            "zlib"
          ],
          "source_files": [
            "examples/cpp/helloworld/",
            "examples/cpp/cmake/",
            "examples/protos/helloworld.proto"
          ]
        }
      },
      {
        "name": "grpcio",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub"
          ],
          "host": [
            "python",
            "pip",
            "setuptools",
            "cython",
            "libgrpc",
            "pthread-stubs",
            "zlib"
          ],
          "run": [
            "python",
            "libgrpc"
          ]
        },
        "script": "build-grpcio.sh",
        "test": {
          "commands": [
            "python -m pip check",
            "python grpcio_distribtest.py",
            "cd examples/python/helloworld",
            "python -m grpc_tools.protoc -I../../protos --python_out=. --pyi_out=. --grpc_python_out=. ../../protos/helloworld.proto",
            "cp ../../../test_grpcio_helloworld.py .",
            "python test_grpcio_helloworld.py"
          ],
          "files": [
            "grpcio_distribtest.py",
            "test_grpcio_helloworld.py"
          ],
          "imports": [
            "grpc",
            "grpc._cython",
            "grpc._cython._cygrpc",
            "grpc.beta",
            "grpc.framework",
            "grpc.framework.common",
            "grpc.framework.foundation",
            "grpc.framework.interfaces",
            "grpc.framework.interfaces.base",
            "grpc.framework.interfaces.face"
          ],
          "requires": [
            "pip",
            "grpcio-tools"
          ],
          "source_files": [
            "examples/python/helloworld/",
            "examples/protos/helloworld.proto"
          ]
        }
      },
      {
        "build": {
          "script": [
            "cd tools/distrib/python/grpcio_tools",
            "export GRPC_PYTHON_BUILD_WITH_CYTHON=true",
            "python -m pip install . -vv"
          ]
        },
        "name": "grpcio-tools",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub"
          ],
          "host": [
            "grpcio 1.74.1 *_1",
            "python",
            "cython",
            "pip",
            "setuptools",
            "libabseil",
            "libprotobuf"
          ],
          "run": [
            "grpcio 1.74.1 *_1",
            "python",
            "protobuf",
            "setuptools"
          ]
        },
        "test": {
          "commands": [
            "pip check",
            "test \"$(python -m grpc_tools.protoc --version)\" == \"$(protoc --version)\""
          ],
          "imports": [
            "grpc_tools"
          ],
          "requires": [
            "pip"
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "libgrpc"
          ]
        },
        "name": "libgrpc",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cmake",
            "ninja"
          ],
          "host": [
            "libabseil",
            "c-ares",
            "libprotobuf",
            "re2",
            "openssl",
            "zlib"
          ],
          "run": [],
          "run_constrained": [
            "grpc-cpp =1.74.1"
          ]
        },
        "script": "build-cpp.sh",
        "test": {
          "commands": [
            "test -f $PREFIX/lib/libgpr.dylib",
            "test ! -f $PREFIX/lib/libgpr.a",
            "test -f $PREFIX/lib/libgrpc.dylib",
            "test ! -f $PREFIX/lib/libgrpc.a",
            "test -f $PREFIX/lib/libgrpc_unsecure.dylib",
            "test ! -f $PREFIX/lib/libgrpc_unsecure.a",
            "test -f $PREFIX/lib/libgrpc++.dylib",
            "test ! -f $PREFIX/lib/libgrpc++.a",
            "test -f $PREFIX/lib/libgrpc++_unsecure.dylib",
            "test ! -f $PREFIX/lib/libgrpc++_unsecure.a",
            "test -f $PREFIX/lib/libaddress_sorting.dylib",
            "test ! -f $PREFIX/lib/libaddress_sorting.a",
            "test -f $PREFIX/bin/grpc_cpp_plugin",
            "test -f $PREFIX/bin/grpc_csharp_plugin",
            "test -f $PREFIX/bin/grpc_node_plugin",
            "test -f $PREFIX/bin/grpc_objective_c_plugin",
            "test -f $PREFIX/bin/grpc_php_plugin",
            "test -f $PREFIX/bin/grpc_python_plugin",
            "test -f $PREFIX/bin/grpc_ruby_plugin",
            "pkg-config --print-errors --exact-version \"49.0.0\" gpr",
            "pkg-config --print-errors --exact-version \"49.0.0\" grpc",
            "pkg-config --print-errors --exact-version \"49.0.0\" grpc_unsecure",
            "pkg-config --print-errors --exact-version \"1.74.1\" grpc++",
            "pkg-config --print-errors --exact-version \"1.74.1\" grpc++_unsecure",
            "./test_grpc.sh",
            "cd cmake_test",
            "cmake -GNinja -DCMAKE_CXX_STANDARD=17 $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/",
            "hello.proto",
            "test_grpc.sh",
            "test_grpc.bat"
          ],
          "requires": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cmake",
            "ninja",
            "pkg-config",
            "zlib"
          ],
          "source_files": [
            "examples/cpp/helloworld/",
            "examples/cpp/cmake/",
            "examples/protos/helloworld.proto"
          ]
        }
      },
      {
        "name": "grpcio",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub"
          ],
          "host": [
            "python",
            "pip",
            "setuptools",
            "cython",
            "libgrpc",
            "zlib"
          ],
          "run": [
            "python",
            "libgrpc"
          ]
        },
        "script": "build-grpcio.sh",
        "test": {
          "commands": [
            "python -m pip check",
            "python grpcio_distribtest.py",
            "cd examples/python/helloworld",
            "python -m grpc_tools.protoc -I../../protos --python_out=. --pyi_out=. --grpc_python_out=. ../../protos/helloworld.proto",
            "cp ../../../test_grpcio_helloworld.py .",
            "python test_grpcio_helloworld.py"
          ],
          "files": [
            "grpcio_distribtest.py",
            "test_grpcio_helloworld.py"
          ],
          "imports": [
            "grpc",
            "grpc._cython",
            "grpc._cython._cygrpc",
            "grpc.beta",
            "grpc.framework",
            "grpc.framework.common",
            "grpc.framework.foundation",
            "grpc.framework.interfaces",
            "grpc.framework.interfaces.base",
            "grpc.framework.interfaces.face"
          ],
          "requires": [
            "pip",
            "grpcio-tools"
          ],
          "source_files": [
            "examples/python/helloworld/",
            "examples/protos/helloworld.proto"
          ]
        }
      },
      {
        "build": {
          "script": [
            "cd tools/distrib/python/grpcio_tools",
            "export GRPC_PYTHON_BUILD_WITH_CYTHON=true",
            "python -m pip install . -vv"
          ]
        },
        "name": "grpcio-tools",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub"
          ],
          "host": [
            "grpcio 1.74.1 *_1",
            "python",
            "cython",
            "pip",
            "setuptools",
            "libabseil",
            "libprotobuf"
          ],
          "run": [
            "grpcio 1.74.1 *_1",
            "python",
            "protobuf",
            "setuptools"
          ]
        },
        "test": {
          "commands": [
            "pip check",
            "test \"$(python -m grpc_tools.protoc --version)\" == \"$(protoc --version)\""
          ],
          "imports": [
            "grpc_tools"
          ],
          "requires": [
            "pip"
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "libgrpc"
          ]
        },
        "name": "libgrpc",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cmake",
            "ninja"
          ],
          "host": [
            "libabseil",
            "c-ares",
            "libprotobuf",
            "re2",
            "openssl",
            "zlib"
          ],
          "run": [],
          "run_constrained": [
            "grpc-cpp =1.74.1"
          ]
        },
        "script": "build-cpp.sh",
        "test": {
          "commands": [
            "test -f $PREFIX/lib/libgpr.dylib",
            "test ! -f $PREFIX/lib/libgpr.a",
            "test -f $PREFIX/lib/libgrpc.dylib",
            "test ! -f $PREFIX/lib/libgrpc.a",
            "test -f $PREFIX/lib/libgrpc_unsecure.dylib",
            "test ! -f $PREFIX/lib/libgrpc_unsecure.a",
            "test -f $PREFIX/lib/libgrpc++.dylib",
            "test ! -f $PREFIX/lib/libgrpc++.a",
            "test -f $PREFIX/lib/libgrpc++_unsecure.dylib",
            "test ! -f $PREFIX/lib/libgrpc++_unsecure.a",
            "test -f $PREFIX/lib/libaddress_sorting.dylib",
            "test ! -f $PREFIX/lib/libaddress_sorting.a",
            "test -f $PREFIX/bin/grpc_cpp_plugin",
            "test -f $PREFIX/bin/grpc_csharp_plugin",
            "test -f $PREFIX/bin/grpc_node_plugin",
            "test -f $PREFIX/bin/grpc_objective_c_plugin",
            "test -f $PREFIX/bin/grpc_php_plugin",
            "test -f $PREFIX/bin/grpc_python_plugin",
            "test -f $PREFIX/bin/grpc_ruby_plugin",
            "pkg-config --print-errors --exact-version \"49.0.0\" gpr",
            "pkg-config --print-errors --exact-version \"49.0.0\" grpc",
            "pkg-config --print-errors --exact-version \"49.0.0\" grpc_unsecure",
            "pkg-config --print-errors --exact-version \"1.74.1\" grpc++",
            "pkg-config --print-errors --exact-version \"1.74.1\" grpc++_unsecure",
            "./test_grpc.sh",
            "cd cmake_test",
            "cmake -GNinja -DCMAKE_CXX_STANDARD=17 $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/",
            "hello.proto",
            "test_grpc.sh",
            "test_grpc.bat"
          ],
          "requires": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cmake",
            "ninja",
            "pkg-config",
            "zlib"
          ],
          "source_files": [
            "examples/cpp/helloworld/",
            "examples/cpp/cmake/",
            "examples/protos/helloworld.proto"
          ]
        }
      },
      {
        "name": "grpcio",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub"
          ],
          "host": [
            "python",
            "pip",
            "setuptools",
            "cython",
            "libgrpc",
            "zlib"
          ],
          "run": [
            "python",
            "libgrpc"
          ]
        },
        "script": "build-grpcio.sh",
        "test": {
          "commands": [
            "python -m pip check",
            "python grpcio_distribtest.py",
            "cd examples/python/helloworld",
            "python -m grpc_tools.protoc -I../../protos --python_out=. --pyi_out=. --grpc_python_out=. ../../protos/helloworld.proto",
            "cp ../../../test_grpcio_helloworld.py .",
            "python test_grpcio_helloworld.py"
          ],
          "files": [
            "grpcio_distribtest.py",
            "test_grpcio_helloworld.py"
          ],
          "imports": [
            "grpc",
            "grpc._cython",
            "grpc._cython._cygrpc",
            "grpc.beta",
            "grpc.framework",
            "grpc.framework.common",
            "grpc.framework.foundation",
            "grpc.framework.interfaces",
            "grpc.framework.interfaces.base",
            "grpc.framework.interfaces.face"
          ],
          "requires": [
            "pip",
            "grpcio-tools"
          ],
          "source_files": [
            "examples/python/helloworld/",
            "examples/protos/helloworld.proto"
          ]
        }
      },
      {
        "build": {
          "script": [
            "cd tools/distrib/python/grpcio_tools",
            "export GRPC_PYTHON_BUILD_WITH_CYTHON=true",
            "python -m pip install . -vv"
          ]
        },
        "name": "grpcio-tools",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub"
          ],
          "host": [
            "grpcio 1.74.1 *_1",
            "python",
            "cython",
            "pip",
            "setuptools",
            "libabseil",
            "libprotobuf"
          ],
          "run": [
            "grpcio 1.74.1 *_1",
            "python",
            "protobuf",
            "setuptools"
          ]
        },
        "test": {
          "commands": [
            "pip check",
            "test \"$(python -m grpc_tools.protoc --version)\" == \"$(protoc --version)\""
          ],
          "imports": [
            "grpc_tools"
          ],
          "requires": [
            "pip"
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "libgrpc"
          ]
        },
        "name": "libgrpc",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cmake",
            "ninja",
            "python *",
            "py-lief"
          ],
          "host": [
            "libabseil",
            "c-ares",
            "libprotobuf",
            "re2",
            "openssl",
            "zlib"
          ],
          "run": [
            "ucrt"
          ],
          "run_constrained": [
            "grpc-cpp =1.74.1"
          ]
        },
        "script": "build-cpp.bat",
        "test": {
          "commands": [
            "if not exist %LIBRARY_BIN%\\gpr.dll exit 1",
            "if not exist %LIBRARY_LIB%\\gpr.lib exit 1",
            "if not exist %LIBRARY_BIN%\\grpc.dll exit 1",
            "if not exist %LIBRARY_LIB%\\grpc.lib exit 1",
            "if not exist %LIBRARY_BIN%\\grpc_unsecure.dll exit 1",
            "if not exist %LIBRARY_LIB%\\grpc_unsecure.lib exit 1",
            "if not exist %LIBRARY_BIN%\\grpc++.dll exit 1",
            "if not exist %LIBRARY_LIB%\\grpc++.lib exit 1",
            "if not exist %LIBRARY_BIN%\\grpc++_unsecure.dll exit 1",
            "if not exist %LIBRARY_LIB%\\grpc++_unsecure.lib exit 1",
            "if not exist %LIBRARY_BIN%\\address_sorting.dll exit 1",
            "if not exist %LIBRARY_LIB%\\address_sorting.lib exit 1",
            "if not exist %LIBRARY_BIN%\\grpc_cpp_plugin.exe exit 1",
            "if not exist %LIBRARY_BIN%\\grpc_csharp_plugin.exe exit 1",
            "if not exist %LIBRARY_BIN%\\grpc_node_plugin.exe exit 1",
            "if not exist %LIBRARY_BIN%\\grpc_objective_c_plugin.exe exit 1",
            "if not exist %LIBRARY_BIN%\\grpc_php_plugin.exe exit 1",
            "if not exist %LIBRARY_BIN%\\grpc_python_plugin.exe exit 1",
            "if not exist %LIBRARY_BIN%\\grpc_ruby_plugin.exe exit 1",
            "pkg-config --print-errors --exact-version \"49.0.0\" gpr",
            "pkg-config --print-errors --exact-version \"49.0.0\" grpc",
            "pkg-config --print-errors --exact-version \"49.0.0\" grpc_unsecure",
            "pkg-config --print-errors --exact-version \"1.74.1\" grpc++",
            "pkg-config --print-errors --exact-version \"1.74.1\" grpc++_unsecure",
            "./test_grpc.bat",
            "cd cmake_test",
            "cmake -GNinja -DCMAKE_CXX_STANDARD=17 %CMAKE_ARGS% .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/",
            "hello.proto",
            "test_grpc.sh",
            "test_grpc.bat"
          ],
          "requires": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cmake",
            "ninja",
            "pkg-config",
            "zlib"
          ],
          "source_files": [
            "examples/cpp/helloworld/",
            "examples/cpp/cmake/",
            "examples/protos/helloworld.proto"
          ]
        }
      },
      {
        "name": "grpcio",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub"
          ],
          "host": [
            "python",
            "pip",
            "setuptools",
            "cython",
            "libgrpc",
            "zlib"
          ],
          "run": [
            "python",
            "libgrpc"
          ]
        },
        "script": "build-grpcio.bat",
        "test": {
          "commands": [
            "python -m pip check",
            "python grpcio_distribtest.py",
            "cd examples/python/helloworld",
            "python -m grpc_tools.protoc -I../../protos --python_out=. --pyi_out=. --grpc_python_out=. ../../protos/helloworld.proto",
            "cp ../../../test_grpcio_helloworld.py .",
            "python test_grpcio_helloworld.py"
          ],
          "files": [
            "grpcio_distribtest.py",
            "test_grpcio_helloworld.py"
          ],
          "imports": [
            "grpc",
            "grpc._cython",
            "grpc._cython._cygrpc",
            "grpc.beta",
            "grpc.framework",
            "grpc.framework.common",
            "grpc.framework.foundation",
            "grpc.framework.interfaces",
            "grpc.framework.interfaces.base",
            "grpc.framework.interfaces.face"
          ],
          "requires": [
            "pip",
            "grpcio-tools"
          ],
          "source_files": [
            "examples/python/helloworld/",
            "examples/protos/helloworld.proto"
          ]
        }
      },
      {
        "build": {
          "script": [
            "cd tools/distrib/python/grpcio_tools",
            "set GRPC_PYTHON_BUILD_WITH_CYTHON=true",
            "python -m pip install . -vv"
          ]
        },
        "name": "grpcio-tools",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub"
          ],
          "host": [
            "grpcio 1.74.1 *_1",
            "python",
            "cython",
            "pip",
            "setuptools",
            "libabseil",
            "libprotobuf"
          ],
          "run": [
            "grpcio 1.74.1 *_1",
            "python",
            "protobuf",
            "setuptools"
          ]
        },
        "test": {
          "commands": [
            "pip check"
          ],
          "imports": [
            "grpc_tools"
          ],
          "requires": [
            "pip"
          ]
        }
      }
    ],
    "package": {
      "name": "grpc-split",
      "version": "1.74.1"
    },
    "schema_version": 0,
    "source": [
      {
        "patches": [
          "patches/0001-windows-ssl-lib-names.patch",
          "patches/0002-fix-win-setup-cmds.patch",
          "patches/0003-Link-against-grpc-and-abseil.patch",
          "patches/0004-force-protoc-executable.patch",
          "patches/0005-mark-linkages-of-grpc-_unsecure-as-private.patch",
          "patches/0006-for-main-targets-set-_DLL_EXPORTS-when-building-and-.patch",
          "patches/0007-add-missing-linkages-for-gRPC_BUILD_TESTS-ON.patch",
          "patches/0008-add-enable_testing-so-tests-get-run.patch",
          "patches/0009-unvendor-upb-and-utf8_range-use-protobuf-s-version.patch",
          "patches/0010-reduce-buildtests_cxx-target-to-end2end-tests.patch",
          "patches/0011-build-grpcio-tools-from-source.patch",
          "patches/0013-reduce-grpc-symbol-explosion-with-autogenerated-expo.patch",
          "patches/0014-update-GRPC_DLL-instances-where-necessary.patch"
        ],
        "sha256": "7bf97c11cf3808d650a3a025bbf9c5f922c844a590826285067765dfd055d228",
        "url": "https://github.com/grpc/grpc/archive/v1.74.1.tar.gz"
      },
      {
        "folder": "third_party/benchmark",
        "git_rev": "12235e24652fc7f809373e7c11a5f73c5763fc4c",
        "git_url": "https://github.com/google/benchmark.git"
      },
      {
        "folder": "third_party/envoy-api",
        "git_rev": "4de3c74cf21a9958c1cf26d8993c55c6e0d28b49",
        "git_url": "https://github.com/envoyproxy/data-plane-api.git"
      },
      {
        "folder": "third_party/googleapis",
        "git_rev": "fe8ba054ad4f7eca946c2d14a63c3f07c0b586a0",
        "git_url": "https://github.com/googleapis/googleapis.git"
      },
      {
        "folder": "third_party/googletest",
        "git_rev": "52eb8108c5bdec04579160ae17225d66034bd723",
        "git_url": "https://github.com/google/googletest.git"
      },
      {
        "folder": "third_party/protoc-gen-validate",
        "git_rev": "32c2415389a3538082507ae537e7edd9578c64ed",
        "git_url": "https://github.com/envoyproxy/protoc-gen-validate.git"
      },
      {
        "folder": "third_party/xds",
        "git_rev": "3a472e524827f72d1ad621c4983dd5af54c46776",
        "git_url": "https://github.com/cncf/xds.git"
      },
      {
        "patches": [
          "patches/0001-windows-ssl-lib-names.patch",
          "patches/0002-fix-win-setup-cmds.patch",
          "patches/0003-Link-against-grpc-and-abseil.patch",
          "patches/0004-force-protoc-executable.patch",
          "patches/0005-mark-linkages-of-grpc-_unsecure-as-private.patch",
          "patches/0006-for-main-targets-set-_DLL_EXPORTS-when-building-and-.patch",
          "patches/0007-add-missing-linkages-for-gRPC_BUILD_TESTS-ON.patch",
          "patches/0008-add-enable_testing-so-tests-get-run.patch",
          "patches/0009-unvendor-upb-and-utf8_range-use-protobuf-s-version.patch",
          "patches/0010-reduce-buildtests_cxx-target-to-end2end-tests.patch",
          "patches/0011-build-grpcio-tools-from-source.patch",
          "patches/0013-reduce-grpc-symbol-explosion-with-autogenerated-expo.patch",
          "patches/0014-update-GRPC_DLL-instances-where-necessary.patch"
        ],
        "sha256": "7bf97c11cf3808d650a3a025bbf9c5f922c844a590826285067765dfd055d228",
        "url": "https://github.com/grpc/grpc/archive/v1.74.1.tar.gz"
      },
      {
        "folder": "third_party/benchmark",
        "git_rev": "12235e24652fc7f809373e7c11a5f73c5763fc4c",
        "git_url": "https://github.com/google/benchmark.git"
      },
      {
        "folder": "third_party/envoy-api",
        "git_rev": "4de3c74cf21a9958c1cf26d8993c55c6e0d28b49",
        "git_url": "https://github.com/envoyproxy/data-plane-api.git"
      },
      {
        "folder": "third_party/googleapis",
        "git_rev": "fe8ba054ad4f7eca946c2d14a63c3f07c0b586a0",
        "git_url": "https://github.com/googleapis/googleapis.git"
      },
      {
        "folder": "third_party/googletest",
        "git_rev": "52eb8108c5bdec04579160ae17225d66034bd723",
        "git_url": "https://github.com/google/googletest.git"
      },
      {
        "folder": "third_party/protoc-gen-validate",
        "git_rev": "32c2415389a3538082507ae537e7edd9578c64ed",
        "git_url": "https://github.com/envoyproxy/protoc-gen-validate.git"
      },
      {
        "folder": "third_party/xds",
        "git_rev": "3a472e524827f72d1ad621c4983dd5af54c46776",
        "git_url": "https://github.com/cncf/xds.git"
      },
      {
        "patches": [
          "patches/0001-windows-ssl-lib-names.patch",
          "patches/0002-fix-win-setup-cmds.patch",
          "patches/0003-Link-against-grpc-and-abseil.patch",
          "patches/0004-force-protoc-executable.patch",
          "patches/0005-mark-linkages-of-grpc-_unsecure-as-private.patch",
          "patches/0006-for-main-targets-set-_DLL_EXPORTS-when-building-and-.patch",
          "patches/0007-add-missing-linkages-for-gRPC_BUILD_TESTS-ON.patch",
          "patches/0008-add-enable_testing-so-tests-get-run.patch",
          "patches/0009-unvendor-upb-and-utf8_range-use-protobuf-s-version.patch",
          "patches/0010-reduce-buildtests_cxx-target-to-end2end-tests.patch",
          "patches/0011-build-grpcio-tools-from-source.patch",
          "patches/0013-reduce-grpc-symbol-explosion-with-autogenerated-expo.patch",
          "patches/0014-update-GRPC_DLL-instances-where-necessary.patch"
        ],
        "sha256": "7bf97c11cf3808d650a3a025bbf9c5f922c844a590826285067765dfd055d228",
        "url": "https://github.com/grpc/grpc/archive/v1.74.1.tar.gz"
      },
      {
        "folder": "third_party/benchmark",
        "git_rev": "12235e24652fc7f809373e7c11a5f73c5763fc4c",
        "git_url": "https://github.com/google/benchmark.git"
      },
      {
        "folder": "third_party/envoy-api",
        "git_rev": "4de3c74cf21a9958c1cf26d8993c55c6e0d28b49",
        "git_url": "https://github.com/envoyproxy/data-plane-api.git"
      },
      {
        "folder": "third_party/googleapis",
        "git_rev": "fe8ba054ad4f7eca946c2d14a63c3f07c0b586a0",
        "git_url": "https://github.com/googleapis/googleapis.git"
      },
      {
        "folder": "third_party/googletest",
        "git_rev": "52eb8108c5bdec04579160ae17225d66034bd723",
        "git_url": "https://github.com/google/googletest.git"
      },
      {
        "folder": "third_party/protoc-gen-validate",
        "git_rev": "32c2415389a3538082507ae537e7edd9578c64ed",
        "git_url": "https://github.com/envoyproxy/protoc-gen-validate.git"
      },
      {
        "folder": "third_party/xds",
        "git_rev": "3a472e524827f72d1ad621c4983dd5af54c46776",
        "git_url": "https://github.com/cncf/xds.git"
      },
      {
        "patches": [
          "patches/0001-windows-ssl-lib-names.patch",
          "patches/0002-fix-win-setup-cmds.patch",
          "patches/0003-Link-against-grpc-and-abseil.patch",
          "patches/0004-force-protoc-executable.patch",
          "patches/0005-mark-linkages-of-grpc-_unsecure-as-private.patch",
          "patches/0006-for-main-targets-set-_DLL_EXPORTS-when-building-and-.patch",
          "patches/0007-add-missing-linkages-for-gRPC_BUILD_TESTS-ON.patch",
          "patches/0008-add-enable_testing-so-tests-get-run.patch",
          "patches/0009-unvendor-upb-and-utf8_range-use-protobuf-s-version.patch",
          "patches/0010-reduce-buildtests_cxx-target-to-end2end-tests.patch",
          "patches/0011-build-grpcio-tools-from-source.patch",
          "patches/0013-reduce-grpc-symbol-explosion-with-autogenerated-expo.patch",
          "patches/0014-update-GRPC_DLL-instances-where-necessary.patch"
        ],
        "sha256": "7bf97c11cf3808d650a3a025bbf9c5f922c844a590826285067765dfd055d228",
        "url": "https://github.com/grpc/grpc/archive/v1.74.1.tar.gz"
      },
      {
        "folder": "third_party/benchmark",
        "git_rev": "12235e24652fc7f809373e7c11a5f73c5763fc4c",
        "git_url": "https://github.com/google/benchmark.git"
      },
      {
        "folder": "third_party/envoy-api",
        "git_rev": "4de3c74cf21a9958c1cf26d8993c55c6e0d28b49",
        "git_url": "https://github.com/envoyproxy/data-plane-api.git"
      },
      {
        "folder": "third_party/googleapis",
        "git_rev": "fe8ba054ad4f7eca946c2d14a63c3f07c0b586a0",
        "git_url": "https://github.com/googleapis/googleapis.git"
      },
      {
        "folder": "third_party/googletest",
        "git_rev": "52eb8108c5bdec04579160ae17225d66034bd723",
        "git_url": "https://github.com/google/googletest.git"
      },
      {
        "folder": "third_party/protoc-gen-validate",
        "git_rev": "32c2415389a3538082507ae537e7edd9578c64ed",
        "git_url": "https://github.com/envoyproxy/protoc-gen-validate.git"
      },
      {
        "folder": "third_party/xds",
        "git_rev": "3a472e524827f72d1ad621c4983dd5af54c46776",
        "git_url": "https://github.com/cncf/xds.git"
      },
      {
        "patches": [
          "patches/0001-windows-ssl-lib-names.patch",
          "patches/0002-fix-win-setup-cmds.patch",
          "patches/0003-Link-against-grpc-and-abseil.patch",
          "patches/0004-force-protoc-executable.patch",
          "patches/0005-mark-linkages-of-grpc-_unsecure-as-private.patch",
          "patches/0006-for-main-targets-set-_DLL_EXPORTS-when-building-and-.patch",
          "patches/0007-add-missing-linkages-for-gRPC_BUILD_TESTS-ON.patch",
          "patches/0008-add-enable_testing-so-tests-get-run.patch",
          "patches/0009-unvendor-upb-and-utf8_range-use-protobuf-s-version.patch",
          "patches/0010-reduce-buildtests_cxx-target-to-end2end-tests.patch",
          "patches/0011-build-grpcio-tools-from-source.patch",
          "patches/0013-reduce-grpc-symbol-explosion-with-autogenerated-expo.patch",
          "patches/0014-update-GRPC_DLL-instances-where-necessary.patch"
        ],
        "sha256": "7bf97c11cf3808d650a3a025bbf9c5f922c844a590826285067765dfd055d228",
        "url": "https://github.com/grpc/grpc/archive/v1.74.1.tar.gz"
      },
      {
        "folder": "third_party/benchmark",
        "git_rev": "12235e24652fc7f809373e7c11a5f73c5763fc4c",
        "git_url": "https://github.com/google/benchmark.git"
      },
      {
        "folder": "third_party/envoy-api",
        "git_rev": "4de3c74cf21a9958c1cf26d8993c55c6e0d28b49",
        "git_url": "https://github.com/envoyproxy/data-plane-api.git"
      },
      {
        "folder": "third_party/googleapis",
        "git_rev": "fe8ba054ad4f7eca946c2d14a63c3f07c0b586a0",
        "git_url": "https://github.com/googleapis/googleapis.git"
      },
      {
        "folder": "third_party/googletest",
        "git_rev": "52eb8108c5bdec04579160ae17225d66034bd723",
        "git_url": "https://github.com/google/googletest.git"
      },
      {
        "folder": "third_party/protoc-gen-validate",
        "git_rev": "32c2415389a3538082507ae537e7edd9578c64ed",
        "git_url": "https://github.com/envoyproxy/protoc-gen-validate.git"
      },
      {
        "folder": "third_party/xds",
        "git_rev": "3a472e524827f72d1ad621c4983dd5af54c46776",
        "git_url": "https://github.com/cncf/xds.git"
      },
      {
        "patches": [
          "patches/0001-windows-ssl-lib-names.patch",
          "patches/0002-fix-win-setup-cmds.patch",
          "patches/0003-Link-against-grpc-and-abseil.patch",
          "patches/0004-force-protoc-executable.patch",
          "patches/0005-mark-linkages-of-grpc-_unsecure-as-private.patch",
          "patches/0006-for-main-targets-set-_DLL_EXPORTS-when-building-and-.patch",
          "patches/0007-add-missing-linkages-for-gRPC_BUILD_TESTS-ON.patch",
          "patches/0008-add-enable_testing-so-tests-get-run.patch",
          "patches/0009-unvendor-upb-and-utf8_range-use-protobuf-s-version.patch",
          "patches/0010-reduce-buildtests_cxx-target-to-end2end-tests.patch",
          "patches/0011-build-grpcio-tools-from-source.patch",
          "patches/0012-add-linkage-to-openssl-to-grpc_unsecure.patch",
          "patches/0013-reduce-grpc-symbol-explosion-with-autogenerated-expo.patch",
          "patches/0014-update-GRPC_DLL-instances-where-necessary.patch"
        ],
        "sha256": "7bf97c11cf3808d650a3a025bbf9c5f922c844a590826285067765dfd055d228",
        "url": "https://github.com/grpc/grpc/archive/v1.74.1.tar.gz"
      },
      {
        "folder": "third_party/benchmark",
        "git_rev": "12235e24652fc7f809373e7c11a5f73c5763fc4c",
        "git_url": "https://github.com/google/benchmark.git"
      },
      {
        "folder": "third_party/envoy-api",
        "git_rev": "4de3c74cf21a9958c1cf26d8993c55c6e0d28b49",
        "git_url": "https://github.com/envoyproxy/data-plane-api.git"
      },
      {
        "folder": "third_party/googleapis",
        "git_rev": "fe8ba054ad4f7eca946c2d14a63c3f07c0b586a0",
        "git_url": "https://github.com/googleapis/googleapis.git"
      },
      {
        "folder": "third_party/googletest",
        "git_rev": "52eb8108c5bdec04579160ae17225d66034bd723",
        "git_url": "https://github.com/google/googletest.git"
      },
      {
        "folder": "third_party/protoc-gen-validate",
        "git_rev": "32c2415389a3538082507ae537e7edd9578c64ed",
        "git_url": "https://github.com/envoyproxy/protoc-gen-validate.git"
      },
      {
        "folder": "third_party/xds",
        "git_rev": "3a472e524827f72d1ad621c4983dd5af54c46776",
        "git_url": "https://github.com/cncf/xds.git"
      }
    ]
  },
  "name": "grpc-split",
  "osx_64_meta_yaml": {
    "about": {
      "description": "gRPC is a modern, open source, high-performance remote procedure call\n(RPC) framework that can run anywhere. gRPC enables client and server\napplications to communicate transparently, and simplifies the building\nof connected systems.\n\nThis package contains the gRPC C++ libraries and header files, as well\nas the code generation plugins.\n",
      "dev_url": "https://github.com/grpc/grpc",
      "doc_url": "https://grpc.io/docs/",
      "home": "https://grpc.io/",
      "license": "Apache-2.0",
      "license_family": "APACHE",
      "license_file": "LICENSE",
      "summary": "gRPC - A high-performance, open-source universal RPC framework"
    },
    "build": {
      "number": "1"
    },
    "extra": {
      "feedstock-name": "grpc-cpp",
      "recipe-maintainers": [
        "pitrou",
        "xhochy",
        "wesm",
        "h-vetinari",
        "mariusvniekerk",
        "jjerphan",
        "JohanMabille"
      ]
    },
    "outputs": [
      {
        "build": {
          "run_exports": [
            "libgrpc"
          ]
        },
        "name": "libgrpc",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cmake",
            "ninja"
          ],
          "host": [
            "libabseil",
            "c-ares",
            "libprotobuf",
            "re2",
            "openssl",
            "zlib"
          ],
          "run": [],
          "run_constrained": [
            "grpc-cpp =1.74.1"
          ]
        },
        "script": "build-cpp.sh",
        "test": {
          "commands": [
            "test -f $PREFIX/lib/libgpr.dylib",
            "test ! -f $PREFIX/lib/libgpr.a",
            "test -f $PREFIX/lib/libgrpc.dylib",
            "test ! -f $PREFIX/lib/libgrpc.a",
            "test -f $PREFIX/lib/libgrpc_unsecure.dylib",
            "test ! -f $PREFIX/lib/libgrpc_unsecure.a",
            "test -f $PREFIX/lib/libgrpc++.dylib",
            "test ! -f $PREFIX/lib/libgrpc++.a",
            "test -f $PREFIX/lib/libgrpc++_unsecure.dylib",
            "test ! -f $PREFIX/lib/libgrpc++_unsecure.a",
            "test -f $PREFIX/lib/libaddress_sorting.dylib",
            "test ! -f $PREFIX/lib/libaddress_sorting.a",
            "test -f $PREFIX/bin/grpc_cpp_plugin",
            "test -f $PREFIX/bin/grpc_csharp_plugin",
            "test -f $PREFIX/bin/grpc_node_plugin",
            "test -f $PREFIX/bin/grpc_objective_c_plugin",
            "test -f $PREFIX/bin/grpc_php_plugin",
            "test -f $PREFIX/bin/grpc_python_plugin",
            "test -f $PREFIX/bin/grpc_ruby_plugin",
            "pkg-config --print-errors --exact-version \"49.0.0\" gpr",
            "pkg-config --print-errors --exact-version \"49.0.0\" grpc",
            "pkg-config --print-errors --exact-version \"49.0.0\" grpc_unsecure",
            "pkg-config --print-errors --exact-version \"1.74.1\" grpc++",
            "pkg-config --print-errors --exact-version \"1.74.1\" grpc++_unsecure",
            "./test_grpc.sh",
            "cd cmake_test",
            "cmake -GNinja -DCMAKE_CXX_STANDARD=17 $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/",
            "hello.proto",
            "test_grpc.sh",
            "test_grpc.bat"
          ],
          "requires": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cmake",
            "ninja",
            "pkg-config",
            "zlib"
          ],
          "source_files": [
            "examples/cpp/helloworld/",
            "examples/cpp/cmake/",
            "examples/protos/helloworld.proto"
          ]
        }
      },
      {
        "name": "grpcio",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub"
          ],
          "host": [
            "python",
            "pip",
            "setuptools",
            "cython",
            "libgrpc",
            "zlib"
          ],
          "run": [
            "python",
            "libgrpc"
          ]
        },
        "script": "build-grpcio.sh",
        "test": {
          "commands": [
            "python -m pip check",
            "python grpcio_distribtest.py",
            "cd examples/python/helloworld",
            "python -m grpc_tools.protoc -I../../protos --python_out=. --pyi_out=. --grpc_python_out=. ../../protos/helloworld.proto",
            "cp ../../../test_grpcio_helloworld.py .",
            "python test_grpcio_helloworld.py"
          ],
          "files": [
            "grpcio_distribtest.py",
            "test_grpcio_helloworld.py"
          ],
          "imports": [
            "grpc",
            "grpc._cython",
            "grpc._cython._cygrpc",
            "grpc.beta",
            "grpc.framework",
            "grpc.framework.common",
            "grpc.framework.foundation",
            "grpc.framework.interfaces",
            "grpc.framework.interfaces.base",
            "grpc.framework.interfaces.face"
          ],
          "requires": [
            "pip",
            "grpcio-tools"
          ],
          "source_files": [
            "examples/python/helloworld/",
            "examples/protos/helloworld.proto"
          ]
        }
      },
      {
        "build": {
          "script": [
            "cd tools/distrib/python/grpcio_tools",
            "export GRPC_PYTHON_BUILD_WITH_CYTHON=true",
            "python -m pip install . -vv"
          ]
        },
        "name": "grpcio-tools",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub"
          ],
          "host": [
            "grpcio 1.74.1 *_1",
            "python",
            "cython",
            "pip",
            "setuptools",
            "libabseil",
            "libprotobuf"
          ],
          "run": [
            "grpcio 1.74.1 *_1",
            "python",
            "protobuf",
            "setuptools"
          ]
        },
        "test": {
          "commands": [
            "pip check",
            "test \"$(python -m grpc_tools.protoc --version)\" == \"$(protoc --version)\""
          ],
          "imports": [
            "grpc_tools"
          ],
          "requires": [
            "pip"
          ]
        }
      }
    ],
    "package": {
      "name": "grpc-split",
      "version": "1.74.1"
    },
    "schema_version": 0,
    "source": [
      {
        "patches": [
          "patches/0001-windows-ssl-lib-names.patch",
          "patches/0002-fix-win-setup-cmds.patch",
          "patches/0003-Link-against-grpc-and-abseil.patch",
          "patches/0004-force-protoc-executable.patch",
          "patches/0005-mark-linkages-of-grpc-_unsecure-as-private.patch",
          "patches/0006-for-main-targets-set-_DLL_EXPORTS-when-building-and-.patch",
          "patches/0007-add-missing-linkages-for-gRPC_BUILD_TESTS-ON.patch",
          "patches/0008-add-enable_testing-so-tests-get-run.patch",
          "patches/0009-unvendor-upb-and-utf8_range-use-protobuf-s-version.patch",
          "patches/0010-reduce-buildtests_cxx-target-to-end2end-tests.patch",
          "patches/0011-build-grpcio-tools-from-source.patch",
          "patches/0013-reduce-grpc-symbol-explosion-with-autogenerated-expo.patch",
          "patches/0014-update-GRPC_DLL-instances-where-necessary.patch"
        ],
        "sha256": "7bf97c11cf3808d650a3a025bbf9c5f922c844a590826285067765dfd055d228",
        "url": "https://github.com/grpc/grpc/archive/v1.74.1.tar.gz"
      },
      {
        "folder": "third_party/benchmark",
        "git_rev": "12235e24652fc7f809373e7c11a5f73c5763fc4c",
        "git_url": "https://github.com/google/benchmark.git"
      },
      {
        "folder": "third_party/envoy-api",
        "git_rev": "4de3c74cf21a9958c1cf26d8993c55c6e0d28b49",
        "git_url": "https://github.com/envoyproxy/data-plane-api.git"
      },
      {
        "folder": "third_party/googleapis",
        "git_rev": "fe8ba054ad4f7eca946c2d14a63c3f07c0b586a0",
        "git_url": "https://github.com/googleapis/googleapis.git"
      },
      {
        "folder": "third_party/googletest",
        "git_rev": "52eb8108c5bdec04579160ae17225d66034bd723",
        "git_url": "https://github.com/google/googletest.git"
      },
      {
        "folder": "third_party/protoc-gen-validate",
        "git_rev": "32c2415389a3538082507ae537e7edd9578c64ed",
        "git_url": "https://github.com/envoyproxy/protoc-gen-validate.git"
      },
      {
        "folder": "third_party/xds",
        "git_rev": "3a472e524827f72d1ad621c4983dd5af54c46776",
        "git_url": "https://github.com/cncf/xds.git"
      }
    ]
  },
  "osx_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "ninja"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "c-ares",
        "cython",
        "grpcio",
        "libabseil",
        "libgrpc",
        "libprotobuf",
        "openssl",
        "pip",
        "python",
        "re2",
        "setuptools",
        "zlib"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "grpcio",
        "libgrpc",
        "protobuf",
        "python",
        "setuptools"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "cmake",
        "cxx_compiler_stub",
        "grpcio-tools",
        "ninja",
        "pip",
        "pkg-config",
        "zlib"
      ]
    }
  },
  "osx_arm64_meta_yaml": {
    "about": {
      "description": "gRPC is a modern, open source, high-performance remote procedure call\n(RPC) framework that can run anywhere. gRPC enables client and server\napplications to communicate transparently, and simplifies the building\nof connected systems.\n\nThis package contains the gRPC C++ libraries and header files, as well\nas the code generation plugins.\n",
      "dev_url": "https://github.com/grpc/grpc",
      "doc_url": "https://grpc.io/docs/",
      "home": "https://grpc.io/",
      "license": "Apache-2.0",
      "license_family": "APACHE",
      "license_file": "LICENSE",
      "summary": "gRPC - A high-performance, open-source universal RPC framework"
    },
    "build": {
      "number": "1"
    },
    "extra": {
      "feedstock-name": "grpc-cpp",
      "recipe-maintainers": [
        "pitrou",
        "xhochy",
        "wesm",
        "h-vetinari",
        "mariusvniekerk",
        "jjerphan",
        "JohanMabille"
      ]
    },
    "outputs": [
      {
        "build": {
          "run_exports": [
            "libgrpc"
          ]
        },
        "name": "libgrpc",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cmake",
            "ninja"
          ],
          "host": [
            "libabseil",
            "c-ares",
            "libprotobuf",
            "re2",
            "openssl",
            "zlib"
          ],
          "run": [],
          "run_constrained": [
            "grpc-cpp =1.74.1"
          ]
        },
        "script": "build-cpp.sh",
        "test": {
          "commands": [
            "test -f $PREFIX/lib/libgpr.dylib",
            "test ! -f $PREFIX/lib/libgpr.a",
            "test -f $PREFIX/lib/libgrpc.dylib",
            "test ! -f $PREFIX/lib/libgrpc.a",
            "test -f $PREFIX/lib/libgrpc_unsecure.dylib",
            "test ! -f $PREFIX/lib/libgrpc_unsecure.a",
            "test -f $PREFIX/lib/libgrpc++.dylib",
            "test ! -f $PREFIX/lib/libgrpc++.a",
            "test -f $PREFIX/lib/libgrpc++_unsecure.dylib",
            "test ! -f $PREFIX/lib/libgrpc++_unsecure.a",
            "test -f $PREFIX/lib/libaddress_sorting.dylib",
            "test ! -f $PREFIX/lib/libaddress_sorting.a",
            "test -f $PREFIX/bin/grpc_cpp_plugin",
            "test -f $PREFIX/bin/grpc_csharp_plugin",
            "test -f $PREFIX/bin/grpc_node_plugin",
            "test -f $PREFIX/bin/grpc_objective_c_plugin",
            "test -f $PREFIX/bin/grpc_php_plugin",
            "test -f $PREFIX/bin/grpc_python_plugin",
            "test -f $PREFIX/bin/grpc_ruby_plugin",
            "pkg-config --print-errors --exact-version \"49.0.0\" gpr",
            "pkg-config --print-errors --exact-version \"49.0.0\" grpc",
            "pkg-config --print-errors --exact-version \"49.0.0\" grpc_unsecure",
            "pkg-config --print-errors --exact-version \"1.74.1\" grpc++",
            "pkg-config --print-errors --exact-version \"1.74.1\" grpc++_unsecure",
            "./test_grpc.sh",
            "cd cmake_test",
            "cmake -GNinja -DCMAKE_CXX_STANDARD=17 $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/",
            "hello.proto",
            "test_grpc.sh",
            "test_grpc.bat"
          ],
          "requires": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cmake",
            "ninja",
            "pkg-config",
            "zlib"
          ],
          "source_files": [
            "examples/cpp/helloworld/",
            "examples/cpp/cmake/",
            "examples/protos/helloworld.proto"
          ]
        }
      },
      {
        "name": "grpcio",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub"
          ],
          "host": [
            "python",
            "pip",
            "setuptools",
            "cython",
            "libgrpc",
            "zlib"
          ],
          "run": [
            "python",
            "libgrpc"
          ]
        },
        "script": "build-grpcio.sh",
        "test": {
          "commands": [
            "python -m pip check",
            "python grpcio_distribtest.py",
            "cd examples/python/helloworld",
            "python -m grpc_tools.protoc -I../../protos --python_out=. --pyi_out=. --grpc_python_out=. ../../protos/helloworld.proto",
            "cp ../../../test_grpcio_helloworld.py .",
            "python test_grpcio_helloworld.py"
          ],
          "files": [
            "grpcio_distribtest.py",
            "test_grpcio_helloworld.py"
          ],
          "imports": [
            "grpc",
            "grpc._cython",
            "grpc._cython._cygrpc",
            "grpc.beta",
            "grpc.framework",
            "grpc.framework.common",
            "grpc.framework.foundation",
            "grpc.framework.interfaces",
            "grpc.framework.interfaces.base",
            "grpc.framework.interfaces.face"
          ],
          "requires": [
            "pip",
            "grpcio-tools"
          ],
          "source_files": [
            "examples/python/helloworld/",
            "examples/protos/helloworld.proto"
          ]
        }
      },
      {
        "build": {
          "script": [
            "cd tools/distrib/python/grpcio_tools",
            "export GRPC_PYTHON_BUILD_WITH_CYTHON=true",
            "python -m pip install . -vv"
          ]
        },
        "name": "grpcio-tools",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub"
          ],
          "host": [
            "grpcio 1.74.1 *_1",
            "python",
            "cython",
            "pip",
            "setuptools",
            "libabseil",
            "libprotobuf"
          ],
          "run": [
            "grpcio 1.74.1 *_1",
            "python",
            "protobuf",
            "setuptools"
          ]
        },
        "test": {
          "commands": [
            "pip check",
            "test \"$(python -m grpc_tools.protoc --version)\" == \"$(protoc --version)\""
          ],
          "imports": [
            "grpc_tools"
          ],
          "requires": [
            "pip"
          ]
        }
      }
    ],
    "package": {
      "name": "grpc-split",
      "version": "1.74.1"
    },
    "schema_version": 0,
    "source": [
      {
        "patches": [
          "patches/0001-windows-ssl-lib-names.patch",
          "patches/0002-fix-win-setup-cmds.patch",
          "patches/0003-Link-against-grpc-and-abseil.patch",
          "patches/0004-force-protoc-executable.patch",
          "patches/0005-mark-linkages-of-grpc-_unsecure-as-private.patch",
          "patches/0006-for-main-targets-set-_DLL_EXPORTS-when-building-and-.patch",
          "patches/0007-add-missing-linkages-for-gRPC_BUILD_TESTS-ON.patch",
          "patches/0008-add-enable_testing-so-tests-get-run.patch",
          "patches/0009-unvendor-upb-and-utf8_range-use-protobuf-s-version.patch",
          "patches/0010-reduce-buildtests_cxx-target-to-end2end-tests.patch",
          "patches/0011-build-grpcio-tools-from-source.patch",
          "patches/0013-reduce-grpc-symbol-explosion-with-autogenerated-expo.patch",
          "patches/0014-update-GRPC_DLL-instances-where-necessary.patch"
        ],
        "sha256": "7bf97c11cf3808d650a3a025bbf9c5f922c844a590826285067765dfd055d228",
        "url": "https://github.com/grpc/grpc/archive/v1.74.1.tar.gz"
      },
      {
        "folder": "third_party/benchmark",
        "git_rev": "12235e24652fc7f809373e7c11a5f73c5763fc4c",
        "git_url": "https://github.com/google/benchmark.git"
      },
      {
        "folder": "third_party/envoy-api",
        "git_rev": "4de3c74cf21a9958c1cf26d8993c55c6e0d28b49",
        "git_url": "https://github.com/envoyproxy/data-plane-api.git"
      },
      {
        "folder": "third_party/googleapis",
        "git_rev": "fe8ba054ad4f7eca946c2d14a63c3f07c0b586a0",
        "git_url": "https://github.com/googleapis/googleapis.git"
      },
      {
        "folder": "third_party/googletest",
        "git_rev": "52eb8108c5bdec04579160ae17225d66034bd723",
        "git_url": "https://github.com/google/googletest.git"
      },
      {
        "folder": "third_party/protoc-gen-validate",
        "git_rev": "32c2415389a3538082507ae537e7edd9578c64ed",
        "git_url": "https://github.com/envoyproxy/protoc-gen-validate.git"
      },
      {
        "folder": "third_party/xds",
        "git_rev": "3a472e524827f72d1ad621c4983dd5af54c46776",
        "git_url": "https://github.com/cncf/xds.git"
      }
    ]
  },
  "osx_arm64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "ninja"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "c-ares",
        "cython",
        "grpcio",
        "libabseil",
        "libgrpc",
        "libprotobuf",
        "openssl",
        "pip",
        "python",
        "re2",
        "setuptools",
        "zlib"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "grpcio",
        "libgrpc",
        "protobuf",
        "python",
        "setuptools"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "cmake",
        "cxx_compiler_stub",
        "grpcio-tools",
        "ninja",
        "pip",
        "pkg-config",
        "zlib"
      ]
    }
  },
  "outputs_names": {
    "__set__": true,
    "elements": [
      "grpcio",
      "grpcio-tools",
      "libgrpc"
    ]
  },
  "parsing_error": false,
  "platforms": [
    "linux_64",
    "linux_aarch64",
    "linux_ppc64le",
    "osx_64",
    "osx_arm64",
    "win_64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/grpc-cpp.json"
  },
  "raw_meta_yaml": "{% set version = \"1.74.1\" %}\n\n# core package & vendored libs use different version scheme than CPP libs, see\n# top of https://github.com/grpc/grpc/blob/v{{ version }}/CMakeLists.txt\n# the difference of 25 is empirical, last changed in 1.70 (1.69 had a non-zero minor version)\n{% set core_major = version.split(\".\")[1] | int - 25 %}\n{% set core_version = core_major | string ~ \".0.0\" %}\n\n{% set core_libs = [\"gpr\", \"grpc\", \"grpc_unsecure\"] %}\n{% set core_cpp_libs = [\"grpc++\", \"grpc++_unsecure\"] %}\n{% set vendored_libs = [\"address_sorting\"] %}\n{% set binaries_plugin_langs = [\n    \"cpp\", \"csharp\", \"node\", \"objective_c\", \"php\", \"python\", \"ruby\"\n] %}\n\npackage:\n  name: grpc-split\n  version: {{ version }}\n\nsource:\n  - url: https://github.com/grpc/grpc/archive/v{{ version.replace(\".pre\", \"-pre\") }}.tar.gz\n    sha256: 7bf97c11cf3808d650a3a025bbf9c5f922c844a590826285067765dfd055d228\n    patches:\n      - patches/0001-windows-ssl-lib-names.patch\n      - patches/0002-fix-win-setup-cmds.patch\n      - patches/0003-Link-against-grpc-and-abseil.patch\n      - patches/0004-force-protoc-executable.patch\n      # mark target_link_libraries for grpc as PRIVATE where possible\n      - patches/0005-mark-linkages-of-grpc-_unsecure-as-private.patch\n      # fix symbol visibility regression on windows\n      - patches/0006-for-main-targets-set-_DLL_EXPORTS-when-building-and-.patch\n      # get gRPC_BUILD_TESTS=ON to build\n      - patches/0007-add-missing-linkages-for-gRPC_BUILD_TESTS-ON.patch\n      # see https://github.com/grpc/grpc/pull/38893\n      - patches/0008-add-enable_testing-so-tests-get-run.patch\n      # protobuf is now shipping upb, so we cannot ship it here; see\n      # https://github.com/protocolbuffers/protobuf/issues/12927\n      # https://github.com/conda-forge/libprotobuf-feedstock/pull/240\n      # https://github.com/grpc/grpc/commit/7819891fabcd1d2ff55c26c2b0755ab52ccd8e20\n      - patches/0009-unvendor-upb-and-utf8_range-use-protobuf-s-version.patch\n      # full test suite takes too long to build; reduce set of tests\n      - patches/0010-reduce-buildtests_cxx-target-to-end2end-tests.patch\n      # don't rebuild protobuf/upb/abseil for grpcio-tools\n      - patches/0011-build-grpcio-tools-from-source.patch\n      - patches/0012-add-linkage-to-openssl-to-grpc_unsecure.patch                  # [win]\n      - patches/0013-reduce-grpc-symbol-explosion-with-autogenerated-expo.patch\n      - patches/0014-update-GRPC_DLL-instances-where-necessary.patch\n\n  {% if build_platform == target_platform and not win %}\n  - folder: third_party/benchmark\n    git_url: https://github.com/google/benchmark.git\n    git_rev: 12235e24652fc7f809373e7c11a5f73c5763fc4c\n\n  - folder: third_party/envoy-api\n    git_url: https://github.com/envoyproxy/data-plane-api.git\n    git_rev: 4de3c74cf21a9958c1cf26d8993c55c6e0d28b49\n\n  - folder: third_party/googleapis\n    git_url: https://github.com/googleapis/googleapis.git\n    git_rev: fe8ba054ad4f7eca946c2d14a63c3f07c0b586a0\n\n  - folder: third_party/googletest\n    git_url: https://github.com/google/googletest.git\n    git_rev: 52eb8108c5bdec04579160ae17225d66034bd723\n\n  - folder: third_party/protoc-gen-validate\n    git_url: https://github.com/envoyproxy/protoc-gen-validate.git\n    git_rev: 32c2415389a3538082507ae537e7edd9578c64ed\n\n  - folder: third_party/xds\n    git_url: https://github.com/cncf/xds.git\n    git_rev: 3a472e524827f72d1ad621c4983dd5af54c46776\n  {% endif %}\n\nbuild:\n  number: 1\n\noutputs:\n  - name: libgrpc\n    script: build-cpp.sh  # [not win]\n    script: build-cpp.bat  # [win]\n    build:\n      run_exports:\n        - {{ pin_subpackage('libgrpc', max_pin='x.x') }}\n    requirements:\n      build:\n        - {{ stdlib('c') }}\n        - {{ compiler('c') }}\n        - {{ compiler('cxx') }}\n        - cmake\n        - ninja\n        - python *      # [win]\n        # for analysing total number of symbols in grpc.dll\n        - py-lief       # [win]\n        # During cross-compilation, we need to build the grpc_cpp_plugin for the\n        # architecture of the build agent (where it will be executed afterwards),\n        # thus we need the respective host dependencies also in the build env.\n        - c-ares        # [build_platform != target_platform]\n        - libabseil     # [build_platform != target_platform]\n        - libprotobuf   # [build_platform != target_platform]\n        - openssl       # [build_platform != target_platform]\n        - re2           # [build_platform != target_platform]\n        - zlib          # [build_platform != target_platform]\n      host:\n        - libabseil\n        - c-ares\n        - libprotobuf\n        - re2\n        - openssl\n        - zlib\n      run:\n        - ucrt  # [win]\n      run_constrained:\n        # make sure we don't co-install with old version of previous package name\n        - grpc-cpp ={{ version }}\n    test:\n      requires:\n        # protoc needs compiler; cmake also needs one to run package detection, see\n        # https://discourse.cmake.org/t/questions-about-find-package-cli-msvc/6194\n        - {{ compiler('c') }}\n        - {{ compiler('cxx') }}\n        - cmake\n        - ninja\n        - pkg-config\n        # only required for pkg-config test (which wants to find zlib.pc)\n        - zlib\n      files:\n        - cmake_test/\n        - hello.proto\n        - test_grpc.sh\n        - test_grpc.bat\n      source_files:\n        - examples/cpp/helloworld/\n        # the example needs these other files to compile:\n        - examples/cpp/cmake/\n        - examples/protos/helloworld.proto\n      commands:\n        # libraries\n        {% for each_lib in core_libs + core_cpp_libs + vendored_libs %}\n        # presence of shared libs\n        - test -f $PREFIX/lib/lib{{ each_lib }}.so              # [linux]\n        - test -f $PREFIX/lib/lib{{ each_lib }}.dylib           # [osx]\n        - if not exist %LIBRARY_BIN%\\{{ each_lib }}.dll exit 1  # [win]\n        - if not exist %LIBRARY_LIB%\\{{ each_lib }}.lib exit 1  # [win]\n\n        # absence of static libs (unix)\n        - test ! -f $PREFIX/lib/lib{{ each_lib }}.a             # [unix]\n        {% endfor %}\n\n        # binaries\n        {% for each_lang in binaries_plugin_langs %}\n        - test -f $PREFIX/bin/grpc_{{ each_lang }}_plugin                    # [unix]\n        - if not exist %LIBRARY_BIN%\\grpc_{{ each_lang }}_plugin.exe exit 1  # [win]\n        {% endfor %}\n\n        # pkg-config (no metadata for vendored libs)\n        {% for each_lib in core_libs %}\n        - pkg-config --print-errors --exact-version \"{{ core_version }}\" {{ each_lib }}\n        {% endfor %}\n        {% for each_lib in core_cpp_libs %}\n        - pkg-config --print-errors --exact-version \"{{ version }}\" {{ each_lib }}\n        {% endfor %}\n\n        # CMake test: compile upstream example\n        - ./test_grpc.sh   # [unix]\n        - ./test_grpc.bat  # [win]\n\n        # test availability of symbol needed by arrow (esp. on windows)\n        - cd cmake_test\n        - cmake -GNinja -DCMAKE_CXX_STANDARD=17 $CMAKE_ARGS .   # [unix]\n        - cmake -GNinja -DCMAKE_CXX_STANDARD=17 %CMAKE_ARGS% .  # [win]\n        - cmake --build .\n\n  - name: grpcio\n    script: build-grpcio.sh  # [not win]\n    script: build-grpcio.bat  # [win]\n    requirements:\n      build:\n        - python                                 # [build_platform != target_platform]\n        - cross-python_{{ target_platform }}     # [build_platform != target_platform]\n        - cython                                 # [build_platform != target_platform]\n        - {{ stdlib('c') }}\n        - {{ compiler('c') }}\n        - {{ compiler('cxx') }}\n      host:\n        - python\n        - pip\n        - setuptools\n        - cython\n        - {{ pin_subpackage('libgrpc', exact=True) }}\n        - pthread-stubs                               # [linux]\n        - zlib\n      run:\n        - python\n        - {{ pin_subpackage('libgrpc', exact=True) }}\n    test:\n      source_files:\n        - examples/python/helloworld/\n        - examples/protos/helloworld.proto\n      files:\n        - grpcio_distribtest.py\n        - test_grpcio_helloworld.py\n      requires:\n        - pip\n        - grpcio-tools\n      imports:\n        - grpc\n        - grpc._cython\n        - grpc._cython._cygrpc\n        - grpc.beta\n        - grpc.framework\n        - grpc.framework.common\n        - grpc.framework.foundation\n        - grpc.framework.interfaces\n        - grpc.framework.interfaces.base\n        - grpc.framework.interfaces.face\n      commands:\n        - python -m pip check\n        - python grpcio_distribtest.py\n        {% if build_platform == target_platform %}\n        # test actual RPC pattern (client & server); other tests did not catch\n        # https://github.com/conda-forge/grpc-cpp-feedstock/issues/281\n        - cd examples/python/helloworld\n        # generate helloworld, see https://grpc.io/docs/languages/python/quickstart/#generate-grpc-code\n        - python -m grpc_tools.protoc -I../../protos --python_out=. --pyi_out=. --grpc_python_out=. ../../protos/helloworld.proto\n        # copy test defined in feedstock to where it needs to run\n        - cp ../../../test_grpcio_helloworld.py .\n        - python test_grpcio_helloworld.py\n        {% endif %}\n\n  - name: grpcio-tools\n    build:\n      script:\n        - cd tools/distrib/python/grpcio_tools\n        - export GRPC_PYTHON_BUILD_WITH_CYTHON=true  # [unix]\n        - set GRPC_PYTHON_BUILD_WITH_CYTHON=true     # [win]\n        - python -m pip install . -vv\n    requirements:\n      build:\n        - python                                 # [build_platform != target_platform]\n        - cython                                 # [build_platform != target_platform]\n        - cross-python_{{ target_platform }}     # [build_platform != target_platform]\n        - {{ stdlib('c') }}\n        - {{ compiler('c') }}\n        - {{ compiler('cxx') }}\n      host:\n        - grpcio {{ version }} *_{{ PKG_BUILDNUM }}\n        - python\n        - cython\n        - pip\n        - setuptools\n        - libabseil\n        - libprotobuf\n      run:\n        - grpcio {{ version }} *_{{ PKG_BUILDNUM }}\n        - python\n        - protobuf\n        - setuptools\n    test:\n      requires:\n        - pip\n      imports:\n        - grpc_tools\n      commands:\n        - pip check\n        # see https://github.com/conda-forge/grpc-cpp-feedstock/issues/385\n        - test \"$(python -m grpc_tools.protoc --version)\" == \"$(protoc --version)\"  # [unix]\n\nabout:\n  home: https://grpc.io/\n  license: Apache-2.0\n  license_family: APACHE\n  license_file: LICENSE\n  summary: gRPC - A high-performance, open-source universal RPC framework\n  description: |\n    gRPC is a modern, open source, high-performance remote procedure call\n    (RPC) framework that can run anywhere. gRPC enables client and server\n    applications to communicate transparently, and simplifies the building\n    of connected systems.\n\n    This package contains the gRPC C++ libraries and header files, as well\n    as the code generation plugins.\n  doc_url: https://grpc.io/docs/\n  dev_url: https://github.com/grpc/grpc\n\nextra:\n  recipe-maintainers:\n    - pitrou\n    - xhochy\n    - wesm\n    - h-vetinari\n    - mariusvniekerk\n    - jjerphan\n    - JohanMabille\n  feedstock-name: grpc-cpp\n",
  "req": {
    "__set__": true,
    "elements": [
      "c-ares",
      "c_compiler_stub",
      "c_stdlib_stub",
      "cmake",
      "cxx_compiler_stub",
      "cython",
      "grpcio",
      "libabseil",
      "libgrpc",
      "libprotobuf",
      "ninja",
      "openssl",
      "pip",
      "protobuf",
      "pthread-stubs",
      "py-lief",
      "python",
      "re2",
      "setuptools",
      "ucrt",
      "zlib"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "ninja",
        "py-lief",
        "python"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "c-ares",
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "cython",
        "grpcio",
        "libabseil",
        "libgrpc",
        "libprotobuf",
        "openssl",
        "pip",
        "pthread-stubs",
        "python",
        "re2",
        "setuptools",
        "zlib"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "grpcio",
        "libgrpc",
        "protobuf",
        "python",
        "setuptools",
        "ucrt"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "cmake",
        "cxx_compiler_stub",
        "grpcio-tools",
        "ninja",
        "pip",
        "pkg-config",
        "zlib"
      ]
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "ninja",
        "py-lief",
        "python *"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "c-ares",
        "cython",
        "grpcio 1.74.1 *_1",
        "libabseil",
        "libgrpc",
        "libprotobuf",
        "openssl",
        "pip",
        "pthread-stubs",
        "python",
        "re2",
        "setuptools",
        "zlib"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "grpcio 1.74.1 *_1",
        "libgrpc",
        "protobuf",
        "python",
        "setuptools",
        "ucrt"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "cmake",
        "cxx_compiler_stub",
        "grpcio-tools",
        "ninja",
        "pip",
        "pkg-config",
        "zlib"
      ]
    }
  },
  "url": "https://github.com/grpc/grpc/archive/v1.74.1.tar.gz",
  "version": "1.74.1",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/grpc-cpp.json"
  },
  "win_64_meta_yaml": {
    "about": {
      "description": "gRPC is a modern, open source, high-performance remote procedure call\n(RPC) framework that can run anywhere. gRPC enables client and server\napplications to communicate transparently, and simplifies the building\nof connected systems.\n\nThis package contains the gRPC C++ libraries and header files, as well\nas the code generation plugins.\n",
      "dev_url": "https://github.com/grpc/grpc",
      "doc_url": "https://grpc.io/docs/",
      "home": "https://grpc.io/",
      "license": "Apache-2.0",
      "license_family": "APACHE",
      "license_file": "LICENSE",
      "summary": "gRPC - A high-performance, open-source universal RPC framework"
    },
    "build": {
      "number": "1"
    },
    "extra": {
      "feedstock-name": "grpc-cpp",
      "recipe-maintainers": [
        "pitrou",
        "xhochy",
        "wesm",
        "h-vetinari",
        "mariusvniekerk",
        "jjerphan",
        "JohanMabille"
      ]
    },
    "outputs": [
      {
        "build": {
          "run_exports": [
            "libgrpc"
          ]
        },
        "name": "libgrpc",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cmake",
            "ninja",
            "python *",
            "py-lief"
          ],
          "host": [
            "libabseil",
            "c-ares",
            "libprotobuf",
            "re2",
            "openssl",
            "zlib"
          ],
          "run": [
            "ucrt"
          ],
          "run_constrained": [
            "grpc-cpp =1.74.1"
          ]
        },
        "script": "build-cpp.bat",
        "test": {
          "commands": [
            "if not exist %LIBRARY_BIN%\\gpr.dll exit 1",
            "if not exist %LIBRARY_LIB%\\gpr.lib exit 1",
            "if not exist %LIBRARY_BIN%\\grpc.dll exit 1",
            "if not exist %LIBRARY_LIB%\\grpc.lib exit 1",
            "if not exist %LIBRARY_BIN%\\grpc_unsecure.dll exit 1",
            "if not exist %LIBRARY_LIB%\\grpc_unsecure.lib exit 1",
            "if not exist %LIBRARY_BIN%\\grpc++.dll exit 1",
            "if not exist %LIBRARY_LIB%\\grpc++.lib exit 1",
            "if not exist %LIBRARY_BIN%\\grpc++_unsecure.dll exit 1",
            "if not exist %LIBRARY_LIB%\\grpc++_unsecure.lib exit 1",
            "if not exist %LIBRARY_BIN%\\address_sorting.dll exit 1",
            "if not exist %LIBRARY_LIB%\\address_sorting.lib exit 1",
            "if not exist %LIBRARY_BIN%\\grpc_cpp_plugin.exe exit 1",
            "if not exist %LIBRARY_BIN%\\grpc_csharp_plugin.exe exit 1",
            "if not exist %LIBRARY_BIN%\\grpc_node_plugin.exe exit 1",
            "if not exist %LIBRARY_BIN%\\grpc_objective_c_plugin.exe exit 1",
            "if not exist %LIBRARY_BIN%\\grpc_php_plugin.exe exit 1",
            "if not exist %LIBRARY_BIN%\\grpc_python_plugin.exe exit 1",
            "if not exist %LIBRARY_BIN%\\grpc_ruby_plugin.exe exit 1",
            "pkg-config --print-errors --exact-version \"49.0.0\" gpr",
            "pkg-config --print-errors --exact-version \"49.0.0\" grpc",
            "pkg-config --print-errors --exact-version \"49.0.0\" grpc_unsecure",
            "pkg-config --print-errors --exact-version \"1.74.1\" grpc++",
            "pkg-config --print-errors --exact-version \"1.74.1\" grpc++_unsecure",
            "./test_grpc.bat",
            "cd cmake_test",
            "cmake -GNinja -DCMAKE_CXX_STANDARD=17 %CMAKE_ARGS% .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/",
            "hello.proto",
            "test_grpc.sh",
            "test_grpc.bat"
          ],
          "requires": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cmake",
            "ninja",
            "pkg-config",
            "zlib"
          ],
          "source_files": [
            "examples/cpp/helloworld/",
            "examples/cpp/cmake/",
            "examples/protos/helloworld.proto"
          ]
        }
      },
      {
        "name": "grpcio",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub"
          ],
          "host": [
            "python",
            "pip",
            "setuptools",
            "cython",
            "libgrpc",
            "zlib"
          ],
          "run": [
            "python",
            "libgrpc"
          ]
        },
        "script": "build-grpcio.bat",
        "test": {
          "commands": [
            "python -m pip check",
            "python grpcio_distribtest.py",
            "cd examples/python/helloworld",
            "python -m grpc_tools.protoc -I../../protos --python_out=. --pyi_out=. --grpc_python_out=. ../../protos/helloworld.proto",
            "cp ../../../test_grpcio_helloworld.py .",
            "python test_grpcio_helloworld.py"
          ],
          "files": [
            "grpcio_distribtest.py",
            "test_grpcio_helloworld.py"
          ],
          "imports": [
            "grpc",
            "grpc._cython",
            "grpc._cython._cygrpc",
            "grpc.beta",
            "grpc.framework",
            "grpc.framework.common",
            "grpc.framework.foundation",
            "grpc.framework.interfaces",
            "grpc.framework.interfaces.base",
            "grpc.framework.interfaces.face"
          ],
          "requires": [
            "pip",
            "grpcio-tools"
          ],
          "source_files": [
            "examples/python/helloworld/",
            "examples/protos/helloworld.proto"
          ]
        }
      },
      {
        "build": {
          "script": [
            "cd tools/distrib/python/grpcio_tools",
            "set GRPC_PYTHON_BUILD_WITH_CYTHON=true",
            "python -m pip install . -vv"
          ]
        },
        "name": "grpcio-tools",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub"
          ],
          "host": [
            "grpcio 1.74.1 *_1",
            "python",
            "cython",
            "pip",
            "setuptools",
            "libabseil",
            "libprotobuf"
          ],
          "run": [
            "grpcio 1.74.1 *_1",
            "python",
            "protobuf",
            "setuptools"
          ]
        },
        "test": {
          "commands": [
            "pip check"
          ],
          "imports": [
            "grpc_tools"
          ],
          "requires": [
            "pip"
          ]
        }
      }
    ],
    "package": {
      "name": "grpc-split",
      "version": "1.74.1"
    },
    "schema_version": 0,
    "source": [
      {
        "patches": [
          "patches/0001-windows-ssl-lib-names.patch",
          "patches/0002-fix-win-setup-cmds.patch",
          "patches/0003-Link-against-grpc-and-abseil.patch",
          "patches/0004-force-protoc-executable.patch",
          "patches/0005-mark-linkages-of-grpc-_unsecure-as-private.patch",
          "patches/0006-for-main-targets-set-_DLL_EXPORTS-when-building-and-.patch",
          "patches/0007-add-missing-linkages-for-gRPC_BUILD_TESTS-ON.patch",
          "patches/0008-add-enable_testing-so-tests-get-run.patch",
          "patches/0009-unvendor-upb-and-utf8_range-use-protobuf-s-version.patch",
          "patches/0010-reduce-buildtests_cxx-target-to-end2end-tests.patch",
          "patches/0011-build-grpcio-tools-from-source.patch",
          "patches/0012-add-linkage-to-openssl-to-grpc_unsecure.patch",
          "patches/0013-reduce-grpc-symbol-explosion-with-autogenerated-expo.patch",
          "patches/0014-update-GRPC_DLL-instances-where-necessary.patch"
        ],
        "sha256": "7bf97c11cf3808d650a3a025bbf9c5f922c844a590826285067765dfd055d228",
        "url": "https://github.com/grpc/grpc/archive/v1.74.1.tar.gz"
      },
      {
        "folder": "third_party/benchmark",
        "git_rev": "12235e24652fc7f809373e7c11a5f73c5763fc4c",
        "git_url": "https://github.com/google/benchmark.git"
      },
      {
        "folder": "third_party/envoy-api",
        "git_rev": "4de3c74cf21a9958c1cf26d8993c55c6e0d28b49",
        "git_url": "https://github.com/envoyproxy/data-plane-api.git"
      },
      {
        "folder": "third_party/googleapis",
        "git_rev": "fe8ba054ad4f7eca946c2d14a63c3f07c0b586a0",
        "git_url": "https://github.com/googleapis/googleapis.git"
      },
      {
        "folder": "third_party/googletest",
        "git_rev": "52eb8108c5bdec04579160ae17225d66034bd723",
        "git_url": "https://github.com/google/googletest.git"
      },
      {
        "folder": "third_party/protoc-gen-validate",
        "git_rev": "32c2415389a3538082507ae537e7edd9578c64ed",
        "git_url": "https://github.com/envoyproxy/protoc-gen-validate.git"
      },
      {
        "folder": "third_party/xds",
        "git_rev": "3a472e524827f72d1ad621c4983dd5af54c46776",
        "git_url": "https://github.com/cncf/xds.git"
      }
    ]
  },
  "win_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "ninja",
        "py-lief",
        "python"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "c-ares",
        "cython",
        "grpcio",
        "libabseil",
        "libgrpc",
        "libprotobuf",
        "openssl",
        "pip",
        "python",
        "re2",
        "setuptools",
        "zlib"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "grpcio",
        "libgrpc",
        "protobuf",
        "python",
        "setuptools",
        "ucrt"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "cmake",
        "cxx_compiler_stub",
        "grpcio-tools",
        "ninja",
        "pip",
        "pkg-config",
        "zlib"
      ]
    }
  }
}