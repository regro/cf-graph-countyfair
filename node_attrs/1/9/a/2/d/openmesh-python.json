{
  "archived": false,
  "branch": "main",
  "conda-forge.yml": {
    "conda_build": {
      "pkg_format": "2"
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    },
    "provider": {
      "win": "azure"
    }
  },
  "feedstock_name": "openmesh-python",
  "hash_type": "sha256",
  "linux_64_meta_yaml": {
    "about": {
      "description": "OpenMesh is a versatile halfedge-based data structure for representing\nand manipulating polygon meshes.\nThe OpenMesh Python bindings are are tightly integrated with numpy and\nare implemented using pybind11.\n",
      "dev_url": "https://www.graphics.rwth-aachen.de:9000/OpenMesh/openmesh-python",
      "doc_url": "https://openmesh-python.readthedocs.io/en/latest/",
      "home": "https://www.graphics.rwth-aachen.de:9000/OpenMesh/openmesh-python",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE",
      "summary": "OpenMesh Python Bindings"
    },
    "build": {
      "number": "6",
      "script": "PYTHON -m pip install . --no-deps -vv"
    },
    "extra": {
      "recipe-maintainers": [
        "stuarteberg",
        "mdraw"
      ]
    },
    "package": {
      "name": "openmesh-python",
      "version": "1.2.1"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "cmake",
        "make"
      ],
      "host": [
        "python",
        "pip",
        "setuptools_scm",
        "numpy",
        "pybind11"
      ],
      "run": [
        "python"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "6fd3fa41a68148e4a7523f562426aa9758bf65ccc6642abcf79c37bae9c6af3c",
      "url": "https://pypi.io/packages/source/o/openmesh/openmesh-1.2.1.tar.gz"
    },
    "test": {
      "commands": [
        "cd tests",
        "python -m unittest discover"
      ],
      "imports": [
        "openmesh"
      ],
      "source_files": [
        "tests"
      ]
    }
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "numpy",
        "pip",
        "pybind11",
        "python",
        "setuptools_scm"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "meta_yaml": {
    "about": {
      "description": "OpenMesh is a versatile halfedge-based data structure for representing\nand manipulating polygon meshes.\nThe OpenMesh Python bindings are are tightly integrated with numpy and\nare implemented using pybind11.\n",
      "dev_url": "https://www.graphics.rwth-aachen.de:9000/OpenMesh/openmesh-python",
      "doc_url": "https://openmesh-python.readthedocs.io/en/latest/",
      "home": "https://www.graphics.rwth-aachen.de:9000/OpenMesh/openmesh-python",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE",
      "summary": "OpenMesh Python Bindings"
    },
    "build": {
      "number": "6",
      "script": "PYTHON -m pip install . --no-deps -vv",
      "skip": true
    },
    "extra": {
      "recipe-maintainers": [
        "stuarteberg",
        "mdraw"
      ]
    },
    "package": {
      "name": "openmesh-python",
      "version": "1.2.1"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "cmake",
        "make",
        "ninja"
      ],
      "host": [
        "python",
        "pip",
        "setuptools_scm",
        "numpy",
        "pybind11"
      ],
      "run": [
        "python"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "6fd3fa41a68148e4a7523f562426aa9758bf65ccc6642abcf79c37bae9c6af3c",
      "url": "https://pypi.io/packages/source/o/openmesh/openmesh-1.2.1.tar.gz"
    },
    "test": {
      "commands": [
        "cd tests",
        "python -m unittest discover"
      ],
      "imports": [
        "openmesh"
      ],
      "source_files": [
        "tests"
      ]
    }
  },
  "name": "openmesh-python",
  "osx_64_meta_yaml": {
    "about": {
      "description": "OpenMesh is a versatile halfedge-based data structure for representing\nand manipulating polygon meshes.\nThe OpenMesh Python bindings are are tightly integrated with numpy and\nare implemented using pybind11.\n",
      "dev_url": "https://www.graphics.rwth-aachen.de:9000/OpenMesh/openmesh-python",
      "doc_url": "https://openmesh-python.readthedocs.io/en/latest/",
      "home": "https://www.graphics.rwth-aachen.de:9000/OpenMesh/openmesh-python",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE",
      "summary": "OpenMesh Python Bindings"
    },
    "build": {
      "number": "6",
      "script": "PYTHON -m pip install . --no-deps -vv"
    },
    "extra": {
      "recipe-maintainers": [
        "stuarteberg",
        "mdraw"
      ]
    },
    "package": {
      "name": "openmesh-python",
      "version": "1.2.1"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "cmake",
        "make"
      ],
      "host": [
        "python",
        "pip",
        "setuptools_scm",
        "numpy",
        "pybind11"
      ],
      "run": [
        "python"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "6fd3fa41a68148e4a7523f562426aa9758bf65ccc6642abcf79c37bae9c6af3c",
      "url": "https://pypi.io/packages/source/o/openmesh/openmesh-1.2.1.tar.gz"
    },
    "test": {
      "commands": [
        "cd tests",
        "python -m unittest discover"
      ],
      "imports": [
        "openmesh"
      ],
      "source_files": [
        "tests"
      ]
    }
  },
  "osx_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "numpy",
        "pip",
        "pybind11",
        "python",
        "setuptools_scm"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "outputs_names": {
    "__set__": true,
    "elements": [
      "openmesh-python"
    ]
  },
  "parsing_error": false,
  "platforms": [
    "linux_64",
    "osx_64",
    "win_64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/openmesh-python.json"
  },
  "raw_meta_yaml": "{% set name = \"openmesh-python\" %}\n{% set pypiname = \"openmesh\" %}\n{% set version = \"1.2.1\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ pypiname[0] }}/{{ pypiname }}/{{ pypiname }}-{{ version }}.tar.gz\n  sha256: 6fd3fa41a68148e4a7523f562426aa9758bf65ccc6642abcf79c37bae9c6af3c\n\nbuild:\n  skip: true  # [win and py>39]  # TODO: Fix issue with undefined ssize_t and re-enable build\n  number: 6\n  script: {{ PYTHON }} -m pip install . --no-deps -vv\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ stdlib(\"c\") }}\n    - {{ compiler('cxx') }}\n    - cmake\n    - make  # [not win]\n    - ninja  # [win]\n  host:\n    - python\n    - pip\n    - setuptools_scm\n    - numpy\n    - pybind11\n  run:\n    - python\n\ntest:\n  imports:\n    - openmesh\n  source_files:\n    - tests\n  commands:\n    - cd tests\n    - python -m unittest discover\n\nabout:\n  home: https://www.graphics.rwth-aachen.de:9000/OpenMesh/openmesh-python\n  license: BSD-3-Clause\n  license_family: BSD\n  license_file: LICENSE\n  summary: OpenMesh Python Bindings\n\n  description: |\n    OpenMesh is a versatile halfedge-based data structure for representing\n    and manipulating polygon meshes.\n    The OpenMesh Python bindings are are tightly integrated with numpy and\n    are implemented using pybind11.\n  doc_url: https://openmesh-python.readthedocs.io/en/latest/\n  dev_url: https://www.graphics.rwth-aachen.de:9000/OpenMesh/openmesh-python\n\nextra:\n  recipe-maintainers:\n    - stuarteberg\n    - mdraw\n",
  "req": {
    "__set__": true,
    "elements": [
      "c_compiler_stub",
      "c_stdlib_stub",
      "cmake",
      "cxx_compiler_stub",
      "make",
      "ninja",
      "numpy",
      "pip",
      "pybind11",
      "python",
      "setuptools_scm"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "make",
        "ninja"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "numpy",
        "pip",
        "pybind11",
        "python",
        "setuptools_scm"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "make",
        "ninja"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "numpy",
        "pip",
        "pybind11",
        "python",
        "setuptools_scm"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "url": "https://pypi.io/packages/source/o/openmesh/openmesh-1.2.1.tar.gz",
  "version": "1.2.1",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/openmesh-python.json"
  },
  "win_64_meta_yaml": {
    "about": {
      "description": "OpenMesh is a versatile halfedge-based data structure for representing\nand manipulating polygon meshes.\nThe OpenMesh Python bindings are are tightly integrated with numpy and\nare implemented using pybind11.\n",
      "dev_url": "https://www.graphics.rwth-aachen.de:9000/OpenMesh/openmesh-python",
      "doc_url": "https://openmesh-python.readthedocs.io/en/latest/",
      "home": "https://www.graphics.rwth-aachen.de:9000/OpenMesh/openmesh-python",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE",
      "summary": "OpenMesh Python Bindings"
    },
    "build": {
      "number": "6",
      "script": "PYTHON -m pip install . --no-deps -vv",
      "skip": true
    },
    "extra": {
      "recipe-maintainers": [
        "stuarteberg",
        "mdraw"
      ]
    },
    "package": {
      "name": "openmesh-python",
      "version": "1.2.1"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "cmake",
        "ninja"
      ],
      "host": [
        "python",
        "pip",
        "setuptools_scm",
        "numpy",
        "pybind11"
      ],
      "run": [
        "python"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "6fd3fa41a68148e4a7523f562426aa9758bf65ccc6642abcf79c37bae9c6af3c",
      "url": "https://pypi.io/packages/source/o/openmesh/openmesh-1.2.1.tar.gz"
    },
    "test": {
      "commands": [
        "cd tests",
        "python -m unittest discover"
      ],
      "imports": [
        "openmesh"
      ],
      "source_files": [
        "tests"
      ]
    }
  },
  "win_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "ninja"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "numpy",
        "pip",
        "pybind11",
        "python",
        "setuptools_scm"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  }
}