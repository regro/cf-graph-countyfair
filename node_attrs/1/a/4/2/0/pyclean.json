{
  "archived": false,
  "branch": "main",
  "conda-forge.yml": {
    "conda_build": {
      "error_overlinking": true
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    }
  },
  "feedstock_name": "pyclean",
  "hash_type": "sha256",
  "linux_64_meta_yaml": {
    "about": {
      "description": "Worried about `.pyc` files and `__pycache__` directories? Fear not!\nPyClean is here to help. Finally the single-command clean up for Python\nbytecode files in your favorite directories. On any platform.\n\n\n\n```shell\npyclean .\npyclean . --dry-run --verbose\npyclean --help\n```\n\n\n\nPyClean can clean up leftovers, generated data and temporary files from\npopular Python development tools in their default locations, along with\nPython bytecode. The following topics are currently covered:\n\n- Cache (general purpose folder for several tools, e.g. Python eggs,\n  legacy Pytest)\n- Coverage (coverage database, and supported file formats)\n- Packaging (build files and folders)\n- Pytest (build files and folders)\n- Ruff (ruff cache folder)\n- Jupyter (notebook checkpoints) – _optional_\n- Mypy (mypy cache folder) – _optional_\n- Tox (tox environments) – _optional_\n\n```shell\npyclean . --debris\npyclean . --debris all\npyclean . -d jupyter -n -v\n```\n\n\n\nPyClean also lets you remove free-form targets using globbing. Note that\nthis is potentially dangerous: You can delete everything anywhere in the\nfile system, including the entire project you’re working on. For this\nreason, the `--erase` option has a few artificial constraints:\n\n- It doesn’t do recursive deletion by itself, which means that you have\n  to specify the directory and its contents, separately and explicitly.\n- The above entails that you’re responsible for the deletion order,\n  i.e. removal of a directory will only work if you asked to delete all\n  files inside first.\n- You’re prompted interactively to confirm deletion, unless you specify\n  the `--yes` option, in addition.\n\n```shell\npyclean . --erase tmp/**/* tmp/\n```\n",
      "doc_url": "https://pypi.org/project/pyclean",
      "home": "https://github.com/bittner/pyclean",
      "license": "GPL-3.0-or-later",
      "license_file": "LICENSES/GPL-3.0-or-later.txt",
      "summary": "Pure Python cross-platform pyclean. Clean up your Python bytecode."
    },
    "build": {
      "entry_points": [
        "pyclean = pyclean.cli:main"
      ],
      "noarch": "python",
      "number": "0",
      "script": "PYTHON -m pip install . -vv --no-deps --no-build-isolation"
    },
    "extra": {
      "recipe-maintainers": [
        "bittner"
      ]
    },
    "package": {
      "name": "pyclean",
      "version": "3.2.0"
    },
    "requirements": {
      "host": [
        "python 3.9",
        "setuptools >=77",
        "pip"
      ],
      "run": [
        "python >=3.9"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "256cf317cc58ca64fd94694dd6dfe211366266e3095e0449baa87421d0e2ab39",
      "url": "https://pypi.org/packages/source/p/pyclean/pyclean-3.2.0.tar.gz"
    },
    "test": {
      "commands": [
        "pip check",
        "pyclean --help"
      ],
      "imports": [
        "pyclean"
      ],
      "requires": [
        "pip",
        "python 3.9"
      ]
    }
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": []
    },
    "host": {
      "__set__": true,
      "elements": [
        "pip",
        "python",
        "setuptools"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "pip",
        "python"
      ]
    }
  },
  "meta_yaml": {
    "about": {
      "description": "Worried about `.pyc` files and `__pycache__` directories? Fear not!\nPyClean is here to help. Finally the single-command clean up for Python\nbytecode files in your favorite directories. On any platform.\n\n\n\n```shell\npyclean .\npyclean . --dry-run --verbose\npyclean --help\n```\n\n\n\nPyClean can clean up leftovers, generated data and temporary files from\npopular Python development tools in their default locations, along with\nPython bytecode. The following topics are currently covered:\n\n- Cache (general purpose folder for several tools, e.g. Python eggs,\n  legacy Pytest)\n- Coverage (coverage database, and supported file formats)\n- Packaging (build files and folders)\n- Pytest (build files and folders)\n- Ruff (ruff cache folder)\n- Jupyter (notebook checkpoints) – _optional_\n- Mypy (mypy cache folder) – _optional_\n- Tox (tox environments) – _optional_\n\n```shell\npyclean . --debris\npyclean . --debris all\npyclean . -d jupyter -n -v\n```\n\n\n\nPyClean also lets you remove free-form targets using globbing. Note that\nthis is potentially dangerous: You can delete everything anywhere in the\nfile system, including the entire project you’re working on. For this\nreason, the `--erase` option has a few artificial constraints:\n\n- It doesn’t do recursive deletion by itself, which means that you have\n  to specify the directory and its contents, separately and explicitly.\n- The above entails that you’re responsible for the deletion order,\n  i.e. removal of a directory will only work if you asked to delete all\n  files inside first.\n- You’re prompted interactively to confirm deletion, unless you specify\n  the `--yes` option, in addition.\n\n```shell\npyclean . --erase tmp/**/* tmp/\n```\n",
      "doc_url": "https://pypi.org/project/pyclean",
      "home": "https://github.com/bittner/pyclean",
      "license": "GPL-3.0-or-later",
      "license_file": "LICENSES/GPL-3.0-or-later.txt",
      "summary": "Pure Python cross-platform pyclean. Clean up your Python bytecode."
    },
    "build": {
      "entry_points": [
        "pyclean = pyclean.cli:main"
      ],
      "noarch": "python",
      "number": "0",
      "script": "PYTHON -m pip install . -vv --no-deps --no-build-isolation"
    },
    "extra": {
      "recipe-maintainers": [
        "bittner"
      ]
    },
    "package": {
      "name": "pyclean",
      "version": "3.2.0"
    },
    "requirements": {
      "host": [
        "python 3.9",
        "setuptools >=77",
        "pip"
      ],
      "run": [
        "python >=3.9"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "256cf317cc58ca64fd94694dd6dfe211366266e3095e0449baa87421d0e2ab39",
      "url": "https://pypi.org/packages/source/p/pyclean/pyclean-3.2.0.tar.gz"
    },
    "test": {
      "commands": [
        "pip check",
        "pyclean --help"
      ],
      "imports": [
        "pyclean"
      ],
      "requires": [
        "pip",
        "python 3.9"
      ]
    }
  },
  "name": "pyclean",
  "outputs_names": {
    "__set__": true,
    "elements": [
      "pyclean"
    ]
  },
  "parsing_error": false,
  "platforms": [
    "linux_64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/pyclean.json"
  },
  "raw_meta_yaml": "{% set name = \"pyclean\" %}\n{% set version = \"3.2.0\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.org/packages/source/{{ name[0] }}/{{ name }}/pyclean-{{ version }}.tar.gz\n  sha256: 256cf317cc58ca64fd94694dd6dfe211366266e3095e0449baa87421d0e2ab39\n\nbuild:\n  entry_points:\n    - pyclean = pyclean.cli:main\n  noarch: python\n  script: {{ PYTHON }} -m pip install . -vv --no-deps --no-build-isolation\n  number: 0\n\nrequirements:\n  host:\n    - python {{ python_min }}\n    - setuptools >=77\n    - pip\n  run:\n    - python >={{ python_min }}\n\ntest:\n  imports:\n    - pyclean\n  commands:\n    - pip check\n    - pyclean --help\n  requires:\n    - pip\n    - python {{ python_min }}\n\nabout:\n  home: https://github.com/bittner/pyclean\n  license: GPL-3.0-or-later\n  license_file: LICENSES/GPL-3.0-or-later.txt\n  summary: Pure Python cross-platform pyclean. Clean up your Python bytecode.\n  description: |\n    Worried about `.pyc` files and `__pycache__` directories? Fear not!\n    PyClean is here to help. Finally the single-command clean up for Python\n    bytecode files in your favorite directories. On any platform.\n\n    ### Usage\n\n    ```shell\n    pyclean .\n    pyclean . --dry-run --verbose\n    pyclean --help\n    ```\n\n    ### Clean up debris\n\n    PyClean can clean up leftovers, generated data and temporary files from\n    popular Python development tools in their default locations, along with\n    Python bytecode. The following topics are currently covered:\n\n    - Cache (general purpose folder for several tools, e.g. Python eggs,\n      legacy Pytest)\n    - Coverage (coverage database, and supported file formats)\n    - Packaging (build files and folders)\n    - Pytest (build files and folders)\n    - Ruff (ruff cache folder)\n    - Jupyter (notebook checkpoints) – _optional_\n    - Mypy (mypy cache folder) – _optional_\n    - Tox (tox environments) – _optional_\n\n    ```shell\n    pyclean . --debris\n    pyclean . --debris all\n    pyclean . -d jupyter -n -v\n    ```\n\n    ### Remove arbitrary file system objects\n\n    PyClean also lets you remove free-form targets using globbing. Note that\n    this is potentially dangerous: You can delete everything anywhere in the\n    file system, including the entire project you’re working on. For this\n    reason, the `--erase` option has a few artificial constraints:\n\n    - It doesn’t do recursive deletion by itself, which means that you have\n      to specify the directory and its contents, separately and explicitly.\n    - The above entails that you’re responsible for the deletion order,\n      i.e. removal of a directory will only work if you asked to delete all\n      files inside first.\n    - You’re prompted interactively to confirm deletion, unless you specify\n      the `--yes` option, in addition.\n\n    ```shell\n    pyclean . --erase tmp/**/* tmp/\n    ```\n  doc_url: https://pypi.org/project/pyclean\n\nextra:\n  recipe-maintainers:\n    - bittner\n",
  "req": {
    "__set__": true,
    "elements": [
      "pip",
      "python",
      "setuptools"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": []
    },
    "host": {
      "__set__": true,
      "elements": [
        "pip",
        "python",
        "setuptools"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "pip",
        "python"
      ]
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": []
    },
    "host": {
      "__set__": true,
      "elements": [
        "pip",
        "python 3.9",
        "setuptools >=77"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "python >=3.9"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "pip",
        "python 3.9"
      ]
    }
  },
  "url": "https://pypi.org/packages/source/p/pyclean/pyclean-3.2.0.tar.gz",
  "version": "3.2.0",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/pyclean.json"
  }
}