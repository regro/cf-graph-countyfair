{
  "archived": false,
  "branch": "main",
  "conda-forge.yml": {
    "azure": {
      "settings_osx": {
        "pool": {
          "vmImage": "macos-14"
        }
      }
    },
    "bot": {
      "abi_migration_branches": [
        "18.x",
        "17.x"
      ]
    },
    "build_platform": {
      "osx_arm64": "osx_64"
    },
    "channel_priority": "flexible",
    "conda_build": {
      "pkg_format": "2"
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    },
    "test": "native_and_emulated"
  },
  "feedstock_name": "libcxx",
  "hash_type": "sha256",
  "linux_64_meta_yaml": {
    "about": {
      "dev_url": "https://github.com/llvm/llvm-project",
      "home": "http://libcxx.llvm.org/",
      "license": "Apache-2.0 WITH LLVM-exception",
      "license_family": "Apache",
      "license_file": "libcxx/LICENSE.TXT",
      "summary": "LLVM C++ standard library"
    },
    "build": {
      "number": "1"
    },
    "extra": {
      "feedstock-name": "libcxx",
      "recipe-maintainers": [
        "SylvainCorlay",
        "inducer",
        "jakirkham",
        "isuruf",
        "beckermr",
        "timsnyder",
        "h-vetinari"
      ]
    },
    "outputs": [
      {
        "build": {
          "run_exports": [
            "libcxx =*=debug*"
          ],
          "string": "debug_h1234567_1"
        },
        "files": [
          "include/c++",
          "share/libc++",
          "lib/libc++.modules.json"
        ],
        "name": "libcxx-devel",
        "requirements": {
          "host": [
            "libcxx"
          ],
          "run": [
            "tzdata",
            "libcxx"
          ],
          "run_constrained": null
        },
        "test": {
          "commands": [
            "test -f $PREFIX/include/c++/v1/iterator",
            "test -f $PREFIX/lib/libc++abi.so",
            "ls -lL /usr/share/zoneinfo",
            "bash compile_test.sh",
            "test -d $PREFIX/share/libc++",
            "test -f $PREFIX/lib/libc++.modules.json"
          ],
          "files": [
            "test_sources",
            "compile_test.sh"
          ],
          "requires": [
            "cxx_compiler_stub",
            "clangxx"
          ]
        }
      },
      {
        "build": {
          "ignore_run_exports_from": [
            "cxx_compiler_stub"
          ],
          "run_exports": [
            "libcxx =*=debug*"
          ],
          "string": "debug_h1234567_1"
        },
        "files": [
          "lib/libc++.so",
          "lib/libc++.so.*",
          "lib/libc++.a",
          "lib/libc++experimental.*"
        ],
        "name": "libcxx",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub"
          ],
          "host": [
            "libcxxabi"
          ],
          "run": [
            "libcxxabi"
          ],
          "run_constrained": [
            "sysroot_linux-64 >=2.28"
          ]
        },
        "test": {
          "commands": [
            "test -f $PREFIX/lib/libc++.so",
            "test -f $PREFIX/lib/libc++.a",
            "test -f $PREFIX/lib/libc++experimental.a",
            "test ! -d $PREFIX/include/c++"
          ]
        }
      },
      {
        "build": {
          "string": "debug_h1234567_1"
        },
        "files": [
          "lib/libc++abi.*"
        ],
        "name": "libcxxabi",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub"
          ],
          "run_constrained": [
            "libcxx 20.1.8.*"
          ]
        },
        "test": {
          "commands": [
            "test -f $PREFIX/lib/libc++abi.so"
          ]
        }
      },
      {
        "build": {
          "string": "h1234567_1"
        },
        "files": [
          "include/c++",
          "share/libc++",
          "lib/libc++.modules.json"
        ],
        "name": "libcxx-devel",
        "requirements": {
          "host": [
            "libcxx"
          ],
          "run": [
            "tzdata",
            "libcxx"
          ],
          "run_constrained": null
        },
        "test": {
          "commands": [
            "test -f $PREFIX/include/c++/v1/iterator",
            "test -f $PREFIX/lib/libc++abi.so",
            "ls -lL /usr/share/zoneinfo",
            "bash compile_test.sh",
            "test -d $PREFIX/share/libc++",
            "test -f $PREFIX/lib/libc++.modules.json"
          ],
          "files": [
            "test_sources",
            "compile_test.sh"
          ],
          "requires": [
            "cxx_compiler_stub",
            "clangxx"
          ]
        }
      },
      {
        "build": {
          "ignore_run_exports_from": [
            "cxx_compiler_stub"
          ],
          "string": "h1234567_1"
        },
        "files": [
          "lib/libc++.so",
          "lib/libc++.so.*",
          "lib/libc++.a",
          "lib/libc++experimental.*"
        ],
        "name": "libcxx",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub"
          ],
          "host": [
            "libcxxabi"
          ],
          "run": [
            "libcxxabi"
          ],
          "run_constrained": [
            "sysroot_linux-64 >=2.28"
          ]
        },
        "test": {
          "commands": [
            "test -f $PREFIX/lib/libc++.so",
            "test -f $PREFIX/lib/libc++.a",
            "test -f $PREFIX/lib/libc++experimental.a",
            "test ! -d $PREFIX/include/c++"
          ]
        }
      },
      {
        "build": {
          "string": "h1234567_1"
        },
        "files": [
          "lib/libc++abi.*"
        ],
        "name": "libcxxabi",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub"
          ],
          "run_constrained": [
            "libcxx 20.1.8.*"
          ]
        },
        "test": {
          "commands": [
            "test -f $PREFIX/lib/libc++abi.so"
          ]
        }
      }
    ],
    "package": {
      "name": "libcxx_and_libcxxabi",
      "version": "20.1.8"
    },
    "requirements": {
      "build": [
        "cmake",
        "ninja",
        "cxx_compiler_stub",
        "c_compiler_stub",
        "c_stdlib_stub",
        "python >3"
      ]
    },
    "schema_version": 0,
    "source": [
      {
        "patches": [
          "patches/0002-custom-error-message-for-old-sdk.patch",
          "patches/0003-disable-_LIBCPP_AVAILABILITY_HAS_INIT_PRIMARY_EXCEPT.patch",
          "patches/0004-Work-around-stray-nostdlib-flags-causing-errors-with.patch",
          "patches/0005-patch-__libcpp_tzdb_directory-to-allow-use-on-osx.patch"
        ],
        "sha256": "a6cbad9b2243b17e87795817cfff2107d113543a12486586f8a055a2bb044963",
        "url": "https://github.com/llvm/llvm-project/archive/refs/tags/llvmorg-20.1.8.tar.gz"
      },
      {
        "patches": [
          "patches/0002-custom-error-message-for-old-sdk.patch",
          "patches/0003-disable-_LIBCPP_AVAILABILITY_HAS_INIT_PRIMARY_EXCEPT.patch",
          "patches/0004-Work-around-stray-nostdlib-flags-causing-errors-with.patch",
          "patches/0005-patch-__libcpp_tzdb_directory-to-allow-use-on-osx.patch"
        ],
        "sha256": "a6cbad9b2243b17e87795817cfff2107d113543a12486586f8a055a2bb044963",
        "url": "https://github.com/llvm/llvm-project/archive/refs/tags/llvmorg-20.1.8.tar.gz"
      }
    ]
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "ninja",
        "python"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "libcxx",
        "libcxxabi"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "libcxx",
        "libcxxabi",
        "tzdata"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "clangxx",
        "cxx_compiler_stub"
      ]
    }
  },
  "meta_yaml": {
    "about": {
      "dev_url": "https://github.com/llvm/llvm-project",
      "home": "http://libcxx.llvm.org/",
      "license": "Apache-2.0 WITH LLVM-exception",
      "license_family": "Apache",
      "license_file": "libcxx/LICENSE.TXT",
      "summary": "LLVM C++ standard library"
    },
    "build": {
      "number": "1"
    },
    "extra": {
      "feedstock-name": "libcxx",
      "recipe-maintainers": [
        "SylvainCorlay",
        "inducer",
        "jakirkham",
        "isuruf",
        "beckermr",
        "timsnyder",
        "h-vetinari"
      ]
    },
    "outputs": [
      {
        "build": {
          "run_exports": [
            "libcxx =*=debug*"
          ],
          "string": "debug_h1234567_1"
        },
        "files": [
          "include/c++",
          "share/libc++",
          "lib/libc++.modules.json"
        ],
        "name": "libcxx-devel",
        "requirements": {
          "host": [
            "libcxx"
          ],
          "run": [
            "tzdata",
            "libcxx"
          ],
          "run_constrained": null
        },
        "test": {
          "commands": [
            "test -f $PREFIX/include/c++/v1/iterator",
            "test -f $PREFIX/lib/libc++abi.so",
            "ls -lL /usr/share/zoneinfo",
            "bash compile_test.sh",
            "test -d $PREFIX/share/libc++",
            "test -f $PREFIX/lib/libc++.modules.json"
          ],
          "files": [
            "test_sources",
            "compile_test.sh"
          ],
          "requires": [
            "cxx_compiler_stub",
            "clangxx"
          ]
        }
      },
      {
        "build": {
          "ignore_run_exports_from": [
            "cxx_compiler_stub"
          ],
          "run_exports": [
            "libcxx =*=debug*"
          ],
          "string": "debug_h1234567_1"
        },
        "files": [
          "lib/libc++.so",
          "lib/libc++.so.*",
          "lib/libc++.a",
          "lib/libc++experimental.*"
        ],
        "name": "libcxx",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub"
          ],
          "host": [
            "libcxxabi"
          ],
          "run": [
            "libcxxabi"
          ],
          "run_constrained": [
            "sysroot_linux-64 >=2.28"
          ]
        },
        "test": {
          "commands": [
            "test -f $PREFIX/lib/libc++.so",
            "test -f $PREFIX/lib/libc++.a",
            "test -f $PREFIX/lib/libc++experimental.a",
            "test ! -d $PREFIX/include/c++"
          ]
        }
      },
      {
        "build": {
          "string": "debug_h1234567_1"
        },
        "files": [
          "lib/libc++abi.*"
        ],
        "name": "libcxxabi",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub"
          ],
          "run_constrained": [
            "libcxx 20.1.8.*"
          ]
        },
        "test": {
          "commands": [
            "test -f $PREFIX/lib/libc++abi.so"
          ]
        }
      },
      {
        "build": {
          "string": "h1234567_1"
        },
        "files": [
          "include/c++",
          "share/libc++",
          "lib/libc++.modules.json"
        ],
        "name": "libcxx-devel",
        "requirements": {
          "host": [
            "libcxx"
          ],
          "run": [
            "tzdata",
            "libcxx"
          ],
          "run_constrained": null
        },
        "test": {
          "commands": [
            "test -f $PREFIX/include/c++/v1/iterator",
            "test -f $PREFIX/lib/libc++abi.so",
            "ls -lL /usr/share/zoneinfo",
            "bash compile_test.sh",
            "test -d $PREFIX/share/libc++",
            "test -f $PREFIX/lib/libc++.modules.json"
          ],
          "files": [
            "test_sources",
            "compile_test.sh"
          ],
          "requires": [
            "cxx_compiler_stub",
            "clangxx"
          ]
        }
      },
      {
        "build": {
          "ignore_run_exports_from": [
            "cxx_compiler_stub"
          ],
          "string": "h1234567_1"
        },
        "files": [
          "lib/libc++.so",
          "lib/libc++.so.*",
          "lib/libc++.a",
          "lib/libc++experimental.*"
        ],
        "name": "libcxx",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub"
          ],
          "host": [
            "libcxxabi"
          ],
          "run": [
            "libcxxabi"
          ],
          "run_constrained": [
            "sysroot_linux-64 >=2.28"
          ]
        },
        "test": {
          "commands": [
            "test -f $PREFIX/lib/libc++.so",
            "test -f $PREFIX/lib/libc++.a",
            "test -f $PREFIX/lib/libc++experimental.a",
            "test ! -d $PREFIX/include/c++"
          ]
        }
      },
      {
        "build": {
          "string": "h1234567_1"
        },
        "files": [
          "lib/libc++abi.*"
        ],
        "name": "libcxxabi",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub"
          ],
          "run_constrained": [
            "libcxx 20.1.8.*"
          ]
        },
        "test": {
          "commands": [
            "test -f $PREFIX/lib/libc++abi.so"
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "libcxx =*=debug*"
          ],
          "string": "debug_h1234567_1"
        },
        "files": [
          "include/c++",
          "share/libc++",
          "lib/libc++.modules.json"
        ],
        "name": "libcxx-devel",
        "requirements": {
          "host": [
            "libcxx"
          ],
          "run": [
            "libcxx"
          ],
          "run_constrained": null
        },
        "test": {
          "commands": [
            "echo 0",
            "echo post-12",
            "test -f $PREFIX/include/c++/v1/iterator",
            "if [ 0 -ne $(cat ${PREFIX}/include/c++/v1/__configuration/availability.h | grep \"availability(macos\" | grep -vE \"(conda-forge|10.9|10.1[0-3])\" | wc -l) ]; then exit 1; fi",
            "if [ -f $PREFIX/lib/libc++abi.dylib ]; then exit 1; fi",
            "ls -lL /usr/share/zoneinfo",
            "if [ 0 -ne $(ls -lL /usr/share/zoneinfo | grep leap-seconds.list | wc -l) ]; then exit 1; fi",
            "bash compile_test.sh",
            "test -d $PREFIX/share/libc++",
            "test -f $PREFIX/lib/libc++.modules.json"
          ],
          "downstreams": [
            "python-symengine",
            "openturns"
          ],
          "files": [
            "test_sources",
            "compile_test.sh"
          ],
          "requires": [
            "clang",
            "ld64",
            "cctools",
            "llvm-tools"
          ]
        }
      },
      {
        "build": {
          "ignore_run_exports_from": [
            "cxx_compiler_stub"
          ],
          "run_exports": [
            "libcxx =*=debug*"
          ],
          "string": "debug_h1234567_1"
        },
        "files": [
          "lib/libc++.dylib",
          "lib/libc++.*.dylib",
          "lib/libc++.a",
          "lib/libc++experimental.*"
        ],
        "name": "libcxx",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub"
          ],
          "host": [],
          "run": [],
          "run_constrained": null
        },
        "test": {
          "commands": [
            "test -f $PREFIX/lib/libc++.dylib",
            "test -f $PREFIX/lib/libc++.a",
            "test -f $PREFIX/lib/libc++experimental.a",
            "test ! -d $PREFIX/include/c++"
          ],
          "downstreams": [
            "libcxx-testing 0.20",
            "libcxx-testing 0.19",
            "libcxx-testing 0.18",
            "libcxx-testing 0.17",
            "libcxx-testing 0.16"
          ]
        }
      },
      {
        "build": {
          "skip": true,
          "string": "debug_h1234567_1"
        },
        "files": [
          "lib/libc++abi.*"
        ],
        "name": "libcxxabi",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub"
          ],
          "run_constrained": [
            "libcxx 20.1.8.*"
          ]
        },
        "test": {
          "commands": null
        }
      },
      {
        "build": {
          "string": "h1234567_1"
        },
        "files": [
          "include/c++",
          "share/libc++",
          "lib/libc++.modules.json"
        ],
        "name": "libcxx-devel",
        "requirements": {
          "host": [
            "libcxx"
          ],
          "run": [
            "libcxx"
          ],
          "run_constrained": [
            "__osx <12"
          ]
        }
      },
      {
        "build": {
          "ignore_run_exports_from": [
            "cxx_compiler_stub"
          ],
          "string": "h1234567_1"
        },
        "files": [
          "lib/libc++.dylib",
          "lib/libc++.*.dylib",
          "lib/libc++.a",
          "lib/libc++experimental.*"
        ],
        "name": "libcxx",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub"
          ],
          "host": [],
          "run": [],
          "run_constrained": null
        },
        "test": {
          "commands": [
            "test -f $PREFIX/lib/libc++.dylib",
            "test -f $PREFIX/lib/libc++.a",
            "test -f $PREFIX/lib/libc++experimental.a",
            "test ! -d $PREFIX/include/c++"
          ]
        }
      },
      {
        "build": {
          "skip": true,
          "string": "h1234567_1"
        },
        "files": [
          "lib/libc++abi.*"
        ],
        "name": "libcxxabi",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub"
          ],
          "run_constrained": [
            "libcxx 20.1.8.*"
          ]
        },
        "test": {
          "commands": null
        }
      },
      {
        "build": {
          "string": "h1234567_1"
        },
        "files": [
          "include/c++",
          "share/libc++",
          "lib/libc++.modules.json"
        ],
        "name": "libcxx-devel",
        "requirements": {
          "host": [
            "libcxx"
          ],
          "run": [
            "libcxx"
          ],
          "run_constrained": null
        },
        "test": {
          "commands": [
            "echo 0",
            "echo post-12",
            "test -f $PREFIX/include/c++/v1/iterator",
            "if [ 0 -ne $(cat ${PREFIX}/include/c++/v1/__configuration/availability.h | grep \"availability(macos\" | grep -vE \"(conda-forge|10.9|10.1[0-3])\" | wc -l) ]; then exit 1; fi",
            "if [ -f $PREFIX/lib/libc++abi.dylib ]; then exit 1; fi",
            "ls -lL /usr/share/zoneinfo",
            "if [ 0 -ne $(ls -lL /usr/share/zoneinfo | grep leap-seconds.list | wc -l) ]; then exit 1; fi",
            "bash compile_test.sh",
            "test -d $PREFIX/share/libc++",
            "test -f $PREFIX/lib/libc++.modules.json"
          ],
          "downstreams": [
            "python-symengine",
            "openturns"
          ],
          "files": [
            "test_sources",
            "compile_test.sh"
          ],
          "requires": [
            "clang",
            "ld64",
            "cctools",
            "llvm-tools"
          ]
        }
      },
      {
        "build": {
          "ignore_run_exports_from": [
            "cxx_compiler_stub"
          ],
          "string": "h1234567_1"
        },
        "files": [
          "lib/libc++.dylib",
          "lib/libc++.*.dylib",
          "lib/libc++.a",
          "lib/libc++experimental.*"
        ],
        "name": "libcxx",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub"
          ],
          "host": [],
          "run": [],
          "run_constrained": null
        },
        "test": {
          "commands": [
            "test -f $PREFIX/lib/libc++.dylib",
            "test -f $PREFIX/lib/libc++.a",
            "test -f $PREFIX/lib/libc++experimental.a",
            "test ! -d $PREFIX/include/c++"
          ],
          "downstreams": [
            "libcxx-testing 0.20",
            "libcxx-testing 0.19",
            "libcxx-testing 0.18",
            "libcxx-testing 0.17",
            "libcxx-testing 0.16"
          ]
        }
      },
      {
        "build": {
          "skip": true,
          "string": "h1234567_1"
        },
        "files": [
          "lib/libc++abi.*"
        ],
        "name": "libcxxabi",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub"
          ],
          "run_constrained": [
            "libcxx 20.1.8.*"
          ]
        },
        "test": {
          "commands": null
        }
      },
      {
        "build": {
          "run_exports": [
            "libcxx =*=debug*"
          ],
          "string": "debug_h1234567_1"
        },
        "files": [
          "include/c++",
          "share/libc++",
          "lib/libc++.modules.json"
        ],
        "name": "libcxx-devel",
        "requirements": {
          "host": [
            "libcxx"
          ],
          "run": [
            "libcxx"
          ],
          "run_constrained": null
        },
        "test": {
          "commands": [
            "echo 1",
            "echo post-12",
            "test -f $PREFIX/include/c++/v1/iterator",
            "if [ 0 -ne $(cat ${PREFIX}/include/c++/v1/__configuration/availability.h | grep \"availability(macos\" | grep -vE \"(conda-forge|10.9|10.1[0-3])\" | wc -l) ]; then exit 1; fi",
            "if [ -f $PREFIX/lib/libc++abi.dylib ]; then exit 1; fi",
            "ls -lL /usr/share/zoneinfo",
            "if [ 0 -ne $(ls -lL /usr/share/zoneinfo | grep leap-seconds.list | wc -l) ]; then exit 1; fi",
            "bash compile_test.sh",
            "test -d $PREFIX/share/libc++",
            "test -f $PREFIX/lib/libc++.modules.json"
          ],
          "downstreams": [
            "python-symengine",
            "openturns"
          ],
          "files": [
            "test_sources",
            "compile_test.sh"
          ],
          "requires": [
            "clang",
            "ld64",
            "cctools",
            "llvm-tools"
          ]
        }
      },
      {
        "build": {
          "ignore_run_exports_from": [
            "cxx_compiler_stub"
          ],
          "run_exports": [
            "libcxx =*=debug*"
          ],
          "string": "debug_h1234567_1"
        },
        "files": [
          "lib/libc++.dylib",
          "lib/libc++.*.dylib",
          "lib/libc++.a",
          "lib/libc++experimental.*"
        ],
        "name": "libcxx",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub"
          ],
          "host": [],
          "run": [],
          "run_constrained": null
        },
        "test": {
          "commands": [
            "test -f $PREFIX/lib/libc++.dylib",
            "test -f $PREFIX/lib/libc++.a",
            "test -f $PREFIX/lib/libc++experimental.a",
            "test ! -d $PREFIX/include/c++"
          ],
          "downstreams": [
            "libcxx-testing 0.20",
            "libcxx-testing 0.19",
            "libcxx-testing 0.18",
            "libcxx-testing 0.17",
            "libcxx-testing 0.16"
          ]
        }
      },
      {
        "build": {
          "skip": true,
          "string": "debug_h1234567_1"
        },
        "files": [
          "lib/libc++abi.*"
        ],
        "name": "libcxxabi",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub"
          ],
          "run_constrained": [
            "libcxx 20.1.8.*"
          ]
        },
        "test": {
          "commands": null
        }
      },
      {
        "build": {
          "string": "h1234567_1"
        },
        "files": [
          "include/c++",
          "share/libc++",
          "lib/libc++.modules.json"
        ],
        "name": "libcxx-devel",
        "requirements": {
          "host": [
            "libcxx"
          ],
          "run": [
            "libcxx"
          ],
          "run_constrained": [
            "__osx <12"
          ]
        }
      },
      {
        "build": {
          "ignore_run_exports_from": [
            "cxx_compiler_stub"
          ],
          "string": "h1234567_1"
        },
        "files": [
          "lib/libc++.dylib",
          "lib/libc++.*.dylib",
          "lib/libc++.a",
          "lib/libc++experimental.*"
        ],
        "name": "libcxx",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub"
          ],
          "host": [],
          "run": [],
          "run_constrained": null
        },
        "test": {
          "commands": [
            "test -f $PREFIX/lib/libc++.dylib",
            "test -f $PREFIX/lib/libc++.a",
            "test -f $PREFIX/lib/libc++experimental.a",
            "test ! -d $PREFIX/include/c++"
          ]
        }
      },
      {
        "build": {
          "skip": true,
          "string": "h1234567_1"
        },
        "files": [
          "lib/libc++abi.*"
        ],
        "name": "libcxxabi",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub"
          ],
          "run_constrained": [
            "libcxx 20.1.8.*"
          ]
        },
        "test": {
          "commands": null
        }
      },
      {
        "build": {
          "string": "h1234567_1"
        },
        "files": [
          "include/c++",
          "share/libc++",
          "lib/libc++.modules.json"
        ],
        "name": "libcxx-devel",
        "requirements": {
          "host": [
            "libcxx"
          ],
          "run": [
            "libcxx"
          ],
          "run_constrained": null
        },
        "test": {
          "commands": [
            "echo 1",
            "echo post-12",
            "test -f $PREFIX/include/c++/v1/iterator",
            "if [ 0 -ne $(cat ${PREFIX}/include/c++/v1/__configuration/availability.h | grep \"availability(macos\" | grep -vE \"(conda-forge|10.9|10.1[0-3])\" | wc -l) ]; then exit 1; fi",
            "if [ -f $PREFIX/lib/libc++abi.dylib ]; then exit 1; fi",
            "ls -lL /usr/share/zoneinfo",
            "if [ 0 -ne $(ls -lL /usr/share/zoneinfo | grep leap-seconds.list | wc -l) ]; then exit 1; fi",
            "bash compile_test.sh",
            "test -d $PREFIX/share/libc++",
            "test -f $PREFIX/lib/libc++.modules.json"
          ],
          "downstreams": [
            "python-symengine",
            "openturns"
          ],
          "files": [
            "test_sources",
            "compile_test.sh"
          ],
          "requires": [
            "clang",
            "ld64",
            "cctools",
            "llvm-tools"
          ]
        }
      },
      {
        "build": {
          "ignore_run_exports_from": [
            "cxx_compiler_stub"
          ],
          "string": "h1234567_1"
        },
        "files": [
          "lib/libc++.dylib",
          "lib/libc++.*.dylib",
          "lib/libc++.a",
          "lib/libc++experimental.*"
        ],
        "name": "libcxx",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub"
          ],
          "host": [],
          "run": [],
          "run_constrained": null
        },
        "test": {
          "commands": [
            "test -f $PREFIX/lib/libc++.dylib",
            "test -f $PREFIX/lib/libc++.a",
            "test -f $PREFIX/lib/libc++experimental.a",
            "test ! -d $PREFIX/include/c++"
          ],
          "downstreams": [
            "libcxx-testing 0.20",
            "libcxx-testing 0.19",
            "libcxx-testing 0.18",
            "libcxx-testing 0.17",
            "libcxx-testing 0.16"
          ]
        }
      },
      {
        "build": {
          "skip": true,
          "string": "h1234567_1"
        },
        "files": [
          "lib/libc++abi.*"
        ],
        "name": "libcxxabi",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub"
          ],
          "run_constrained": [
            "libcxx 20.1.8.*"
          ]
        },
        "test": {
          "commands": null
        }
      }
    ],
    "package": {
      "name": "libcxx_and_libcxxabi",
      "version": "20.1.8"
    },
    "requirements": {
      "build": [
        "cmake",
        "ninja",
        "cxx_compiler_stub",
        "c_compiler_stub",
        "c_stdlib_stub",
        "python >3"
      ]
    },
    "schema_version": 0,
    "source": [
      {
        "patches": [
          "patches/0002-custom-error-message-for-old-sdk.patch",
          "patches/0003-disable-_LIBCPP_AVAILABILITY_HAS_INIT_PRIMARY_EXCEPT.patch",
          "patches/0004-Work-around-stray-nostdlib-flags-causing-errors-with.patch",
          "patches/0005-patch-__libcpp_tzdb_directory-to-allow-use-on-osx.patch"
        ],
        "sha256": "a6cbad9b2243b17e87795817cfff2107d113543a12486586f8a055a2bb044963",
        "url": "https://github.com/llvm/llvm-project/archive/refs/tags/llvmorg-20.1.8.tar.gz"
      },
      {
        "patches": [
          "patches/0002-custom-error-message-for-old-sdk.patch",
          "patches/0003-disable-_LIBCPP_AVAILABILITY_HAS_INIT_PRIMARY_EXCEPT.patch",
          "patches/0004-Work-around-stray-nostdlib-flags-causing-errors-with.patch",
          "patches/0005-patch-__libcpp_tzdb_directory-to-allow-use-on-osx.patch"
        ],
        "sha256": "a6cbad9b2243b17e87795817cfff2107d113543a12486586f8a055a2bb044963",
        "url": "https://github.com/llvm/llvm-project/archive/refs/tags/llvmorg-20.1.8.tar.gz"
      },
      {
        "patches": [
          "patches/0002-custom-error-message-for-old-sdk.patch",
          "patches/0003-disable-_LIBCPP_AVAILABILITY_HAS_INIT_PRIMARY_EXCEPT.patch",
          "patches/0004-Work-around-stray-nostdlib-flags-causing-errors-with.patch",
          "patches/0005-patch-__libcpp_tzdb_directory-to-allow-use-on-osx.patch"
        ],
        "sha256": "a6cbad9b2243b17e87795817cfff2107d113543a12486586f8a055a2bb044963",
        "url": "https://github.com/llvm/llvm-project/archive/refs/tags/llvmorg-20.1.8.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Fix-ABI-compatibility-with-system.patch",
          "patches/0002-custom-error-message-for-old-sdk.patch",
          "patches/0003-disable-_LIBCPP_AVAILABILITY_HAS_INIT_PRIMARY_EXCEPT.patch",
          "patches/0004-Work-around-stray-nostdlib-flags-causing-errors-with.patch",
          "patches/0005-patch-__libcpp_tzdb_directory-to-allow-use-on-osx.patch"
        ],
        "sha256": "a6cbad9b2243b17e87795817cfff2107d113543a12486586f8a055a2bb044963",
        "url": "https://github.com/llvm/llvm-project/archive/refs/tags/llvmorg-20.1.8.tar.gz"
      },
      {
        "patches": [
          "patches/0002-custom-error-message-for-old-sdk.patch",
          "patches/0003-disable-_LIBCPP_AVAILABILITY_HAS_INIT_PRIMARY_EXCEPT.patch",
          "patches/0004-Work-around-stray-nostdlib-flags-causing-errors-with.patch",
          "patches/0005-patch-__libcpp_tzdb_directory-to-allow-use-on-osx.patch"
        ],
        "sha256": "a6cbad9b2243b17e87795817cfff2107d113543a12486586f8a055a2bb044963",
        "url": "https://github.com/llvm/llvm-project/archive/refs/tags/llvmorg-20.1.8.tar.gz"
      },
      {
        "patches": [
          "patches/0002-custom-error-message-for-old-sdk.patch",
          "patches/0003-disable-_LIBCPP_AVAILABILITY_HAS_INIT_PRIMARY_EXCEPT.patch",
          "patches/0004-Work-around-stray-nostdlib-flags-causing-errors-with.patch",
          "patches/0005-patch-__libcpp_tzdb_directory-to-allow-use-on-osx.patch"
        ],
        "sha256": "a6cbad9b2243b17e87795817cfff2107d113543a12486586f8a055a2bb044963",
        "url": "https://github.com/llvm/llvm-project/archive/refs/tags/llvmorg-20.1.8.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Fix-ABI-compatibility-with-system.patch",
          "patches/0002-custom-error-message-for-old-sdk.patch",
          "patches/0003-disable-_LIBCPP_AVAILABILITY_HAS_INIT_PRIMARY_EXCEPT.patch",
          "patches/0004-Work-around-stray-nostdlib-flags-causing-errors-with.patch",
          "patches/0005-patch-__libcpp_tzdb_directory-to-allow-use-on-osx.patch"
        ],
        "sha256": "a6cbad9b2243b17e87795817cfff2107d113543a12486586f8a055a2bb044963",
        "url": "https://github.com/llvm/llvm-project/archive/refs/tags/llvmorg-20.1.8.tar.gz"
      },
      {
        "patches": [
          "patches/0002-custom-error-message-for-old-sdk.patch",
          "patches/0003-disable-_LIBCPP_AVAILABILITY_HAS_INIT_PRIMARY_EXCEPT.patch",
          "patches/0004-Work-around-stray-nostdlib-flags-causing-errors-with.patch",
          "patches/0005-patch-__libcpp_tzdb_directory-to-allow-use-on-osx.patch"
        ],
        "sha256": "a6cbad9b2243b17e87795817cfff2107d113543a12486586f8a055a2bb044963",
        "url": "https://github.com/llvm/llvm-project/archive/refs/tags/llvmorg-20.1.8.tar.gz"
      }
    ]
  },
  "name": "libcxx_and_libcxxabi",
  "osx_64_meta_yaml": {
    "about": {
      "dev_url": "https://github.com/llvm/llvm-project",
      "home": "http://libcxx.llvm.org/",
      "license": "Apache-2.0 WITH LLVM-exception",
      "license_family": "Apache",
      "license_file": "libcxx/LICENSE.TXT",
      "summary": "LLVM C++ standard library"
    },
    "build": {
      "number": "1"
    },
    "extra": {
      "feedstock-name": "libcxx",
      "recipe-maintainers": [
        "SylvainCorlay",
        "inducer",
        "jakirkham",
        "isuruf",
        "beckermr",
        "timsnyder",
        "h-vetinari"
      ]
    },
    "outputs": [
      {
        "build": {
          "run_exports": [
            "libcxx =*=debug*"
          ],
          "string": "debug_h1234567_1"
        },
        "files": [
          "include/c++",
          "share/libc++",
          "lib/libc++.modules.json"
        ],
        "name": "libcxx-devel",
        "requirements": {
          "host": [
            "libcxx"
          ],
          "run": [
            "libcxx"
          ],
          "run_constrained": null
        },
        "test": {
          "commands": [
            "echo 0",
            "echo post-12",
            "test -f $PREFIX/include/c++/v1/iterator",
            "if [ 0 -ne $(cat ${PREFIX}/include/c++/v1/__configuration/availability.h | grep \"availability(macos\" | grep -vE \"(conda-forge|10.9|10.1[0-3])\" | wc -l) ]; then exit 1; fi",
            "if [ -f $PREFIX/lib/libc++abi.dylib ]; then exit 1; fi",
            "ls -lL /usr/share/zoneinfo",
            "if [ 0 -ne $(ls -lL /usr/share/zoneinfo | grep leap-seconds.list | wc -l) ]; then exit 1; fi",
            "bash compile_test.sh",
            "test -d $PREFIX/share/libc++",
            "test -f $PREFIX/lib/libc++.modules.json"
          ],
          "downstreams": [
            "python-symengine",
            "openturns"
          ],
          "files": [
            "test_sources",
            "compile_test.sh"
          ],
          "requires": [
            "clang",
            "ld64",
            "cctools",
            "llvm-tools"
          ]
        }
      },
      {
        "build": {
          "ignore_run_exports_from": [
            "cxx_compiler_stub"
          ],
          "run_exports": [
            "libcxx =*=debug*"
          ],
          "string": "debug_h1234567_1"
        },
        "files": [
          "lib/libc++.dylib",
          "lib/libc++.*.dylib",
          "lib/libc++.a",
          "lib/libc++experimental.*"
        ],
        "name": "libcxx",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub"
          ],
          "host": [],
          "run": [],
          "run_constrained": null
        },
        "test": {
          "commands": [
            "test -f $PREFIX/lib/libc++.dylib",
            "test -f $PREFIX/lib/libc++.a",
            "test -f $PREFIX/lib/libc++experimental.a",
            "test ! -d $PREFIX/include/c++"
          ],
          "downstreams": [
            "libcxx-testing 0.20",
            "libcxx-testing 0.19",
            "libcxx-testing 0.18",
            "libcxx-testing 0.17",
            "libcxx-testing 0.16"
          ]
        }
      },
      {
        "build": {
          "skip": true,
          "string": "debug_h1234567_1"
        },
        "files": [
          "lib/libc++abi.*"
        ],
        "name": "libcxxabi",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub"
          ],
          "run_constrained": [
            "libcxx 20.1.8.*"
          ]
        },
        "test": {
          "commands": null
        }
      },
      {
        "build": {
          "string": "h1234567_1"
        },
        "files": [
          "include/c++",
          "share/libc++",
          "lib/libc++.modules.json"
        ],
        "name": "libcxx-devel",
        "requirements": {
          "host": [
            "libcxx"
          ],
          "run": [
            "libcxx"
          ],
          "run_constrained": [
            "__osx <12"
          ]
        }
      },
      {
        "build": {
          "ignore_run_exports_from": [
            "cxx_compiler_stub"
          ],
          "string": "h1234567_1"
        },
        "files": [
          "lib/libc++.dylib",
          "lib/libc++.*.dylib",
          "lib/libc++.a",
          "lib/libc++experimental.*"
        ],
        "name": "libcxx",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub"
          ],
          "host": [],
          "run": [],
          "run_constrained": null
        },
        "test": {
          "commands": [
            "test -f $PREFIX/lib/libc++.dylib",
            "test -f $PREFIX/lib/libc++.a",
            "test -f $PREFIX/lib/libc++experimental.a",
            "test ! -d $PREFIX/include/c++"
          ]
        }
      },
      {
        "build": {
          "skip": true,
          "string": "h1234567_1"
        },
        "files": [
          "lib/libc++abi.*"
        ],
        "name": "libcxxabi",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub"
          ],
          "run_constrained": [
            "libcxx 20.1.8.*"
          ]
        },
        "test": {
          "commands": null
        }
      },
      {
        "build": {
          "string": "h1234567_1"
        },
        "files": [
          "include/c++",
          "share/libc++",
          "lib/libc++.modules.json"
        ],
        "name": "libcxx-devel",
        "requirements": {
          "host": [
            "libcxx"
          ],
          "run": [
            "libcxx"
          ],
          "run_constrained": null
        },
        "test": {
          "commands": [
            "echo 0",
            "echo post-12",
            "test -f $PREFIX/include/c++/v1/iterator",
            "if [ 0 -ne $(cat ${PREFIX}/include/c++/v1/__configuration/availability.h | grep \"availability(macos\" | grep -vE \"(conda-forge|10.9|10.1[0-3])\" | wc -l) ]; then exit 1; fi",
            "if [ -f $PREFIX/lib/libc++abi.dylib ]; then exit 1; fi",
            "ls -lL /usr/share/zoneinfo",
            "if [ 0 -ne $(ls -lL /usr/share/zoneinfo | grep leap-seconds.list | wc -l) ]; then exit 1; fi",
            "bash compile_test.sh",
            "test -d $PREFIX/share/libc++",
            "test -f $PREFIX/lib/libc++.modules.json"
          ],
          "downstreams": [
            "python-symengine",
            "openturns"
          ],
          "files": [
            "test_sources",
            "compile_test.sh"
          ],
          "requires": [
            "clang",
            "ld64",
            "cctools",
            "llvm-tools"
          ]
        }
      },
      {
        "build": {
          "ignore_run_exports_from": [
            "cxx_compiler_stub"
          ],
          "string": "h1234567_1"
        },
        "files": [
          "lib/libc++.dylib",
          "lib/libc++.*.dylib",
          "lib/libc++.a",
          "lib/libc++experimental.*"
        ],
        "name": "libcxx",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub"
          ],
          "host": [],
          "run": [],
          "run_constrained": null
        },
        "test": {
          "commands": [
            "test -f $PREFIX/lib/libc++.dylib",
            "test -f $PREFIX/lib/libc++.a",
            "test -f $PREFIX/lib/libc++experimental.a",
            "test ! -d $PREFIX/include/c++"
          ],
          "downstreams": [
            "libcxx-testing 0.20",
            "libcxx-testing 0.19",
            "libcxx-testing 0.18",
            "libcxx-testing 0.17",
            "libcxx-testing 0.16"
          ]
        }
      },
      {
        "build": {
          "skip": true,
          "string": "h1234567_1"
        },
        "files": [
          "lib/libc++abi.*"
        ],
        "name": "libcxxabi",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub"
          ],
          "run_constrained": [
            "libcxx 20.1.8.*"
          ]
        },
        "test": {
          "commands": null
        }
      }
    ],
    "package": {
      "name": "libcxx_and_libcxxabi",
      "version": "20.1.8"
    },
    "requirements": {
      "build": [
        "cmake",
        "ninja",
        "cxx_compiler_stub",
        "c_compiler_stub",
        "c_stdlib_stub"
      ]
    },
    "schema_version": 0,
    "source": [
      {
        "patches": [
          "patches/0002-custom-error-message-for-old-sdk.patch",
          "patches/0003-disable-_LIBCPP_AVAILABILITY_HAS_INIT_PRIMARY_EXCEPT.patch",
          "patches/0004-Work-around-stray-nostdlib-flags-causing-errors-with.patch",
          "patches/0005-patch-__libcpp_tzdb_directory-to-allow-use-on-osx.patch"
        ],
        "sha256": "a6cbad9b2243b17e87795817cfff2107d113543a12486586f8a055a2bb044963",
        "url": "https://github.com/llvm/llvm-project/archive/refs/tags/llvmorg-20.1.8.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Fix-ABI-compatibility-with-system.patch",
          "patches/0002-custom-error-message-for-old-sdk.patch",
          "patches/0003-disable-_LIBCPP_AVAILABILITY_HAS_INIT_PRIMARY_EXCEPT.patch",
          "patches/0004-Work-around-stray-nostdlib-flags-causing-errors-with.patch",
          "patches/0005-patch-__libcpp_tzdb_directory-to-allow-use-on-osx.patch"
        ],
        "sha256": "a6cbad9b2243b17e87795817cfff2107d113543a12486586f8a055a2bb044963",
        "url": "https://github.com/llvm/llvm-project/archive/refs/tags/llvmorg-20.1.8.tar.gz"
      },
      {
        "patches": [
          "patches/0002-custom-error-message-for-old-sdk.patch",
          "patches/0003-disable-_LIBCPP_AVAILABILITY_HAS_INIT_PRIMARY_EXCEPT.patch",
          "patches/0004-Work-around-stray-nostdlib-flags-causing-errors-with.patch",
          "patches/0005-patch-__libcpp_tzdb_directory-to-allow-use-on-osx.patch"
        ],
        "sha256": "a6cbad9b2243b17e87795817cfff2107d113543a12486586f8a055a2bb044963",
        "url": "https://github.com/llvm/llvm-project/archive/refs/tags/llvmorg-20.1.8.tar.gz"
      }
    ]
  },
  "osx_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "ninja"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "libcxx"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "libcxx"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "cctools",
        "clang",
        "ld64",
        "llvm-tools"
      ]
    }
  },
  "osx_arm64_meta_yaml": {
    "about": {
      "dev_url": "https://github.com/llvm/llvm-project",
      "home": "http://libcxx.llvm.org/",
      "license": "Apache-2.0 WITH LLVM-exception",
      "license_family": "Apache",
      "license_file": "libcxx/LICENSE.TXT",
      "summary": "LLVM C++ standard library"
    },
    "build": {
      "number": "1"
    },
    "extra": {
      "feedstock-name": "libcxx",
      "recipe-maintainers": [
        "SylvainCorlay",
        "inducer",
        "jakirkham",
        "isuruf",
        "beckermr",
        "timsnyder",
        "h-vetinari"
      ]
    },
    "outputs": [
      {
        "build": {
          "run_exports": [
            "libcxx =*=debug*"
          ],
          "string": "debug_h1234567_1"
        },
        "files": [
          "include/c++",
          "share/libc++",
          "lib/libc++.modules.json"
        ],
        "name": "libcxx-devel",
        "requirements": {
          "host": [
            "libcxx"
          ],
          "run": [
            "libcxx"
          ],
          "run_constrained": null
        },
        "test": {
          "commands": [
            "echo 1",
            "echo post-12",
            "test -f $PREFIX/include/c++/v1/iterator",
            "if [ 0 -ne $(cat ${PREFIX}/include/c++/v1/__configuration/availability.h | grep \"availability(macos\" | grep -vE \"(conda-forge|10.9|10.1[0-3])\" | wc -l) ]; then exit 1; fi",
            "if [ -f $PREFIX/lib/libc++abi.dylib ]; then exit 1; fi",
            "ls -lL /usr/share/zoneinfo",
            "if [ 0 -ne $(ls -lL /usr/share/zoneinfo | grep leap-seconds.list | wc -l) ]; then exit 1; fi",
            "bash compile_test.sh",
            "test -d $PREFIX/share/libc++",
            "test -f $PREFIX/lib/libc++.modules.json"
          ],
          "downstreams": [
            "python-symengine",
            "openturns"
          ],
          "files": [
            "test_sources",
            "compile_test.sh"
          ],
          "requires": [
            "clang",
            "ld64",
            "cctools",
            "llvm-tools"
          ]
        }
      },
      {
        "build": {
          "ignore_run_exports_from": [
            "cxx_compiler_stub"
          ],
          "run_exports": [
            "libcxx =*=debug*"
          ],
          "string": "debug_h1234567_1"
        },
        "files": [
          "lib/libc++.dylib",
          "lib/libc++.*.dylib",
          "lib/libc++.a",
          "lib/libc++experimental.*"
        ],
        "name": "libcxx",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub"
          ],
          "host": [],
          "run": [],
          "run_constrained": null
        },
        "test": {
          "commands": [
            "test -f $PREFIX/lib/libc++.dylib",
            "test -f $PREFIX/lib/libc++.a",
            "test -f $PREFIX/lib/libc++experimental.a",
            "test ! -d $PREFIX/include/c++"
          ],
          "downstreams": [
            "libcxx-testing 0.20",
            "libcxx-testing 0.19",
            "libcxx-testing 0.18",
            "libcxx-testing 0.17",
            "libcxx-testing 0.16"
          ]
        }
      },
      {
        "build": {
          "skip": true,
          "string": "debug_h1234567_1"
        },
        "files": [
          "lib/libc++abi.*"
        ],
        "name": "libcxxabi",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub"
          ],
          "run_constrained": [
            "libcxx 20.1.8.*"
          ]
        },
        "test": {
          "commands": null
        }
      },
      {
        "build": {
          "string": "h1234567_1"
        },
        "files": [
          "include/c++",
          "share/libc++",
          "lib/libc++.modules.json"
        ],
        "name": "libcxx-devel",
        "requirements": {
          "host": [
            "libcxx"
          ],
          "run": [
            "libcxx"
          ],
          "run_constrained": [
            "__osx <12"
          ]
        }
      },
      {
        "build": {
          "ignore_run_exports_from": [
            "cxx_compiler_stub"
          ],
          "string": "h1234567_1"
        },
        "files": [
          "lib/libc++.dylib",
          "lib/libc++.*.dylib",
          "lib/libc++.a",
          "lib/libc++experimental.*"
        ],
        "name": "libcxx",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub"
          ],
          "host": [],
          "run": [],
          "run_constrained": null
        },
        "test": {
          "commands": [
            "test -f $PREFIX/lib/libc++.dylib",
            "test -f $PREFIX/lib/libc++.a",
            "test -f $PREFIX/lib/libc++experimental.a",
            "test ! -d $PREFIX/include/c++"
          ]
        }
      },
      {
        "build": {
          "skip": true,
          "string": "h1234567_1"
        },
        "files": [
          "lib/libc++abi.*"
        ],
        "name": "libcxxabi",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub"
          ],
          "run_constrained": [
            "libcxx 20.1.8.*"
          ]
        },
        "test": {
          "commands": null
        }
      },
      {
        "build": {
          "string": "h1234567_1"
        },
        "files": [
          "include/c++",
          "share/libc++",
          "lib/libc++.modules.json"
        ],
        "name": "libcxx-devel",
        "requirements": {
          "host": [
            "libcxx"
          ],
          "run": [
            "libcxx"
          ],
          "run_constrained": null
        },
        "test": {
          "commands": [
            "echo 1",
            "echo post-12",
            "test -f $PREFIX/include/c++/v1/iterator",
            "if [ 0 -ne $(cat ${PREFIX}/include/c++/v1/__configuration/availability.h | grep \"availability(macos\" | grep -vE \"(conda-forge|10.9|10.1[0-3])\" | wc -l) ]; then exit 1; fi",
            "if [ -f $PREFIX/lib/libc++abi.dylib ]; then exit 1; fi",
            "ls -lL /usr/share/zoneinfo",
            "if [ 0 -ne $(ls -lL /usr/share/zoneinfo | grep leap-seconds.list | wc -l) ]; then exit 1; fi",
            "bash compile_test.sh",
            "test -d $PREFIX/share/libc++",
            "test -f $PREFIX/lib/libc++.modules.json"
          ],
          "downstreams": [
            "python-symengine",
            "openturns"
          ],
          "files": [
            "test_sources",
            "compile_test.sh"
          ],
          "requires": [
            "clang",
            "ld64",
            "cctools",
            "llvm-tools"
          ]
        }
      },
      {
        "build": {
          "ignore_run_exports_from": [
            "cxx_compiler_stub"
          ],
          "string": "h1234567_1"
        },
        "files": [
          "lib/libc++.dylib",
          "lib/libc++.*.dylib",
          "lib/libc++.a",
          "lib/libc++experimental.*"
        ],
        "name": "libcxx",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub"
          ],
          "host": [],
          "run": [],
          "run_constrained": null
        },
        "test": {
          "commands": [
            "test -f $PREFIX/lib/libc++.dylib",
            "test -f $PREFIX/lib/libc++.a",
            "test -f $PREFIX/lib/libc++experimental.a",
            "test ! -d $PREFIX/include/c++"
          ],
          "downstreams": [
            "libcxx-testing 0.20",
            "libcxx-testing 0.19",
            "libcxx-testing 0.18",
            "libcxx-testing 0.17",
            "libcxx-testing 0.16"
          ]
        }
      },
      {
        "build": {
          "skip": true,
          "string": "h1234567_1"
        },
        "files": [
          "lib/libc++abi.*"
        ],
        "name": "libcxxabi",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub"
          ],
          "run_constrained": [
            "libcxx 20.1.8.*"
          ]
        },
        "test": {
          "commands": null
        }
      }
    ],
    "package": {
      "name": "libcxx_and_libcxxabi",
      "version": "20.1.8"
    },
    "requirements": {
      "build": [
        "cmake",
        "ninja",
        "cxx_compiler_stub",
        "c_compiler_stub",
        "c_stdlib_stub"
      ]
    },
    "schema_version": 0,
    "source": [
      {
        "patches": [
          "patches/0002-custom-error-message-for-old-sdk.patch",
          "patches/0003-disable-_LIBCPP_AVAILABILITY_HAS_INIT_PRIMARY_EXCEPT.patch",
          "patches/0004-Work-around-stray-nostdlib-flags-causing-errors-with.patch",
          "patches/0005-patch-__libcpp_tzdb_directory-to-allow-use-on-osx.patch"
        ],
        "sha256": "a6cbad9b2243b17e87795817cfff2107d113543a12486586f8a055a2bb044963",
        "url": "https://github.com/llvm/llvm-project/archive/refs/tags/llvmorg-20.1.8.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Fix-ABI-compatibility-with-system.patch",
          "patches/0002-custom-error-message-for-old-sdk.patch",
          "patches/0003-disable-_LIBCPP_AVAILABILITY_HAS_INIT_PRIMARY_EXCEPT.patch",
          "patches/0004-Work-around-stray-nostdlib-flags-causing-errors-with.patch",
          "patches/0005-patch-__libcpp_tzdb_directory-to-allow-use-on-osx.patch"
        ],
        "sha256": "a6cbad9b2243b17e87795817cfff2107d113543a12486586f8a055a2bb044963",
        "url": "https://github.com/llvm/llvm-project/archive/refs/tags/llvmorg-20.1.8.tar.gz"
      },
      {
        "patches": [
          "patches/0002-custom-error-message-for-old-sdk.patch",
          "patches/0003-disable-_LIBCPP_AVAILABILITY_HAS_INIT_PRIMARY_EXCEPT.patch",
          "patches/0004-Work-around-stray-nostdlib-flags-causing-errors-with.patch",
          "patches/0005-patch-__libcpp_tzdb_directory-to-allow-use-on-osx.patch"
        ],
        "sha256": "a6cbad9b2243b17e87795817cfff2107d113543a12486586f8a055a2bb044963",
        "url": "https://github.com/llvm/llvm-project/archive/refs/tags/llvmorg-20.1.8.tar.gz"
      }
    ]
  },
  "osx_arm64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "ninja"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "libcxx"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "libcxx"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "cctools",
        "clang",
        "ld64",
        "llvm-tools"
      ]
    }
  },
  "outputs_names": {
    "__set__": true,
    "elements": [
      "libcxx",
      "libcxx-devel",
      "libcxxabi"
    ]
  },
  "parsing_error": false,
  "platforms": [
    "linux_64",
    "osx_64",
    "osx_arm64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/libcxx.json"
  },
  "raw_meta_yaml": "{% set version = \"20.1.8\" %}\n\n{% if sys_abi is undefined %}\n{% set sys_abi = \"dummy\" %}\n{% set hardening = \"dummy\" %}\n{% endif %}\n\npackage:\n  name: libcxx_and_libcxxabi\n  version: {{ version }}\n\nsource:\n  - url: https://github.com/llvm/llvm-project/archive/refs/tags/llvmorg-{{ version.replace(\".rc\", \"-rc\") }}.tar.gz\n    sha256: a6cbad9b2243b17e87795817cfff2107d113543a12486586f8a055a2bb044963\n    patches:\n      # See https://discourse.llvm.org/t/shipping-custom-libc-on-macos/58606\n      - patches/0001-Fix-ABI-compatibility-with-system.patch    # [sys_abi == \"pre-12\"]\n      - patches/0002-custom-error-message-for-old-sdk.patch\n      # disable feature that requires up-to-date libcxxabi, which we don't ship\n      - patches/0003-disable-_LIBCPP_AVAILABILITY_HAS_INIT_PRIMARY_EXCEPT.patch\n      # work around https://github.com/llvm/llvm-project/issues/90332\n      - patches/0004-Work-around-stray-nostdlib-flags-causing-errors-with.patch\n      # allow chrono implementation to work on osx\n      - patches/0005-patch-__libcpp_tzdb_directory-to-allow-use-on-osx.patch\n\nbuild:\n  number: 1\n  skip: true  # [win]\n  skip: true  # [ppc64le or aarch64]\n\n# use selectors here so smithy breaks up CI jobs\n# [sys_abi]\n# [hardening]\n\nrequirements:\n  build:\n    - cmake\n    - ninja\n    - {{ compiler('cxx') }}\n    - {{ compiler('c') }}\n    - {{ stdlib('c') }}\n    - python >3               # [not osx]\n\noutputs:\n  - name: libcxx-devel\n    build:\n      string: h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}        # [hardening == \"none\"]\n      string: debug_h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [hardening == \"debug\"]\n      run_exports:                                      # [hardening == \"debug\"]\n        # packages built with hardened lib must not be installable without extra label\n        - libcxx =*=debug*                              # [hardening == \"debug\"]\n    files:\n      - include/c++                 # [unix]\n      # for C++20 modules, which are installed into $PREFIX/share/libc++\n      - share/libc++                # [unix]\n      - Library/include/c++         # [win]\n      # also for C++20 modules\n      - lib/libc++.modules.json     # [unix]\n    requirements:\n      host:\n        - {{ pin_subpackage(\"libcxx\", exact=True) }}\n      run:\n        # re-enable this for osx once chrono implementation is in shared library\n        - tzdata  # [linux]\n        - {{ pin_subpackage(\"libcxx\", max_pin=None) }}\n      run_constrained:\n        - __osx <12     # [osx and (sys_abi == \"pre-12\")]\n\n    # package for old sys_abi is not installable on macOS-12 image anymore\n    {% if sys_abi != \"pre-12\" %}\n    test:\n      requires:\n        - clang                  # [osx]\n        - ld64                   # [osx]\n        - cctools                # [osx]\n        - llvm-tools             # [osx]\n        - {{ compiler('cxx') }}  # [not osx]\n        - clangxx                # [not osx]\n      files:\n        - test_sources\n        - compile_test.sh   # [unix]\n        - compile_test.bat  # [win]\n      commands:\n        # Dummy var for different hashes\n        - echo {{ dummy_var }}                                    # [osx]\n        - echo {{ sys_abi }}                                      # [osx]\n        - if not exist %LIBRARY_INC%\\\\c++\\\\v1\\\\iterator exit 1    # [win]\n        - test -f $PREFIX/include/c++/v1/iterator                 # [unix]\n\n        # make sure we inserted link to our docs wherever it is necessary;\n        # i.e. everywhere there's a string \"availability(macos,...,introduced=<ver>)\" for osx version >10.13;\n        # 'grep -v' inverts the match but returns non-zero exit code if no lines are returned; so we use 'wc -l';\n        # we want to have zero lines that don't either: contain our link or are for <=10.13 (lowest occurring in that file is 10.9)\n        - if [ 0 -ne $(cat ${PREFIX}/include/c++/v1/__configuration/availability.h | grep \"availability(macos\" | grep -vE \"(conda-forge|10.9|10.1[0-3])\" | wc -l) ]; then exit 1; fi  # [osx]\n        # !!!!!!!!!!!! README !!!!!!!!!!!!!!!!!!\n        # we do not ship libcxxabi on OSX - this breaks exception passing\n        - if [ -f $PREFIX/lib/libc++abi.dylib ]; then exit 1; fi  # [osx]\n        - test -f $PREFIX/lib/libc++abi.so                        # [linux]\n\n        # for full chrono support, libcxx needs leap-seconds.list, which\n        # isn't shipped macos-14 image\n        - ls -lL /usr/share/zoneinfo\n        # This check is intended to start failing once an image starts shipping\n        # that file, so we can re-enable the leapsecond portion of the tzdb-tests\n        - if [ 0 -ne $(ls -lL /usr/share/zoneinfo | grep leap-seconds.list | wc -l) ]; then exit 1; fi  # [osx]\n\n        - bash compile_test.sh                                    # [unix]\n        - compile_test.bat                                        # [win]\n\n        # presence of std modules\n        - test -d $PREFIX/share/libc++                  # [unix]\n        - test -f $PREFIX/lib/libc++.modules.json       # [unix]\n\n      # Following 2 projects had issues with libc++, so check them\n      # before releasing just to be sure.\n      downstreams:              # [osx]\n        - python-symengine      # [osx]\n        - openturns             # [osx]\n    {% endif %}\n\n  - name: libcxx\n    build:\n      string: h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}        # [hardening == \"none\"]\n      string: debug_h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [hardening == \"debug\"]\n      run_exports:                                      # [hardening == \"debug\"]\n        # packages built with hardened lib must not be installable without extra label\n        - libcxx =*=debug*                              # [hardening == \"debug\"]\n      ignore_run_exports_from:\n        # we want to ignore libstdcxx, but not libgcc; the latter also comes in through\n        # compiler('c'), and conda keeps that despite ignoring the cxx run-exports\n        - {{ compiler('cxx') }}\n    files:\n      - lib/libc++.so               # [linux]\n      - lib/libc++.so.*             # [linux]\n      - lib/libc++.dylib            # [osx]\n      - lib/libc++.*.dylib          # [osx]\n      - Library/bin/c++*.dll        # [win]\n      # static libs for cross-compilation, due to lack of host-exports\n      - lib/libc++.a                # [unix]\n      - lib/libc++experimental.*    # [unix]\n      - Library/lib/c++*.lib        # [win]\n      - Library/lib/libc++*.lib     # [win]\n    requirements:\n      build:\n        - {{ stdlib('c') }}\n        - {{ compiler('c') }}\n        - {{ compiler('cxx') }}\n      host:\n        - {{ pin_subpackage(\"libcxxabi\", exact=True) }}    # [linux]\n      run:\n        - {{ pin_subpackage(\"libcxxabi\", exact=True) }}    # [linux]\n      run_constrained:\n        - sysroot_{{ target_platform }} >={{ c_stdlib_version }}    # [linux]\n    test:\n      commands:\n        # presence of shared & static libraries\n        - test -f $PREFIX/lib/libc++.so                 # [linux]\n        - test -f $PREFIX/lib/libc++.dylib              # [osx]\n        - test -f $PREFIX/lib/libc++.a                  # [unix]\n        - test -f $PREFIX/lib/libc++experimental.a      # [unix]\n        # absence of headers\n        - test ! -d $PREFIX/include/c++                 # [unix]\n\n    {% if sys_abi != \"pre-12\" %}\n      downstreams:              # [osx]\n        # test current libcxx against old clang builds;\n        # version correspondence is 0.{{ CLANG_MAJOR }}\n        # these tests are unusual in that they use -Wl,-rpath, but not -L.\n        - libcxx-testing 0.20   # [osx]\n        - libcxx-testing 0.19   # [osx]\n        - libcxx-testing 0.18   # [osx]\n        - libcxx-testing 0.17   # [osx]\n        - libcxx-testing 0.16   # [osx]\n    {% endif %}\n\n  - name: libcxxabi\n    build:\n      skip: true  # [not linux]\n      # even though libcxxabi shouldn't be affected, distinguish builds\n      string: h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}        # [hardening == \"none\"]\n      string: debug_h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [hardening == \"debug\"]\n    files:\n      - lib/libc++abi.*\n    requirements:\n      build:\n        # for run-exports\n        - {{ stdlib('c') }}\n        - {{ compiler('c') }}\n      run_constrained:\n        - libcxx {{ version }}.*\n    test:\n      commands:\n        - test -f $PREFIX/lib/libc++abi.so  # [linux]\n\nabout:\n  home: http://libcxx.llvm.org/\n  license: Apache-2.0 WITH LLVM-exception\n  license_file: libcxx/LICENSE.TXT\n  license_family: Apache\n  summary: LLVM C++ standard library\n  dev_url: https://github.com/llvm/llvm-project\n\nextra:\n  recipe-maintainers:\n    - SylvainCorlay\n    - inducer\n    - jakirkham\n    - isuruf\n    - beckermr\n    - timsnyder\n    - h-vetinari\n  feedstock-name: libcxx\n",
  "req": {
    "__set__": true,
    "elements": [
      "c_compiler_stub",
      "c_stdlib_stub",
      "cmake",
      "cxx_compiler_stub",
      "libcxx",
      "libcxxabi",
      "ninja",
      "python",
      "tzdata"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "ninja",
        "python"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "libcxx",
        "libcxxabi"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "libcxx",
        "libcxxabi",
        "tzdata"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "cctools",
        "clang",
        "clangxx",
        "cxx_compiler_stub",
        "ld64",
        "llvm-tools"
      ]
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "ninja",
        "python >3"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "libcxx",
        "libcxxabi"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "libcxx",
        "libcxxabi",
        "tzdata"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "cctools",
        "clang",
        "clangxx",
        "cxx_compiler_stub",
        "ld64",
        "llvm-tools"
      ]
    }
  },
  "url": "https://github.com/llvm/llvm-project/archive/refs/tags/llvmorg-20.1.8.tar.gz",
  "version": "20.1.8",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/libcxx.json"
  }
}