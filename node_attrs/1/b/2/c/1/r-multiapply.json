{
  "archived": false,
  "branch": "main",
  "conda-forge.yml": {
    "bot": {
      "automerge": true
    },
    "conda_build": {
      "pkg_format": "2"
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    }
  },
  "feedstock_hash": "172f3e3fbcd08efc2dc702df50160eb8f8707982",
  "feedstock_hash_ts": 1757770051,
  "feedstock_name": "r-multiapply",
  "hash_type": "sha256",
  "linux_64_meta_yaml": {
    "about": {
      "home": "https://earth.bsc.es/gitlab/ces/multiApply",
      "license": "LGPL-3.0-only",
      "license_family": "LGPL",
      "license_file": [
        "/lib/R/share/licenses/LGPL-3"
      ],
      "summary": "The base apply function and its variants, as well as the related functions in the 'plyr' package, typically apply user-defined functions to a single argument (or a list of vectorized arguments in the case of mapply). The 'multiApply' package extends this paradigm with its only function, Apply, which efficiently applies functions taking one or a list of multiple unidimensional or multidimensional arrays (or combinations thereof) as input. The input arrays can have different numbers of dimensions as well as different dimension lengths, and the applied function can return one or a list of unidimensional or multidimensional arrays as output. This saves development time by preventing the R user from writing often error-prone and memory-inefficient loops dealing with multiple complex arrays. Also, a remarkable feature of Apply is the transparent use of multi-core through its parameter 'ncores'. In contrast to the base apply function, this package suggests the use of 'target dimensions' as opposite to the 'margins' for specifying the dimensions relevant to the function to be applied."
    },
    "build": {
      "noarch": "generic",
      "number": "1",
      "rpaths": [
        "lib/R/lib/",
        "lib/"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "conda-forge/r"
      ]
    },
    "package": {
      "name": "r-multiapply",
      "version": "2.1.5"
    },
    "requirements": {
      "build": [],
      "host": [
        "r-base",
        "r-doparallel",
        "r-foreach",
        "r-plyr"
      ],
      "run": [
        "r-base",
        "r-doparallel",
        "r-foreach",
        "r-plyr"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "67726b9be85bb9fb5c5ff8f9532b8ca500b9d040ab21420683531822f68fbb1d",
      "url": [
        "https://cran.r-project.org/src/contrib/multiApply_2.1.5.tar.gz",
        "https://cran.r-project.org/src/contrib/Archive/multiApply/multiApply_2.1.5.tar.gz"
      ]
    },
    "test": {
      "commands": [
        "$R -e \"library('multiApply')\""
      ]
    }
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": []
    },
    "host": {
      "__set__": true,
      "elements": [
        "r-base",
        "r-doparallel",
        "r-foreach",
        "r-plyr"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "r-base",
        "r-doparallel",
        "r-foreach",
        "r-plyr"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "meta_yaml": {
    "about": {
      "home": "https://earth.bsc.es/gitlab/ces/multiApply",
      "license": "LGPL-3.0-only",
      "license_family": "LGPL",
      "license_file": [
        "/lib/R/share/licenses/LGPL-3"
      ],
      "summary": "The base apply function and its variants, as well as the related functions in the 'plyr' package, typically apply user-defined functions to a single argument (or a list of vectorized arguments in the case of mapply). The 'multiApply' package extends this paradigm with its only function, Apply, which efficiently applies functions taking one or a list of multiple unidimensional or multidimensional arrays (or combinations thereof) as input. The input arrays can have different numbers of dimensions as well as different dimension lengths, and the applied function can return one or a list of unidimensional or multidimensional arrays as output. This saves development time by preventing the R user from writing often error-prone and memory-inefficient loops dealing with multiple complex arrays. Also, a remarkable feature of Apply is the transparent use of multi-core through its parameter 'ncores'. In contrast to the base apply function, this package suggests the use of 'target dimensions' as opposite to the 'margins' for specifying the dimensions relevant to the function to be applied."
    },
    "build": {
      "noarch": "generic",
      "number": "1",
      "rpaths": [
        "lib/R/lib/",
        "lib/"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "conda-forge/r"
      ]
    },
    "package": {
      "name": "r-multiapply",
      "version": "2.1.5"
    },
    "requirements": {
      "build": [],
      "host": [
        "r-base",
        "r-doparallel",
        "r-foreach",
        "r-plyr"
      ],
      "run": [
        "r-base",
        "r-doparallel",
        "r-foreach",
        "r-plyr"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "67726b9be85bb9fb5c5ff8f9532b8ca500b9d040ab21420683531822f68fbb1d",
      "url": [
        "https://cran.r-project.org/src/contrib/multiApply_2.1.5.tar.gz",
        "https://cran.r-project.org/src/contrib/Archive/multiApply/multiApply_2.1.5.tar.gz"
      ]
    },
    "test": {
      "commands": [
        "$R -e \"library('multiApply')\""
      ]
    }
  },
  "name": "r-multiapply",
  "outputs_names": {
    "__set__": true,
    "elements": [
      "r-multiapply"
    ]
  },
  "parsing_error": false,
  "platforms": [
    "linux_64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/r-multiapply.json"
  },
  "raw_meta_yaml": "{% set version = \"2.1.5\" %}\n{% set posix = 'm2-' if win else '' %}\n\npackage:\n  name: r-multiapply\n  version: {{ version|replace(\"-\", \"_\") }}\n\nsource:\n  url:\n    - {{ cran_mirror }}/src/contrib/multiApply_{{ version }}.tar.gz\n    - {{ cran_mirror }}/src/contrib/Archive/multiApply/multiApply_{{ version }}.tar.gz\n  sha256: 67726b9be85bb9fb5c5ff8f9532b8ca500b9d040ab21420683531822f68fbb1d\n\nbuild:\n  number: 1\n  noarch: generic\n  rpaths:\n    - lib/R/lib/\n    - lib/\n\nrequirements:\n  build:\n    - {{ posix }}zip               # [win]\n  host:\n    - r-base\n    - r-doparallel\n    - r-foreach\n    - r-plyr\n  run:\n    - r-base\n    - r-doparallel\n    - r-foreach\n    - r-plyr\n\ntest:\n  commands:\n    - $R -e \"library('multiApply')\"           # [not win]\n    - \"\\\"%R%\\\" -e \\\"library('multiApply')\\\"\"  # [win]\n\nabout:\n  home: https://earth.bsc.es/gitlab/ces/multiApply\n  license: LGPL-3.0-only\n  summary: The base apply function and its variants, as well as the related functions in the 'plyr' package, typically apply user-defined functions to a single argument (or a list of vectorized arguments in the case of mapply). The 'multiApply' package extends this paradigm with its only function, Apply, which efficiently\n    applies functions taking one or a list of multiple unidimensional or multidimensional arrays (or combinations thereof) as input. The input arrays can have different numbers of dimensions as well as different dimension lengths, and the applied function can return one or a list of unidimensional or multidimensional arrays\n    as output. This saves development time by preventing the R user from writing often error-prone and memory-inefficient loops dealing with multiple complex arrays. Also, a remarkable feature of Apply is the transparent use of multi-core through its parameter 'ncores'. In contrast to the base apply function, this package\n    suggests the use of 'target dimensions' as opposite to the 'margins' for specifying the dimensions relevant to the function to be applied.\n  license_family: LGPL\n  license_file:\n    - {{ environ[\"PREFIX\"] }}/lib/R/share/licenses/LGPL-3\n\nextra:\n  recipe-maintainers:\n    - conda-forge/r\n\n# Package: multiApply\n# Title: Apply Functions to Multiple Multidimensional Arrays or Vectors\n# Version: 2.1.1\n# Authors@R: c( person(\"BSC-CNS\", role = c(\"aut\", \"cph\")), person(\"Nicolau\", \"Manubens\", , \"nicolau.manubens@bsc.es\", role = \"aut\"), person(\"Alasdair\", \"Hunter\", , \"alasdair.hunter@bsc.es\", role = \"aut\"), person(\"Nuria\", \"Perez\", , \"nuria.perez@bsc.es\", role = \"cre\"))\n# Description: The base apply function and its variants, as well as the related functions in the 'plyr' package, typically apply user-defined functions to a single argument (or a list of vectorized arguments in the case of mapply). The 'multiApply' package extends this paradigm with its only function, Apply, which efficiently applies functions taking one or a list of multiple unidimensional or multidimensional arrays (or combinations thereof) as input. The input arrays can have different numbers of dimensions as well as different dimension lengths, and the applied function can return one or a list of unidimensional or multidimensional arrays as output. This saves development time by preventing the R user from writing often error-prone and memory-inefficient loops dealing with multiple complex arrays. Also, a remarkable feature of Apply is the transparent use of multi-core through its parameter 'ncores'. In contrast to the base apply function, this package suggests the use of 'target dimensions' as opposite to the 'margins' for specifying the dimensions relevant to the function to be applied.\n# Depends: R (>= 3.2.0)\n# Imports: doParallel, foreach, plyr\n# Suggests: testthat\n# License: LGPL-3\n# URL: https://earth.bsc.es/gitlab/ces/multiApply\n# BugReports: https://earth.bsc.es/gitlab/ces/multiApply/issues\n# Encoding: UTF-8\n# LazyData: true\n# RoxygenNote: 5.0.0\n# NeedsCompilation: no\n# Packaged: 2019-09-03 14:10:50 UTC; nperez\n# Author: BSC-CNS [aut, cph], Nicolau Manubens [aut], Alasdair Hunter [aut], Nuria Perez [cre]\n# Maintainer: Nuria Perez <nuria.perez@bsc.es>\n# Repository: CRAN\n# Date/Publication: 2019-09-03 15:40:02 UTC\n",
  "req": {
    "__set__": true,
    "elements": [
      "r-base",
      "r-doparallel",
      "r-foreach",
      "r-plyr"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": []
    },
    "host": {
      "__set__": true,
      "elements": [
        "r-base",
        "r-doparallel",
        "r-foreach",
        "r-plyr"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "r-base",
        "r-doparallel",
        "r-foreach",
        "r-plyr"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": []
    },
    "host": {
      "__set__": true,
      "elements": [
        "r-base",
        "r-doparallel",
        "r-foreach",
        "r-plyr"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "r-base",
        "r-doparallel",
        "r-foreach",
        "r-plyr"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "url": [
    "https://cran.r-project.org/src/contrib/multiApply_2.1.5.tar.gz",
    "https://cran.r-project.org/src/contrib/Archive/multiApply/multiApply_2.1.5.tar.gz"
  ],
  "version": "2.1.5",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/r-multiapply.json"
  }
}