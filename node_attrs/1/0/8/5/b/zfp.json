{
  "archived": true,
  "branch": "master",
  "conda-forge.yml": {
    "provider": {
      "linux_aarch64": "default",
      "linux_ppc64le": "default"
    }
  },
  "feedstock_name": "zfp",
  "hash_type": "sha256",
  "linux_64_meta_yaml": {
    "about": {
      "description": "zfp is a compressed format for representing multidimensional\nfloating-point and integer arrays. zfp provides compressed-array\nclasses that support high throughput read and write random access\nto individual array elements. zfp also supports serial and\nparallel (OpenMP and CUDA) compression of whole arrays, e.g., for\napplications that read and write large data sets to and from disk.\n",
      "dev_url": "https://github.com/LLNL/zfp",
      "doc_url": "https://zfp.readthedocs.io",
      "home": "http://computing.llnl.gov/projects/floating-point-compression",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE",
      "summary": "Compressed numerical arrays that support high-speed random access"
    },
    "build": {
      "number": "0",
      "run_exports": [
        "zfp"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "ax3l"
      ]
    },
    "package": {
      "name": "zfp",
      "version": "0.5.5"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "cxx_compiler_stub",
        "make",
        "cmake >=3.4.0",
        "libgomp"
      ]
    },
    "source": {
      "sha256": "fdf7b948bab1f4e5dccfe2c2048fd98c24e417ad8fb8a51ed3463d04147393c5",
      "url": "http://computing.llnl.gov/projects/floating-point-compression/download/zfp-0.5.5.tar.gz"
    },
    "test": {
      "commands": [
        "test -f ${PREFIX}/lib/cmake/zfp/zfp-config.cmake",
        "test -f ${PREFIX}/lib/libzfp.so"
      ]
    }
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "cmake",
        "cxx_compiler_stub",
        "libgomp",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": []
    },
    "run": {
      "__set__": true,
      "elements": []
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "linux_aarch64_meta_yaml": {
    "about": {
      "description": "zfp is a compressed format for representing multidimensional\nfloating-point and integer arrays. zfp provides compressed-array\nclasses that support high throughput read and write random access\nto individual array elements. zfp also supports serial and\nparallel (OpenMP and CUDA) compression of whole arrays, e.g., for\napplications that read and write large data sets to and from disk.\n",
      "dev_url": "https://github.com/LLNL/zfp",
      "doc_url": "https://zfp.readthedocs.io",
      "home": "http://computing.llnl.gov/projects/floating-point-compression",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE",
      "summary": "Compressed numerical arrays that support high-speed random access"
    },
    "build": {
      "number": "0",
      "run_exports": [
        "zfp"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "ax3l"
      ]
    },
    "package": {
      "name": "zfp",
      "version": "0.5.5"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "cxx_compiler_stub",
        "make",
        "cmake >=3.4.0",
        "libgomp"
      ]
    },
    "source": {
      "sha256": "fdf7b948bab1f4e5dccfe2c2048fd98c24e417ad8fb8a51ed3463d04147393c5",
      "url": "http://computing.llnl.gov/projects/floating-point-compression/download/zfp-0.5.5.tar.gz"
    },
    "test": {
      "commands": [
        "test -f ${PREFIX}/lib/cmake/zfp/zfp-config.cmake",
        "test -f ${PREFIX}/lib/libzfp.so"
      ]
    }
  },
  "linux_aarch64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "cmake",
        "cxx_compiler_stub",
        "libgomp",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": []
    },
    "run": {
      "__set__": true,
      "elements": []
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "linux_ppc64le_meta_yaml": {
    "about": {
      "description": "zfp is a compressed format for representing multidimensional\nfloating-point and integer arrays. zfp provides compressed-array\nclasses that support high throughput read and write random access\nto individual array elements. zfp also supports serial and\nparallel (OpenMP and CUDA) compression of whole arrays, e.g., for\napplications that read and write large data sets to and from disk.\n",
      "dev_url": "https://github.com/LLNL/zfp",
      "doc_url": "https://zfp.readthedocs.io",
      "home": "http://computing.llnl.gov/projects/floating-point-compression",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE",
      "summary": "Compressed numerical arrays that support high-speed random access"
    },
    "build": {
      "number": "0",
      "run_exports": [
        "zfp"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "ax3l"
      ]
    },
    "package": {
      "name": "zfp",
      "version": "0.5.5"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "cxx_compiler_stub",
        "make",
        "cmake >=3.4.0",
        "libgomp"
      ]
    },
    "source": {
      "sha256": "fdf7b948bab1f4e5dccfe2c2048fd98c24e417ad8fb8a51ed3463d04147393c5",
      "url": "http://computing.llnl.gov/projects/floating-point-compression/download/zfp-0.5.5.tar.gz"
    },
    "test": {
      "commands": [
        "test -f ${PREFIX}/lib/cmake/zfp/zfp-config.cmake",
        "test -f ${PREFIX}/lib/libzfp.so"
      ]
    }
  },
  "linux_ppc64le_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "cmake",
        "cxx_compiler_stub",
        "libgomp",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": []
    },
    "run": {
      "__set__": true,
      "elements": []
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "meta_yaml": {
    "about": {
      "description": "zfp is a compressed format for representing multidimensional\nfloating-point and integer arrays. zfp provides compressed-array\nclasses that support high throughput read and write random access\nto individual array elements. zfp also supports serial and\nparallel (OpenMP and CUDA) compression of whole arrays, e.g., for\napplications that read and write large data sets to and from disk.\n",
      "dev_url": "https://github.com/LLNL/zfp",
      "doc_url": "https://zfp.readthedocs.io",
      "home": "http://computing.llnl.gov/projects/floating-point-compression",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE",
      "summary": "Compressed numerical arrays that support high-speed random access"
    },
    "build": {
      "number": "0",
      "run_exports": [
        "zfp",
        "zfp",
        "zfp",
        "zfp",
        "zfp"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "ax3l",
        "ax3l",
        "ax3l",
        "ax3l",
        "ax3l"
      ]
    },
    "package": {
      "name": "zfp",
      "version": "0.5.5"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "cxx_compiler_stub",
        "make",
        "cmake >=3.4.0",
        "libgomp",
        "c_compiler_stub",
        "cxx_compiler_stub",
        "make",
        "cmake >=3.4.0",
        "libgomp",
        "c_compiler_stub",
        "cxx_compiler_stub",
        "make",
        "cmake >=3.4.0",
        "libgomp",
        "c_compiler_stub",
        "cxx_compiler_stub",
        "make",
        "cmake >=3.4.0",
        "llvm-openmp",
        "c_compiler_stub",
        "cxx_compiler_stub",
        "cmake >=3.4.0"
      ]
    },
    "source": {
      "sha256": "fdf7b948bab1f4e5dccfe2c2048fd98c24e417ad8fb8a51ed3463d04147393c5",
      "url": "http://computing.llnl.gov/projects/floating-point-compression/download/zfp-0.5.5.tar.gz"
    },
    "test": {
      "commands": [
        "test -f ${PREFIX}/lib/cmake/zfp/zfp-config.cmake",
        "test -f ${PREFIX}/lib/libzfp.so",
        "test -f ${PREFIX}/lib/cmake/zfp/zfp-config.cmake",
        "test -f ${PREFIX}/lib/libzfp.so",
        "test -f ${PREFIX}/lib/cmake/zfp/zfp-config.cmake",
        "test -f ${PREFIX}/lib/libzfp.so",
        "test -f ${PREFIX}/lib/cmake/zfp/zfp-config.cmake",
        "otool -L ${PREFIX}/lib/libzfp.dylib",
        "if exist %LIBRARY_PREFIX%\\bin\\zfp.dll (exit 0) else (exit 1)",
        "if exist %LIBRARY_PREFIX%\\bin\\zfp.lib (exit 0) else (exit 1)",
        "if exist %LIBRARY_PREFIX%\\lib\\cmake\\zfp\\zfp-config.cmake (exit 0) else (exit 1)"
      ]
    }
  },
  "name": "zfp",
  "osx_64_meta_yaml": {
    "about": {
      "description": "zfp is a compressed format for representing multidimensional\nfloating-point and integer arrays. zfp provides compressed-array\nclasses that support high throughput read and write random access\nto individual array elements. zfp also supports serial and\nparallel (OpenMP and CUDA) compression of whole arrays, e.g., for\napplications that read and write large data sets to and from disk.\n",
      "dev_url": "https://github.com/LLNL/zfp",
      "doc_url": "https://zfp.readthedocs.io",
      "home": "http://computing.llnl.gov/projects/floating-point-compression",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE",
      "summary": "Compressed numerical arrays that support high-speed random access"
    },
    "build": {
      "number": "0",
      "run_exports": [
        "zfp"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "ax3l"
      ]
    },
    "package": {
      "name": "zfp",
      "version": "0.5.5"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "cxx_compiler_stub",
        "make",
        "cmake >=3.4.0",
        "llvm-openmp"
      ]
    },
    "source": {
      "sha256": "fdf7b948bab1f4e5dccfe2c2048fd98c24e417ad8fb8a51ed3463d04147393c5",
      "url": "http://computing.llnl.gov/projects/floating-point-compression/download/zfp-0.5.5.tar.gz"
    },
    "test": {
      "commands": [
        "test -f ${PREFIX}/lib/cmake/zfp/zfp-config.cmake",
        "otool -L ${PREFIX}/lib/libzfp.dylib"
      ]
    }
  },
  "osx_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "cmake",
        "cxx_compiler_stub",
        "llvm-openmp",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": []
    },
    "run": {
      "__set__": true,
      "elements": []
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "outputs_names": {
    "__set__": true,
    "elements": [
      "zfp"
    ]
  },
  "parsing_error": "make_graph: missing parsing_error key",
  "pr_info": {
    "__lazy_json__": "pr_info/zfp.json"
  },
  "raw_meta_yaml": "{% set name = \"zfp\" %}\n{% set version = \"0.5.5\" %}\n{% set build = 0 %}\n{% set sha256 = \"fdf7b948bab1f4e5dccfe2c2048fd98c24e417ad8fb8a51ed3463d04147393c5\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: http://computing.llnl.gov/projects/floating-point-compression/download/zfp-{{ version }}.tar.gz\n  sha256: {{ sha256 }}\n\nbuild:\n  number: {{ build }}\n  run_exports:\n    # patch-releases are not ABI compatible\n    - {{ pin_subpackage('zfp', min_pin='x.x.x', max_pin='x.x.x') }}\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n    - make          # [unix]\n    - cmake >=3.4.0\n    - libgomp       # [linux]\n    - llvm-openmp   # [osx]\n  # a variant could provide CUDA support\n\ntest:\n  commands:\n    - test -f ${PREFIX}/lib/cmake/zfp/zfp-config.cmake                      # [unix]\n    - test -f ${PREFIX}/lib/libzfp.so                                       # [linux]\n    - otool -L ${PREFIX}/lib/libzfp.dylib                                   # [osx]\n    - if exist %LIBRARY_PREFIX%\\bin\\zfp.dll (exit 0) else (exit 1)          # [win]\n    - if exist %LIBRARY_PREFIX%\\bin\\zfp.lib (exit 0) else (exit 1)          # [win]\n    - if exist %LIBRARY_PREFIX%\\lib\\cmake\\zfp\\zfp-config.cmake (exit 0) else (exit 1)  # [win]\n\nabout:\n  home: http://computing.llnl.gov/projects/floating-point-compression\n  license: BSD-3-Clause\n  license_family: BSD\n  license_file: LICENSE\n  summary: Compressed numerical arrays that support high-speed random access\n\n  description: |\n    zfp is a compressed format for representing multidimensional\n    floating-point and integer arrays. zfp provides compressed-array\n    classes that support high throughput read and write random access\n    to individual array elements. zfp also supports serial and\n    parallel (OpenMP and CUDA) compression of whole arrays, e.g., for\n    applications that read and write large data sets to and from disk.\n  doc_url: https://zfp.readthedocs.io\n  dev_url: https://github.com/LLNL/zfp\n\nextra:\n  recipe-maintainers:\n    - ax3l\n",
  "req": {
    "__set__": true,
    "elements": [
      "c_compiler_stub",
      "cmake",
      "cxx_compiler_stub",
      "libgomp",
      "llvm-openmp",
      "make"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "cmake",
        "cxx_compiler_stub",
        "libgomp",
        "llvm-openmp",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "ctng-compilers",
        "cxx_compiler_stub",
        "openmp"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "ctng-compilers",
        "cxx_compiler_stub",
        "openmp"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "cmake >=3.4.0",
        "cxx_compiler_stub",
        "libgomp",
        "llvm-openmp",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": []
    },
    "run": {
      "__set__": true,
      "elements": []
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "url": "http://computing.llnl.gov/projects/floating-point-compression/download/zfp-0.5.5.tar.gz",
  "version": "0.5.5",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/zfp.json"
  },
  "win_64_meta_yaml": {
    "about": {
      "description": "zfp is a compressed format for representing multidimensional\nfloating-point and integer arrays. zfp provides compressed-array\nclasses that support high throughput read and write random access\nto individual array elements. zfp also supports serial and\nparallel (OpenMP and CUDA) compression of whole arrays, e.g., for\napplications that read and write large data sets to and from disk.\n",
      "dev_url": "https://github.com/LLNL/zfp",
      "doc_url": "https://zfp.readthedocs.io",
      "home": "http://computing.llnl.gov/projects/floating-point-compression",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE",
      "summary": "Compressed numerical arrays that support high-speed random access"
    },
    "build": {
      "number": "0",
      "run_exports": [
        "zfp"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "ax3l"
      ]
    },
    "package": {
      "name": "zfp",
      "version": "0.5.5"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "cxx_compiler_stub",
        "cmake >=3.4.0"
      ]
    },
    "source": {
      "sha256": "fdf7b948bab1f4e5dccfe2c2048fd98c24e417ad8fb8a51ed3463d04147393c5",
      "url": "http://computing.llnl.gov/projects/floating-point-compression/download/zfp-0.5.5.tar.gz"
    },
    "test": {
      "commands": [
        "if exist %LIBRARY_PREFIX%\\bin\\zfp.dll (exit 0) else (exit 1)",
        "if exist %LIBRARY_PREFIX%\\bin\\zfp.lib (exit 0) else (exit 1)",
        "if exist %LIBRARY_PREFIX%\\lib\\cmake\\zfp\\zfp-config.cmake (exit 0) else (exit 1)"
      ]
    }
  },
  "win_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "cmake",
        "cxx_compiler_stub"
      ]
    },
    "host": {
      "__set__": true,
      "elements": []
    },
    "run": {
      "__set__": true,
      "elements": []
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  }
}