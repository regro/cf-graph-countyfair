{
  "archived": false,
  "branch": "main",
  "conda-forge.yml": {
    "build_platform": {
      "osx_arm64": "osx_64"
    },
    "conda_build": {
      "pkg_format": "2"
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    },
    "test": "native_and_emulated"
  },
  "feedstock_name": "changeforest",
  "hash_type": "sha256",
  "linux_64_meta_yaml": {
    "about": {
      "description": "Change point detection aims to identify structural breaks in the probability\ndistribution of a time series. Existing methods either assume a parametric model for\nwithin-segment distributions or are based on ranks or distances and thus fail in\nscenarios with a reasonably large dimensionality.\n\n`changeforest` implements a classifier-based algorithm that consistently estimates\nchange points without any parametric assumptions, even in high-dimensional scenarios.\nIt uses the out-of-bag probability predictions of a random forest to construct a\nclassifier log-likelihood ratio that gets optimized using a computationally feasible two-step\nmethod.\n\nSee [1] for details.\n\n[1] M. Londschien, P. Bühlmann, and S. Kovács (2023). \"Random Forests for Change Point Detection\" Journal of Machine Learning Research\n",
      "dev_url": "https://github.com/mlondschien/changeforest",
      "home": "https://github.com/mlondschien/changeforest",
      "license": "BSD-3-Clause",
      "license_file": "LICENSE",
      "summary": "Classifier based non-parametric change point detection"
    },
    "build": {
      "number": "1",
      "script": "PYTHON -m pip install . -vv"
    },
    "extra": {
      "recipe-maintainers": [
        "mlondschien"
      ]
    },
    "package": {
      "name": "changeforest",
      "version": "1.1.4"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "rust_compiler_stub"
      ],
      "host": [
        "python",
        "pip",
        "maturin"
      ],
      "run": [
        "python",
        "numpy"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "b07f7da19e613ba04e613618e80e1cee4c2017f2c1f662f35cc59504f6669136",
      "url": "https://pypi.io/packages/source/c/changeforest/changeforest-1.1.4.tar.gz"
    },
    "test": {
      "commands": [
        "pip check"
      ],
      "imports": [
        "changeforest"
      ],
      "requires": [
        "pip"
      ]
    }
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "rust_compiler_stub"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "maturin",
        "pip",
        "python"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "numpy",
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "pip"
      ]
    }
  },
  "meta_yaml": {
    "about": {
      "description": "Change point detection aims to identify structural breaks in the probability\ndistribution of a time series. Existing methods either assume a parametric model for\nwithin-segment distributions or are based on ranks or distances and thus fail in\nscenarios with a reasonably large dimensionality.\n\n`changeforest` implements a classifier-based algorithm that consistently estimates\nchange points without any parametric assumptions, even in high-dimensional scenarios.\nIt uses the out-of-bag probability predictions of a random forest to construct a\nclassifier log-likelihood ratio that gets optimized using a computationally feasible two-step\nmethod.\n\nSee [1] for details.\n\n[1] M. Londschien, P. Bühlmann, and S. Kovács (2023). \"Random Forests for Change Point Detection\" Journal of Machine Learning Research\n",
      "dev_url": "https://github.com/mlondschien/changeforest",
      "home": "https://github.com/mlondschien/changeforest",
      "license": "BSD-3-Clause",
      "license_file": "LICENSE",
      "summary": "Classifier based non-parametric change point detection"
    },
    "build": {
      "number": "1",
      "script": "PYTHON -m pip install . -vv"
    },
    "extra": {
      "recipe-maintainers": [
        "mlondschien"
      ]
    },
    "package": {
      "name": "changeforest",
      "version": "1.1.4"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "rust_compiler_stub"
      ],
      "host": [
        "python",
        "pip",
        "maturin"
      ],
      "run": [
        "python",
        "numpy"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "b07f7da19e613ba04e613618e80e1cee4c2017f2c1f662f35cc59504f6669136",
      "url": "https://pypi.io/packages/source/c/changeforest/changeforest-1.1.4.tar.gz"
    },
    "test": {
      "commands": [
        "pip check"
      ],
      "imports": [
        "changeforest"
      ],
      "requires": [
        "pip"
      ]
    }
  },
  "name": "changeforest",
  "osx_64_meta_yaml": {
    "about": {
      "description": "Change point detection aims to identify structural breaks in the probability\ndistribution of a time series. Existing methods either assume a parametric model for\nwithin-segment distributions or are based on ranks or distances and thus fail in\nscenarios with a reasonably large dimensionality.\n\n`changeforest` implements a classifier-based algorithm that consistently estimates\nchange points without any parametric assumptions, even in high-dimensional scenarios.\nIt uses the out-of-bag probability predictions of a random forest to construct a\nclassifier log-likelihood ratio that gets optimized using a computationally feasible two-step\nmethod.\n\nSee [1] for details.\n\n[1] M. Londschien, P. Bühlmann, and S. Kovács (2023). \"Random Forests for Change Point Detection\" Journal of Machine Learning Research\n",
      "dev_url": "https://github.com/mlondschien/changeforest",
      "home": "https://github.com/mlondschien/changeforest",
      "license": "BSD-3-Clause",
      "license_file": "LICENSE",
      "summary": "Classifier based non-parametric change point detection"
    },
    "build": {
      "number": "1",
      "script": "PYTHON -m pip install . -vv"
    },
    "extra": {
      "recipe-maintainers": [
        "mlondschien"
      ]
    },
    "package": {
      "name": "changeforest",
      "version": "1.1.4"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "rust_compiler_stub"
      ],
      "host": [
        "python",
        "pip",
        "maturin"
      ],
      "run": [
        "python",
        "numpy"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "b07f7da19e613ba04e613618e80e1cee4c2017f2c1f662f35cc59504f6669136",
      "url": "https://pypi.io/packages/source/c/changeforest/changeforest-1.1.4.tar.gz"
    },
    "test": {
      "commands": [
        "pip check"
      ],
      "imports": [
        "changeforest"
      ],
      "requires": [
        "pip"
      ]
    }
  },
  "osx_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "rust_compiler_stub"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "maturin",
        "pip",
        "python"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "numpy",
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "pip"
      ]
    }
  },
  "osx_arm64_meta_yaml": {
    "about": {
      "description": "Change point detection aims to identify structural breaks in the probability\ndistribution of a time series. Existing methods either assume a parametric model for\nwithin-segment distributions or are based on ranks or distances and thus fail in\nscenarios with a reasonably large dimensionality.\n\n`changeforest` implements a classifier-based algorithm that consistently estimates\nchange points without any parametric assumptions, even in high-dimensional scenarios.\nIt uses the out-of-bag probability predictions of a random forest to construct a\nclassifier log-likelihood ratio that gets optimized using a computationally feasible two-step\nmethod.\n\nSee [1] for details.\n\n[1] M. Londschien, P. Bühlmann, and S. Kovács (2023). \"Random Forests for Change Point Detection\" Journal of Machine Learning Research\n",
      "dev_url": "https://github.com/mlondschien/changeforest",
      "home": "https://github.com/mlondschien/changeforest",
      "license": "BSD-3-Clause",
      "license_file": "LICENSE",
      "summary": "Classifier based non-parametric change point detection"
    },
    "build": {
      "number": "1",
      "script": "PYTHON -m pip install . -vv"
    },
    "extra": {
      "recipe-maintainers": [
        "mlondschien"
      ]
    },
    "package": {
      "name": "changeforest",
      "version": "1.1.4"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "rust_compiler_stub"
      ],
      "host": [
        "python",
        "pip",
        "maturin"
      ],
      "run": [
        "python",
        "numpy"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "b07f7da19e613ba04e613618e80e1cee4c2017f2c1f662f35cc59504f6669136",
      "url": "https://pypi.io/packages/source/c/changeforest/changeforest-1.1.4.tar.gz"
    },
    "test": {
      "commands": [
        "pip check"
      ],
      "imports": [
        "changeforest"
      ],
      "requires": [
        "pip"
      ]
    }
  },
  "osx_arm64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "rust_compiler_stub"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "maturin",
        "pip",
        "python"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "numpy",
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "pip"
      ]
    }
  },
  "outputs_names": {
    "__set__": true,
    "elements": [
      "changeforest"
    ]
  },
  "parsing_error": false,
  "platforms": [
    "linux_64",
    "osx_64",
    "osx_arm64",
    "win_64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/changeforest.json"
  },
  "raw_meta_yaml": "{% set name = \"changeforest\" %}\n{% set version = \"1.1.4\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: b07f7da19e613ba04e613618e80e1cee4c2017f2c1f662f35cc59504f6669136\n\nbuild:\n  number: 1\n  script: {{ PYTHON }} -m pip install . -vv\n\nrequirements:\n  build:\n    - python                                 # [build_platform != target_platform]\n    - cross-python_{{ target_platform }}     # [build_platform != target_platform]\n    - {{ compiler('c') }}\n    - {{ stdlib(\"c\") }}\n    - {{ compiler('rust') }}\n    - maturin                                # [build_platform != target_platform]\n  host:\n    - python\n    - pip\n    - maturin\n  run:\n    - python\n    - numpy\n\ntest:\n  imports:\n    - changeforest\n  requires:\n    - pip\n  commands:\n    - pip check\n\nabout:\n  home: https://github.com/mlondschien/changeforest\n  license: BSD-3-Clause\n  license_file: LICENSE\n  summary: Classifier based non-parametric change point detection\n  description: |\n    Change point detection aims to identify structural breaks in the probability\n    distribution of a time series. Existing methods either assume a parametric model for\n    within-segment distributions or are based on ranks or distances and thus fail in\n    scenarios with a reasonably large dimensionality.\n\n    `changeforest` implements a classifier-based algorithm that consistently estimates\n    change points without any parametric assumptions, even in high-dimensional scenarios.\n    It uses the out-of-bag probability predictions of a random forest to construct a\n    classifier log-likelihood ratio that gets optimized using a computationally feasible two-step\n    method.\n\n    See [1] for details.\n\n    [1] M. Londschien, P. Bühlmann, and S. Kovács (2023). \"Random Forests for Change Point Detection\" Journal of Machine Learning Research\n  dev_url: https://github.com/mlondschien/changeforest\n\nextra:\n  recipe-maintainers:\n    - mlondschien\n",
  "req": {
    "__set__": true,
    "elements": [
      "c_compiler_stub",
      "c_stdlib_stub",
      "maturin",
      "numpy",
      "pip",
      "python",
      "rust_compiler_stub"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "rust_compiler_stub"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "maturin",
        "pip",
        "python"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "numpy",
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "pip"
      ]
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "rust_compiler_stub"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "maturin",
        "pip",
        "python"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "numpy",
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "pip"
      ]
    }
  },
  "url": "https://pypi.io/packages/source/c/changeforest/changeforest-1.1.4.tar.gz",
  "version": "1.1.4",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/changeforest.json"
  },
  "win_64_meta_yaml": {
    "about": {
      "description": "Change point detection aims to identify structural breaks in the probability\ndistribution of a time series. Existing methods either assume a parametric model for\nwithin-segment distributions or are based on ranks or distances and thus fail in\nscenarios with a reasonably large dimensionality.\n\n`changeforest` implements a classifier-based algorithm that consistently estimates\nchange points without any parametric assumptions, even in high-dimensional scenarios.\nIt uses the out-of-bag probability predictions of a random forest to construct a\nclassifier log-likelihood ratio that gets optimized using a computationally feasible two-step\nmethod.\n\nSee [1] for details.\n\n[1] M. Londschien, P. Bühlmann, and S. Kovács (2023). \"Random Forests for Change Point Detection\" Journal of Machine Learning Research\n",
      "dev_url": "https://github.com/mlondschien/changeforest",
      "home": "https://github.com/mlondschien/changeforest",
      "license": "BSD-3-Clause",
      "license_file": "LICENSE",
      "summary": "Classifier based non-parametric change point detection"
    },
    "build": {
      "number": "1",
      "script": "PYTHON -m pip install . -vv"
    },
    "extra": {
      "recipe-maintainers": [
        "mlondschien"
      ]
    },
    "package": {
      "name": "changeforest",
      "version": "1.1.4"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "rust_compiler_stub"
      ],
      "host": [
        "python",
        "pip",
        "maturin"
      ],
      "run": [
        "python",
        "numpy"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "b07f7da19e613ba04e613618e80e1cee4c2017f2c1f662f35cc59504f6669136",
      "url": "https://pypi.io/packages/source/c/changeforest/changeforest-1.1.4.tar.gz"
    },
    "test": {
      "commands": [
        "pip check"
      ],
      "imports": [
        "changeforest"
      ],
      "requires": [
        "pip"
      ]
    }
  },
  "win_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "rust_compiler_stub"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "maturin",
        "pip",
        "python"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "numpy",
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "pip"
      ]
    }
  }
}