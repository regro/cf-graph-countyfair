{
  "archived": false,
  "branch": "main",
  "conda-forge.yml": {
    "build_platform": {
      "linux_ppc64le": "linux_ppc64le",
      "osx_arm64": "osx_64"
    },
    "conda_build": {
      "pkg_format": "2"
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    },
    "provider": {
      "linux_aarch64": "azure",
      "linux_ppc64le": "azure"
    },
    "test": "native_and_emulated"
  },
  "feedstock_name": "zfpy",
  "hash_type": "sha256",
  "linux_64_meta_yaml": {
    "about": {
      "description": "zfp is an open source C/C++ library for compressed numerical arrays\nthat support high throughput read and write random access. zfp also\nsupports streaming compression of integer and floating-point data,\ne.g., for applications that read and write large data sets to and\nfrom disk. zfp is primarily written in C and C++ but also includes\nPython and Fortran bindings.\n",
      "dev_url": "https://github.com/LLNL/zfp",
      "doc_url": "https://zfp.readthedocs.io/",
      "home": "https://zfp.llnl.gov",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE",
      "summary": "Library for compressed numerical arrays that support high throughput read and write random access"
    },
    "build": {
      "number": "3",
      "run_exports": [
        "zfp"
      ],
      "script": "source ${RECIPE_DIR}/build_zfp.sh"
    },
    "extra": {
      "recipe-maintainers": [
        "kmpaul",
        "ToreAad",
        "lindstro",
        "GarrettDMorrison",
        "hmaarrfk"
      ]
    },
    "outputs": [
      {
        "name": "zfp"
      },
      {
        "build": {
          "script": "source ${RECIPE_DIR}/build_zfpy.sh"
        },
        "name": "zfpy",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "c_stdlib_stub",
            "cxx_compiler_stub",
            "cmake",
            "make"
          ],
          "host": [
            "python",
            "numpy",
            "cython",
            "zfp"
          ],
          "run": [
            "python",
            "zfp"
          ]
        },
        "test": {
          "imports": [
            "zfpy"
          ]
        }
      }
    ],
    "package": {
      "name": "zfp",
      "version": "1.0.1"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "cmake",
        "make",
        "libgomp"
      ]
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "fix_find_python_stuff.patch"
      ],
      "sha256": "4984db6a55bc919831966dd17ba5e47ca7ac58668f4fd278ebd98cd2200da66f",
      "url": "https://github.com/LLNL/zfp/archive/1.0.1.tar.gz"
    },
    "test": {
      "commands": [
        "test -f $PREFIX/include/zfp.h",
        "test -f ${PREFIX}/lib/cmake/zfp/zfp-config.cmake",
        "test -f $PREFIX/lib/libzfp.so.1.0.1",
        "test -f $PREFIX/lib/libzfp${SHLIB_EXT}",
        "which zfp"
      ]
    }
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "libgomp",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "cython",
        "numpy",
        "python",
        "zfp"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "python",
        "zfp"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "linux_aarch64_meta_yaml": {
    "about": {
      "description": "zfp is an open source C/C++ library for compressed numerical arrays\nthat support high throughput read and write random access. zfp also\nsupports streaming compression of integer and floating-point data,\ne.g., for applications that read and write large data sets to and\nfrom disk. zfp is primarily written in C and C++ but also includes\nPython and Fortran bindings.\n",
      "dev_url": "https://github.com/LLNL/zfp",
      "doc_url": "https://zfp.readthedocs.io/",
      "home": "https://zfp.llnl.gov",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE",
      "summary": "Library for compressed numerical arrays that support high throughput read and write random access"
    },
    "build": {
      "number": "3",
      "run_exports": [
        "zfp"
      ],
      "script": "source ${RECIPE_DIR}/build_zfp.sh"
    },
    "extra": {
      "recipe-maintainers": [
        "kmpaul",
        "ToreAad",
        "lindstro",
        "GarrettDMorrison",
        "hmaarrfk"
      ]
    },
    "outputs": [
      {
        "name": "zfp"
      },
      {
        "build": {
          "script": "source ${RECIPE_DIR}/build_zfpy.sh"
        },
        "name": "zfpy",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "c_stdlib_stub",
            "cxx_compiler_stub",
            "cmake",
            "make"
          ],
          "host": [
            "python",
            "numpy",
            "cython",
            "zfp"
          ],
          "run": [
            "python",
            "zfp"
          ]
        },
        "test": {
          "imports": [
            "zfpy"
          ]
        }
      }
    ],
    "package": {
      "name": "zfp",
      "version": "1.0.1"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "cmake",
        "make",
        "libgomp"
      ]
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "fix_find_python_stuff.patch"
      ],
      "sha256": "4984db6a55bc919831966dd17ba5e47ca7ac58668f4fd278ebd98cd2200da66f",
      "url": "https://github.com/LLNL/zfp/archive/1.0.1.tar.gz"
    },
    "test": {
      "commands": [
        "test -f $PREFIX/include/zfp.h",
        "test -f ${PREFIX}/lib/cmake/zfp/zfp-config.cmake",
        "test -f $PREFIX/lib/libzfp.so.1.0.1",
        "test -f $PREFIX/lib/libzfp${SHLIB_EXT}",
        "which zfp"
      ]
    }
  },
  "linux_aarch64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "libgomp",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "cython",
        "numpy",
        "python",
        "zfp"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "python",
        "zfp"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "linux_ppc64le_meta_yaml": {
    "about": {
      "description": "zfp is an open source C/C++ library for compressed numerical arrays\nthat support high throughput read and write random access. zfp also\nsupports streaming compression of integer and floating-point data,\ne.g., for applications that read and write large data sets to and\nfrom disk. zfp is primarily written in C and C++ but also includes\nPython and Fortran bindings.\n",
      "dev_url": "https://github.com/LLNL/zfp",
      "doc_url": "https://zfp.readthedocs.io/",
      "home": "https://zfp.llnl.gov",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE",
      "summary": "Library for compressed numerical arrays that support high throughput read and write random access"
    },
    "build": {
      "number": "3",
      "run_exports": [
        "zfp"
      ],
      "script": "source ${RECIPE_DIR}/build_zfp.sh"
    },
    "extra": {
      "recipe-maintainers": [
        "kmpaul",
        "ToreAad",
        "lindstro",
        "GarrettDMorrison",
        "hmaarrfk"
      ]
    },
    "outputs": [
      {
        "name": "zfp"
      },
      {
        "build": {
          "script": "source ${RECIPE_DIR}/build_zfpy.sh"
        },
        "name": "zfpy",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "c_stdlib_stub",
            "cxx_compiler_stub",
            "cmake",
            "make"
          ],
          "host": [
            "python",
            "numpy",
            "cython",
            "zfp"
          ],
          "run": [
            "python",
            "zfp"
          ]
        },
        "test": {
          "imports": [
            "zfpy"
          ]
        }
      }
    ],
    "package": {
      "name": "zfp",
      "version": "1.0.1"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "cmake",
        "make",
        "libgomp"
      ]
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "fix_find_python_stuff.patch"
      ],
      "sha256": "4984db6a55bc919831966dd17ba5e47ca7ac58668f4fd278ebd98cd2200da66f",
      "url": "https://github.com/LLNL/zfp/archive/1.0.1.tar.gz"
    },
    "test": {
      "commands": [
        "test -f $PREFIX/include/zfp.h",
        "test -f ${PREFIX}/lib/cmake/zfp/zfp-config.cmake",
        "test -f $PREFIX/lib/libzfp.so.1.0.1",
        "test -f $PREFIX/lib/libzfp${SHLIB_EXT}",
        "which zfp"
      ]
    }
  },
  "linux_ppc64le_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "libgomp",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "cython",
        "numpy",
        "python",
        "zfp"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "python",
        "zfp"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "meta_yaml": {
    "about": {
      "description": "zfp is an open source C/C++ library for compressed numerical arrays\nthat support high throughput read and write random access. zfp also\nsupports streaming compression of integer and floating-point data,\ne.g., for applications that read and write large data sets to and\nfrom disk. zfp is primarily written in C and C++ but also includes\nPython and Fortran bindings.\n",
      "dev_url": "https://github.com/LLNL/zfp",
      "doc_url": "https://zfp.readthedocs.io/",
      "home": "https://zfp.llnl.gov",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE",
      "summary": "Library for compressed numerical arrays that support high throughput read and write random access"
    },
    "build": {
      "number": "3",
      "run_exports": [
        "zfp"
      ],
      "script": "RECIPE_DIR\\bld_zfp.bat"
    },
    "extra": {
      "recipe-maintainers": [
        "kmpaul",
        "ToreAad",
        "lindstro",
        "GarrettDMorrison",
        "hmaarrfk"
      ]
    },
    "outputs": [
      {
        "name": "zfp"
      },
      {
        "build": {
          "script": "source ${RECIPE_DIR}/build_zfpy.sh"
        },
        "name": "zfpy",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "c_stdlib_stub",
            "cxx_compiler_stub",
            "cmake",
            "make"
          ],
          "host": [
            "python",
            "numpy",
            "cython",
            "zfp"
          ],
          "run": [
            "python",
            "zfp"
          ]
        },
        "test": {
          "imports": [
            "zfpy"
          ]
        }
      },
      {
        "name": "zfp"
      },
      {
        "build": {
          "script": "source ${RECIPE_DIR}/build_zfpy.sh"
        },
        "name": "zfpy",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "c_stdlib_stub",
            "cxx_compiler_stub",
            "cmake",
            "make"
          ],
          "host": [
            "python",
            "numpy",
            "cython",
            "zfp"
          ],
          "run": [
            "python",
            "zfp"
          ]
        },
        "test": {
          "imports": [
            "zfpy"
          ]
        }
      },
      {
        "name": "zfp"
      },
      {
        "build": {
          "script": "source ${RECIPE_DIR}/build_zfpy.sh"
        },
        "name": "zfpy",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "c_stdlib_stub",
            "cxx_compiler_stub",
            "cmake",
            "make"
          ],
          "host": [
            "python",
            "numpy",
            "cython",
            "zfp"
          ],
          "run": [
            "python",
            "zfp"
          ]
        },
        "test": {
          "imports": [
            "zfpy"
          ]
        }
      },
      {
        "name": "zfp"
      },
      {
        "build": {
          "script": "source ${RECIPE_DIR}/build_zfpy.sh"
        },
        "name": "zfpy",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "c_stdlib_stub",
            "cxx_compiler_stub",
            "cmake",
            "make"
          ],
          "host": [
            "python",
            "numpy",
            "cython",
            "zfp"
          ],
          "run": [
            "python",
            "zfp"
          ]
        },
        "test": {
          "imports": [
            "zfpy"
          ]
        }
      },
      {
        "name": "zfp"
      },
      {
        "build": {
          "script": "source ${RECIPE_DIR}/build_zfpy.sh"
        },
        "name": "zfpy",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "c_stdlib_stub",
            "cxx_compiler_stub",
            "cmake",
            "make"
          ],
          "host": [
            "python",
            "numpy",
            "cython",
            "zfp"
          ],
          "run": [
            "python",
            "zfp"
          ]
        },
        "test": {
          "imports": [
            "zfpy"
          ]
        }
      },
      {
        "name": "zfp"
      },
      {
        "build": {
          "script": "RECIPE_DIR\\bld_zfpy.bat"
        },
        "name": "zfpy",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "c_stdlib_stub",
            "cxx_compiler_stub",
            "cmake",
            "ninja"
          ],
          "host": [
            "python",
            "numpy",
            "cython",
            "zfp"
          ],
          "run": [
            "python",
            "zfp"
          ]
        },
        "test": {
          "imports": [
            "zfpy"
          ]
        }
      }
    ],
    "package": {
      "name": "zfp",
      "version": "1.0.1"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "cmake",
        "make",
        "libgomp",
        "llvm-openmp",
        "ninja"
      ]
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "fix_find_python_stuff.patch"
      ],
      "sha256": "4984db6a55bc919831966dd17ba5e47ca7ac58668f4fd278ebd98cd2200da66f",
      "url": "https://github.com/LLNL/zfp/archive/1.0.1.tar.gz"
    },
    "test": {
      "commands": [
        "test -f $PREFIX/include/zfp.h",
        "test -f ${PREFIX}/lib/cmake/zfp/zfp-config.cmake",
        "test -f $PREFIX/lib/libzfp.so.1.0.1",
        "test -f $PREFIX/lib/libzfp${SHLIB_EXT}",
        "which zfp",
        "if not exist %LIBRARY_INC%\\zfp.h exit 1",
        "if not exist %LIBRARY_BIN%\\zfp.dll exit 1",
        "if not exist %LIBRARY_LIB%\\zfp.lib exit 1",
        "if not exist %LIBRARY_PREFIX%\\lib\\cmake\\zfp\\zfp-config.cmake exit 1",
        "where zfpcmd"
      ]
    }
  },
  "name": "zfp",
  "osx_64_meta_yaml": {
    "about": {
      "description": "zfp is an open source C/C++ library for compressed numerical arrays\nthat support high throughput read and write random access. zfp also\nsupports streaming compression of integer and floating-point data,\ne.g., for applications that read and write large data sets to and\nfrom disk. zfp is primarily written in C and C++ but also includes\nPython and Fortran bindings.\n",
      "dev_url": "https://github.com/LLNL/zfp",
      "doc_url": "https://zfp.readthedocs.io/",
      "home": "https://zfp.llnl.gov",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE",
      "summary": "Library for compressed numerical arrays that support high throughput read and write random access"
    },
    "build": {
      "number": "3",
      "run_exports": [
        "zfp"
      ],
      "script": "source ${RECIPE_DIR}/build_zfp.sh"
    },
    "extra": {
      "recipe-maintainers": [
        "kmpaul",
        "ToreAad",
        "lindstro",
        "GarrettDMorrison",
        "hmaarrfk"
      ]
    },
    "outputs": [
      {
        "name": "zfp"
      },
      {
        "build": {
          "script": "source ${RECIPE_DIR}/build_zfpy.sh"
        },
        "name": "zfpy",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "c_stdlib_stub",
            "cxx_compiler_stub",
            "cmake",
            "make"
          ],
          "host": [
            "python",
            "numpy",
            "cython",
            "zfp"
          ],
          "run": [
            "python",
            "zfp"
          ]
        },
        "test": {
          "imports": [
            "zfpy"
          ]
        }
      }
    ],
    "package": {
      "name": "zfp",
      "version": "1.0.1"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "cmake",
        "make",
        "llvm-openmp"
      ]
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "fix_find_python_stuff.patch"
      ],
      "sha256": "4984db6a55bc919831966dd17ba5e47ca7ac58668f4fd278ebd98cd2200da66f",
      "url": "https://github.com/LLNL/zfp/archive/1.0.1.tar.gz"
    },
    "test": {
      "commands": [
        "test -f $PREFIX/include/zfp.h",
        "test -f ${PREFIX}/lib/cmake/zfp/zfp-config.cmake",
        "test -f $PREFIX/lib/libzfp${SHLIB_EXT}",
        "which zfp"
      ]
    }
  },
  "osx_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "llvm-openmp",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "cython",
        "numpy",
        "python",
        "zfp"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "python",
        "zfp"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "osx_arm64_meta_yaml": {
    "about": {
      "description": "zfp is an open source C/C++ library for compressed numerical arrays\nthat support high throughput read and write random access. zfp also\nsupports streaming compression of integer and floating-point data,\ne.g., for applications that read and write large data sets to and\nfrom disk. zfp is primarily written in C and C++ but also includes\nPython and Fortran bindings.\n",
      "dev_url": "https://github.com/LLNL/zfp",
      "doc_url": "https://zfp.readthedocs.io/",
      "home": "https://zfp.llnl.gov",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE",
      "summary": "Library for compressed numerical arrays that support high throughput read and write random access"
    },
    "build": {
      "number": "3",
      "run_exports": [
        "zfp"
      ],
      "script": "source ${RECIPE_DIR}/build_zfp.sh"
    },
    "extra": {
      "recipe-maintainers": [
        "kmpaul",
        "ToreAad",
        "lindstro",
        "GarrettDMorrison",
        "hmaarrfk"
      ]
    },
    "outputs": [
      {
        "name": "zfp"
      },
      {
        "build": {
          "script": "source ${RECIPE_DIR}/build_zfpy.sh"
        },
        "name": "zfpy",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "c_stdlib_stub",
            "cxx_compiler_stub",
            "cmake",
            "make"
          ],
          "host": [
            "python",
            "numpy",
            "cython",
            "zfp"
          ],
          "run": [
            "python",
            "zfp"
          ]
        },
        "test": {
          "imports": [
            "zfpy"
          ]
        }
      }
    ],
    "package": {
      "name": "zfp",
      "version": "1.0.1"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "cmake",
        "make",
        "llvm-openmp"
      ]
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "fix_find_python_stuff.patch"
      ],
      "sha256": "4984db6a55bc919831966dd17ba5e47ca7ac58668f4fd278ebd98cd2200da66f",
      "url": "https://github.com/LLNL/zfp/archive/1.0.1.tar.gz"
    },
    "test": {
      "commands": [
        "test -f $PREFIX/include/zfp.h",
        "test -f ${PREFIX}/lib/cmake/zfp/zfp-config.cmake",
        "test -f $PREFIX/lib/libzfp${SHLIB_EXT}",
        "which zfp"
      ]
    }
  },
  "osx_arm64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "llvm-openmp",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "cython",
        "numpy",
        "python",
        "zfp"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "python",
        "zfp"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "outputs_names": {
    "__set__": true,
    "elements": [
      "zfp",
      "zfpy"
    ]
  },
  "parsing_error": false,
  "platforms": [
    "linux_64",
    "linux_aarch64",
    "linux_ppc64le",
    "osx_64",
    "osx_arm64",
    "win_64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/zfpy.json"
  },
  "raw_meta_yaml": "{% set version = \"1.0.1\" %}\n\n# This package builds 2 outputs\n#    zfp     --- C headers\n#    zfpy    --- Python package\n#\n# The build procedure actually rebuilds zfp when zfpy is being built\n# during the install phase, conda will simply ignore all the files\n# that are being copied related to zfp since they already exist in the prefix\n\npackage:\n  name: zfp\n  version: {{ version }}\n\nsource:\n  url: https://github.com/LLNL/zfp/archive/{{ version }}.tar.gz\n  sha256: 4984db6a55bc919831966dd17ba5e47ca7ac58668f4fd278ebd98cd2200da66f\n  patches:\n    - fix_find_python_stuff.patch\n\nbuild:\n  number: 3\n  script: source ${RECIPE_DIR}/build_zfp.sh  # [unix]\n  script: {{ RECIPE_DIR }}\\bld_zfp.bat  # [win]\n  run_exports:\n    # No real information, for now, let keep the defaults\n    - {{ pin_subpackage('zfp') }}\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ stdlib(\"c\") }}\n    - {{ compiler('cxx') }}\n    - cmake\n    - make     # [unix]\n    - ninja    # [win]\n    - libgomp  # [linux]\n    - llvm-openmp  # [osx]\n\ntest:\n  commands:\n    - test -f $PREFIX/include/zfp.h                # [unix]\n    - test -f ${PREFIX}/lib/cmake/zfp/zfp-config.cmake  # [unix]\n    - if not exist %LIBRARY_INC%\\zfp.h exit 1      # [win]\n    - test -f $PREFIX/lib/libzfp.so.{{ version }}  # [linux]\n    - test -f $PREFIX/lib/libzfp${SHLIB_EXT}       # [unix]\n    - if not exist %LIBRARY_BIN%\\zfp.dll exit 1    # [win]\n    - if not exist %LIBRARY_LIB%\\zfp.lib exit 1    # [win]\n    - if not exist %LIBRARY_PREFIX%\\lib\\cmake\\zfp\\zfp-config.cmake exit 1  # [win]\n    # Command always returns 1\n    - which zfp     # [unix]\n    # They chose to specifically have a different name for the executable\n    # https://github.com/LLNL/zfp/pull/63\n    - where zfpcmd  # [win]\n\noutputs:\n  - name: zfp\n  - name: zfpy\n    build:\n      script: source ${RECIPE_DIR}/build_zfpy.sh  # [unix]\n      script: {{ RECIPE_DIR }}\\bld_zfpy.bat  # [win]\n    requirements:\n      build:\n        - {{ compiler('c') }}\n        - {{ stdlib(\"c\") }}\n        - {{ compiler('cxx') }}\n        - cmake\n        - make     # [unix]\n        - ninja    # [win]\n        - python                                 # [build_platform != target_platform]\n        - cross-python_{{ target_platform }}     # [build_platform != target_platform]\n        - cython                                 # [build_platform != target_platform]\n        - numpy                                  # [build_platform != target_platform]\n      host:\n        - python\n        - numpy\n        - cython\n        - {{ pin_subpackage('zfp', exact=True) }}\n      run:\n        - python\n        # I don't think run exports work with pin exact subpackage\n        - {{ pin_subpackage('zfp', exact=True) }}\n    test:\n      imports:\n        - zfpy\n\nabout:\n  home: https://zfp.llnl.gov\n  license: BSD-3-Clause\n  license_family: BSD\n  license_file: LICENSE\n  summary: Library for compressed numerical arrays that support high throughput read and write random access\n  description: |\n    zfp is an open source C/C++ library for compressed numerical arrays\n    that support high throughput read and write random access. zfp also\n    supports streaming compression of integer and floating-point data,\n    e.g., for applications that read and write large data sets to and\n    from disk. zfp is primarily written in C and C++ but also includes\n    Python and Fortran bindings.\n  doc_url: https://zfp.readthedocs.io/\n  dev_url: https://github.com/LLNL/zfp\n\nextra:\n  recipe-maintainers:\n    - kmpaul\n    - ToreAad\n    - lindstro\n    - GarrettDMorrison\n    - hmaarrfk\n",
  "req": {
    "__set__": true,
    "elements": [
      "c_compiler_stub",
      "c_stdlib_stub",
      "cmake",
      "cxx_compiler_stub",
      "cython",
      "libgomp",
      "llvm-openmp",
      "make",
      "ninja",
      "numpy",
      "python",
      "zfp"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "libgomp",
        "llvm-openmp",
        "make",
        "ninja"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "ctng-compilers",
        "cxx_compiler_stub",
        "cython",
        "numpy",
        "openmp",
        "python",
        "zfp"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "ctng-compilers",
        "cxx_compiler_stub",
        "openmp",
        "python",
        "zfp"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "libgomp",
        "llvm-openmp",
        "make",
        "ninja"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "cython",
        "numpy",
        "python",
        "zfp"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "python",
        "zfp"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "url": "https://github.com/LLNL/zfp/archive/1.0.1.tar.gz",
  "version": "1.0.1",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/zfpy.json"
  },
  "win_64_meta_yaml": {
    "about": {
      "description": "zfp is an open source C/C++ library for compressed numerical arrays\nthat support high throughput read and write random access. zfp also\nsupports streaming compression of integer and floating-point data,\ne.g., for applications that read and write large data sets to and\nfrom disk. zfp is primarily written in C and C++ but also includes\nPython and Fortran bindings.\n",
      "dev_url": "https://github.com/LLNL/zfp",
      "doc_url": "https://zfp.readthedocs.io/",
      "home": "https://zfp.llnl.gov",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE",
      "summary": "Library for compressed numerical arrays that support high throughput read and write random access"
    },
    "build": {
      "number": "3",
      "run_exports": [
        "zfp"
      ],
      "script": "RECIPE_DIR\\bld_zfp.bat"
    },
    "extra": {
      "recipe-maintainers": [
        "kmpaul",
        "ToreAad",
        "lindstro",
        "GarrettDMorrison",
        "hmaarrfk"
      ]
    },
    "outputs": [
      {
        "name": "zfp"
      },
      {
        "build": {
          "script": "RECIPE_DIR\\bld_zfpy.bat"
        },
        "name": "zfpy",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "c_stdlib_stub",
            "cxx_compiler_stub",
            "cmake",
            "ninja"
          ],
          "host": [
            "python",
            "numpy",
            "cython",
            "zfp"
          ],
          "run": [
            "python",
            "zfp"
          ]
        },
        "test": {
          "imports": [
            "zfpy"
          ]
        }
      }
    ],
    "package": {
      "name": "zfp",
      "version": "1.0.1"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "cmake",
        "ninja"
      ]
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "fix_find_python_stuff.patch"
      ],
      "sha256": "4984db6a55bc919831966dd17ba5e47ca7ac58668f4fd278ebd98cd2200da66f",
      "url": "https://github.com/LLNL/zfp/archive/1.0.1.tar.gz"
    },
    "test": {
      "commands": [
        "if not exist %LIBRARY_INC%\\zfp.h exit 1",
        "if not exist %LIBRARY_BIN%\\zfp.dll exit 1",
        "if not exist %LIBRARY_LIB%\\zfp.lib exit 1",
        "if not exist %LIBRARY_PREFIX%\\lib\\cmake\\zfp\\zfp-config.cmake exit 1",
        "where zfpcmd"
      ]
    }
  },
  "win_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "ninja"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "cython",
        "numpy",
        "python",
        "zfp"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "python",
        "zfp"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  }
}