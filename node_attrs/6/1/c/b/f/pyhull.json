{
  "archived": false,
  "branch": "main",
  "conda-forge.yml": {
    "bot": {
      "automerge": true
    },
    "build_platform": {
      "osx_arm64": "osx_64"
    },
    "conda_build": {
      "pkg_format": "2"
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    },
    "provider": {
      "win": "azure"
    },
    "test": "native_and_emulated"
  },
  "feedstock_hash": "5c2cc05aedf0b656d6a086fb41e2001264125fc2",
  "feedstock_hash_ts": 1730882614,
  "feedstock_name": "pyhull",
  "hash_type": "sha256",
  "linux_64_meta_yaml": {
    "about": {
      "description": "Pyhull is a Python wrapper to Qhull (http://www.qhull.org/) for the computation of the convex hull, Delaunay\ntriangulation and Voronoi diagram. It is written as a Python C extension, with both high-level and low-level\ninterfaces to qhull.\nPyhull has been tested to scale to 10,000 7D points for convex hull calculations (results in ~ 10 seconds),\nand 10,000 6D points for Delaunay triangulations and Voronoi tesselations (~ 100 seconds). Higher number of\npoints and higher dimensions should be accessible depending on your machine, but may take a significant\namount of time.\n",
      "dev_url": "https://github.com/materialsvirtuallab/pyhull",
      "doc_url": "http://packages.python.org/pyhull/",
      "home": "https://github.com/materialsvirtuallab/pyhull",
      "license": "MIT",
      "license_family": "MIT",
      "license_file": "LICENSE.rst",
      "summary": "Pyhull is a Python wrapper to Qhull (http://www.qhull.org/) for the computation of the convex hull"
    },
    "build": {
      "number": "8",
      "script": [
        "export LIBRARY_PREFIX=$PREFIX",
        "PYTHON -m pip install . -vvv"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "jan-janssen"
      ]
    },
    "package": {
      "name": "pyhull",
      "version": "2015.2.1"
    },
    "requirements": {
      "build": [
        "cxx_compiler_stub",
        "c_stdlib_stub"
      ],
      "host": [
        "python",
        "numpy",
        "pip",
        "qhull"
      ],
      "run": [
        "python",
        "numpy",
        "pip",
        "qhull"
      ]
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "pyhull.patch"
      ],
      "sha256": "d2ff0aa3298b548287587609a24f4e2aae7f7b8b1df152a90cd313260abc3a24",
      "url": "https://pypi.io/packages/source/p/pyhull/pyhull-2015.2.1.tar.gz"
    },
    "test": {
      "commands": [
        "pip check"
      ],
      "imports": [
        "pyhull"
      ]
    }
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_stdlib_stub",
        "cxx_compiler_stub"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "numpy",
        "pip",
        "python",
        "qhull"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "numpy",
        "pip",
        "python",
        "qhull"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "meta_yaml": {
    "about": {
      "description": "Pyhull is a Python wrapper to Qhull (http://www.qhull.org/) for the computation of the convex hull, Delaunay\ntriangulation and Voronoi diagram. It is written as a Python C extension, with both high-level and low-level\ninterfaces to qhull.\nPyhull has been tested to scale to 10,000 7D points for convex hull calculations (results in ~ 10 seconds),\nand 10,000 6D points for Delaunay triangulations and Voronoi tesselations (~ 100 seconds). Higher number of\npoints and higher dimensions should be accessible depending on your machine, but may take a significant\namount of time.\n",
      "dev_url": "https://github.com/materialsvirtuallab/pyhull",
      "doc_url": "http://packages.python.org/pyhull/",
      "home": "https://github.com/materialsvirtuallab/pyhull",
      "license": "MIT",
      "license_family": "MIT",
      "license_file": "LICENSE.rst",
      "summary": "Pyhull is a Python wrapper to Qhull (http://www.qhull.org/) for the computation of the convex hull"
    },
    "build": {
      "number": "8",
      "script": [
        "export LIBRARY_PREFIX=$PREFIX",
        "PYTHON -m pip install . -vvv"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "jan-janssen"
      ]
    },
    "package": {
      "name": "pyhull",
      "version": "2015.2.1"
    },
    "requirements": {
      "build": [
        "cxx_compiler_stub",
        "c_stdlib_stub"
      ],
      "host": [
        "python",
        "numpy",
        "pip",
        "qhull"
      ],
      "run": [
        "python",
        "numpy",
        "pip",
        "qhull"
      ]
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "pyhull.patch"
      ],
      "sha256": "d2ff0aa3298b548287587609a24f4e2aae7f7b8b1df152a90cd313260abc3a24",
      "url": "https://pypi.io/packages/source/p/pyhull/pyhull-2015.2.1.tar.gz"
    },
    "test": {
      "commands": [
        "pip check"
      ],
      "imports": [
        "pyhull"
      ]
    }
  },
  "name": "pyhull",
  "osx_64_meta_yaml": {
    "about": {
      "description": "Pyhull is a Python wrapper to Qhull (http://www.qhull.org/) for the computation of the convex hull, Delaunay\ntriangulation and Voronoi diagram. It is written as a Python C extension, with both high-level and low-level\ninterfaces to qhull.\nPyhull has been tested to scale to 10,000 7D points for convex hull calculations (results in ~ 10 seconds),\nand 10,000 6D points for Delaunay triangulations and Voronoi tesselations (~ 100 seconds). Higher number of\npoints and higher dimensions should be accessible depending on your machine, but may take a significant\namount of time.\n",
      "dev_url": "https://github.com/materialsvirtuallab/pyhull",
      "doc_url": "http://packages.python.org/pyhull/",
      "home": "https://github.com/materialsvirtuallab/pyhull",
      "license": "MIT",
      "license_family": "MIT",
      "license_file": "LICENSE.rst",
      "summary": "Pyhull is a Python wrapper to Qhull (http://www.qhull.org/) for the computation of the convex hull"
    },
    "build": {
      "number": "8",
      "script": [
        "export LIBRARY_PREFIX=$PREFIX",
        "PYTHON -m pip install . -vvv"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "jan-janssen"
      ]
    },
    "package": {
      "name": "pyhull",
      "version": "2015.2.1"
    },
    "requirements": {
      "build": [
        "cxx_compiler_stub",
        "c_stdlib_stub"
      ],
      "host": [
        "python",
        "numpy",
        "pip",
        "qhull"
      ],
      "run": [
        "python",
        "numpy",
        "pip",
        "qhull"
      ]
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "pyhull.patch"
      ],
      "sha256": "d2ff0aa3298b548287587609a24f4e2aae7f7b8b1df152a90cd313260abc3a24",
      "url": "https://pypi.io/packages/source/p/pyhull/pyhull-2015.2.1.tar.gz"
    },
    "test": {
      "commands": [
        "pip check"
      ],
      "imports": [
        "pyhull"
      ]
    }
  },
  "osx_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_stdlib_stub",
        "cxx_compiler_stub"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "numpy",
        "pip",
        "python",
        "qhull"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "numpy",
        "pip",
        "python",
        "qhull"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "osx_arm64_meta_yaml": {
    "about": {
      "description": "Pyhull is a Python wrapper to Qhull (http://www.qhull.org/) for the computation of the convex hull, Delaunay\ntriangulation and Voronoi diagram. It is written as a Python C extension, with both high-level and low-level\ninterfaces to qhull.\nPyhull has been tested to scale to 10,000 7D points for convex hull calculations (results in ~ 10 seconds),\nand 10,000 6D points for Delaunay triangulations and Voronoi tesselations (~ 100 seconds). Higher number of\npoints and higher dimensions should be accessible depending on your machine, but may take a significant\namount of time.\n",
      "dev_url": "https://github.com/materialsvirtuallab/pyhull",
      "doc_url": "http://packages.python.org/pyhull/",
      "home": "https://github.com/materialsvirtuallab/pyhull",
      "license": "MIT",
      "license_family": "MIT",
      "license_file": "LICENSE.rst",
      "summary": "Pyhull is a Python wrapper to Qhull (http://www.qhull.org/) for the computation of the convex hull"
    },
    "build": {
      "number": "8",
      "script": [
        "export LIBRARY_PREFIX=$PREFIX",
        "PYTHON -m pip install . -vvv"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "jan-janssen"
      ]
    },
    "package": {
      "name": "pyhull",
      "version": "2015.2.1"
    },
    "requirements": {
      "build": [
        "cxx_compiler_stub",
        "c_stdlib_stub"
      ],
      "host": [
        "python",
        "numpy",
        "pip",
        "qhull"
      ],
      "run": [
        "python",
        "numpy",
        "pip",
        "qhull"
      ]
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "pyhull.patch"
      ],
      "sha256": "d2ff0aa3298b548287587609a24f4e2aae7f7b8b1df152a90cd313260abc3a24",
      "url": "https://pypi.io/packages/source/p/pyhull/pyhull-2015.2.1.tar.gz"
    },
    "test": {
      "commands": [
        "pip check"
      ],
      "imports": [
        "pyhull"
      ]
    }
  },
  "osx_arm64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_stdlib_stub",
        "cxx_compiler_stub"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "numpy",
        "pip",
        "python",
        "qhull"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "numpy",
        "pip",
        "python",
        "qhull"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "outputs_names": {
    "__set__": true,
    "elements": [
      "pyhull"
    ]
  },
  "parsing_error": false,
  "platforms": [
    "linux_64",
    "osx_64",
    "osx_arm64",
    "win_64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/pyhull.json"
  },
  "raw_meta_yaml": "{% set name = \"pyhull\" %}\n{% set version = \"2015.2.1\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: d2ff0aa3298b548287587609a24f4e2aae7f7b8b1df152a90cd313260abc3a24\n  patches:\n    - pyhull.patch\n\nbuild:\n  number: 8\n  script:\n    - export LIBRARY_PREFIX=$PREFIX          # [unix]\n    - \"{{ PYTHON }} -m pip install . -vvv\"\n\nrequirements:\n  build:\n    - python                                 # [build_platform != target_platform]\n    - cross-python_{{ target_platform }}     # [build_platform != target_platform]\n    - numpy                                  # [build_platform != target_platform]\n    - {{ compiler('cxx') }}\n    - {{ stdlib(\"c\") }}\n  host:\n    - python\n    - numpy\n    - pip\n    - qhull \n  run:\n    - python\n    - numpy\n    - pip\n    - qhull\n\ntest:\n  imports:\n    - pyhull\n  commands:\n    - pip check\n\nabout:\n  home: https://github.com/materialsvirtuallab/pyhull\n  license: MIT\n  license_family: MIT\n  license_file: 'LICENSE.rst'\n  summary: 'Pyhull is a Python wrapper to Qhull (http://www.qhull.org/) for the computation of the convex hull'\n\n  description: |\n    Pyhull is a Python wrapper to Qhull (http://www.qhull.org/) for the computation of the convex hull, Delaunay\n    triangulation and Voronoi diagram. It is written as a Python C extension, with both high-level and low-level\n    interfaces to qhull.\n    Pyhull has been tested to scale to 10,000 7D points for convex hull calculations (results in ~ 10 seconds),\n    and 10,000 6D points for Delaunay triangulations and Voronoi tesselations (~ 100 seconds). Higher number of\n    points and higher dimensions should be accessible depending on your machine, but may take a significant\n    amount of time.\n  doc_url: http://packages.python.org/pyhull/\n  dev_url: https://github.com/materialsvirtuallab/pyhull\n\nextra:\n  recipe-maintainers:\n    - jan-janssen\n",
  "req": {
    "__set__": true,
    "elements": [
      "c_stdlib_stub",
      "cxx_compiler_stub",
      "numpy",
      "pip",
      "python",
      "qhull"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_stdlib_stub",
        "cxx_compiler_stub"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "numpy",
        "pip",
        "python",
        "qhull"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "numpy",
        "pip",
        "python",
        "qhull"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_stdlib_stub",
        "cxx_compiler_stub"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "numpy",
        "pip",
        "python",
        "qhull"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "numpy",
        "pip",
        "python",
        "qhull"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "url": "https://pypi.io/packages/source/p/pyhull/pyhull-2015.2.1.tar.gz",
  "version": "2015.2.1",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/pyhull.json"
  },
  "win_64_meta_yaml": {
    "about": {
      "description": "Pyhull is a Python wrapper to Qhull (http://www.qhull.org/) for the computation of the convex hull, Delaunay\ntriangulation and Voronoi diagram. It is written as a Python C extension, with both high-level and low-level\ninterfaces to qhull.\nPyhull has been tested to scale to 10,000 7D points for convex hull calculations (results in ~ 10 seconds),\nand 10,000 6D points for Delaunay triangulations and Voronoi tesselations (~ 100 seconds). Higher number of\npoints and higher dimensions should be accessible depending on your machine, but may take a significant\namount of time.\n",
      "dev_url": "https://github.com/materialsvirtuallab/pyhull",
      "doc_url": "http://packages.python.org/pyhull/",
      "home": "https://github.com/materialsvirtuallab/pyhull",
      "license": "MIT",
      "license_family": "MIT",
      "license_file": "LICENSE.rst",
      "summary": "Pyhull is a Python wrapper to Qhull (http://www.qhull.org/) for the computation of the convex hull"
    },
    "build": {
      "number": "8",
      "script": [
        "PYTHON -m pip install . -vvv"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "jan-janssen"
      ]
    },
    "package": {
      "name": "pyhull",
      "version": "2015.2.1"
    },
    "requirements": {
      "build": [
        "cxx_compiler_stub",
        "c_stdlib_stub"
      ],
      "host": [
        "python",
        "numpy",
        "pip",
        "qhull"
      ],
      "run": [
        "python",
        "numpy",
        "pip",
        "qhull"
      ]
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "pyhull.patch"
      ],
      "sha256": "d2ff0aa3298b548287587609a24f4e2aae7f7b8b1df152a90cd313260abc3a24",
      "url": "https://pypi.io/packages/source/p/pyhull/pyhull-2015.2.1.tar.gz"
    },
    "test": {
      "commands": [
        "pip check"
      ],
      "imports": [
        "pyhull"
      ]
    }
  },
  "win_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_stdlib_stub",
        "cxx_compiler_stub"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "numpy",
        "pip",
        "python",
        "qhull"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "numpy",
        "pip",
        "python",
        "qhull"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  }
}