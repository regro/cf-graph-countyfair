{
  "archived": false,
  "branch": "main",
  "conda-forge.yml": {
    "compiler_stack": "comp7",
    "conda_build": {
      "pkg_format": "2"
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    },
    "max_py_ver": "37",
    "max_r_ver": "35",
    "provider": {
      "linux_aarch64": "azure",
      "linux_ppc64le": "azure",
      "win": "azure"
    }
  },
  "feedstock_hash": "2b832149ed3266af4c4efd84e207b1a3dbc4b94b",
  "feedstock_hash_ts": 1730870225,
  "feedstock_name": "c99-to-c89",
  "hash_type": "sha256",
  "meta_yaml": {
    "about": {
      "dev_url": "https://github.com/libav/c99-to-c89",
      "home": "https://github.com/libav/c99-to-c89",
      "license": "Apache 2.0",
      "license_family": "Apache",
      "license_file": "LICENSE",
      "summary": "Tool to convert C99 code to MSVC-compatible C89, with many Anaconda Distribution fixes"
    },
    "build": {
      "number": "1000"
    },
    "extra": {
      "recipe-maintainers": [
        "mingwandroid",
        "ocefpaf",
        "patricksnape"
      ]
    },
    "package": {
      "name": "c99-to-c89",
      "version": "1.0.4"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "m2-sed",
        "m2-base",
        "m2-make",
        "m2-filesystem",
        "m2-p7zip",
        "m2w64-tools-git"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "1df2ec430d34e9034d162969fe1a12cee50fa67cacdcc60d7b57b6c45b576467",
      "url": "https://github.com/AnacondaRecipes/c99-to-c89/archive/release-1.0.4.tar.gz"
    },
    "test": {
      "commands": [
        "echo on",
        "echo cd %CD%",
        "set C99_TO_C89_CONV_DEBUG_LEVEL=0",
        "set C99_TO_C89_WRAP_DEBUG_LEVEL=0",
        "set C99_TO_C89_WRAP_SAVE_TEMPS=1",
        "set C99_TO_C89_WRAP_NO_LINE_DIRECTIVES=1",
        "c99wrap cl /nologo -DDLL_EXPORT -DHAVE_CONFIG_H -D_CRT_NONSTDC_NO_DEPRECATE -D_CRT_SECURE_NO_DEPRECATE -Dlzma_EXPORTS -I%CD%\\tests /DWIN32 /D_WINDOWS /Fo%TEMP%\\check.c.obj -c %CD%\\tests\\check.c",
        "echo /nologo -DDLL_EXPORT -DHAVE_CONFIG_H -D_CRT_NONSTDC_NO_DEPRECATE -D_CRT_SECURE_NO_DEPRECATE -Dlzma_EXPORTS -I%CD%\\tests /DWIN32 /D_WINDOWS /Fo%TEMP%\\check.c.obj -c %CD%\\tests\\check.c > response-file",
        "c99wrap cl @response-file",
        "set C99_TO_C89_CONV_DEBUG_LEVEL=2",
        "set C99_TO_C89_WRAP_DEBUG_LEVEL=2",
        "c99wrap cl /Folzma_encoder_optimal_normal.c.obj -c %CD%\\tests\\lzma_encoder_optimal_normal.c",
        "c99wrap cl /Focheck-2.c.obj -c %CD%\\tests\\check-2.c",
        "c99wrap cl /Fotest-macro-line-continuation.o -c %CD%\\tests\\test-macro-line-continuation.c",
        "c99wrap cl /Fotest-pragma-comment.o -c %CD%\\tests\\test-pragma-comment.c",
        "c99conv -ms %CD%\\tests\\stream_encoder.c.obj_preprocessed.c stream_encoder.c.converted.c",
        "findstr elseif stream_encoder.c.converted.c && (exit /b 1) || (exit /b 0)"
      ],
      "files": [
        "tests"
      ],
      "requires": [
        "c_compiler_stub"
      ]
    }
  },
  "name": "c99-to-c89",
  "outputs_names": {
    "__set__": true,
    "elements": [
      "c99-to-c89"
    ]
  },
  "parsing_error": false,
  "platforms": [
    "win_64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/c99-to-c89.json"
  },
  "raw_meta_yaml": "{% set version = \"1.0.4\" %}\n\npackage:\n  name: c99-to-c89\n  version: {{ version }}\n\nsource:\n  url: https://github.com/AnacondaRecipes/c99-to-c89/archive/release-{{ version }}.tar.gz\n  sha256: 1df2ec430d34e9034d162969fe1a12cee50fa67cacdcc60d7b57b6c45b576467\n\n\nbuild:\n  number: 1000\n  skip: True  # [unix]\n  skip: true  # [win and vc!=14]\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - msinttypes  # [win and vc==9]\n    - m2-sed\n    - m2-base\n    - m2-make\n    - m2-filesystem\n    - m2-p7zip\n    - m2w64-tools-git\n\ntest:\n  requires:\n    - {{ compiler('c') }}\n  files:\n    - tests\n  commands:\n    - echo on\n    - echo cd %CD%\n    - set C99_TO_C89_CONV_DEBUG_LEVEL=0\n    - set C99_TO_C89_WRAP_DEBUG_LEVEL=0\n    - set C99_TO_C89_WRAP_SAVE_TEMPS=1\n    - set C99_TO_C89_WRAP_NO_LINE_DIRECTIVES=1\n    # Simple but large test:\n    - c99wrap cl /nologo -DDLL_EXPORT -DHAVE_CONFIG_H -D_CRT_NONSTDC_NO_DEPRECATE -D_CRT_SECURE_NO_DEPRECATE -Dlzma_EXPORTS -I%CD%\\tests /DWIN32 /D_WINDOWS /Fo%TEMP%\\check.c.obj -c %CD%\\tests\\check.c\n    - echo /nologo -DDLL_EXPORT -DHAVE_CONFIG_H -D_CRT_NONSTDC_NO_DEPRECATE -D_CRT_SECURE_NO_DEPRECATE -Dlzma_EXPORTS -I%CD%\\tests /DWIN32 /D_WINDOWS /Fo%TEMP%\\check.c.obj -c %CD%\\tests\\check.c > response-file\n    # Same test but via a response-file:\n    - c99wrap cl @response-file\n    # Small tests from now on so can safely enable a lot of debug output:\n    - set C99_TO_C89_CONV_DEBUG_LEVEL=2\n    - set C99_TO_C89_WRAP_DEBUG_LEVEL=2\n    # Test fix for broken handling of empty cond-statement in loops when moving the decl out of the init-expression:\n    # for (int i = 0 ; ; ++i) {} => int i = 0 ; ; for ( ; i++) {}\n    - c99wrap cl /Folzma_encoder_optimal_normal.c.obj -c %CD%\\tests\\lzma_encoder_optimal_normal.c\n    # Simple case I broke when attempting to fix cursor position management bug tested below:\n    - c99wrap cl /Focheck-2.c.obj -c %CD%\\tests\\check-2.c\n    # The cl pre-processor does not remove line continuations and the cl compiler cannot handle these:\n    - c99wrap cl /Fotest-macro-line-continuation.o -c %CD%\\tests\\test-macro-line-continuation.c\n    - c99wrap cl /Fotest-pragma-comment.o -c %CD%\\tests\\test-pragma-comment.c\n    # Next problem, cursor position management bug. \"else if\" => \"elseif\" and all other spaces vanish\n    # after insertion text to an earlier position on the same line, fixed by maintaining relative spacing.\n    # .. this test must be the last one due it exiting in both cases (though we could probably make it a\n    # c99wrap test instead so failure to compile would cause a natural exit).\n    - c99conv -ms %CD%\\tests\\stream_encoder.c.obj_preprocessed.c stream_encoder.c.converted.c\n    - findstr elseif stream_encoder.c.converted.c && (exit /b 1) || (exit /b 0)\n\nabout:\n  home: https://github.com/libav/c99-to-c89\n  license: Apache 2.0\n  license_family: Apache\n  license_file: LICENSE\n  summary: 'Tool to convert C99 code to MSVC-compatible C89, with many Anaconda Distribution fixes'\n  dev_url: https://github.com/libav/c99-to-c89\n\nextra:\n  recipe-maintainers:\n    - mingwandroid\n    - ocefpaf\n    - patricksnape\n",
  "req": {
    "__set__": true,
    "elements": [
      "c_compiler_stub",
      "m2-base",
      "m2-filesystem",
      "m2-make",
      "m2-p7zip",
      "m2-sed",
      "m2w64-tools-git"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "m2-base",
        "m2-filesystem",
        "m2-make",
        "m2-p7zip",
        "m2-sed",
        "m2w64-tools-git"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "c_compiler_stub"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "c_compiler_stub"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "c_compiler_stub"
      ]
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "m2-base",
        "m2-filesystem",
        "m2-make",
        "m2-p7zip",
        "m2-sed",
        "m2w64-tools-git"
      ]
    },
    "host": {
      "__set__": true,
      "elements": []
    },
    "run": {
      "__set__": true,
      "elements": []
    },
    "test": {
      "__set__": true,
      "elements": [
        "c_compiler_stub"
      ]
    }
  },
  "url": "https://github.com/AnacondaRecipes/c99-to-c89/archive/release-1.0.4.tar.gz",
  "version": "1.0.4",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/c99-to-c89.json"
  },
  "win_64_meta_yaml": {
    "about": {
      "dev_url": "https://github.com/libav/c99-to-c89",
      "home": "https://github.com/libav/c99-to-c89",
      "license": "Apache 2.0",
      "license_family": "Apache",
      "license_file": "LICENSE",
      "summary": "Tool to convert C99 code to MSVC-compatible C89, with many Anaconda Distribution fixes"
    },
    "build": {
      "number": "1000"
    },
    "extra": {
      "recipe-maintainers": [
        "mingwandroid",
        "ocefpaf",
        "patricksnape"
      ]
    },
    "package": {
      "name": "c99-to-c89",
      "version": "1.0.4"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "m2-sed",
        "m2-base",
        "m2-make",
        "m2-filesystem",
        "m2-p7zip",
        "m2w64-tools-git"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "1df2ec430d34e9034d162969fe1a12cee50fa67cacdcc60d7b57b6c45b576467",
      "url": "https://github.com/AnacondaRecipes/c99-to-c89/archive/release-1.0.4.tar.gz"
    },
    "test": {
      "commands": [
        "echo on",
        "echo cd %CD%",
        "set C99_TO_C89_CONV_DEBUG_LEVEL=0",
        "set C99_TO_C89_WRAP_DEBUG_LEVEL=0",
        "set C99_TO_C89_WRAP_SAVE_TEMPS=1",
        "set C99_TO_C89_WRAP_NO_LINE_DIRECTIVES=1",
        "c99wrap cl /nologo -DDLL_EXPORT -DHAVE_CONFIG_H -D_CRT_NONSTDC_NO_DEPRECATE -D_CRT_SECURE_NO_DEPRECATE -Dlzma_EXPORTS -I%CD%\\tests /DWIN32 /D_WINDOWS /Fo%TEMP%\\check.c.obj -c %CD%\\tests\\check.c",
        "echo /nologo -DDLL_EXPORT -DHAVE_CONFIG_H -D_CRT_NONSTDC_NO_DEPRECATE -D_CRT_SECURE_NO_DEPRECATE -Dlzma_EXPORTS -I%CD%\\tests /DWIN32 /D_WINDOWS /Fo%TEMP%\\check.c.obj -c %CD%\\tests\\check.c > response-file",
        "c99wrap cl @response-file",
        "set C99_TO_C89_CONV_DEBUG_LEVEL=2",
        "set C99_TO_C89_WRAP_DEBUG_LEVEL=2",
        "c99wrap cl /Folzma_encoder_optimal_normal.c.obj -c %CD%\\tests\\lzma_encoder_optimal_normal.c",
        "c99wrap cl /Focheck-2.c.obj -c %CD%\\tests\\check-2.c",
        "c99wrap cl /Fotest-macro-line-continuation.o -c %CD%\\tests\\test-macro-line-continuation.c",
        "c99wrap cl /Fotest-pragma-comment.o -c %CD%\\tests\\test-pragma-comment.c",
        "c99conv -ms %CD%\\tests\\stream_encoder.c.obj_preprocessed.c stream_encoder.c.converted.c",
        "findstr elseif stream_encoder.c.converted.c && (exit /b 1) || (exit /b 0)"
      ],
      "files": [
        "tests"
      ],
      "requires": [
        "c_compiler_stub"
      ]
    }
  },
  "win_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "m2-base",
        "m2-filesystem",
        "m2-make",
        "m2-p7zip",
        "m2-sed",
        "m2w64-tools-git"
      ]
    },
    "host": {
      "__set__": true,
      "elements": []
    },
    "run": {
      "__set__": true,
      "elements": []
    },
    "test": {
      "__set__": true,
      "elements": [
        "c_compiler_stub"
      ]
    }
  }
}