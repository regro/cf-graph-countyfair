{
  "archived": false,
  "branch": "main",
  "conda-forge.yml": {
    "bot": {
      "automerge": true
    },
    "build_platform": {
      "linux_aarch64": "linux_64",
      "linux_ppc64le": "linux_64"
    },
    "conda_build": {
      "pkg_format": "2"
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    },
    "provider": {
      "linux_aarch64": "default",
      "linux_ppc64le": "default"
    }
  },
  "feedstock_name": "gpaw",
  "hash_type": "sha256",
  "linux_64_meta_yaml": {
    "about": {
      "description": "GPAW is a density-functional theory (DFT) Python code based on the\nprojector-augmented wave (PAW) method and the atomic simulation environment\n(ASE). It uses plane-waves, atom-centered basis-functions or real-space\nuniform grids combined with multigrid methods.\n",
      "dev_url": "https://gitlab.com/gpaw/gpaw",
      "doc_url": "https://wiki.fysik.dtu.dk/gpaw/documentation/documentation.html",
      "home": "https://wiki.fysik.dtu.dk/gpaw",
      "license": "GPL-3.0-or-later",
      "license_family": "GPL",
      "license_file": "LICENSE",
      "summary": "GPAW: DFT and beyond within the projector-augmented wave method"
    },
    "build": {
      "number": "2",
      "string": "py_mpi_openmpi_omp_2",
      "track_features": null
    },
    "extra": {
      "recipe-maintainers": [
        "jan-janssen",
        "gdonval"
      ]
    },
    "package": {
      "name": "gpaw",
      "version": "25.7.0"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub"
      ],
      "host": [
        "mpich",
        "python",
        "setuptools",
        "elpa * mpi_mpich_*",
        "libxc >=5.2",
        "libblas",
        "scalapack",
        "fftw * mpi_mpich_*",
        "numpy",
        "pip",
        "ase",
        "libvdwxc * mpi_mpich_*",
        "elpa * nompi_*",
        "fftw * nompi_*",
        "openmpi",
        "elpa * mpi_openmpi_*",
        "fftw * mpi_openmpi_*",
        "libvdwxc * mpi_openmpi_*"
      ],
      "run": [
        "python",
        "numpy",
        "scipy",
        "ase",
        "gpaw-data >=1",
        "pyyaml"
      ]
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "elpa.patch",
        "mpi4py.patch"
      ],
      "sha256": "93ac829bba36be74eab0d7deef5eb798613c04edbce196837208d206cf39c431",
      "url": "https://pypi.org/packages/source/g/gpaw/gpaw-25.7.0.tar.gz"
    },
    "test": {
      "commands": [
        "python -m pip check",
        "gpaw test",
        "export OMPI_MCA_plm=isolated",
        "export OMPI_MCA_btl_vader_single_copy_mechanism=none",
        "export OMPI_MCA_rmaps_base_oversubscribe=yes",
        "python -c \"import gpaw\""
      ],
      "imports": null,
      "requires": [
        "pip"
      ]
    }
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "ase",
        "elpa",
        "fftw",
        "libblas",
        "libvdwxc",
        "libxc",
        "mpich",
        "numpy",
        "openmpi",
        "pip",
        "python",
        "scalapack",
        "setuptools"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "ase",
        "gpaw-data",
        "numpy",
        "python",
        "pyyaml",
        "scipy"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "pip"
      ]
    }
  },
  "linux_aarch64_meta_yaml": {
    "about": {
      "description": "GPAW is a density-functional theory (DFT) Python code based on the\nprojector-augmented wave (PAW) method and the atomic simulation environment\n(ASE). It uses plane-waves, atom-centered basis-functions or real-space\nuniform grids combined with multigrid methods.\n",
      "dev_url": "https://gitlab.com/gpaw/gpaw",
      "doc_url": "https://wiki.fysik.dtu.dk/gpaw/documentation/documentation.html",
      "home": "https://wiki.fysik.dtu.dk/gpaw",
      "license": "GPL-3.0-or-later",
      "license_family": "GPL",
      "license_file": "LICENSE",
      "summary": "GPAW: DFT and beyond within the projector-augmented wave method"
    },
    "build": {
      "number": "2",
      "string": "py_mpi_openmpi_omp_2",
      "track_features": null
    },
    "extra": {
      "recipe-maintainers": [
        "jan-janssen",
        "gdonval"
      ]
    },
    "package": {
      "name": "gpaw",
      "version": "25.7.0"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub"
      ],
      "host": [
        "mpich",
        "python",
        "setuptools",
        "elpa * mpi_mpich_*",
        "libxc >=5.2",
        "libblas",
        "scalapack",
        "fftw * mpi_mpich_*",
        "numpy",
        "pip",
        "ase",
        "libvdwxc * mpi_mpich_*",
        "elpa * nompi_*",
        "fftw * nompi_*",
        "openmpi",
        "elpa * mpi_openmpi_*",
        "fftw * mpi_openmpi_*",
        "libvdwxc * mpi_openmpi_*"
      ],
      "run": [
        "python",
        "numpy",
        "scipy",
        "ase",
        "gpaw-data >=1",
        "pyyaml"
      ]
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "elpa.patch",
        "mpi4py.patch"
      ],
      "sha256": "93ac829bba36be74eab0d7deef5eb798613c04edbce196837208d206cf39c431",
      "url": "https://pypi.org/packages/source/g/gpaw/gpaw-25.7.0.tar.gz"
    },
    "test": {
      "commands": [
        "python -m pip check",
        "gpaw test",
        "export OMPI_MCA_plm=isolated",
        "export OMPI_MCA_btl_vader_single_copy_mechanism=none",
        "export OMPI_MCA_rmaps_base_oversubscribe=yes",
        "python -c \"import gpaw\""
      ],
      "imports": null,
      "requires": [
        "pip"
      ]
    }
  },
  "linux_aarch64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "ase",
        "elpa",
        "fftw",
        "libblas",
        "libvdwxc",
        "libxc",
        "mpich",
        "numpy",
        "openmpi",
        "pip",
        "python",
        "scalapack",
        "setuptools"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "ase",
        "gpaw-data",
        "numpy",
        "python",
        "pyyaml",
        "scipy"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "pip"
      ]
    }
  },
  "linux_ppc64le_meta_yaml": {
    "about": {
      "description": "GPAW is a density-functional theory (DFT) Python code based on the\nprojector-augmented wave (PAW) method and the atomic simulation environment\n(ASE). It uses plane-waves, atom-centered basis-functions or real-space\nuniform grids combined with multigrid methods.\n",
      "dev_url": "https://gitlab.com/gpaw/gpaw",
      "doc_url": "https://wiki.fysik.dtu.dk/gpaw/documentation/documentation.html",
      "home": "https://wiki.fysik.dtu.dk/gpaw",
      "license": "GPL-3.0-or-later",
      "license_family": "GPL",
      "license_file": "LICENSE",
      "summary": "GPAW: DFT and beyond within the projector-augmented wave method"
    },
    "build": {
      "number": "2",
      "string": "py_mpi_openmpi_omp_2",
      "track_features": null
    },
    "extra": {
      "recipe-maintainers": [
        "jan-janssen",
        "gdonval"
      ]
    },
    "package": {
      "name": "gpaw",
      "version": "25.7.0"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub"
      ],
      "host": [
        "mpich",
        "python",
        "setuptools",
        "elpa * mpi_mpich_*",
        "libxc >=5.2",
        "libblas",
        "scalapack",
        "fftw * mpi_mpich_*",
        "numpy",
        "pip",
        "ase",
        "libvdwxc * mpi_mpich_*",
        "elpa * nompi_*",
        "fftw * nompi_*",
        "openmpi",
        "elpa * mpi_openmpi_*",
        "fftw * mpi_openmpi_*",
        "libvdwxc * mpi_openmpi_*"
      ],
      "run": [
        "python",
        "numpy",
        "scipy",
        "ase",
        "gpaw-data >=1",
        "pyyaml"
      ]
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "elpa.patch",
        "mpi4py.patch"
      ],
      "sha256": "93ac829bba36be74eab0d7deef5eb798613c04edbce196837208d206cf39c431",
      "url": "https://pypi.org/packages/source/g/gpaw/gpaw-25.7.0.tar.gz"
    },
    "test": {
      "commands": [
        "python -m pip check",
        "gpaw test",
        "export OMPI_MCA_plm=isolated",
        "export OMPI_MCA_btl_vader_single_copy_mechanism=none",
        "export OMPI_MCA_rmaps_base_oversubscribe=yes",
        "python -c \"import gpaw\""
      ],
      "imports": null,
      "requires": [
        "pip"
      ]
    }
  },
  "linux_ppc64le_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "ase",
        "elpa",
        "fftw",
        "libblas",
        "libvdwxc",
        "libxc",
        "mpich",
        "numpy",
        "openmpi",
        "pip",
        "python",
        "scalapack",
        "setuptools"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "ase",
        "gpaw-data",
        "numpy",
        "python",
        "pyyaml",
        "scipy"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "pip"
      ]
    }
  },
  "meta_yaml": {
    "about": {
      "description": "GPAW is a density-functional theory (DFT) Python code based on the\nprojector-augmented wave (PAW) method and the atomic simulation environment\n(ASE). It uses plane-waves, atom-centered basis-functions or real-space\nuniform grids combined with multigrid methods.\n",
      "dev_url": "https://gitlab.com/gpaw/gpaw",
      "doc_url": "https://wiki.fysik.dtu.dk/gpaw/documentation/documentation.html",
      "home": "https://wiki.fysik.dtu.dk/gpaw",
      "license": "GPL-3.0-or-later",
      "license_family": "GPL",
      "license_file": "LICENSE",
      "summary": "GPAW: DFT and beyond within the projector-augmented wave method"
    },
    "build": {
      "number": "2",
      "string": "py_mpi_openmpi_omp_2",
      "track_features": null
    },
    "extra": {
      "recipe-maintainers": [
        "jan-janssen",
        "gdonval"
      ]
    },
    "package": {
      "name": "gpaw",
      "version": "25.7.0"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub"
      ],
      "host": [
        "mpich",
        "python",
        "setuptools",
        "elpa * mpi_mpich_*",
        "libxc >=5.2",
        "libblas",
        "scalapack",
        "fftw * mpi_mpich_*",
        "numpy",
        "pip",
        "ase",
        "libvdwxc * mpi_mpich_*",
        "elpa * nompi_*",
        "fftw * nompi_*",
        "openmpi",
        "elpa * mpi_openmpi_*",
        "fftw * mpi_openmpi_*",
        "libvdwxc * mpi_openmpi_*"
      ],
      "run": [
        "python",
        "numpy",
        "scipy",
        "ase",
        "gpaw-data >=1",
        "pyyaml"
      ]
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "elpa.patch",
        "mpi4py.patch"
      ],
      "sha256": "93ac829bba36be74eab0d7deef5eb798613c04edbce196837208d206cf39c431",
      "url": "https://pypi.org/packages/source/g/gpaw/gpaw-25.7.0.tar.gz"
    },
    "test": {
      "commands": [
        "python -m pip check",
        "gpaw test",
        "export OMPI_MCA_plm=isolated",
        "export OMPI_MCA_btl_vader_single_copy_mechanism=none",
        "export OMPI_MCA_rmaps_base_oversubscribe=yes",
        "python -c \"import gpaw\""
      ],
      "imports": null,
      "requires": [
        "pip"
      ]
    }
  },
  "name": "gpaw",
  "osx_64_meta_yaml": {
    "about": {
      "description": "GPAW is a density-functional theory (DFT) Python code based on the\nprojector-augmented wave (PAW) method and the atomic simulation environment\n(ASE). It uses plane-waves, atom-centered basis-functions or real-space\nuniform grids combined with multigrid methods.\n",
      "dev_url": "https://gitlab.com/gpaw/gpaw",
      "doc_url": "https://wiki.fysik.dtu.dk/gpaw/documentation/documentation.html",
      "home": "https://wiki.fysik.dtu.dk/gpaw",
      "license": "GPL-3.0-or-later",
      "license_family": "GPL",
      "license_file": "LICENSE",
      "summary": "GPAW: DFT and beyond within the projector-augmented wave method"
    },
    "build": {
      "number": "2",
      "string": "py_mpi_openmpi_omp_2",
      "track_features": null
    },
    "extra": {
      "recipe-maintainers": [
        "jan-janssen",
        "gdonval"
      ]
    },
    "package": {
      "name": "gpaw",
      "version": "25.7.0"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub"
      ],
      "host": [
        "mpich",
        "python",
        "setuptools",
        "elpa * mpi_mpich_*",
        "libxc >=5.2",
        "libblas",
        "scalapack",
        "fftw * mpi_mpich_*",
        "numpy",
        "pip",
        "ase",
        "libvdwxc * mpi_mpich_*",
        "elpa * nompi_*",
        "fftw * nompi_*",
        "openmpi",
        "elpa * mpi_openmpi_*",
        "fftw * mpi_openmpi_*",
        "libvdwxc * mpi_openmpi_*"
      ],
      "run": [
        "python",
        "numpy",
        "scipy",
        "ase",
        "gpaw-data >=1",
        "pyyaml"
      ]
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "elpa.patch",
        "mpi4py.patch"
      ],
      "sha256": "93ac829bba36be74eab0d7deef5eb798613c04edbce196837208d206cf39c431",
      "url": "https://pypi.org/packages/source/g/gpaw/gpaw-25.7.0.tar.gz"
    },
    "test": {
      "commands": [
        "python -m pip check",
        "gpaw test",
        "export OMPI_MCA_plm=isolated",
        "export OMPI_MCA_btl_vader_single_copy_mechanism=none",
        "export OMPI_MCA_rmaps_base_oversubscribe=yes",
        "python -c \"import gpaw\""
      ],
      "imports": null,
      "requires": [
        "pip"
      ]
    }
  },
  "osx_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "ase",
        "elpa",
        "fftw",
        "libblas",
        "libvdwxc",
        "libxc",
        "mpich",
        "numpy",
        "openmpi",
        "pip",
        "python",
        "scalapack",
        "setuptools"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "ase",
        "gpaw-data",
        "numpy",
        "python",
        "pyyaml",
        "scipy"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "pip"
      ]
    }
  },
  "outputs_names": {
    "__set__": true,
    "elements": [
      "gpaw"
    ]
  },
  "parsing_error": false,
  "platforms": [
    "linux_64",
    "linux_aarch64",
    "linux_ppc64le",
    "osx_64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/gpaw.json"
  },
  "raw_meta_yaml": "{% set build = 2 %}\n{% set name = \"gpaw\" %}\n{% set version = \"25.7.0\" %}\n\n{% if mpi != 'nompi' %}\n  {% set mpi_prefix = \"mpi_\" + mpi %}\n{% else %}\n  {% set mpi_prefix = \"nompi\" %}\n{% endif %}\n{% set build_string = \"py{}_{}_omp_{}\".format(environ.get('CONDA_PY', ''), mpi_prefix, build) %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.org/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: 93ac829bba36be74eab0d7deef5eb798613c04edbce196837208d206cf39c431\n  patches:\n    - elpa.patch\n    - mpi4py.patch\n\nbuild:\n  number: {{ build }}\n  string: {{ build_string }}\n  skip: true  # [win]\n  track_features:\n    - gpaw-has_lower_priority  # [mpi != \"openmpi\"]\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ stdlib(\"c\") }}\n    - {{ compiler('cxx') }}\n    - {{ mpi }}  # [mpi == 'openmpi' and build_platform != target_platform]\n  host:\n    - {{ mpi }}  # [mpi != 'nompi']\n    - python\n    - setuptools\n    - elpa * {{ mpi_prefix }}_*\n    - libxc >=5.2\n    - libblas\n    - scalapack  # [mpi != 'nompi']\n    - fftw * {{ mpi_prefix }}_*\n    - numpy\n    - pip\n    - ase\n    - libvdwxc * {{ mpi_prefix }}_*  # [mpi != 'nompi']\n  run:\n    - python\n    - {{ pin_compatible('numpy') }}\n    - scipy\n    - ase\n    - gpaw-data >=1\n    - pyyaml\n\ntest:\n  requires:\n    - pip\n  imports:\n    - gpaw  # [mpi == 'nompi']\n  commands:\n    - python -m pip check\n    - export OMPI_MCA_plm=isolated                          # [mpi == 'openmpi']\n    - export OMPI_MCA_btl_vader_single_copy_mechanism=none  # [mpi == 'openmpi']\n    - export OMPI_MCA_rmaps_base_oversubscribe=yes          # [mpi == 'openmpi']\n    - python -c \"import gpaw\"                               # [mpi == 'openmpi']\n    - gpaw test\n\nabout:\n  home: https://wiki.fysik.dtu.dk/gpaw\n  license: GPL-3.0-or-later\n  license_family: GPL\n  license_file: LICENSE\n  summary: 'GPAW: DFT and beyond within the projector-augmented wave method'\n  description: |\n    GPAW is a density-functional theory (DFT) Python code based on the\n    projector-augmented wave (PAW) method and the atomic simulation environment\n    (ASE). It uses plane-waves, atom-centered basis-functions or real-space\n    uniform grids combined with multigrid methods.\n  doc_url: https://wiki.fysik.dtu.dk/gpaw/documentation/documentation.html\n  dev_url: https://gitlab.com/gpaw/gpaw\n\nextra:\n  recipe-maintainers:\n    - jan-janssen\n    - gdonval\n",
  "req": {
    "__set__": true,
    "elements": [
      "ase",
      "c_compiler_stub",
      "c_stdlib_stub",
      "cxx_compiler_stub",
      "elpa",
      "fftw",
      "gpaw-data",
      "libblas",
      "libvdwxc",
      "libxc",
      "mpich",
      "numpy",
      "openmpi",
      "pip",
      "python",
      "pyyaml",
      "scalapack",
      "scipy",
      "setuptools"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "ase",
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "elpa",
        "fftw",
        "libblas",
        "libvdwxc",
        "libxc",
        "mpich",
        "numpy",
        "openmpi",
        "pip",
        "python",
        "scalapack",
        "setuptools"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "ase",
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "gpaw-data",
        "numpy",
        "python",
        "pyyaml",
        "scipy"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "pip"
      ]
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "ase",
        "elpa * mpi_mpich_*",
        "elpa * mpi_openmpi_*",
        "elpa * nompi_*",
        "fftw * mpi_mpich_*",
        "fftw * mpi_openmpi_*",
        "fftw * nompi_*",
        "libblas",
        "libvdwxc * mpi_mpich_*",
        "libvdwxc * mpi_openmpi_*",
        "libxc >=5.2",
        "mpich",
        "numpy",
        "openmpi",
        "pip",
        "python",
        "scalapack",
        "setuptools"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "ase",
        "gpaw-data >=1",
        "numpy",
        "python",
        "pyyaml",
        "scipy"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "pip"
      ]
    }
  },
  "url": "https://pypi.org/packages/source/g/gpaw/gpaw-25.7.0.tar.gz",
  "version": "25.7.0",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/gpaw.json"
  }
}