{
  "archived": false,
  "branch": "main",
  "conda-forge.yml": {
    "azure": {
      "free_disk_space": true,
      "settings_linux": {
        "swapfile_size": "10GiB"
      }
    },
    "bot": {
      "abi_migration_branches": [
        "6.31.x",
        "5.29.x"
      ]
    },
    "build_platform": {
      "linux_aarch64": "linux_64",
      "linux_ppc64le": "linux_64",
      "osx_arm64": "osx_64"
    },
    "conda_build": {
      "pkg_format": "2"
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    },
    "provider": {
      "linux_aarch64": "default",
      "linux_ppc64le": "default",
      "win": "azure"
    },
    "test": "native_and_emulated"
  },
  "feedstock_name": "libprotobuf",
  "hash_type": "sha256",
  "linux_64_meta_yaml": {
    "about": {
      "description": "Protocol buffers are Google's language-neutral,\nplatform-neutral, extensible mechanism for serializing structured data-\nthink XML, but smaller, faster, and simpler.\n",
      "dev_url": "https://github.com/protocolbuffers/protobuf",
      "doc_source_url": "https://github.com/protocolbuffers/protobuf/releases",
      "doc_url": "https://developers.google.com/protocol-buffers/",
      "home": "https://developers.google.com/protocol-buffers/",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE",
      "summary": "Protocol Buffers - Google's data interchange format. C++ Libraries and protoc, the protobuf compiler."
    },
    "build": {
      "number": "1"
    },
    "extra": {
      "feedstock-name": "libprotobuf",
      "recipe-maintainers": [
        "JohanMabille",
        "jjerphan",
        "xylar",
        "dopplershift",
        "jakirkham",
        "ocefpaf",
        "wesm",
        "hajapy",
        "xhochy",
        "h-vetinari"
      ]
    },
    "outputs": [
      {
        "build": {
          "ignore_run_exports_from": [
            "gtest",
            "jsoncpp"
          ],
          "run_exports": [
            "libprotobuf"
          ]
        },
        "name": "libprotobuf",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cmake",
            "ninja"
          ],
          "host": [
            "gtest",
            "jsoncpp",
            "libabseil",
            "libabseil-tests",
            "zlib"
          ],
          "run": []
        },
        "script": "build-lib.sh",
        "test": {
          "commands": [
            "test -f ${PREFIX}/lib/libprotoc.so",
            "test ! -f ${PREFIX}/lib/libprotoc.a",
            "test -f ${PREFIX}/lib/libprotobuf.so",
            "test ! -f ${PREFIX}/lib/libprotobuf.a",
            "test -f ${PREFIX}/lib/libprotobuf-lite.so",
            "test ! -f ${PREFIX}/lib/libprotobuf-lite.a",
            "test -f ${PREFIX}/lib/utf8_range.so",
            "test ! -f ${PREFIX}/lib/utf8_range.a",
            "test -f ${PREFIX}/lib/utf8_validity.so",
            "test ! -f ${PREFIX}/lib/utf8_validity.a",
            "test -d ${PREFIX}/include/upb",
            "test -f ${PREFIX}/lib/libupb.a",
            "test -f ${PREFIX}/include/upb/wire/internal/reader.h",
            "nm -g $PREFIX/lib/libupb.a | grep -E \"[TD] upb_Arena_Free\"",
            "nm -g $PREFIX/lib/libupb.a | grep -E \"[TD] upb_Arena_Init\"",
            "nm -g $PREFIX/lib/libupb.a | grep -E \"[TD] upb_Decode\"",
            "nm -g $PREFIX/lib/libupb.a | grep -E \"[TD] upb_Encode\"",
            "nm -g $PREFIX/lib/libupb.a | grep -E \"[TD] upb_alloc_global\"",
            "nm -g $PREFIX/lib/libupb.a | grep -E \"[TD] _upb_Arena_SlowMalloc_dont_copy_me__upb_internal_use_only\"",
            "test -f ${PREFIX}/lib/cmake/protobuf/protobuf-config.cmake",
            "pkg-config --print-errors --exact-version \"32.1.0\" protobuf",
            "pkg-config --print-errors --exact-version \"32.1.0\" protobuf-lite",
            "protoc --help",
            "cd cmake_test",
            "cmake -GNinja $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/"
          ],
          "requires": [
            "cxx_compiler_stub",
            "binutils",
            "grep",
            "cmake",
            "ninja",
            "pkg-config"
          ]
        }
      },
      {
        "build": {
          "always_include_files": [
            "lib/cmake/protobuf/",
            "lib/cmake/utf8_range/"
          ],
          "ignore_run_exports_from": [
            "jsoncpp"
          ]
        },
        "name": "libprotobuf-static",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cmake",
            "ninja"
          ],
          "host": [
            "gtest",
            "jsoncpp",
            "libabseil",
            "libabseil-tests",
            "zlib",
            "libprotobuf"
          ],
          "run": [
            "libprotobuf"
          ]
        },
        "script": "build-lib.sh",
        "test": {
          "commands": [
            "test -f ${PREFIX}/lib/libprotoc.a",
            "test -f ${PREFIX}/lib/libprotobuf.a",
            "test -f ${PREFIX}/lib/libprotobuf-lite.a",
            "cd cmake_test",
            "cmake -GNinja $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/"
          ],
          "requires": [
            "cxx_compiler_stub",
            "cmake",
            "ninja",
            "zlib"
          ]
        }
      },
      {
        "name": "libprotobuf-python-headers",
        "requirements": {
          "build": [
            "rsync"
          ],
          "host": [
            "libprotobuf"
          ],
          "run_constrained": [
            "libprotobuf 6.32.1"
          ]
        },
        "script": "build-pyheaders.sh",
        "test": {
          "commands": [
            "test -f $PREFIX/include/google/protobuf/proto_api.h",
            "test -f $PREFIX/include/google/protobuf/pyext/message.h"
          ]
        }
      }
    ],
    "package": {
      "name": "libprotobuf-split",
      "version": "6.32.1"
    },
    "schema_version": 0,
    "source": [
      {
        "patches": [
          "patches/0001-set-static-lib-extension-on-windows.patch",
          "patches/0002-always-look-for-shared-abseil-builds.patch",
          "patches/0003-do-not-install-vendored-gmock.patch",
          "patches/0005-export-symbols-needed-by-grpc.patch",
          "patches/0010-Workaround-nvcc-bug-in-message_lite.h.patch"
        ],
        "sha256": "d2081ab9528292f7980ef2d88d2be472453eea4222141046ad4f660874d5f24e",
        "url": "https://github.com/protocolbuffers/protobuf/archive/refs/tags/v32.1.tar.gz"
      }
    ]
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "ninja",
        "rsync"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "gtest",
        "jsoncpp",
        "libabseil",
        "libabseil-tests",
        "libprotobuf",
        "zlib"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "libprotobuf"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "binutils",
        "cmake",
        "cxx_compiler_stub",
        "grep",
        "ninja",
        "pkg-config",
        "zlib"
      ]
    }
  },
  "linux_aarch64_meta_yaml": {
    "about": {
      "description": "Protocol buffers are Google's language-neutral,\nplatform-neutral, extensible mechanism for serializing structured data-\nthink XML, but smaller, faster, and simpler.\n",
      "dev_url": "https://github.com/protocolbuffers/protobuf",
      "doc_source_url": "https://github.com/protocolbuffers/protobuf/releases",
      "doc_url": "https://developers.google.com/protocol-buffers/",
      "home": "https://developers.google.com/protocol-buffers/",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE",
      "summary": "Protocol Buffers - Google's data interchange format. C++ Libraries and protoc, the protobuf compiler."
    },
    "build": {
      "number": "1"
    },
    "extra": {
      "feedstock-name": "libprotobuf",
      "recipe-maintainers": [
        "JohanMabille",
        "jjerphan",
        "xylar",
        "dopplershift",
        "jakirkham",
        "ocefpaf",
        "wesm",
        "hajapy",
        "xhochy",
        "h-vetinari"
      ]
    },
    "outputs": [
      {
        "build": {
          "ignore_run_exports_from": [
            "gtest",
            "jsoncpp"
          ],
          "run_exports": [
            "libprotobuf"
          ]
        },
        "name": "libprotobuf",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cmake",
            "ninja"
          ],
          "host": [
            "gtest",
            "jsoncpp",
            "libabseil",
            "libabseil-tests",
            "zlib"
          ],
          "run": []
        },
        "script": "build-lib.sh",
        "test": {
          "commands": [
            "test -f ${PREFIX}/lib/libprotoc.so",
            "test ! -f ${PREFIX}/lib/libprotoc.a",
            "test -f ${PREFIX}/lib/libprotobuf.so",
            "test ! -f ${PREFIX}/lib/libprotobuf.a",
            "test -f ${PREFIX}/lib/libprotobuf-lite.so",
            "test ! -f ${PREFIX}/lib/libprotobuf-lite.a",
            "test -f ${PREFIX}/lib/utf8_range.so",
            "test ! -f ${PREFIX}/lib/utf8_range.a",
            "test -f ${PREFIX}/lib/utf8_validity.so",
            "test ! -f ${PREFIX}/lib/utf8_validity.a",
            "test -d ${PREFIX}/include/upb",
            "test -f ${PREFIX}/lib/libupb.a",
            "test -f ${PREFIX}/include/upb/wire/internal/reader.h",
            "nm -g $PREFIX/lib/libupb.a | grep -E \"[TD] upb_Arena_Free\"",
            "nm -g $PREFIX/lib/libupb.a | grep -E \"[TD] upb_Arena_Init\"",
            "nm -g $PREFIX/lib/libupb.a | grep -E \"[TD] upb_Decode\"",
            "nm -g $PREFIX/lib/libupb.a | grep -E \"[TD] upb_Encode\"",
            "nm -g $PREFIX/lib/libupb.a | grep -E \"[TD] upb_alloc_global\"",
            "nm -g $PREFIX/lib/libupb.a | grep -E \"[TD] _upb_Arena_SlowMalloc_dont_copy_me__upb_internal_use_only\"",
            "test -f ${PREFIX}/lib/cmake/protobuf/protobuf-config.cmake",
            "pkg-config --print-errors --exact-version \"32.1.0\" protobuf",
            "pkg-config --print-errors --exact-version \"32.1.0\" protobuf-lite",
            "protoc --help",
            "cd cmake_test",
            "cmake -GNinja $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/"
          ],
          "requires": [
            "cxx_compiler_stub",
            "binutils",
            "grep",
            "cmake",
            "ninja",
            "pkg-config"
          ]
        }
      },
      {
        "build": {
          "always_include_files": [
            "lib/cmake/protobuf/",
            "lib/cmake/utf8_range/"
          ],
          "ignore_run_exports_from": [
            "jsoncpp"
          ]
        },
        "name": "libprotobuf-static",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cmake",
            "ninja"
          ],
          "host": [
            "gtest",
            "jsoncpp",
            "libabseil",
            "libabseil-tests",
            "zlib",
            "libprotobuf"
          ],
          "run": [
            "libprotobuf"
          ]
        },
        "script": "build-lib.sh",
        "test": {
          "commands": [
            "test -f ${PREFIX}/lib/libprotoc.a",
            "test -f ${PREFIX}/lib/libprotobuf.a",
            "test -f ${PREFIX}/lib/libprotobuf-lite.a",
            "cd cmake_test",
            "cmake -GNinja $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/"
          ],
          "requires": [
            "cxx_compiler_stub",
            "cmake",
            "ninja",
            "zlib"
          ]
        }
      },
      {
        "name": "libprotobuf-python-headers",
        "requirements": {
          "build": [
            "rsync"
          ],
          "host": [
            "libprotobuf"
          ],
          "run_constrained": [
            "libprotobuf 6.32.1"
          ]
        },
        "script": "build-pyheaders.sh",
        "test": {
          "commands": [
            "test -f $PREFIX/include/google/protobuf/proto_api.h",
            "test -f $PREFIX/include/google/protobuf/pyext/message.h"
          ]
        }
      }
    ],
    "package": {
      "name": "libprotobuf-split",
      "version": "6.32.1"
    },
    "schema_version": 0,
    "source": [
      {
        "patches": [
          "patches/0001-set-static-lib-extension-on-windows.patch",
          "patches/0002-always-look-for-shared-abseil-builds.patch",
          "patches/0003-do-not-install-vendored-gmock.patch",
          "patches/0005-export-symbols-needed-by-grpc.patch",
          "patches/0010-Workaround-nvcc-bug-in-message_lite.h.patch"
        ],
        "sha256": "d2081ab9528292f7980ef2d88d2be472453eea4222141046ad4f660874d5f24e",
        "url": "https://github.com/protocolbuffers/protobuf/archive/refs/tags/v32.1.tar.gz"
      }
    ]
  },
  "linux_aarch64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "ninja",
        "rsync"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "gtest",
        "jsoncpp",
        "libabseil",
        "libabseil-tests",
        "libprotobuf",
        "zlib"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "libprotobuf"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "binutils",
        "cmake",
        "cxx_compiler_stub",
        "grep",
        "ninja",
        "pkg-config",
        "zlib"
      ]
    }
  },
  "linux_ppc64le_meta_yaml": {
    "about": {
      "description": "Protocol buffers are Google's language-neutral,\nplatform-neutral, extensible mechanism for serializing structured data-\nthink XML, but smaller, faster, and simpler.\n",
      "dev_url": "https://github.com/protocolbuffers/protobuf",
      "doc_source_url": "https://github.com/protocolbuffers/protobuf/releases",
      "doc_url": "https://developers.google.com/protocol-buffers/",
      "home": "https://developers.google.com/protocol-buffers/",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE",
      "summary": "Protocol Buffers - Google's data interchange format. C++ Libraries and protoc, the protobuf compiler."
    },
    "build": {
      "number": "1"
    },
    "extra": {
      "feedstock-name": "libprotobuf",
      "recipe-maintainers": [
        "JohanMabille",
        "jjerphan",
        "xylar",
        "dopplershift",
        "jakirkham",
        "ocefpaf",
        "wesm",
        "hajapy",
        "xhochy",
        "h-vetinari"
      ]
    },
    "outputs": [
      {
        "build": {
          "ignore_run_exports_from": [
            "gtest",
            "jsoncpp"
          ],
          "run_exports": [
            "libprotobuf"
          ]
        },
        "name": "libprotobuf",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cmake",
            "ninja"
          ],
          "host": [
            "gtest",
            "jsoncpp",
            "libabseil",
            "libabseil-tests",
            "zlib"
          ],
          "run": []
        },
        "script": "build-lib.sh",
        "test": {
          "commands": [
            "test -f ${PREFIX}/lib/libprotoc.so",
            "test ! -f ${PREFIX}/lib/libprotoc.a",
            "test -f ${PREFIX}/lib/libprotobuf.so",
            "test ! -f ${PREFIX}/lib/libprotobuf.a",
            "test -f ${PREFIX}/lib/libprotobuf-lite.so",
            "test ! -f ${PREFIX}/lib/libprotobuf-lite.a",
            "test -f ${PREFIX}/lib/utf8_range.so",
            "test ! -f ${PREFIX}/lib/utf8_range.a",
            "test -f ${PREFIX}/lib/utf8_validity.so",
            "test ! -f ${PREFIX}/lib/utf8_validity.a",
            "test -d ${PREFIX}/include/upb",
            "test -f ${PREFIX}/lib/libupb.a",
            "test -f ${PREFIX}/include/upb/wire/internal/reader.h",
            "nm -g $PREFIX/lib/libupb.a | grep -E \"[TD] upb_Arena_Free\"",
            "nm -g $PREFIX/lib/libupb.a | grep -E \"[TD] upb_Arena_Init\"",
            "nm -g $PREFIX/lib/libupb.a | grep -E \"[TD] upb_Decode\"",
            "nm -g $PREFIX/lib/libupb.a | grep -E \"[TD] upb_Encode\"",
            "nm -g $PREFIX/lib/libupb.a | grep -E \"[TD] upb_alloc_global\"",
            "nm -g $PREFIX/lib/libupb.a | grep -E \"[TD] _upb_Arena_SlowMalloc_dont_copy_me__upb_internal_use_only\"",
            "test -f ${PREFIX}/lib/cmake/protobuf/protobuf-config.cmake",
            "pkg-config --print-errors --exact-version \"32.1.0\" protobuf",
            "pkg-config --print-errors --exact-version \"32.1.0\" protobuf-lite",
            "protoc --help",
            "cd cmake_test",
            "cmake -GNinja $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/"
          ],
          "requires": [
            "cxx_compiler_stub",
            "binutils",
            "grep",
            "cmake",
            "ninja",
            "pkg-config"
          ]
        }
      },
      {
        "build": {
          "always_include_files": [
            "lib/cmake/protobuf/",
            "lib/cmake/utf8_range/"
          ],
          "ignore_run_exports_from": [
            "jsoncpp"
          ]
        },
        "name": "libprotobuf-static",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cmake",
            "ninja"
          ],
          "host": [
            "gtest",
            "jsoncpp",
            "libabseil",
            "libabseil-tests",
            "zlib",
            "libprotobuf"
          ],
          "run": [
            "libprotobuf"
          ]
        },
        "script": "build-lib.sh",
        "test": {
          "commands": [
            "test -f ${PREFIX}/lib/libprotoc.a",
            "test -f ${PREFIX}/lib/libprotobuf.a",
            "test -f ${PREFIX}/lib/libprotobuf-lite.a",
            "cd cmake_test",
            "cmake -GNinja $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/"
          ],
          "requires": [
            "cxx_compiler_stub",
            "cmake",
            "ninja",
            "zlib"
          ]
        }
      },
      {
        "name": "libprotobuf-python-headers",
        "requirements": {
          "build": [
            "rsync"
          ],
          "host": [
            "libprotobuf"
          ],
          "run_constrained": [
            "libprotobuf 6.32.1"
          ]
        },
        "script": "build-pyheaders.sh",
        "test": {
          "commands": [
            "test -f $PREFIX/include/google/protobuf/proto_api.h",
            "test -f $PREFIX/include/google/protobuf/pyext/message.h"
          ]
        }
      }
    ],
    "package": {
      "name": "libprotobuf-split",
      "version": "6.32.1"
    },
    "schema_version": 0,
    "source": [
      {
        "patches": [
          "patches/0001-set-static-lib-extension-on-windows.patch",
          "patches/0002-always-look-for-shared-abseil-builds.patch",
          "patches/0003-do-not-install-vendored-gmock.patch",
          "patches/0005-export-symbols-needed-by-grpc.patch",
          "patches/0010-Workaround-nvcc-bug-in-message_lite.h.patch"
        ],
        "sha256": "d2081ab9528292f7980ef2d88d2be472453eea4222141046ad4f660874d5f24e",
        "url": "https://github.com/protocolbuffers/protobuf/archive/refs/tags/v32.1.tar.gz"
      }
    ]
  },
  "linux_ppc64le_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "ninja",
        "rsync"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "gtest",
        "jsoncpp",
        "libabseil",
        "libabseil-tests",
        "libprotobuf",
        "zlib"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "libprotobuf"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "binutils",
        "cmake",
        "cxx_compiler_stub",
        "grep",
        "ninja",
        "pkg-config",
        "zlib"
      ]
    }
  },
  "meta_yaml": {
    "about": {
      "description": "Protocol buffers are Google's language-neutral,\nplatform-neutral, extensible mechanism for serializing structured data-\nthink XML, but smaller, faster, and simpler.\n",
      "dev_url": "https://github.com/protocolbuffers/protobuf",
      "doc_source_url": "https://github.com/protocolbuffers/protobuf/releases",
      "doc_url": "https://developers.google.com/protocol-buffers/",
      "home": "https://developers.google.com/protocol-buffers/",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE",
      "summary": "Protocol Buffers - Google's data interchange format. C++ Libraries and protoc, the protobuf compiler."
    },
    "build": {
      "number": "1"
    },
    "extra": {
      "feedstock-name": "libprotobuf",
      "recipe-maintainers": [
        "JohanMabille",
        "jjerphan",
        "xylar",
        "dopplershift",
        "jakirkham",
        "ocefpaf",
        "wesm",
        "hajapy",
        "xhochy",
        "h-vetinari"
      ]
    },
    "outputs": [
      {
        "build": {
          "ignore_run_exports_from": [
            "gtest",
            "jsoncpp"
          ],
          "run_exports": [
            "libprotobuf"
          ]
        },
        "name": "libprotobuf",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cmake",
            "ninja"
          ],
          "host": [
            "gtest",
            "jsoncpp",
            "libabseil",
            "libabseil-tests",
            "zlib"
          ],
          "run": []
        },
        "script": "build-lib.sh",
        "test": {
          "commands": [
            "test -f ${PREFIX}/lib/libprotoc.so",
            "test ! -f ${PREFIX}/lib/libprotoc.a",
            "test -f ${PREFIX}/lib/libprotobuf.so",
            "test ! -f ${PREFIX}/lib/libprotobuf.a",
            "test -f ${PREFIX}/lib/libprotobuf-lite.so",
            "test ! -f ${PREFIX}/lib/libprotobuf-lite.a",
            "test -f ${PREFIX}/lib/utf8_range.so",
            "test ! -f ${PREFIX}/lib/utf8_range.a",
            "test -f ${PREFIX}/lib/utf8_validity.so",
            "test ! -f ${PREFIX}/lib/utf8_validity.a",
            "test -d ${PREFIX}/include/upb",
            "test -f ${PREFIX}/lib/libupb.a",
            "test -f ${PREFIX}/include/upb/wire/internal/reader.h",
            "nm -g $PREFIX/lib/libupb.a | grep -E \"[TD] upb_Arena_Free\"",
            "nm -g $PREFIX/lib/libupb.a | grep -E \"[TD] upb_Arena_Init\"",
            "nm -g $PREFIX/lib/libupb.a | grep -E \"[TD] upb_Decode\"",
            "nm -g $PREFIX/lib/libupb.a | grep -E \"[TD] upb_Encode\"",
            "nm -g $PREFIX/lib/libupb.a | grep -E \"[TD] upb_alloc_global\"",
            "nm -g $PREFIX/lib/libupb.a | grep -E \"[TD] _upb_Arena_SlowMalloc_dont_copy_me__upb_internal_use_only\"",
            "test -f ${PREFIX}/lib/cmake/protobuf/protobuf-config.cmake",
            "pkg-config --print-errors --exact-version \"32.1.0\" protobuf",
            "pkg-config --print-errors --exact-version \"32.1.0\" protobuf-lite",
            "protoc --help",
            "cd cmake_test",
            "cmake -GNinja $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/"
          ],
          "requires": [
            "cxx_compiler_stub",
            "binutils",
            "grep",
            "cmake",
            "ninja",
            "pkg-config"
          ]
        }
      },
      {
        "build": {
          "always_include_files": [
            "lib/cmake/protobuf/",
            "lib/cmake/utf8_range/"
          ],
          "ignore_run_exports_from": [
            "jsoncpp"
          ]
        },
        "name": "libprotobuf-static",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cmake",
            "ninja"
          ],
          "host": [
            "gtest",
            "jsoncpp",
            "libabseil",
            "libabseil-tests",
            "zlib",
            "libprotobuf"
          ],
          "run": [
            "libprotobuf"
          ]
        },
        "script": "build-lib.sh",
        "test": {
          "commands": [
            "test -f ${PREFIX}/lib/libprotoc.a",
            "test -f ${PREFIX}/lib/libprotobuf.a",
            "test -f ${PREFIX}/lib/libprotobuf-lite.a",
            "cd cmake_test",
            "cmake -GNinja $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/"
          ],
          "requires": [
            "cxx_compiler_stub",
            "cmake",
            "ninja",
            "zlib"
          ]
        }
      },
      {
        "name": "libprotobuf-python-headers",
        "requirements": {
          "build": [
            "rsync"
          ],
          "host": [
            "libprotobuf"
          ],
          "run_constrained": [
            "libprotobuf 6.32.1"
          ]
        },
        "script": "build-pyheaders.sh",
        "test": {
          "commands": [
            "test -f $PREFIX/include/google/protobuf/proto_api.h",
            "test -f $PREFIX/include/google/protobuf/pyext/message.h"
          ]
        }
      },
      {
        "build": {
          "ignore_run_exports_from": [
            "gtest",
            "jsoncpp"
          ],
          "run_exports": [
            "libprotobuf"
          ]
        },
        "name": "libprotobuf",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cmake",
            "ninja"
          ],
          "host": [
            "gtest",
            "jsoncpp",
            "libabseil",
            "libabseil-tests",
            "zlib"
          ],
          "run": []
        },
        "script": "build-lib.sh",
        "test": {
          "commands": [
            "test -f ${PREFIX}/lib/libprotoc.so",
            "test ! -f ${PREFIX}/lib/libprotoc.a",
            "test -f ${PREFIX}/lib/libprotobuf.so",
            "test ! -f ${PREFIX}/lib/libprotobuf.a",
            "test -f ${PREFIX}/lib/libprotobuf-lite.so",
            "test ! -f ${PREFIX}/lib/libprotobuf-lite.a",
            "test -f ${PREFIX}/lib/utf8_range.so",
            "test ! -f ${PREFIX}/lib/utf8_range.a",
            "test -f ${PREFIX}/lib/utf8_validity.so",
            "test ! -f ${PREFIX}/lib/utf8_validity.a",
            "test -d ${PREFIX}/include/upb",
            "test -f ${PREFIX}/lib/libupb.a",
            "test -f ${PREFIX}/include/upb/wire/internal/reader.h",
            "nm -g $PREFIX/lib/libupb.a | grep -E \"[TD] upb_Arena_Free\"",
            "nm -g $PREFIX/lib/libupb.a | grep -E \"[TD] upb_Arena_Init\"",
            "nm -g $PREFIX/lib/libupb.a | grep -E \"[TD] upb_Decode\"",
            "nm -g $PREFIX/lib/libupb.a | grep -E \"[TD] upb_Encode\"",
            "nm -g $PREFIX/lib/libupb.a | grep -E \"[TD] upb_alloc_global\"",
            "nm -g $PREFIX/lib/libupb.a | grep -E \"[TD] _upb_Arena_SlowMalloc_dont_copy_me__upb_internal_use_only\"",
            "test -f ${PREFIX}/lib/cmake/protobuf/protobuf-config.cmake",
            "pkg-config --print-errors --exact-version \"32.1.0\" protobuf",
            "pkg-config --print-errors --exact-version \"32.1.0\" protobuf-lite",
            "protoc --help",
            "cd cmake_test",
            "cmake -GNinja $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/"
          ],
          "requires": [
            "cxx_compiler_stub",
            "binutils",
            "grep",
            "cmake",
            "ninja",
            "pkg-config"
          ]
        }
      },
      {
        "build": {
          "always_include_files": [
            "lib/cmake/protobuf/",
            "lib/cmake/utf8_range/"
          ],
          "ignore_run_exports_from": [
            "jsoncpp"
          ]
        },
        "name": "libprotobuf-static",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cmake",
            "ninja"
          ],
          "host": [
            "gtest",
            "jsoncpp",
            "libabseil",
            "libabseil-tests",
            "zlib",
            "libprotobuf"
          ],
          "run": [
            "libprotobuf"
          ]
        },
        "script": "build-lib.sh",
        "test": {
          "commands": [
            "test -f ${PREFIX}/lib/libprotoc.a",
            "test -f ${PREFIX}/lib/libprotobuf.a",
            "test -f ${PREFIX}/lib/libprotobuf-lite.a",
            "cd cmake_test",
            "cmake -GNinja $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/"
          ],
          "requires": [
            "cxx_compiler_stub",
            "cmake",
            "ninja",
            "zlib"
          ]
        }
      },
      {
        "name": "libprotobuf-python-headers",
        "requirements": {
          "build": [
            "rsync"
          ],
          "host": [
            "libprotobuf"
          ],
          "run_constrained": [
            "libprotobuf 6.32.1"
          ]
        },
        "script": "build-pyheaders.sh",
        "test": {
          "commands": [
            "test -f $PREFIX/include/google/protobuf/proto_api.h",
            "test -f $PREFIX/include/google/protobuf/pyext/message.h"
          ]
        }
      },
      {
        "build": {
          "ignore_run_exports_from": [
            "gtest",
            "jsoncpp"
          ],
          "run_exports": [
            "libprotobuf"
          ]
        },
        "name": "libprotobuf",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cmake",
            "ninja"
          ],
          "host": [
            "gtest",
            "jsoncpp",
            "libabseil",
            "libabseil-tests",
            "zlib"
          ],
          "run": []
        },
        "script": "build-lib.sh",
        "test": {
          "commands": [
            "test -f ${PREFIX}/lib/libprotoc.so",
            "test ! -f ${PREFIX}/lib/libprotoc.a",
            "test -f ${PREFIX}/lib/libprotobuf.so",
            "test ! -f ${PREFIX}/lib/libprotobuf.a",
            "test -f ${PREFIX}/lib/libprotobuf-lite.so",
            "test ! -f ${PREFIX}/lib/libprotobuf-lite.a",
            "test -f ${PREFIX}/lib/utf8_range.so",
            "test ! -f ${PREFIX}/lib/utf8_range.a",
            "test -f ${PREFIX}/lib/utf8_validity.so",
            "test ! -f ${PREFIX}/lib/utf8_validity.a",
            "test -d ${PREFIX}/include/upb",
            "test -f ${PREFIX}/lib/libupb.a",
            "test -f ${PREFIX}/include/upb/wire/internal/reader.h",
            "nm -g $PREFIX/lib/libupb.a | grep -E \"[TD] upb_Arena_Free\"",
            "nm -g $PREFIX/lib/libupb.a | grep -E \"[TD] upb_Arena_Init\"",
            "nm -g $PREFIX/lib/libupb.a | grep -E \"[TD] upb_Decode\"",
            "nm -g $PREFIX/lib/libupb.a | grep -E \"[TD] upb_Encode\"",
            "nm -g $PREFIX/lib/libupb.a | grep -E \"[TD] upb_alloc_global\"",
            "nm -g $PREFIX/lib/libupb.a | grep -E \"[TD] _upb_Arena_SlowMalloc_dont_copy_me__upb_internal_use_only\"",
            "test -f ${PREFIX}/lib/cmake/protobuf/protobuf-config.cmake",
            "pkg-config --print-errors --exact-version \"32.1.0\" protobuf",
            "pkg-config --print-errors --exact-version \"32.1.0\" protobuf-lite",
            "protoc --help",
            "cd cmake_test",
            "cmake -GNinja $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/"
          ],
          "requires": [
            "cxx_compiler_stub",
            "binutils",
            "grep",
            "cmake",
            "ninja",
            "pkg-config"
          ]
        }
      },
      {
        "build": {
          "always_include_files": [
            "lib/cmake/protobuf/",
            "lib/cmake/utf8_range/"
          ],
          "ignore_run_exports_from": [
            "jsoncpp"
          ]
        },
        "name": "libprotobuf-static",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cmake",
            "ninja"
          ],
          "host": [
            "gtest",
            "jsoncpp",
            "libabseil",
            "libabseil-tests",
            "zlib",
            "libprotobuf"
          ],
          "run": [
            "libprotobuf"
          ]
        },
        "script": "build-lib.sh",
        "test": {
          "commands": [
            "test -f ${PREFIX}/lib/libprotoc.a",
            "test -f ${PREFIX}/lib/libprotobuf.a",
            "test -f ${PREFIX}/lib/libprotobuf-lite.a",
            "cd cmake_test",
            "cmake -GNinja $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/"
          ],
          "requires": [
            "cxx_compiler_stub",
            "cmake",
            "ninja",
            "zlib"
          ]
        }
      },
      {
        "name": "libprotobuf-python-headers",
        "requirements": {
          "build": [
            "rsync"
          ],
          "host": [
            "libprotobuf"
          ],
          "run_constrained": [
            "libprotobuf 6.32.1"
          ]
        },
        "script": "build-pyheaders.sh",
        "test": {
          "commands": [
            "test -f $PREFIX/include/google/protobuf/proto_api.h",
            "test -f $PREFIX/include/google/protobuf/pyext/message.h"
          ]
        }
      },
      {
        "build": {
          "ignore_run_exports_from": [
            "gtest",
            "jsoncpp"
          ],
          "run_exports": [
            "libprotobuf"
          ]
        },
        "name": "libprotobuf",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cmake",
            "ninja"
          ],
          "host": [
            "gtest",
            "jsoncpp",
            "libabseil",
            "libabseil-tests",
            "zlib"
          ],
          "run": []
        },
        "script": "build-lib.sh",
        "test": {
          "commands": [
            "test -f ${PREFIX}/lib/libprotoc.dylib",
            "test ! -f ${PREFIX}/lib/libprotoc.a",
            "test -f ${PREFIX}/lib/libprotobuf.dylib",
            "test ! -f ${PREFIX}/lib/libprotobuf.a",
            "test -f ${PREFIX}/lib/libprotobuf-lite.dylib",
            "test ! -f ${PREFIX}/lib/libprotobuf-lite.a",
            "test -f ${PREFIX}/lib/utf8_range.dylib",
            "test ! -f ${PREFIX}/lib/utf8_range.a",
            "test -f ${PREFIX}/lib/utf8_validity.dylib",
            "test ! -f ${PREFIX}/lib/utf8_validity.a",
            "test -d ${PREFIX}/include/upb",
            "test -f ${PREFIX}/lib/libupb.a",
            "test -f ${PREFIX}/include/upb/wire/internal/reader.h",
            "nm -g $PREFIX/lib/libupb.a | grep -E \"[TD] _upb_Arena_Free\"",
            "nm -g $PREFIX/lib/libupb.a | grep -E \"[TD] _upb_Arena_Init\"",
            "nm -g $PREFIX/lib/libupb.a | grep -E \"[TD] _upb_Decode\"",
            "nm -g $PREFIX/lib/libupb.a | grep -E \"[TD] _upb_Encode\"",
            "nm -g $PREFIX/lib/libupb.a | grep -E \"[TD] _upb_alloc_global\"",
            "nm -g $PREFIX/lib/libupb.a | grep -E \"[TD] __upb_Arena_SlowMalloc_dont_copy_me__upb_internal_use_only\"",
            "test -f ${PREFIX}/lib/cmake/protobuf/protobuf-config.cmake",
            "pkg-config --print-errors --exact-version \"32.1.0\" protobuf",
            "pkg-config --print-errors --exact-version \"32.1.0\" protobuf-lite",
            "protoc --help",
            "cd cmake_test",
            "cmake -GNinja $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/"
          ],
          "requires": [
            "cxx_compiler_stub",
            "binutils",
            "grep",
            "cmake",
            "ninja",
            "pkg-config"
          ]
        }
      },
      {
        "build": {
          "always_include_files": [
            "lib/cmake/protobuf/",
            "lib/cmake/utf8_range/"
          ],
          "ignore_run_exports_from": [
            "jsoncpp"
          ]
        },
        "name": "libprotobuf-static",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cmake",
            "ninja"
          ],
          "host": [
            "gtest",
            "jsoncpp",
            "libabseil",
            "libabseil-tests",
            "zlib",
            "libprotobuf"
          ],
          "run": [
            "libprotobuf"
          ]
        },
        "script": "build-lib.sh",
        "test": {
          "commands": [
            "test -f ${PREFIX}/lib/libprotoc.a",
            "test -f ${PREFIX}/lib/libprotobuf.a",
            "test -f ${PREFIX}/lib/libprotobuf-lite.a",
            "cd cmake_test",
            "cmake -GNinja $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/"
          ],
          "requires": [
            "cxx_compiler_stub",
            "cmake",
            "ninja",
            "zlib"
          ]
        }
      },
      {
        "name": "libprotobuf-python-headers",
        "requirements": {
          "build": [
            "rsync"
          ],
          "host": [
            "libprotobuf"
          ],
          "run_constrained": [
            "libprotobuf 6.32.1"
          ]
        },
        "script": "build-pyheaders.sh",
        "test": {
          "commands": [
            "test -f $PREFIX/include/google/protobuf/proto_api.h",
            "test -f $PREFIX/include/google/protobuf/pyext/message.h"
          ]
        }
      },
      {
        "build": {
          "ignore_run_exports_from": [
            "gtest",
            "jsoncpp"
          ],
          "run_exports": [
            "libprotobuf"
          ]
        },
        "name": "libprotobuf",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cmake",
            "ninja"
          ],
          "host": [
            "gtest",
            "jsoncpp",
            "libabseil",
            "libabseil-tests",
            "zlib"
          ],
          "run": []
        },
        "script": "build-lib.sh",
        "test": {
          "commands": [
            "test -f ${PREFIX}/lib/libprotoc.dylib",
            "test ! -f ${PREFIX}/lib/libprotoc.a",
            "test -f ${PREFIX}/lib/libprotobuf.dylib",
            "test ! -f ${PREFIX}/lib/libprotobuf.a",
            "test -f ${PREFIX}/lib/libprotobuf-lite.dylib",
            "test ! -f ${PREFIX}/lib/libprotobuf-lite.a",
            "test -f ${PREFIX}/lib/utf8_range.dylib",
            "test ! -f ${PREFIX}/lib/utf8_range.a",
            "test -f ${PREFIX}/lib/utf8_validity.dylib",
            "test ! -f ${PREFIX}/lib/utf8_validity.a",
            "test -d ${PREFIX}/include/upb",
            "test -f ${PREFIX}/lib/libupb.a",
            "test -f ${PREFIX}/include/upb/wire/internal/reader.h",
            "nm -g $PREFIX/lib/libupb.a | grep -E \"[TD] _upb_Arena_Free\"",
            "nm -g $PREFIX/lib/libupb.a | grep -E \"[TD] _upb_Arena_Init\"",
            "nm -g $PREFIX/lib/libupb.a | grep -E \"[TD] _upb_Decode\"",
            "nm -g $PREFIX/lib/libupb.a | grep -E \"[TD] _upb_Encode\"",
            "nm -g $PREFIX/lib/libupb.a | grep -E \"[TD] _upb_alloc_global\"",
            "nm -g $PREFIX/lib/libupb.a | grep -E \"[TD] __upb_Arena_SlowMalloc_dont_copy_me__upb_internal_use_only\"",
            "test -f ${PREFIX}/lib/cmake/protobuf/protobuf-config.cmake",
            "pkg-config --print-errors --exact-version \"32.1.0\" protobuf",
            "pkg-config --print-errors --exact-version \"32.1.0\" protobuf-lite",
            "protoc --help",
            "cd cmake_test",
            "cmake -GNinja $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/"
          ],
          "requires": [
            "cxx_compiler_stub",
            "binutils",
            "grep",
            "cmake",
            "ninja",
            "pkg-config"
          ]
        }
      },
      {
        "build": {
          "always_include_files": [
            "lib/cmake/protobuf/",
            "lib/cmake/utf8_range/"
          ],
          "ignore_run_exports_from": [
            "jsoncpp"
          ]
        },
        "name": "libprotobuf-static",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cmake",
            "ninja"
          ],
          "host": [
            "gtest",
            "jsoncpp",
            "libabseil",
            "libabseil-tests",
            "zlib",
            "libprotobuf"
          ],
          "run": [
            "libprotobuf"
          ]
        },
        "script": "build-lib.sh",
        "test": {
          "commands": [
            "test -f ${PREFIX}/lib/libprotoc.a",
            "test -f ${PREFIX}/lib/libprotobuf.a",
            "test -f ${PREFIX}/lib/libprotobuf-lite.a",
            "cd cmake_test",
            "cmake -GNinja $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/"
          ],
          "requires": [
            "cxx_compiler_stub",
            "cmake",
            "ninja",
            "zlib"
          ]
        }
      },
      {
        "name": "libprotobuf-python-headers",
        "requirements": {
          "build": [
            "rsync"
          ],
          "host": [
            "libprotobuf"
          ],
          "run_constrained": [
            "libprotobuf 6.32.1"
          ]
        },
        "script": "build-pyheaders.sh",
        "test": {
          "commands": [
            "test -f $PREFIX/include/google/protobuf/proto_api.h",
            "test -f $PREFIX/include/google/protobuf/pyext/message.h"
          ]
        }
      },
      {
        "build": {
          "ignore_run_exports_from": [
            "gtest",
            "jsoncpp"
          ],
          "run_exports": [
            "libprotobuf"
          ]
        },
        "name": "libprotobuf",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cmake",
            "ninja"
          ],
          "host": [
            "gtest",
            "jsoncpp",
            "libabseil",
            "libabseil-tests",
            "zlib"
          ],
          "run": [
            "ucrt"
          ]
        },
        "script": "build-lib.bat",
        "test": {
          "commands": [
            "if not exist %LIBRARY_BIN%\\libprotoc.dll exit 1",
            "if not exist %LIBRARY_LIB%\\libprotoc.lib exit 1",
            "if exist %LIBRARY_LIB%\\libprotoc-static.lib exit 1",
            "if not exist %LIBRARY_BIN%\\libprotobuf.dll exit 1",
            "if not exist %LIBRARY_LIB%\\libprotobuf.lib exit 1",
            "if exist %LIBRARY_LIB%\\libprotobuf-static.lib exit 1",
            "if not exist %LIBRARY_BIN%\\libprotobuf-lite.dll exit 1",
            "if not exist %LIBRARY_LIB%\\libprotobuf-lite.lib exit 1",
            "if exist %LIBRARY_LIB%\\libprotobuf-lite-static.lib exit 1",
            "if not exist %LIBRARY_BIN%\\utf8_range.dll exit 1",
            "if not exist %LIBRARY_LIB%\\utf8_range.lib exit 1",
            "if exist %LIBRARY_LIB%\\utf8_range-static.lib exit 1",
            "if not exist %LIBRARY_BIN%\\utf8_validity.dll exit 1",
            "if not exist %LIBRARY_LIB%\\utf8_validity.lib exit 1",
            "if exist %LIBRARY_LIB%\\utf8_validity-static.lib exit 1",
            "if not exist %LIBRARY_INC%\\upb exit 1",
            "if not exist %LIBRARY_LIB%\\libupb.lib exit 1",
            "if not exist %LIBRARY_INC%\\upb\\wire\\internal\\reader.h exit 1",
            "dumpbin -symbols %LIBRARY_LIB%\\libupb.lib | grep -E \"SECT.*External.*upb_Arena_Free\"",
            "dumpbin -symbols %LIBRARY_LIB%\\libupb.lib | grep -E \"SECT.*External.*upb_Arena_Init\"",
            "dumpbin -symbols %LIBRARY_LIB%\\libupb.lib | grep -E \"SECT.*External.*upb_Decode\"",
            "dumpbin -symbols %LIBRARY_LIB%\\libupb.lib | grep -E \"SECT.*External.*upb_Encode\"",
            "dumpbin -symbols %LIBRARY_LIB%\\libupb.lib | grep -E \"SECT.*External.*upb_alloc_global\"",
            "dumpbin -symbols %LIBRARY_LIB%\\libupb.lib | grep -E \"SECT.*External.*_upb_Arena_SlowMalloc_dont_copy_me__upb_internal_use_only\"",
            "if not exist %LIBRARY_LIB%\\cmake\\protobuf\\protobuf-config.cmake exit 1",
            "pkg-config --print-errors --exact-version \"32.1.0\" protobuf",
            "pkg-config --print-errors --exact-version \"32.1.0\" protobuf-lite",
            "protoc --help",
            "cd cmake_test",
            "cmake -GNinja %CMAKE_ARGS% .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/"
          ],
          "requires": [
            "cxx_compiler_stub",
            "m2-grep",
            "cmake",
            "ninja",
            "pkg-config"
          ]
        }
      },
      {
        "build": {
          "always_include_files": [
            "Library/lib/cmake/protobuf/",
            "Library/lib/cmake/utf8_range/"
          ],
          "ignore_run_exports_from": [
            "jsoncpp"
          ]
        },
        "name": "libprotobuf-static",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cmake",
            "ninja"
          ],
          "host": [
            "gtest",
            "jsoncpp",
            "libabseil",
            "libabseil-tests",
            "zlib",
            "libprotobuf"
          ],
          "run": [
            "libprotobuf"
          ]
        },
        "script": "build-lib.bat",
        "test": {
          "commands": [
            "if not exist %LIBRARY_LIB%\\libprotoc-static.lib exit 1",
            "if not exist %LIBRARY_LIB%\\libprotobuf-static.lib exit 1",
            "if not exist %LIBRARY_LIB%\\libprotobuf-lite-static.lib exit 1",
            "cd cmake_test",
            "cmake -GNinja %CMAKE_ARGS% .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/"
          ],
          "requires": [
            "cxx_compiler_stub",
            "cmake",
            "ninja",
            "zlib"
          ]
        }
      },
      {
        "name": "libprotobuf-python-headers",
        "requirements": {
          "build": [],
          "host": [
            "libprotobuf"
          ],
          "run_constrained": [
            "libprotobuf 6.32.1"
          ]
        },
        "script": "build-pyheaders.bat",
        "test": {
          "commands": [
            "if not exist %LIBRARY_PREFIX%\\include\\google\\protobuf\\proto_api.h exit 1",
            "if not exist %LIBRARY_PREFIX%\\include\\google\\protobuf\\pyext\\message.h exit 1"
          ]
        }
      }
    ],
    "package": {
      "name": "libprotobuf-split",
      "version": "6.32.1"
    },
    "schema_version": 0,
    "source": [
      {
        "patches": [
          "patches/0001-set-static-lib-extension-on-windows.patch",
          "patches/0002-always-look-for-shared-abseil-builds.patch",
          "patches/0003-do-not-install-vendored-gmock.patch",
          "patches/0005-export-symbols-needed-by-grpc.patch",
          "patches/0010-Workaround-nvcc-bug-in-message_lite.h.patch"
        ],
        "sha256": "d2081ab9528292f7980ef2d88d2be472453eea4222141046ad4f660874d5f24e",
        "url": "https://github.com/protocolbuffers/protobuf/archive/refs/tags/v32.1.tar.gz"
      },
      {
        "patches": [
          "patches/0001-set-static-lib-extension-on-windows.patch",
          "patches/0002-always-look-for-shared-abseil-builds.patch",
          "patches/0003-do-not-install-vendored-gmock.patch",
          "patches/0005-export-symbols-needed-by-grpc.patch",
          "patches/0010-Workaround-nvcc-bug-in-message_lite.h.patch"
        ],
        "sha256": "d2081ab9528292f7980ef2d88d2be472453eea4222141046ad4f660874d5f24e",
        "url": "https://github.com/protocolbuffers/protobuf/archive/refs/tags/v32.1.tar.gz"
      },
      {
        "patches": [
          "patches/0001-set-static-lib-extension-on-windows.patch",
          "patches/0002-always-look-for-shared-abseil-builds.patch",
          "patches/0003-do-not-install-vendored-gmock.patch",
          "patches/0005-export-symbols-needed-by-grpc.patch",
          "patches/0010-Workaround-nvcc-bug-in-message_lite.h.patch"
        ],
        "sha256": "d2081ab9528292f7980ef2d88d2be472453eea4222141046ad4f660874d5f24e",
        "url": "https://github.com/protocolbuffers/protobuf/archive/refs/tags/v32.1.tar.gz"
      },
      {
        "patches": [
          "patches/0001-set-static-lib-extension-on-windows.patch",
          "patches/0002-always-look-for-shared-abseil-builds.patch",
          "patches/0003-do-not-install-vendored-gmock.patch",
          "patches/0005-export-symbols-needed-by-grpc.patch",
          "patches/0010-Workaround-nvcc-bug-in-message_lite.h.patch"
        ],
        "sha256": "d2081ab9528292f7980ef2d88d2be472453eea4222141046ad4f660874d5f24e",
        "url": "https://github.com/protocolbuffers/protobuf/archive/refs/tags/v32.1.tar.gz"
      },
      {
        "patches": [
          "patches/0001-set-static-lib-extension-on-windows.patch",
          "patches/0002-always-look-for-shared-abseil-builds.patch",
          "patches/0003-do-not-install-vendored-gmock.patch",
          "patches/0005-export-symbols-needed-by-grpc.patch",
          "patches/0010-Workaround-nvcc-bug-in-message_lite.h.patch"
        ],
        "sha256": "d2081ab9528292f7980ef2d88d2be472453eea4222141046ad4f660874d5f24e",
        "url": "https://github.com/protocolbuffers/protobuf/archive/refs/tags/v32.1.tar.gz"
      },
      {
        "patches": [
          "patches/0001-set-static-lib-extension-on-windows.patch",
          "patches/0002-always-look-for-shared-abseil-builds.patch",
          "patches/0003-do-not-install-vendored-gmock.patch",
          "patches/0004-disable-MapImplTest.RandomOrdering-due-to-flakiness.patch",
          "patches/0005-export-symbols-needed-by-grpc.patch",
          "patches/0006-do-not-add-LIB_PREFIX-to-utf8_-range-validity-on-win.patch",
          "patches/0010-Workaround-nvcc-bug-in-message_lite.h.patch"
        ],
        "sha256": "d2081ab9528292f7980ef2d88d2be472453eea4222141046ad4f660874d5f24e",
        "url": "https://github.com/protocolbuffers/protobuf/archive/refs/tags/v32.1.tar.gz"
      }
    ]
  },
  "name": "libprotobuf-split",
  "osx_64_meta_yaml": {
    "about": {
      "description": "Protocol buffers are Google's language-neutral,\nplatform-neutral, extensible mechanism for serializing structured data-\nthink XML, but smaller, faster, and simpler.\n",
      "dev_url": "https://github.com/protocolbuffers/protobuf",
      "doc_source_url": "https://github.com/protocolbuffers/protobuf/releases",
      "doc_url": "https://developers.google.com/protocol-buffers/",
      "home": "https://developers.google.com/protocol-buffers/",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE",
      "summary": "Protocol Buffers - Google's data interchange format. C++ Libraries and protoc, the protobuf compiler."
    },
    "build": {
      "number": "1"
    },
    "extra": {
      "feedstock-name": "libprotobuf",
      "recipe-maintainers": [
        "JohanMabille",
        "jjerphan",
        "xylar",
        "dopplershift",
        "jakirkham",
        "ocefpaf",
        "wesm",
        "hajapy",
        "xhochy",
        "h-vetinari"
      ]
    },
    "outputs": [
      {
        "build": {
          "ignore_run_exports_from": [
            "gtest",
            "jsoncpp"
          ],
          "run_exports": [
            "libprotobuf"
          ]
        },
        "name": "libprotobuf",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cmake",
            "ninja"
          ],
          "host": [
            "gtest",
            "jsoncpp",
            "libabseil",
            "libabseil-tests",
            "zlib"
          ],
          "run": []
        },
        "script": "build-lib.sh",
        "test": {
          "commands": [
            "test -f ${PREFIX}/lib/libprotoc.dylib",
            "test ! -f ${PREFIX}/lib/libprotoc.a",
            "test -f ${PREFIX}/lib/libprotobuf.dylib",
            "test ! -f ${PREFIX}/lib/libprotobuf.a",
            "test -f ${PREFIX}/lib/libprotobuf-lite.dylib",
            "test ! -f ${PREFIX}/lib/libprotobuf-lite.a",
            "test -f ${PREFIX}/lib/utf8_range.dylib",
            "test ! -f ${PREFIX}/lib/utf8_range.a",
            "test -f ${PREFIX}/lib/utf8_validity.dylib",
            "test ! -f ${PREFIX}/lib/utf8_validity.a",
            "test -d ${PREFIX}/include/upb",
            "test -f ${PREFIX}/lib/libupb.a",
            "test -f ${PREFIX}/include/upb/wire/internal/reader.h",
            "nm -g $PREFIX/lib/libupb.a | grep -E \"[TD] _upb_Arena_Free\"",
            "nm -g $PREFIX/lib/libupb.a | grep -E \"[TD] _upb_Arena_Init\"",
            "nm -g $PREFIX/lib/libupb.a | grep -E \"[TD] _upb_Decode\"",
            "nm -g $PREFIX/lib/libupb.a | grep -E \"[TD] _upb_Encode\"",
            "nm -g $PREFIX/lib/libupb.a | grep -E \"[TD] _upb_alloc_global\"",
            "nm -g $PREFIX/lib/libupb.a | grep -E \"[TD] __upb_Arena_SlowMalloc_dont_copy_me__upb_internal_use_only\"",
            "test -f ${PREFIX}/lib/cmake/protobuf/protobuf-config.cmake",
            "pkg-config --print-errors --exact-version \"32.1.0\" protobuf",
            "pkg-config --print-errors --exact-version \"32.1.0\" protobuf-lite",
            "protoc --help",
            "cd cmake_test",
            "cmake -GNinja $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/"
          ],
          "requires": [
            "cxx_compiler_stub",
            "binutils",
            "grep",
            "cmake",
            "ninja",
            "pkg-config"
          ]
        }
      },
      {
        "build": {
          "always_include_files": [
            "lib/cmake/protobuf/",
            "lib/cmake/utf8_range/"
          ],
          "ignore_run_exports_from": [
            "jsoncpp"
          ]
        },
        "name": "libprotobuf-static",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cmake",
            "ninja"
          ],
          "host": [
            "gtest",
            "jsoncpp",
            "libabseil",
            "libabseil-tests",
            "zlib",
            "libprotobuf"
          ],
          "run": [
            "libprotobuf"
          ]
        },
        "script": "build-lib.sh",
        "test": {
          "commands": [
            "test -f ${PREFIX}/lib/libprotoc.a",
            "test -f ${PREFIX}/lib/libprotobuf.a",
            "test -f ${PREFIX}/lib/libprotobuf-lite.a",
            "cd cmake_test",
            "cmake -GNinja $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/"
          ],
          "requires": [
            "cxx_compiler_stub",
            "cmake",
            "ninja",
            "zlib"
          ]
        }
      },
      {
        "name": "libprotobuf-python-headers",
        "requirements": {
          "build": [
            "rsync"
          ],
          "host": [
            "libprotobuf"
          ],
          "run_constrained": [
            "libprotobuf 6.32.1"
          ]
        },
        "script": "build-pyheaders.sh",
        "test": {
          "commands": [
            "test -f $PREFIX/include/google/protobuf/proto_api.h",
            "test -f $PREFIX/include/google/protobuf/pyext/message.h"
          ]
        }
      }
    ],
    "package": {
      "name": "libprotobuf-split",
      "version": "6.32.1"
    },
    "schema_version": 0,
    "source": [
      {
        "patches": [
          "patches/0001-set-static-lib-extension-on-windows.patch",
          "patches/0002-always-look-for-shared-abseil-builds.patch",
          "patches/0003-do-not-install-vendored-gmock.patch",
          "patches/0005-export-symbols-needed-by-grpc.patch",
          "patches/0010-Workaround-nvcc-bug-in-message_lite.h.patch"
        ],
        "sha256": "d2081ab9528292f7980ef2d88d2be472453eea4222141046ad4f660874d5f24e",
        "url": "https://github.com/protocolbuffers/protobuf/archive/refs/tags/v32.1.tar.gz"
      }
    ]
  },
  "osx_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "ninja",
        "rsync"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "gtest",
        "jsoncpp",
        "libabseil",
        "libabseil-tests",
        "libprotobuf",
        "zlib"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "libprotobuf"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "binutils",
        "cmake",
        "cxx_compiler_stub",
        "grep",
        "ninja",
        "pkg-config",
        "zlib"
      ]
    }
  },
  "osx_arm64_meta_yaml": {
    "about": {
      "description": "Protocol buffers are Google's language-neutral,\nplatform-neutral, extensible mechanism for serializing structured data-\nthink XML, but smaller, faster, and simpler.\n",
      "dev_url": "https://github.com/protocolbuffers/protobuf",
      "doc_source_url": "https://github.com/protocolbuffers/protobuf/releases",
      "doc_url": "https://developers.google.com/protocol-buffers/",
      "home": "https://developers.google.com/protocol-buffers/",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE",
      "summary": "Protocol Buffers - Google's data interchange format. C++ Libraries and protoc, the protobuf compiler."
    },
    "build": {
      "number": "1"
    },
    "extra": {
      "feedstock-name": "libprotobuf",
      "recipe-maintainers": [
        "JohanMabille",
        "jjerphan",
        "xylar",
        "dopplershift",
        "jakirkham",
        "ocefpaf",
        "wesm",
        "hajapy",
        "xhochy",
        "h-vetinari"
      ]
    },
    "outputs": [
      {
        "build": {
          "ignore_run_exports_from": [
            "gtest",
            "jsoncpp"
          ],
          "run_exports": [
            "libprotobuf"
          ]
        },
        "name": "libprotobuf",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cmake",
            "ninja"
          ],
          "host": [
            "gtest",
            "jsoncpp",
            "libabseil",
            "libabseil-tests",
            "zlib"
          ],
          "run": []
        },
        "script": "build-lib.sh",
        "test": {
          "commands": [
            "test -f ${PREFIX}/lib/libprotoc.dylib",
            "test ! -f ${PREFIX}/lib/libprotoc.a",
            "test -f ${PREFIX}/lib/libprotobuf.dylib",
            "test ! -f ${PREFIX}/lib/libprotobuf.a",
            "test -f ${PREFIX}/lib/libprotobuf-lite.dylib",
            "test ! -f ${PREFIX}/lib/libprotobuf-lite.a",
            "test -f ${PREFIX}/lib/utf8_range.dylib",
            "test ! -f ${PREFIX}/lib/utf8_range.a",
            "test -f ${PREFIX}/lib/utf8_validity.dylib",
            "test ! -f ${PREFIX}/lib/utf8_validity.a",
            "test -d ${PREFIX}/include/upb",
            "test -f ${PREFIX}/lib/libupb.a",
            "test -f ${PREFIX}/include/upb/wire/internal/reader.h",
            "nm -g $PREFIX/lib/libupb.a | grep -E \"[TD] _upb_Arena_Free\"",
            "nm -g $PREFIX/lib/libupb.a | grep -E \"[TD] _upb_Arena_Init\"",
            "nm -g $PREFIX/lib/libupb.a | grep -E \"[TD] _upb_Decode\"",
            "nm -g $PREFIX/lib/libupb.a | grep -E \"[TD] _upb_Encode\"",
            "nm -g $PREFIX/lib/libupb.a | grep -E \"[TD] _upb_alloc_global\"",
            "nm -g $PREFIX/lib/libupb.a | grep -E \"[TD] __upb_Arena_SlowMalloc_dont_copy_me__upb_internal_use_only\"",
            "test -f ${PREFIX}/lib/cmake/protobuf/protobuf-config.cmake",
            "pkg-config --print-errors --exact-version \"32.1.0\" protobuf",
            "pkg-config --print-errors --exact-version \"32.1.0\" protobuf-lite",
            "protoc --help",
            "cd cmake_test",
            "cmake -GNinja $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/"
          ],
          "requires": [
            "cxx_compiler_stub",
            "binutils",
            "grep",
            "cmake",
            "ninja",
            "pkg-config"
          ]
        }
      },
      {
        "build": {
          "always_include_files": [
            "lib/cmake/protobuf/",
            "lib/cmake/utf8_range/"
          ],
          "ignore_run_exports_from": [
            "jsoncpp"
          ]
        },
        "name": "libprotobuf-static",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cmake",
            "ninja"
          ],
          "host": [
            "gtest",
            "jsoncpp",
            "libabseil",
            "libabseil-tests",
            "zlib",
            "libprotobuf"
          ],
          "run": [
            "libprotobuf"
          ]
        },
        "script": "build-lib.sh",
        "test": {
          "commands": [
            "test -f ${PREFIX}/lib/libprotoc.a",
            "test -f ${PREFIX}/lib/libprotobuf.a",
            "test -f ${PREFIX}/lib/libprotobuf-lite.a",
            "cd cmake_test",
            "cmake -GNinja $CMAKE_ARGS .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/"
          ],
          "requires": [
            "cxx_compiler_stub",
            "cmake",
            "ninja",
            "zlib"
          ]
        }
      },
      {
        "name": "libprotobuf-python-headers",
        "requirements": {
          "build": [
            "rsync"
          ],
          "host": [
            "libprotobuf"
          ],
          "run_constrained": [
            "libprotobuf 6.32.1"
          ]
        },
        "script": "build-pyheaders.sh",
        "test": {
          "commands": [
            "test -f $PREFIX/include/google/protobuf/proto_api.h",
            "test -f $PREFIX/include/google/protobuf/pyext/message.h"
          ]
        }
      }
    ],
    "package": {
      "name": "libprotobuf-split",
      "version": "6.32.1"
    },
    "schema_version": 0,
    "source": [
      {
        "patches": [
          "patches/0001-set-static-lib-extension-on-windows.patch",
          "patches/0002-always-look-for-shared-abseil-builds.patch",
          "patches/0003-do-not-install-vendored-gmock.patch",
          "patches/0005-export-symbols-needed-by-grpc.patch",
          "patches/0010-Workaround-nvcc-bug-in-message_lite.h.patch"
        ],
        "sha256": "d2081ab9528292f7980ef2d88d2be472453eea4222141046ad4f660874d5f24e",
        "url": "https://github.com/protocolbuffers/protobuf/archive/refs/tags/v32.1.tar.gz"
      }
    ]
  },
  "osx_arm64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "ninja",
        "rsync"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "gtest",
        "jsoncpp",
        "libabseil",
        "libabseil-tests",
        "libprotobuf",
        "zlib"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "libprotobuf"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "binutils",
        "cmake",
        "cxx_compiler_stub",
        "grep",
        "ninja",
        "pkg-config",
        "zlib"
      ]
    }
  },
  "outputs_names": {
    "__set__": true,
    "elements": [
      "libprotobuf",
      "libprotobuf-python-headers",
      "libprotobuf-static"
    ]
  },
  "parsing_error": false,
  "platforms": [
    "linux_64",
    "linux_aarch64",
    "linux_ppc64le",
    "osx_64",
    "osx_arm64",
    "win_64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/libprotobuf.json"
  },
  "raw_meta_yaml": "# keep this without major version to let the bot pick it up\n{% set version = \"32.1\" %}\n# protobuf doesn't add the major version in the tag, it's defined per language in\n# https://github.com/protocolbuffers/protobuf/blob/main/version.json\n{% set major = \"6\" %}\n# pkg-config metadata sets yet another version format, not using the major version\n# but adding the rc number as a patch version, or 0 for regular releases\n{% set pkgconfig_ver = version.split(\".\")[0] ~ \".\" ~ version.split(\".\")[1] %}\n{% if version.split(\".\")[-1].startswith(\"rc\") %}\n  {% set pkgconfig_ver = pkgconfig_ver ~ \".\" ~ version.split(\".\")[-1].replace(\"rc\", \"\") %}\n{% else %}\n  {% set pkgconfig_ver = pkgconfig_ver ~ \".\" ~ \"0\" %}\n{% endif %}\n\n{% set proto_libraries = [\"libprotoc\", \"libprotobuf\", \"libprotobuf-lite\"] %}\n# different patterns between unix & windows\n{% set utf8_libraries = [\"libutf8_range\", \"libutf8_validity\"] %}     # [unix]\n{% set utf8_libraries = [\"utf8_range\", \"utf8_validity\"] %}           # [win]\n\npackage:\n  name: libprotobuf-split\n  version: {{ major ~ \".\" ~ version }}\n\nsource:\n  - url: https://github.com/protocolbuffers/protobuf/archive/refs/tags/v{{ version.replace(\".rc\", \"-rc\") }}.tar.gz\n    sha256: d2081ab9528292f7980ef2d88d2be472453eea4222141046ad4f660874d5f24e\n    patches:\n      - patches/0001-set-static-lib-extension-on-windows.patch\n      - patches/0002-always-look-for-shared-abseil-builds.patch\n      - patches/0003-do-not-install-vendored-gmock.patch\n      # skip annoyingly flaky test on windows, see\n      # https://github.com/protocolbuffers/protobuf/issues/8645\n      - patches/0004-disable-MapImplTest.RandomOrdering-due-to-flakiness.patch      # [win]\n      # necessary for building grpc\n      - patches/0005-export-symbols-needed-by-grpc.patch\n      # protobuf does a non-standard `libfoo.dll` naming pattern for protobuf;\n      # for now, we avoid extending it to utf8_range, because (despite correct CMake\n      # metadata), other libraries - not least grpcio - are still expecting to find\n      # utf8_range.{dll,lib}, not libutf8_range.{dll,lib}.\n      - patches/0006-do-not-add-LIB_PREFIX-to-utf8_-range-validity-on-win.patch     # [win]\n      - patches/0010-Workaround-nvcc-bug-in-message_lite.h.patch\n\nbuild:\n  number: 1\n\noutputs:\n  - name: libprotobuf\n    script: build-lib.sh  # [unix]\n    script: build-lib.bat  # [win]\n    build:\n      run_exports:\n        # protobuf now (intentionally) increments the SOVER with every patch release, which\n        # breaks tools like grpc_plugin_cpp if they get the wrong libprotoc at runtime, see\n        # https://github.com/conda-forge/conda-forge-pinning-feedstock/issues/4075\n        - {{ pin_subpackage('libprotobuf', max_pin='x.x.x') }}\n      ignore_run_exports_from:\n        - gtest\n        - jsoncpp\n    requirements:\n      build:\n        - {{ stdlib('c') }}\n        - {{ compiler('c') }}\n        - {{ compiler('cxx') }}\n        - cmake\n        - ninja\n      host:\n        - gtest\n        - jsoncpp\n        - libabseil\n        # requires abseil test targets to build with tests enabled\n        - libabseil-tests\n        - zlib\n      run:\n        - ucrt  # [win]\n    test:\n      requires:\n        # cmake needs compiler to be able to run package detection, see\n        # https://discourse.cmake.org/t/questions-about-find-package-cli-msvc/6194\n        - {{ compiler('cxx') }}\n        - binutils  # [unix]\n        - grep      # [unix]\n        - m2-grep   # [win]\n        - cmake\n        - ninja\n        - pkg-config\n      files:\n        - cmake_test/\n      commands:\n        {% for each_lib in proto_libraries + utf8_libraries %}\n        # shared libraries\n        - test -f ${PREFIX}/lib/{{ each_lib }}.so                      # [linux]\n        - test -f ${PREFIX}/lib/{{ each_lib }}.dylib                   # [osx]\n        - if not exist %LIBRARY_BIN%\\{{ each_lib }}.dll exit 1         # [win]\n        - if not exist %LIBRARY_LIB%\\{{ each_lib }}.lib exit 1         # [win]\n\n        # absence of static libraries\n        - test ! -f ${PREFIX}/lib/{{ each_lib }}.a                     # [unix]\n        - if exist %LIBRARY_LIB%\\{{ each_lib }}-static.lib exit 1      # [win]\n        {% endfor %}\n\n        # presence of upb-related includes & libraries (moved here from grpc), see\n        # https://github.com/protocolbuffers/protobuf/issues/12927\n        - test -d ${PREFIX}/include/upb                 # [unix]\n        - test -f ${PREFIX}/lib/libupb.a                # [unix]\n        - if not exist %LIBRARY_INC%\\upb exit 1         # [win]\n        - if not exist %LIBRARY_LIB%\\libupb.lib exit 1  # [win]\n\n        # upb headers needed by protobuf, see\n        # https://github.com/protocolbuffers/protobuf/issues/20522\n        - test -f ${PREFIX}/include/upb/wire/internal/reader.h          # [unix]\n        - if not exist %LIBRARY_INC%\\upb\\wire\\internal\\reader.h exit 1  # [win]\n        # check if required symbols are in libupb\n        {% for symb in [\n            \"upb_Arena_Free\", \"upb_Arena_Init\", \"upb_Decode\", \"upb_Encode\", \"upb_alloc_global\",\n            \"_upb_Arena_SlowMalloc_dont_copy_me__upb_internal_use_only\"\n        ] %}\n        - nm -g $PREFIX/lib/libupb.a | grep -E \"[TD] {{ symb }}\"                            # [linux]\n        - nm -g $PREFIX/lib/libupb.a | grep -E \"[TD] _{{ symb }}\"                           # [osx]\n        - dumpbin -symbols %LIBRARY_LIB%\\libupb.lib | grep -E \"SECT.*External.*{{ symb }}\"  # [win]\n        {% endfor %}\n\n        # cmake\n        - test -f ${PREFIX}/lib/cmake/protobuf/protobuf-config.cmake              # [unix]\n        - if not exist %LIBRARY_LIB%\\cmake\\protobuf\\protobuf-config.cmake exit 1  # [win]\n\n        # pkg-config\n        - pkg-config --print-errors --exact-version \"{{ pkgconfig_ver }}\" protobuf\n        - pkg-config --print-errors --exact-version \"{{ pkgconfig_ver }}\" protobuf-lite\n\n        # binary\n        - protoc --help\n\n        # more CMake integration\n        - cd cmake_test\n        - cmake -GNinja $CMAKE_ARGS .   # [unix]\n        - cmake -GNinja %CMAKE_ARGS% .  # [win]\n        - cmake --build .\n\n  - name: libprotobuf-static\n    script: build-lib.sh  # [unix]\n    script: build-lib.bat  # [win]\n    build:\n      always_include_files:\n        # Must overwrite the CMake metadata from shared libprotobuf\n        - lib/cmake/protobuf/            # [unix]\n        - lib/cmake/utf8_range/          # [unix]\n        - Library/lib/cmake/protobuf/    # [win]\n        - Library/lib/cmake/utf8_range/  # [win]\n      ignore_run_exports_from:\n        - jsoncpp\n    requirements:\n      build:\n        - {{ stdlib('c') }}\n        - {{ compiler('c') }}\n        - {{ compiler('cxx') }}\n        - cmake\n        - ninja\n      host:\n        - gtest\n        - jsoncpp\n        - libabseil\n        - libabseil-tests\n        - zlib\n        - {{ pin_subpackage('libprotobuf', exact=True) }}\n      run:\n        - {{ pin_subpackage('libprotobuf', exact=True) }}\n    test:\n      requires:\n        # cmake needs compiler to be able to run package detection, see\n        # https://discourse.cmake.org/t/questions-about-find-package-cli-msvc/6194\n        - {{ compiler('cxx') }}\n        - cmake\n        - ninja\n        - zlib\n      files:\n        - cmake_test/\n      commands:\n        {% for each_lib in proto_libraries %}\n        # static libraries\n        - test -f ${PREFIX}/lib/{{ each_lib }}.a                       # [unix]\n        - if not exist %LIBRARY_LIB%\\{{ each_lib }}-static.lib exit 1  # [win]\n        {% endfor %}\n\n        # more CMake integration\n        - cd cmake_test\n        - cmake -GNinja $CMAKE_ARGS .   # [unix]\n        - cmake -GNinja %CMAKE_ARGS% .  # [win]\n        - cmake --build .\n\n  - name: libprotobuf-python-headers\n    script: build-pyheaders.sh  # [unix]\n    script: build-pyheaders.bat  # [win]\n    requirements:\n      build:\n        - rsync  # [unix]\n      host:\n        - {{ pin_subpackage('libprotobuf', exact=True) }}\n      run_constrained:\n        - libprotobuf {{ major ~ \".\" ~ version }}\n    test:\n      commands:\n        - test -f $PREFIX/include/google/protobuf/proto_api.h      # [unix]\n        - test -f $PREFIX/include/google/protobuf/pyext/message.h  # [unix]\n        - if not exist %LIBRARY_PREFIX%\\include\\google\\protobuf\\proto_api.h exit 1      # [win]\n        - if not exist %LIBRARY_PREFIX%\\include\\google\\protobuf\\pyext\\message.h exit 1  # [win]\n\nabout:\n  home: https://developers.google.com/protocol-buffers/\n  license: BSD-3-Clause\n  license_family: BSD\n  license_file: LICENSE\n  summary: Protocol Buffers - Google's data interchange format. C++ Libraries and protoc, the protobuf compiler.\n  description: |\n    Protocol buffers are Google's language-neutral,\n    platform-neutral, extensible mechanism for serializing structured data-\n    think XML, but smaller, faster, and simpler.\n  dev_url: https://github.com/protocolbuffers/protobuf\n  doc_url: https://developers.google.com/protocol-buffers/\n  doc_source_url: https://github.com/protocolbuffers/protobuf/releases\n\nextra:\n  recipe-maintainers:\n    - JohanMabille\n    - jjerphan\n    - xylar\n    - dopplershift\n    - jakirkham\n    - ocefpaf\n    - wesm\n    - hajapy\n    - xhochy\n    - h-vetinari\n  feedstock-name: libprotobuf\n",
  "req": {
    "__set__": true,
    "elements": [
      "c_compiler_stub",
      "c_stdlib_stub",
      "cmake",
      "cxx_compiler_stub",
      "gtest",
      "jsoncpp",
      "libabseil",
      "libabseil-tests",
      "libprotobuf",
      "ninja",
      "rsync",
      "ucrt",
      "zlib"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "ninja",
        "rsync"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "gtest",
        "jsoncpp",
        "libabseil",
        "libabseil-tests",
        "libprotobuf",
        "zlib"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "libprotobuf",
        "ucrt"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "binutils",
        "cmake",
        "cxx_compiler_stub",
        "grep",
        "m2-grep",
        "ninja",
        "pkg-config",
        "zlib"
      ]
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "ninja",
        "rsync"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "gtest",
        "jsoncpp",
        "libabseil",
        "libabseil-tests",
        "libprotobuf",
        "zlib"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "libprotobuf",
        "ucrt"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "binutils",
        "cmake",
        "cxx_compiler_stub",
        "grep",
        "m2-grep",
        "ninja",
        "pkg-config",
        "zlib"
      ]
    }
  },
  "url": "https://github.com/protocolbuffers/protobuf/archive/refs/tags/v32.1.tar.gz",
  "version": "6.32.1",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/libprotobuf.json"
  },
  "win_64_meta_yaml": {
    "about": {
      "description": "Protocol buffers are Google's language-neutral,\nplatform-neutral, extensible mechanism for serializing structured data-\nthink XML, but smaller, faster, and simpler.\n",
      "dev_url": "https://github.com/protocolbuffers/protobuf",
      "doc_source_url": "https://github.com/protocolbuffers/protobuf/releases",
      "doc_url": "https://developers.google.com/protocol-buffers/",
      "home": "https://developers.google.com/protocol-buffers/",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE",
      "summary": "Protocol Buffers - Google's data interchange format. C++ Libraries and protoc, the protobuf compiler."
    },
    "build": {
      "number": "1"
    },
    "extra": {
      "feedstock-name": "libprotobuf",
      "recipe-maintainers": [
        "JohanMabille",
        "jjerphan",
        "xylar",
        "dopplershift",
        "jakirkham",
        "ocefpaf",
        "wesm",
        "hajapy",
        "xhochy",
        "h-vetinari"
      ]
    },
    "outputs": [
      {
        "build": {
          "ignore_run_exports_from": [
            "gtest",
            "jsoncpp"
          ],
          "run_exports": [
            "libprotobuf"
          ]
        },
        "name": "libprotobuf",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cmake",
            "ninja"
          ],
          "host": [
            "gtest",
            "jsoncpp",
            "libabseil",
            "libabseil-tests",
            "zlib"
          ],
          "run": [
            "ucrt"
          ]
        },
        "script": "build-lib.bat",
        "test": {
          "commands": [
            "if not exist %LIBRARY_BIN%\\libprotoc.dll exit 1",
            "if not exist %LIBRARY_LIB%\\libprotoc.lib exit 1",
            "if exist %LIBRARY_LIB%\\libprotoc-static.lib exit 1",
            "if not exist %LIBRARY_BIN%\\libprotobuf.dll exit 1",
            "if not exist %LIBRARY_LIB%\\libprotobuf.lib exit 1",
            "if exist %LIBRARY_LIB%\\libprotobuf-static.lib exit 1",
            "if not exist %LIBRARY_BIN%\\libprotobuf-lite.dll exit 1",
            "if not exist %LIBRARY_LIB%\\libprotobuf-lite.lib exit 1",
            "if exist %LIBRARY_LIB%\\libprotobuf-lite-static.lib exit 1",
            "if not exist %LIBRARY_BIN%\\utf8_range.dll exit 1",
            "if not exist %LIBRARY_LIB%\\utf8_range.lib exit 1",
            "if exist %LIBRARY_LIB%\\utf8_range-static.lib exit 1",
            "if not exist %LIBRARY_BIN%\\utf8_validity.dll exit 1",
            "if not exist %LIBRARY_LIB%\\utf8_validity.lib exit 1",
            "if exist %LIBRARY_LIB%\\utf8_validity-static.lib exit 1",
            "if not exist %LIBRARY_INC%\\upb exit 1",
            "if not exist %LIBRARY_LIB%\\libupb.lib exit 1",
            "if not exist %LIBRARY_INC%\\upb\\wire\\internal\\reader.h exit 1",
            "dumpbin -symbols %LIBRARY_LIB%\\libupb.lib | grep -E \"SECT.*External.*upb_Arena_Free\"",
            "dumpbin -symbols %LIBRARY_LIB%\\libupb.lib | grep -E \"SECT.*External.*upb_Arena_Init\"",
            "dumpbin -symbols %LIBRARY_LIB%\\libupb.lib | grep -E \"SECT.*External.*upb_Decode\"",
            "dumpbin -symbols %LIBRARY_LIB%\\libupb.lib | grep -E \"SECT.*External.*upb_Encode\"",
            "dumpbin -symbols %LIBRARY_LIB%\\libupb.lib | grep -E \"SECT.*External.*upb_alloc_global\"",
            "dumpbin -symbols %LIBRARY_LIB%\\libupb.lib | grep -E \"SECT.*External.*_upb_Arena_SlowMalloc_dont_copy_me__upb_internal_use_only\"",
            "if not exist %LIBRARY_LIB%\\cmake\\protobuf\\protobuf-config.cmake exit 1",
            "pkg-config --print-errors --exact-version \"32.1.0\" protobuf",
            "pkg-config --print-errors --exact-version \"32.1.0\" protobuf-lite",
            "protoc --help",
            "cd cmake_test",
            "cmake -GNinja %CMAKE_ARGS% .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/"
          ],
          "requires": [
            "cxx_compiler_stub",
            "m2-grep",
            "cmake",
            "ninja",
            "pkg-config"
          ]
        }
      },
      {
        "build": {
          "always_include_files": [
            "Library/lib/cmake/protobuf/",
            "Library/lib/cmake/utf8_range/"
          ],
          "ignore_run_exports_from": [
            "jsoncpp"
          ]
        },
        "name": "libprotobuf-static",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cmake",
            "ninja"
          ],
          "host": [
            "gtest",
            "jsoncpp",
            "libabseil",
            "libabseil-tests",
            "zlib",
            "libprotobuf"
          ],
          "run": [
            "libprotobuf"
          ]
        },
        "script": "build-lib.bat",
        "test": {
          "commands": [
            "if not exist %LIBRARY_LIB%\\libprotoc-static.lib exit 1",
            "if not exist %LIBRARY_LIB%\\libprotobuf-static.lib exit 1",
            "if not exist %LIBRARY_LIB%\\libprotobuf-lite-static.lib exit 1",
            "cd cmake_test",
            "cmake -GNinja %CMAKE_ARGS% .",
            "cmake --build ."
          ],
          "files": [
            "cmake_test/"
          ],
          "requires": [
            "cxx_compiler_stub",
            "cmake",
            "ninja",
            "zlib"
          ]
        }
      },
      {
        "name": "libprotobuf-python-headers",
        "requirements": {
          "build": [],
          "host": [
            "libprotobuf"
          ],
          "run_constrained": [
            "libprotobuf 6.32.1"
          ]
        },
        "script": "build-pyheaders.bat",
        "test": {
          "commands": [
            "if not exist %LIBRARY_PREFIX%\\include\\google\\protobuf\\proto_api.h exit 1",
            "if not exist %LIBRARY_PREFIX%\\include\\google\\protobuf\\pyext\\message.h exit 1"
          ]
        }
      }
    ],
    "package": {
      "name": "libprotobuf-split",
      "version": "6.32.1"
    },
    "schema_version": 0,
    "source": [
      {
        "patches": [
          "patches/0001-set-static-lib-extension-on-windows.patch",
          "patches/0002-always-look-for-shared-abseil-builds.patch",
          "patches/0003-do-not-install-vendored-gmock.patch",
          "patches/0004-disable-MapImplTest.RandomOrdering-due-to-flakiness.patch",
          "patches/0005-export-symbols-needed-by-grpc.patch",
          "patches/0006-do-not-add-LIB_PREFIX-to-utf8_-range-validity-on-win.patch",
          "patches/0010-Workaround-nvcc-bug-in-message_lite.h.patch"
        ],
        "sha256": "d2081ab9528292f7980ef2d88d2be472453eea4222141046ad4f660874d5f24e",
        "url": "https://github.com/protocolbuffers/protobuf/archive/refs/tags/v32.1.tar.gz"
      }
    ]
  },
  "win_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "ninja"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "gtest",
        "jsoncpp",
        "libabseil",
        "libabseil-tests",
        "libprotobuf",
        "zlib"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "libprotobuf",
        "ucrt"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "cmake",
        "cxx_compiler_stub",
        "m2-grep",
        "ninja",
        "pkg-config",
        "zlib"
      ]
    }
  }
}