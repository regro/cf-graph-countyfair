{
  "archived": false,
  "branch": "main",
  "conda-forge.yml": {
    "conda_build": {
      "pkg_format": "2"
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    }
  },
  "feedstock_hash": "c8ae3dd7ec01a25d8a99d3565b31623bd31df5f8",
  "feedstock_hash_ts": 1730889660,
  "feedstock_name": "symopt",
  "hash_type": "sha256",
  "linux_64_meta_yaml": {
    "about": {
      "description": "symopt makes it easy to define and solve (non)linear constrained optimization problems in Python.\nIt uses the power of SymPy to automate the error-prone and time-consuming task of writing\nfunctions to evaluate an optimization problem's objective function and nonlinear constraints\n(to say nothing of their first and second derivatives!). symopt then provides a standardized\ninterface to solve the problem through nonlinear optimization backends including\nSciPy and Ipopt.\n",
      "dev_url": "https://github.com/spcornelius/symopt",
      "doc_url": "https://symopt.readthedocs.io/en/v0.2.0",
      "home": "https://github.com/spcornelius/symopt",
      "license": "MIT",
      "license_family": "MIT",
      "license_file": "LICENSE",
      "summary": "Easy (non)linear optimization in Python with symbolically-defined objectives/constraints"
    },
    "build": {
      "noarch": "python",
      "number": "0",
      "script": "python -m pip install . --no-deps -vv"
    },
    "extra": {
      "recipe-maintainers": [
        "spcornelius"
      ]
    },
    "package": {
      "name": "symopt",
      "version": "0.2.0"
    },
    "requirements": {
      "build": [
        "python >=3.6",
        "setuptools",
        "pip"
      ],
      "run": [
        "python >=3.6",
        "numpy",
        "sympy",
        "scipy",
        "cyipopt",
        "orderedset"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "af1d64868cd56c727c3397559366617c673d5d35f6459be18df50607957605a9",
      "url": "https://github.com/spcornelius/symopt/archive/v0.2.0.tar.gz"
    },
    "test": {
      "imports": [
        "symopt"
      ],
      "requires": [
        "pytest",
        "fortran_compiler_stub"
      ]
    }
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "pip",
        "python",
        "setuptools"
      ]
    },
    "host": {
      "__set__": true,
      "elements": []
    },
    "run": {
      "__set__": true,
      "elements": [
        "cyipopt",
        "numpy",
        "orderedset",
        "python",
        "scipy",
        "sympy"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "fortran_compiler_stub",
        "pytest"
      ]
    }
  },
  "meta_yaml": {
    "about": {
      "description": "symopt makes it easy to define and solve (non)linear constrained optimization problems in Python.\nIt uses the power of SymPy to automate the error-prone and time-consuming task of writing\nfunctions to evaluate an optimization problem's objective function and nonlinear constraints\n(to say nothing of their first and second derivatives!). symopt then provides a standardized\ninterface to solve the problem through nonlinear optimization backends including\nSciPy and Ipopt.\n",
      "dev_url": "https://github.com/spcornelius/symopt",
      "doc_url": "https://symopt.readthedocs.io/en/v0.2.0",
      "home": "https://github.com/spcornelius/symopt",
      "license": "MIT",
      "license_family": "MIT",
      "license_file": "LICENSE",
      "summary": "Easy (non)linear optimization in Python with symbolically-defined objectives/constraints"
    },
    "build": {
      "noarch": "python",
      "number": "0",
      "script": "python -m pip install . --no-deps -vv"
    },
    "extra": {
      "recipe-maintainers": [
        "spcornelius"
      ]
    },
    "package": {
      "name": "symopt",
      "version": "0.2.0"
    },
    "requirements": {
      "build": [
        "python >=3.6",
        "setuptools",
        "pip"
      ],
      "run": [
        "python >=3.6",
        "numpy",
        "sympy",
        "scipy",
        "cyipopt",
        "orderedset"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "af1d64868cd56c727c3397559366617c673d5d35f6459be18df50607957605a9",
      "url": "https://github.com/spcornelius/symopt/archive/v0.2.0.tar.gz"
    },
    "test": {
      "imports": [
        "symopt"
      ],
      "requires": [
        "pytest",
        "fortran_compiler_stub"
      ]
    }
  },
  "name": "symopt",
  "outputs_names": {
    "__set__": true,
    "elements": [
      "symopt"
    ]
  },
  "parsing_error": false,
  "platforms": [
    "linux_64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/symopt.json"
  },
  "raw_meta_yaml": "{% set name = \"symopt\" %}\n{% set version = \"0.2.0\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://github.com/spcornelius/{{ name }}/archive/v{{ version }}.tar.gz\n  sha256: af1d64868cd56c727c3397559366617c673d5d35f6459be18df50607957605a9\n\nbuild:\n  noarch: python\n  number: 0\n  script: python -m pip install . --no-deps -vv\n\nrequirements:\n  build:\n    - python >=3.6\n    - setuptools\n    - pip\n  run:\n    - python >=3.6\n    - numpy\n    - sympy\n    - scipy\n    - cyipopt\n    - orderedset\n\ntest:\n  imports:\n    - {{ name }}\n  requires:\n    - pytest\n    - {{ compiler('fortran') }}\n\nabout:\n  home: https://github.com/spcornelius/{{ name }}\n  license: MIT\n  license_family: MIT\n  license_file: LICENSE\n  doc_url: https://{{ name }}.readthedocs.io/en/v{{ version }}\n  dev_url: https://github.com/spcornelius/{{ name }}\n  summary: 'Easy (non)linear optimization in Python with symbolically-defined objectives/constraints'\n  description: |\n    symopt makes it easy to define and solve (non)linear constrained optimization problems in Python.\n    It uses the power of SymPy to automate the error-prone and time-consuming task of writing\n    functions to evaluate an optimization problem's objective function and nonlinear constraints\n    (to say nothing of their first and second derivatives!). symopt then provides a standardized\n    interface to solve the problem through nonlinear optimization backends including\n    SciPy and Ipopt.\nextra:\n  recipe-maintainers:\n    - spcornelius\n",
  "req": {
    "__set__": true,
    "elements": [
      "cyipopt",
      "numpy",
      "orderedset",
      "pip",
      "python",
      "scipy",
      "setuptools",
      "sympy"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "pip",
        "python",
        "setuptools"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "fortran_compiler_stub"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "cyipopt",
        "fortran_compiler_stub",
        "numpy",
        "orderedset",
        "python",
        "scipy",
        "sympy"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "fortran_compiler_stub",
        "pytest"
      ]
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "pip",
        "python >=3.6",
        "setuptools"
      ]
    },
    "host": {
      "__set__": true,
      "elements": []
    },
    "run": {
      "__set__": true,
      "elements": [
        "cyipopt",
        "numpy",
        "orderedset",
        "python >=3.6",
        "scipy",
        "sympy"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "fortran_compiler_stub",
        "pytest"
      ]
    }
  },
  "url": "https://github.com/spcornelius/symopt/archive/v0.2.0.tar.gz",
  "version": "0.2.0",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/symopt.json"
  }
}