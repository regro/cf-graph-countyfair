{
  "archived": false,
  "branch": "main",
  "conda-forge.yml": {
    "build_platform": {
      "linux_aarch64": "linux_64",
      "linux_ppc64le": "linux_64",
      "osx_arm64": "osx_64"
    },
    "conda_build": {
      "pkg_format": "2"
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    },
    "provider": {
      "linux_aarch64": "default",
      "linux_ppc64le": "default",
      "win": "azure"
    },
    "test": "native_and_emulated"
  },
  "feedstock_name": "compilers",
  "linux_64_meta_yaml": {
    "about": {
      "description": "This package is a generic way to obtain the compilers for your system\nthat conda-forge used to compile its ecosystem. These compilers are,\ntherefore, guaranteed to be ABI compatible with the conda packages\nyou have installed.\n\nThese compiler metapackages are a convenience ONLY for users.\nDo NOT use these packages as a build or host dependencies in other\nrecipes.  Use the compiler Jinja template function instead.\nFor C++ for example, use compiler('cxx') as usual.\n",
      "home": "https://conda-forge.org",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE.txt",
      "summary": "A metapackage to obtain compilers"
    },
    "build": {
      "number": "0"
    },
    "extra": {
      "recipe-maintainers": [
        "duncanmmacleod",
        "scopatz",
        "chrisburr",
        "isuruf"
      ]
    },
    "outputs": [
      {
        "about": {
          "description": "This package is a generic way to obtain the C compiler for your system\nthat conda-forge used to compile its ecosystem.  This compiler is,\ntherefore, guaranteed to be ABI compatible with the conda packages\nyou have installed.\n\nThis compiler metapackage is a convenience ONLY for users.\nDo NOT use this package as a build or host dependency in other\nrecipes.  Use the Jinja template function compiler('c') instead.\n",
          "home": "https://conda-forge.org",
          "license": "BSD-3-Clause",
          "summary": "A metapackage to obtain a C compiler"
        },
        "name": "c-compiler",
        "requirements": {
          "run": [
            "c_compiler_stub",
            "binutils",
            "gcc"
          ]
        },
        "test": {
          "commands": [
            "$CC --help"
          ]
        }
      },
      {
        "about": {
          "description": "This package is a generic way to obtain the C++ compiler for your system\nthat conda-forge used to compile its ecosystem.  This compiler is,\ntherefore, guaranteed to be ABI compatible with the conda packages\nyou have installed.\n\nThis compiler metapackage is a convenience ONLY for users.\nDo NOT use this package as a build or host dependency in other\nrecipes.  Use the Jinja template function compiler('cxx') instead.\n",
          "home": "https://conda-forge.org",
          "license": "BSD-3-Clause",
          "summary": "A metapackage to obtain a C++ compiler"
        },
        "name": "cxx-compiler",
        "requirements": {
          "run": [
            "cxx_compiler_stub",
            "c-compiler",
            "gxx"
          ]
        },
        "test": {
          "commands": [
            "$CXX --help"
          ]
        }
      },
      {
        "about": {
          "description": "This package is a generic way to obtain the Fortran compiler for your\nsystem that conda-forge used to compile its ecosystem.  This compiler\nis, therefore, guaranteed to be ABI compatible with the conda packages\nyou have installed.\n\nThis compiler metapackage is a convenience ONLY for users.\nDo NOT use this package as a build or host dependency in other\nrecipes.  Use the Jinja template function compiler('fortran') instead.\n",
          "home": "https://conda-forge.org",
          "license": "BSD-3-Clause",
          "summary": "A metapackage to obtain a Fortran compiler"
        },
        "name": "fortran-compiler",
        "requirements": {
          "run": [
            "fortran_compiler_stub",
            "binutils",
            "gfortran",
            "c-compiler"
          ]
        },
        "test": {
          "commands": [
            "$FC --help"
          ]
        }
      },
      {
        "name": "compilers",
        "requirements": {
          "run": [
            "c-compiler",
            "cxx-compiler",
            "fortran-compiler"
          ]
        },
        "test": {
          "commands": [
            "$CC --help",
            "$CXX --help",
            "$FC --help"
          ]
        }
      }
    ],
    "package": {
      "name": "compilers",
      "version": "1.11.0"
    },
    "schema_version": 0
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": []
    },
    "host": {
      "__set__": true,
      "elements": []
    },
    "run": {
      "__set__": true,
      "elements": [
        "binutils",
        "c-compiler",
        "c_compiler_stub",
        "cxx-compiler",
        "cxx_compiler_stub",
        "fortran-compiler",
        "fortran_compiler_stub",
        "gcc",
        "gfortran",
        "gxx"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "linux_aarch64_meta_yaml": {
    "about": {
      "description": "This package is a generic way to obtain the compilers for your system\nthat conda-forge used to compile its ecosystem. These compilers are,\ntherefore, guaranteed to be ABI compatible with the conda packages\nyou have installed.\n\nThese compiler metapackages are a convenience ONLY for users.\nDo NOT use these packages as a build or host dependencies in other\nrecipes.  Use the compiler Jinja template function instead.\nFor C++ for example, use compiler('cxx') as usual.\n",
      "home": "https://conda-forge.org",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE.txt",
      "summary": "A metapackage to obtain compilers"
    },
    "build": {
      "number": "0"
    },
    "extra": {
      "recipe-maintainers": [
        "duncanmmacleod",
        "scopatz",
        "chrisburr",
        "isuruf"
      ]
    },
    "outputs": [
      {
        "about": {
          "description": "This package is a generic way to obtain the C compiler for your system\nthat conda-forge used to compile its ecosystem.  This compiler is,\ntherefore, guaranteed to be ABI compatible with the conda packages\nyou have installed.\n\nThis compiler metapackage is a convenience ONLY for users.\nDo NOT use this package as a build or host dependency in other\nrecipes.  Use the Jinja template function compiler('c') instead.\n",
          "home": "https://conda-forge.org",
          "license": "BSD-3-Clause",
          "summary": "A metapackage to obtain a C compiler"
        },
        "name": "c-compiler",
        "requirements": {
          "run": [
            "c_compiler_stub",
            "binutils",
            "gcc"
          ]
        },
        "test": {
          "commands": [
            "$CC --help"
          ]
        }
      },
      {
        "about": {
          "description": "This package is a generic way to obtain the C++ compiler for your system\nthat conda-forge used to compile its ecosystem.  This compiler is,\ntherefore, guaranteed to be ABI compatible with the conda packages\nyou have installed.\n\nThis compiler metapackage is a convenience ONLY for users.\nDo NOT use this package as a build or host dependency in other\nrecipes.  Use the Jinja template function compiler('cxx') instead.\n",
          "home": "https://conda-forge.org",
          "license": "BSD-3-Clause",
          "summary": "A metapackage to obtain a C++ compiler"
        },
        "name": "cxx-compiler",
        "requirements": {
          "run": [
            "cxx_compiler_stub",
            "c-compiler",
            "gxx"
          ]
        },
        "test": {
          "commands": [
            "$CXX --help"
          ]
        }
      },
      {
        "about": {
          "description": "This package is a generic way to obtain the Fortran compiler for your\nsystem that conda-forge used to compile its ecosystem.  This compiler\nis, therefore, guaranteed to be ABI compatible with the conda packages\nyou have installed.\n\nThis compiler metapackage is a convenience ONLY for users.\nDo NOT use this package as a build or host dependency in other\nrecipes.  Use the Jinja template function compiler('fortran') instead.\n",
          "home": "https://conda-forge.org",
          "license": "BSD-3-Clause",
          "summary": "A metapackage to obtain a Fortran compiler"
        },
        "name": "fortran-compiler",
        "requirements": {
          "run": [
            "fortran_compiler_stub",
            "binutils",
            "gfortran",
            "c-compiler"
          ]
        },
        "test": {
          "commands": [
            "$FC --help"
          ]
        }
      },
      {
        "name": "compilers",
        "requirements": {
          "run": [
            "c-compiler",
            "cxx-compiler",
            "fortran-compiler"
          ]
        },
        "test": {
          "commands": [
            "$CC --help",
            "$CXX --help",
            "$FC --help"
          ]
        }
      }
    ],
    "package": {
      "name": "compilers",
      "version": "1.11.0"
    },
    "schema_version": 0
  },
  "linux_aarch64_requirements": {
    "build": {
      "__set__": true,
      "elements": []
    },
    "host": {
      "__set__": true,
      "elements": []
    },
    "run": {
      "__set__": true,
      "elements": [
        "binutils",
        "c-compiler",
        "c_compiler_stub",
        "cxx-compiler",
        "cxx_compiler_stub",
        "fortran-compiler",
        "fortran_compiler_stub",
        "gcc",
        "gfortran",
        "gxx"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "linux_ppc64le_meta_yaml": {
    "about": {
      "description": "This package is a generic way to obtain the compilers for your system\nthat conda-forge used to compile its ecosystem. These compilers are,\ntherefore, guaranteed to be ABI compatible with the conda packages\nyou have installed.\n\nThese compiler metapackages are a convenience ONLY for users.\nDo NOT use these packages as a build or host dependencies in other\nrecipes.  Use the compiler Jinja template function instead.\nFor C++ for example, use compiler('cxx') as usual.\n",
      "home": "https://conda-forge.org",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE.txt",
      "summary": "A metapackage to obtain compilers"
    },
    "build": {
      "number": "0"
    },
    "extra": {
      "recipe-maintainers": [
        "duncanmmacleod",
        "scopatz",
        "chrisburr",
        "isuruf"
      ]
    },
    "outputs": [
      {
        "about": {
          "description": "This package is a generic way to obtain the C compiler for your system\nthat conda-forge used to compile its ecosystem.  This compiler is,\ntherefore, guaranteed to be ABI compatible with the conda packages\nyou have installed.\n\nThis compiler metapackage is a convenience ONLY for users.\nDo NOT use this package as a build or host dependency in other\nrecipes.  Use the Jinja template function compiler('c') instead.\n",
          "home": "https://conda-forge.org",
          "license": "BSD-3-Clause",
          "summary": "A metapackage to obtain a C compiler"
        },
        "name": "c-compiler",
        "requirements": {
          "run": [
            "c_compiler_stub",
            "binutils",
            "gcc"
          ]
        },
        "test": {
          "commands": [
            "$CC --help"
          ]
        }
      },
      {
        "about": {
          "description": "This package is a generic way to obtain the C++ compiler for your system\nthat conda-forge used to compile its ecosystem.  This compiler is,\ntherefore, guaranteed to be ABI compatible with the conda packages\nyou have installed.\n\nThis compiler metapackage is a convenience ONLY for users.\nDo NOT use this package as a build or host dependency in other\nrecipes.  Use the Jinja template function compiler('cxx') instead.\n",
          "home": "https://conda-forge.org",
          "license": "BSD-3-Clause",
          "summary": "A metapackage to obtain a C++ compiler"
        },
        "name": "cxx-compiler",
        "requirements": {
          "run": [
            "cxx_compiler_stub",
            "c-compiler",
            "gxx"
          ]
        },
        "test": {
          "commands": [
            "$CXX --help"
          ]
        }
      },
      {
        "about": {
          "description": "This package is a generic way to obtain the Fortran compiler for your\nsystem that conda-forge used to compile its ecosystem.  This compiler\nis, therefore, guaranteed to be ABI compatible with the conda packages\nyou have installed.\n\nThis compiler metapackage is a convenience ONLY for users.\nDo NOT use this package as a build or host dependency in other\nrecipes.  Use the Jinja template function compiler('fortran') instead.\n",
          "home": "https://conda-forge.org",
          "license": "BSD-3-Clause",
          "summary": "A metapackage to obtain a Fortran compiler"
        },
        "name": "fortran-compiler",
        "requirements": {
          "run": [
            "fortran_compiler_stub",
            "binutils",
            "gfortran",
            "c-compiler"
          ]
        },
        "test": {
          "commands": [
            "$FC --help"
          ]
        }
      },
      {
        "name": "compilers",
        "requirements": {
          "run": [
            "c-compiler",
            "cxx-compiler",
            "fortran-compiler"
          ]
        },
        "test": {
          "commands": [
            "$CC --help",
            "$CXX --help",
            "$FC --help"
          ]
        }
      }
    ],
    "package": {
      "name": "compilers",
      "version": "1.11.0"
    },
    "schema_version": 0
  },
  "linux_ppc64le_requirements": {
    "build": {
      "__set__": true,
      "elements": []
    },
    "host": {
      "__set__": true,
      "elements": []
    },
    "run": {
      "__set__": true,
      "elements": [
        "binutils",
        "c-compiler",
        "c_compiler_stub",
        "cxx-compiler",
        "cxx_compiler_stub",
        "fortran-compiler",
        "fortran_compiler_stub",
        "gcc",
        "gfortran",
        "gxx"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "meta_yaml": {
    "about": {
      "description": "This package is a generic way to obtain the compilers for your system\nthat conda-forge used to compile its ecosystem. These compilers are,\ntherefore, guaranteed to be ABI compatible with the conda packages\nyou have installed.\n\nThese compiler metapackages are a convenience ONLY for users.\nDo NOT use these packages as a build or host dependencies in other\nrecipes.  Use the compiler Jinja template function instead.\nFor C++ for example, use compiler('cxx') as usual.\n",
      "home": "https://conda-forge.org",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE.txt",
      "summary": "A metapackage to obtain compilers"
    },
    "build": {
      "number": "0"
    },
    "extra": {
      "recipe-maintainers": [
        "duncanmmacleod",
        "scopatz",
        "chrisburr",
        "isuruf"
      ]
    },
    "outputs": [
      {
        "about": {
          "description": "This package is a generic way to obtain the C compiler for your system\nthat conda-forge used to compile its ecosystem.  This compiler is,\ntherefore, guaranteed to be ABI compatible with the conda packages\nyou have installed.\n\nThis compiler metapackage is a convenience ONLY for users.\nDo NOT use this package as a build or host dependency in other\nrecipes.  Use the Jinja template function compiler('c') instead.\n",
          "home": "https://conda-forge.org",
          "license": "BSD-3-Clause",
          "summary": "A metapackage to obtain a C compiler"
        },
        "name": "c-compiler",
        "requirements": {
          "run": [
            "c_compiler_stub",
            "binutils",
            "gcc"
          ]
        },
        "test": {
          "commands": [
            "$CC --help"
          ]
        }
      },
      {
        "about": {
          "description": "This package is a generic way to obtain the C++ compiler for your system\nthat conda-forge used to compile its ecosystem.  This compiler is,\ntherefore, guaranteed to be ABI compatible with the conda packages\nyou have installed.\n\nThis compiler metapackage is a convenience ONLY for users.\nDo NOT use this package as a build or host dependency in other\nrecipes.  Use the Jinja template function compiler('cxx') instead.\n",
          "home": "https://conda-forge.org",
          "license": "BSD-3-Clause",
          "summary": "A metapackage to obtain a C++ compiler"
        },
        "name": "cxx-compiler",
        "requirements": {
          "run": [
            "cxx_compiler_stub",
            "c-compiler",
            "gxx"
          ]
        },
        "test": {
          "commands": [
            "$CXX --help"
          ]
        }
      },
      {
        "about": {
          "description": "This package is a generic way to obtain the Fortran compiler for your\nsystem that conda-forge used to compile its ecosystem.  This compiler\nis, therefore, guaranteed to be ABI compatible with the conda packages\nyou have installed.\n\nThis compiler metapackage is a convenience ONLY for users.\nDo NOT use this package as a build or host dependency in other\nrecipes.  Use the Jinja template function compiler('fortran') instead.\n",
          "home": "https://conda-forge.org",
          "license": "BSD-3-Clause",
          "summary": "A metapackage to obtain a Fortran compiler"
        },
        "name": "fortran-compiler",
        "requirements": {
          "run": [
            "fortran_compiler_stub",
            "binutils",
            "gfortran",
            "c-compiler"
          ]
        },
        "test": {
          "commands": [
            "$FC --help"
          ]
        }
      },
      {
        "name": "compilers",
        "requirements": {
          "run": [
            "c-compiler",
            "cxx-compiler",
            "fortran-compiler"
          ]
        },
        "test": {
          "commands": [
            "$CC --help",
            "$CXX --help",
            "$FC --help"
          ]
        }
      },
      {
        "about": {
          "description": "This package is a generic way to obtain the C compiler for your system\nthat conda-forge used to compile its ecosystem.  This compiler is,\ntherefore, guaranteed to be ABI compatible with the conda packages\nyou have installed.\n\nThis compiler metapackage is a convenience ONLY for users.\nDo NOT use this package as a build or host dependency in other\nrecipes.  Use the Jinja template function compiler('c') instead.\n",
          "home": "https://conda-forge.org",
          "license": "BSD-3-Clause",
          "summary": "A metapackage to obtain a C compiler"
        },
        "name": "c-compiler",
        "requirements": {
          "run": [
            "c_compiler_stub",
            "binutils",
            "gcc"
          ]
        },
        "test": {
          "commands": [
            "$CC --help"
          ]
        }
      },
      {
        "about": {
          "description": "This package is a generic way to obtain the C++ compiler for your system\nthat conda-forge used to compile its ecosystem.  This compiler is,\ntherefore, guaranteed to be ABI compatible with the conda packages\nyou have installed.\n\nThis compiler metapackage is a convenience ONLY for users.\nDo NOT use this package as a build or host dependency in other\nrecipes.  Use the Jinja template function compiler('cxx') instead.\n",
          "home": "https://conda-forge.org",
          "license": "BSD-3-Clause",
          "summary": "A metapackage to obtain a C++ compiler"
        },
        "name": "cxx-compiler",
        "requirements": {
          "run": [
            "cxx_compiler_stub",
            "c-compiler",
            "gxx"
          ]
        },
        "test": {
          "commands": [
            "$CXX --help"
          ]
        }
      },
      {
        "about": {
          "description": "This package is a generic way to obtain the Fortran compiler for your\nsystem that conda-forge used to compile its ecosystem.  This compiler\nis, therefore, guaranteed to be ABI compatible with the conda packages\nyou have installed.\n\nThis compiler metapackage is a convenience ONLY for users.\nDo NOT use this package as a build or host dependency in other\nrecipes.  Use the Jinja template function compiler('fortran') instead.\n",
          "home": "https://conda-forge.org",
          "license": "BSD-3-Clause",
          "summary": "A metapackage to obtain a Fortran compiler"
        },
        "name": "fortran-compiler",
        "requirements": {
          "run": [
            "fortran_compiler_stub",
            "binutils",
            "gfortran",
            "c-compiler"
          ]
        },
        "test": {
          "commands": [
            "$FC --help"
          ]
        }
      },
      {
        "name": "compilers",
        "requirements": {
          "run": [
            "c-compiler",
            "cxx-compiler",
            "fortran-compiler"
          ]
        },
        "test": {
          "commands": [
            "$CC --help",
            "$CXX --help",
            "$FC --help"
          ]
        }
      },
      {
        "about": {
          "description": "This package is a generic way to obtain the C compiler for your system\nthat conda-forge used to compile its ecosystem.  This compiler is,\ntherefore, guaranteed to be ABI compatible with the conda packages\nyou have installed.\n\nThis compiler metapackage is a convenience ONLY for users.\nDo NOT use this package as a build or host dependency in other\nrecipes.  Use the Jinja template function compiler('c') instead.\n",
          "home": "https://conda-forge.org",
          "license": "BSD-3-Clause",
          "summary": "A metapackage to obtain a C compiler"
        },
        "name": "c-compiler",
        "requirements": {
          "run": [
            "c_compiler_stub",
            "binutils",
            "gcc"
          ]
        },
        "test": {
          "commands": [
            "$CC --help"
          ]
        }
      },
      {
        "about": {
          "description": "This package is a generic way to obtain the C++ compiler for your system\nthat conda-forge used to compile its ecosystem.  This compiler is,\ntherefore, guaranteed to be ABI compatible with the conda packages\nyou have installed.\n\nThis compiler metapackage is a convenience ONLY for users.\nDo NOT use this package as a build or host dependency in other\nrecipes.  Use the Jinja template function compiler('cxx') instead.\n",
          "home": "https://conda-forge.org",
          "license": "BSD-3-Clause",
          "summary": "A metapackage to obtain a C++ compiler"
        },
        "name": "cxx-compiler",
        "requirements": {
          "run": [
            "cxx_compiler_stub",
            "c-compiler",
            "gxx"
          ]
        },
        "test": {
          "commands": [
            "$CXX --help"
          ]
        }
      },
      {
        "about": {
          "description": "This package is a generic way to obtain the Fortran compiler for your\nsystem that conda-forge used to compile its ecosystem.  This compiler\nis, therefore, guaranteed to be ABI compatible with the conda packages\nyou have installed.\n\nThis compiler metapackage is a convenience ONLY for users.\nDo NOT use this package as a build or host dependency in other\nrecipes.  Use the Jinja template function compiler('fortran') instead.\n",
          "home": "https://conda-forge.org",
          "license": "BSD-3-Clause",
          "summary": "A metapackage to obtain a Fortran compiler"
        },
        "name": "fortran-compiler",
        "requirements": {
          "run": [
            "fortran_compiler_stub",
            "binutils",
            "gfortran",
            "c-compiler"
          ]
        },
        "test": {
          "commands": [
            "$FC --help"
          ]
        }
      },
      {
        "name": "compilers",
        "requirements": {
          "run": [
            "c-compiler",
            "cxx-compiler",
            "fortran-compiler"
          ]
        },
        "test": {
          "commands": [
            "$CC --help",
            "$CXX --help",
            "$FC --help"
          ]
        }
      },
      {
        "about": {
          "description": "This package is a generic way to obtain the C compiler for your system\nthat conda-forge used to compile its ecosystem.  This compiler is,\ntherefore, guaranteed to be ABI compatible with the conda packages\nyou have installed.\n\nThis compiler metapackage is a convenience ONLY for users.\nDo NOT use this package as a build or host dependency in other\nrecipes.  Use the Jinja template function compiler('c') instead.\n",
          "home": "https://conda-forge.org",
          "license": "BSD-3-Clause",
          "summary": "A metapackage to obtain a C compiler"
        },
        "name": "c-compiler",
        "requirements": {
          "run": [
            "c_compiler_stub",
            "cctools >=949.0.1",
            "ld64 >=530",
            "llvm-openmp"
          ]
        },
        "test": {
          "commands": [
            "$CC --help"
          ]
        }
      },
      {
        "about": {
          "description": "This package is a generic way to obtain the C++ compiler for your system\nthat conda-forge used to compile its ecosystem.  This compiler is,\ntherefore, guaranteed to be ABI compatible with the conda packages\nyou have installed.\n\nThis compiler metapackage is a convenience ONLY for users.\nDo NOT use this package as a build or host dependency in other\nrecipes.  Use the Jinja template function compiler('cxx') instead.\n",
          "home": "https://conda-forge.org",
          "license": "BSD-3-Clause",
          "summary": "A metapackage to obtain a C++ compiler"
        },
        "name": "cxx-compiler",
        "requirements": {
          "run": [
            "cxx_compiler_stub",
            "c-compiler"
          ]
        },
        "test": {
          "commands": [
            "$CXX --help"
          ]
        }
      },
      {
        "about": {
          "description": "This package is a generic way to obtain the Fortran compiler for your\nsystem that conda-forge used to compile its ecosystem.  This compiler\nis, therefore, guaranteed to be ABI compatible with the conda packages\nyou have installed.\n\nThis compiler metapackage is a convenience ONLY for users.\nDo NOT use this package as a build or host dependency in other\nrecipes.  Use the Jinja template function compiler('fortran') instead.\n",
          "home": "https://conda-forge.org",
          "license": "BSD-3-Clause",
          "summary": "A metapackage to obtain a Fortran compiler"
        },
        "name": "fortran-compiler",
        "requirements": {
          "run": [
            "fortran_compiler_stub",
            "cctools >=949.0.1",
            "ld64 >=530",
            "llvm-openmp",
            "gfortran"
          ]
        },
        "test": {
          "commands": [
            "$FC --help"
          ]
        }
      },
      {
        "name": "compilers",
        "requirements": {
          "run": [
            "c-compiler",
            "cxx-compiler",
            "fortran-compiler"
          ]
        },
        "test": {
          "commands": [
            "$CC --help",
            "$CXX --help",
            "$FC --help"
          ]
        }
      },
      {
        "about": {
          "description": "This package is a generic way to obtain the C compiler for your system\nthat conda-forge used to compile its ecosystem.  This compiler is,\ntherefore, guaranteed to be ABI compatible with the conda packages\nyou have installed.\n\nThis compiler metapackage is a convenience ONLY for users.\nDo NOT use this package as a build or host dependency in other\nrecipes.  Use the Jinja template function compiler('c') instead.\n",
          "home": "https://conda-forge.org",
          "license": "BSD-3-Clause",
          "summary": "A metapackage to obtain a C compiler"
        },
        "name": "c-compiler",
        "requirements": {
          "run": [
            "c_compiler_stub",
            "cctools >=949.0.1",
            "ld64 >=530",
            "llvm-openmp"
          ]
        },
        "test": {
          "commands": [
            "$CC --help"
          ]
        }
      },
      {
        "about": {
          "description": "This package is a generic way to obtain the C++ compiler for your system\nthat conda-forge used to compile its ecosystem.  This compiler is,\ntherefore, guaranteed to be ABI compatible with the conda packages\nyou have installed.\n\nThis compiler metapackage is a convenience ONLY for users.\nDo NOT use this package as a build or host dependency in other\nrecipes.  Use the Jinja template function compiler('cxx') instead.\n",
          "home": "https://conda-forge.org",
          "license": "BSD-3-Clause",
          "summary": "A metapackage to obtain a C++ compiler"
        },
        "name": "cxx-compiler",
        "requirements": {
          "run": [
            "cxx_compiler_stub",
            "c-compiler"
          ]
        },
        "test": {
          "commands": [
            "$CXX --help"
          ]
        }
      },
      {
        "about": {
          "description": "This package is a generic way to obtain the Fortran compiler for your\nsystem that conda-forge used to compile its ecosystem.  This compiler\nis, therefore, guaranteed to be ABI compatible with the conda packages\nyou have installed.\n\nThis compiler metapackage is a convenience ONLY for users.\nDo NOT use this package as a build or host dependency in other\nrecipes.  Use the Jinja template function compiler('fortran') instead.\n",
          "home": "https://conda-forge.org",
          "license": "BSD-3-Clause",
          "summary": "A metapackage to obtain a Fortran compiler"
        },
        "name": "fortran-compiler",
        "requirements": {
          "run": [
            "fortran_compiler_stub",
            "cctools >=949.0.1",
            "ld64 >=530",
            "llvm-openmp",
            "gfortran"
          ]
        },
        "test": {
          "commands": [
            "$FC --help"
          ]
        }
      },
      {
        "name": "compilers",
        "requirements": {
          "run": [
            "c-compiler",
            "cxx-compiler",
            "fortran-compiler"
          ]
        },
        "test": {
          "commands": [
            "$CC --help",
            "$CXX --help",
            "$FC --help"
          ]
        }
      },
      {
        "about": {
          "description": "This package is a generic way to obtain the C compiler for your system\nthat conda-forge used to compile its ecosystem.  This compiler is,\ntherefore, guaranteed to be ABI compatible with the conda packages\nyou have installed.\n\nThis compiler metapackage is a convenience ONLY for users.\nDo NOT use this package as a build or host dependency in other\nrecipes.  Use the Jinja template function compiler('c') instead.\n",
          "home": "https://conda-forge.org",
          "license": "BSD-3-Clause",
          "summary": "A metapackage to obtain a C compiler"
        },
        "name": "c-compiler",
        "requirements": {
          "run": [
            "c_compiler_stub"
          ]
        },
        "test": {
          "commands": null
        }
      },
      {
        "about": {
          "description": "This package is a generic way to obtain the C++ compiler for your system\nthat conda-forge used to compile its ecosystem.  This compiler is,\ntherefore, guaranteed to be ABI compatible with the conda packages\nyou have installed.\n\nThis compiler metapackage is a convenience ONLY for users.\nDo NOT use this package as a build or host dependency in other\nrecipes.  Use the Jinja template function compiler('cxx') instead.\n",
          "home": "https://conda-forge.org",
          "license": "BSD-3-Clause",
          "summary": "A metapackage to obtain a C++ compiler"
        },
        "name": "cxx-compiler",
        "requirements": {
          "run": [
            "cxx_compiler_stub"
          ]
        },
        "test": {
          "commands": null
        }
      },
      {
        "about": {
          "description": "This package is a generic way to obtain the Fortran compiler for your\nsystem that conda-forge used to compile its ecosystem.  This compiler\nis, therefore, guaranteed to be ABI compatible with the conda packages\nyou have installed.\n\nThis compiler metapackage is a convenience ONLY for users.\nDo NOT use this package as a build or host dependency in other\nrecipes.  Use the Jinja template function compiler('fortran') instead.\n",
          "home": "https://conda-forge.org",
          "license": "BSD-3-Clause",
          "summary": "A metapackage to obtain a Fortran compiler"
        },
        "name": "fortran-compiler",
        "requirements": {
          "run": [
            "fortran_compiler_stub"
          ]
        },
        "test": {
          "commands": null
        }
      },
      {
        "name": "compilers",
        "requirements": {
          "run": [
            "c-compiler",
            "cxx-compiler",
            "fortran-compiler"
          ]
        },
        "test": {
          "commands": null
        }
      }
    ],
    "package": {
      "name": "compilers",
      "version": "1.11.0"
    },
    "schema_version": 0
  },
  "name": "compilers",
  "osx_64_meta_yaml": {
    "about": {
      "description": "This package is a generic way to obtain the compilers for your system\nthat conda-forge used to compile its ecosystem. These compilers are,\ntherefore, guaranteed to be ABI compatible with the conda packages\nyou have installed.\n\nThese compiler metapackages are a convenience ONLY for users.\nDo NOT use these packages as a build or host dependencies in other\nrecipes.  Use the compiler Jinja template function instead.\nFor C++ for example, use compiler('cxx') as usual.\n",
      "home": "https://conda-forge.org",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE.txt",
      "summary": "A metapackage to obtain compilers"
    },
    "build": {
      "number": "0"
    },
    "extra": {
      "recipe-maintainers": [
        "duncanmmacleod",
        "scopatz",
        "chrisburr",
        "isuruf"
      ]
    },
    "outputs": [
      {
        "about": {
          "description": "This package is a generic way to obtain the C compiler for your system\nthat conda-forge used to compile its ecosystem.  This compiler is,\ntherefore, guaranteed to be ABI compatible with the conda packages\nyou have installed.\n\nThis compiler metapackage is a convenience ONLY for users.\nDo NOT use this package as a build or host dependency in other\nrecipes.  Use the Jinja template function compiler('c') instead.\n",
          "home": "https://conda-forge.org",
          "license": "BSD-3-Clause",
          "summary": "A metapackage to obtain a C compiler"
        },
        "name": "c-compiler",
        "requirements": {
          "run": [
            "c_compiler_stub",
            "cctools >=949.0.1",
            "ld64 >=530",
            "llvm-openmp"
          ]
        },
        "test": {
          "commands": [
            "$CC --help"
          ]
        }
      },
      {
        "about": {
          "description": "This package is a generic way to obtain the C++ compiler for your system\nthat conda-forge used to compile its ecosystem.  This compiler is,\ntherefore, guaranteed to be ABI compatible with the conda packages\nyou have installed.\n\nThis compiler metapackage is a convenience ONLY for users.\nDo NOT use this package as a build or host dependency in other\nrecipes.  Use the Jinja template function compiler('cxx') instead.\n",
          "home": "https://conda-forge.org",
          "license": "BSD-3-Clause",
          "summary": "A metapackage to obtain a C++ compiler"
        },
        "name": "cxx-compiler",
        "requirements": {
          "run": [
            "cxx_compiler_stub",
            "c-compiler"
          ]
        },
        "test": {
          "commands": [
            "$CXX --help"
          ]
        }
      },
      {
        "about": {
          "description": "This package is a generic way to obtain the Fortran compiler for your\nsystem that conda-forge used to compile its ecosystem.  This compiler\nis, therefore, guaranteed to be ABI compatible with the conda packages\nyou have installed.\n\nThis compiler metapackage is a convenience ONLY for users.\nDo NOT use this package as a build or host dependency in other\nrecipes.  Use the Jinja template function compiler('fortran') instead.\n",
          "home": "https://conda-forge.org",
          "license": "BSD-3-Clause",
          "summary": "A metapackage to obtain a Fortran compiler"
        },
        "name": "fortran-compiler",
        "requirements": {
          "run": [
            "fortran_compiler_stub",
            "cctools >=949.0.1",
            "ld64 >=530",
            "llvm-openmp",
            "gfortran"
          ]
        },
        "test": {
          "commands": [
            "$FC --help"
          ]
        }
      },
      {
        "name": "compilers",
        "requirements": {
          "run": [
            "c-compiler",
            "cxx-compiler",
            "fortran-compiler"
          ]
        },
        "test": {
          "commands": [
            "$CC --help",
            "$CXX --help",
            "$FC --help"
          ]
        }
      }
    ],
    "package": {
      "name": "compilers",
      "version": "1.11.0"
    },
    "schema_version": 0
  },
  "osx_64_requirements": {
    "build": {
      "__set__": true,
      "elements": []
    },
    "host": {
      "__set__": true,
      "elements": []
    },
    "run": {
      "__set__": true,
      "elements": [
        "c-compiler",
        "c_compiler_stub",
        "cctools",
        "cxx-compiler",
        "cxx_compiler_stub",
        "fortran-compiler",
        "fortran_compiler_stub",
        "gfortran",
        "ld64",
        "llvm-openmp"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "osx_arm64_meta_yaml": {
    "about": {
      "description": "This package is a generic way to obtain the compilers for your system\nthat conda-forge used to compile its ecosystem. These compilers are,\ntherefore, guaranteed to be ABI compatible with the conda packages\nyou have installed.\n\nThese compiler metapackages are a convenience ONLY for users.\nDo NOT use these packages as a build or host dependencies in other\nrecipes.  Use the compiler Jinja template function instead.\nFor C++ for example, use compiler('cxx') as usual.\n",
      "home": "https://conda-forge.org",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE.txt",
      "summary": "A metapackage to obtain compilers"
    },
    "build": {
      "number": "0"
    },
    "extra": {
      "recipe-maintainers": [
        "duncanmmacleod",
        "scopatz",
        "chrisburr",
        "isuruf"
      ]
    },
    "outputs": [
      {
        "about": {
          "description": "This package is a generic way to obtain the C compiler for your system\nthat conda-forge used to compile its ecosystem.  This compiler is,\ntherefore, guaranteed to be ABI compatible with the conda packages\nyou have installed.\n\nThis compiler metapackage is a convenience ONLY for users.\nDo NOT use this package as a build or host dependency in other\nrecipes.  Use the Jinja template function compiler('c') instead.\n",
          "home": "https://conda-forge.org",
          "license": "BSD-3-Clause",
          "summary": "A metapackage to obtain a C compiler"
        },
        "name": "c-compiler",
        "requirements": {
          "run": [
            "c_compiler_stub",
            "cctools >=949.0.1",
            "ld64 >=530",
            "llvm-openmp"
          ]
        },
        "test": {
          "commands": [
            "$CC --help"
          ]
        }
      },
      {
        "about": {
          "description": "This package is a generic way to obtain the C++ compiler for your system\nthat conda-forge used to compile its ecosystem.  This compiler is,\ntherefore, guaranteed to be ABI compatible with the conda packages\nyou have installed.\n\nThis compiler metapackage is a convenience ONLY for users.\nDo NOT use this package as a build or host dependency in other\nrecipes.  Use the Jinja template function compiler('cxx') instead.\n",
          "home": "https://conda-forge.org",
          "license": "BSD-3-Clause",
          "summary": "A metapackage to obtain a C++ compiler"
        },
        "name": "cxx-compiler",
        "requirements": {
          "run": [
            "cxx_compiler_stub",
            "c-compiler"
          ]
        },
        "test": {
          "commands": [
            "$CXX --help"
          ]
        }
      },
      {
        "about": {
          "description": "This package is a generic way to obtain the Fortran compiler for your\nsystem that conda-forge used to compile its ecosystem.  This compiler\nis, therefore, guaranteed to be ABI compatible with the conda packages\nyou have installed.\n\nThis compiler metapackage is a convenience ONLY for users.\nDo NOT use this package as a build or host dependency in other\nrecipes.  Use the Jinja template function compiler('fortran') instead.\n",
          "home": "https://conda-forge.org",
          "license": "BSD-3-Clause",
          "summary": "A metapackage to obtain a Fortran compiler"
        },
        "name": "fortran-compiler",
        "requirements": {
          "run": [
            "fortran_compiler_stub",
            "cctools >=949.0.1",
            "ld64 >=530",
            "llvm-openmp",
            "gfortran"
          ]
        },
        "test": {
          "commands": [
            "$FC --help"
          ]
        }
      },
      {
        "name": "compilers",
        "requirements": {
          "run": [
            "c-compiler",
            "cxx-compiler",
            "fortran-compiler"
          ]
        },
        "test": {
          "commands": [
            "$CC --help",
            "$CXX --help",
            "$FC --help"
          ]
        }
      }
    ],
    "package": {
      "name": "compilers",
      "version": "1.11.0"
    },
    "schema_version": 0
  },
  "osx_arm64_requirements": {
    "build": {
      "__set__": true,
      "elements": []
    },
    "host": {
      "__set__": true,
      "elements": []
    },
    "run": {
      "__set__": true,
      "elements": [
        "c-compiler",
        "c_compiler_stub",
        "cctools",
        "cxx-compiler",
        "cxx_compiler_stub",
        "fortran-compiler",
        "fortran_compiler_stub",
        "gfortran",
        "ld64",
        "llvm-openmp"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "outputs_names": {
    "__set__": true,
    "elements": [
      "c-compiler",
      "compilers",
      "cxx-compiler",
      "fortran-compiler"
    ]
  },
  "parsing_error": false,
  "platforms": [
    "linux_64",
    "linux_aarch64",
    "linux_ppc64le",
    "osx_64",
    "osx_arm64",
    "win_64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/compilers.json"
  },
  "raw_meta_yaml": "{% set c_compiler = compiler('c').split('_')[0] %}\n{% set cxx_compiler = compiler('cxx').split('_')[0] %}\n{% set fortran_compiler = compiler('fortran').split('_')[0] %}\n\n{% set commands = {\n  'c-compiler': {\n    'gcc': ['cc', 'cpp', 'gcc', 'gcc-ar', 'gcc-nm',\n              'gcc-ranlib', 'gcov', 'gcov-dump', 'gcov-tool'],\n    'clang': ['clang'],\n    'vs2008': [],\n    'vs2010': [],\n    'vs2015': [],\n  }[c_compiler],\n  'cxx-compiler': {\n    'gxx': ['g++', 'c++'],\n    'clangxx': ['clang++'],\n    'vs2008': [],\n    'vs2010': [],\n    'vs2015': [],\n  }[cxx_compiler],\n  'fortran-compiler': {\n    'gfortran': ['gfortran'],\n  }[fortran_compiler],\n} %}\n\n\npackage:\n  name: compilers\n  version: 1.11.0\n\nbuild:\n   number: 0\n\noutputs:\n  - name: c-compiler\n    requirements:\n      run:\n        - {{ compiler('c') }}\n        - binutils             # [linux]\n        - gcc                  # [linux]\n        - cctools >=949.0.1    # [osx]\n        - ld64 >=530           # [osx]\n        - llvm-openmp          # [osx]\n    test:\n      commands:\n        - $CC --help  # [unix]\n{%- for command in commands['c-compiler'] %}  # [unix]\n        - {{ command }} --help > /dev/null  # [unix]\n{%- endfor %}  # [unix]\n    about:\n      home: https://conda-forge.org\n      license: BSD-3-Clause\n      summary: A metapackage to obtain a C compiler\n      description: |\n        This package is a generic way to obtain the C compiler for your system\n        that conda-forge used to compile its ecosystem.  This compiler is,\n        therefore, guaranteed to be ABI compatible with the conda packages\n        you have installed.\n\n        This compiler metapackage is a convenience ONLY for users.\n        Do NOT use this package as a build or host dependency in other\n        recipes.  Use the Jinja template function compiler('c') instead.\n\n  - name: cxx-compiler\n    requirements:\n      run:\n        - {{ compiler('cxx') }}\n        - {{ pin_subpackage('c-compiler', exact=True) }}  # [unix]\n        - gxx                  # [linux]\n    test:\n      commands:\n        - $CXX --help  # [unix]\n{%- for command in commands['cxx-compiler'] %}  # [unix]\n        - {{ command }} --help > /dev/null  # [unix]\n{%- endfor %}  # [unix]\n    about:\n      home: https://conda-forge.org\n      license: BSD-3-Clause\n      summary: A metapackage to obtain a C++ compiler\n      description: |\n        This package is a generic way to obtain the C++ compiler for your system\n        that conda-forge used to compile its ecosystem.  This compiler is,\n        therefore, guaranteed to be ABI compatible with the conda packages\n        you have installed.\n\n        This compiler metapackage is a convenience ONLY for users.\n        Do NOT use this package as a build or host dependency in other\n        recipes.  Use the Jinja template function compiler('cxx') instead.\n\n  - name: fortran-compiler\n    requirements:\n      run:\n        - {{ compiler('fortran') }}\n        - binutils             # [linux]\n        - cctools >=949.0.1    # [osx]\n        - ld64 >=530           # [osx]\n        - llvm-openmp          # [osx]\n        - gfortran             # [linux or osx]\n        - {{ pin_subpackage('c-compiler', exact=True) }}  # [linux]\n    test:\n      commands:\n        - $FC --help  # [unix]\n{%- for command in commands['fortran-compiler'] %}  # [unix]\n        - {{ command }} --help > /dev/null  # [unix]\n{%- endfor %}  # [unix]\n    about:\n      home: https://conda-forge.org\n      license: BSD-3-Clause\n      summary: A metapackage to obtain a Fortran compiler\n      description: |\n        This package is a generic way to obtain the Fortran compiler for your\n        system that conda-forge used to compile its ecosystem.  This compiler\n        is, therefore, guaranteed to be ABI compatible with the conda packages\n        you have installed.\n\n        This compiler metapackage is a convenience ONLY for users.\n        Do NOT use this package as a build or host dependency in other\n        recipes.  Use the Jinja template function compiler('fortran') instead.\n\n  - name: compilers\n    requirements:\n      run:\n        - {{ pin_subpackage('c-compiler', exact=True) }}\n        - {{ pin_subpackage('cxx-compiler', exact=True) }}\n        - {{ pin_subpackage('fortran-compiler', exact=True) }}\n    test:\n      commands:\n        - $CC --help  # [unix]\n        - $CXX --help  # [unix]\n        - $FC --help  # [unix]\n\nabout:\n  home: https://conda-forge.org\n  license: BSD-3-Clause\n  license_family: BSD\n  license_file: LICENSE.txt\n  summary: A metapackage to obtain compilers\n  description: |\n    This package is a generic way to obtain the compilers for your system\n    that conda-forge used to compile its ecosystem. These compilers are,\n    therefore, guaranteed to be ABI compatible with the conda packages\n    you have installed.\n\n    These compiler metapackages are a convenience ONLY for users.\n    Do NOT use these packages as a build or host dependencies in other\n    recipes.  Use the compiler Jinja template function instead.\n    For C++ for example, use compiler('cxx') as usual.\n\nextra:\n  recipe-maintainers:\n    - duncanmmacleod\n    - scopatz\n    - chrisburr\n    - isuruf\n",
  "req": {
    "__set__": true,
    "elements": [
      "binutils",
      "c-compiler",
      "c_compiler_stub",
      "cctools",
      "cxx-compiler",
      "cxx_compiler_stub",
      "fortran-compiler",
      "fortran_compiler_stub",
      "gcc",
      "gfortran",
      "gxx",
      "ld64",
      "llvm-openmp"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": []
    },
    "host": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "ctng-compilers",
        "cxx_compiler_stub",
        "fortran_compiler_stub",
        "gfortran_osx-64",
        "openmp"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "binutils",
        "c-compiler",
        "c_compiler_stub",
        "cctools",
        "ctng-compilers",
        "cxx-compiler",
        "cxx_compiler_stub",
        "fortran-compiler",
        "fortran_compiler_stub",
        "gcc",
        "gfortran",
        "gfortran_osx-64",
        "gxx",
        "ld64",
        "llvm-openmp",
        "openmp"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "strong_exports": false,
  "time": 1568135299.70033,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": []
    },
    "host": {
      "__set__": true,
      "elements": []
    },
    "run": {
      "__set__": true,
      "elements": [
        "binutils",
        "c-compiler",
        "c_compiler_stub",
        "cctools >=949.0.1",
        "cxx-compiler",
        "cxx_compiler_stub",
        "fortran-compiler",
        "fortran_compiler_stub",
        "gcc",
        "gfortran",
        "gxx",
        "ld64 >=530",
        "llvm-openmp"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "version": "1.11.0",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/compilers.json"
  },
  "win_64_meta_yaml": {
    "about": {
      "description": "This package is a generic way to obtain the compilers for your system\nthat conda-forge used to compile its ecosystem. These compilers are,\ntherefore, guaranteed to be ABI compatible with the conda packages\nyou have installed.\n\nThese compiler metapackages are a convenience ONLY for users.\nDo NOT use these packages as a build or host dependencies in other\nrecipes.  Use the compiler Jinja template function instead.\nFor C++ for example, use compiler('cxx') as usual.\n",
      "home": "https://conda-forge.org",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE.txt",
      "summary": "A metapackage to obtain compilers"
    },
    "build": {
      "number": "0"
    },
    "extra": {
      "recipe-maintainers": [
        "duncanmmacleod",
        "scopatz",
        "chrisburr",
        "isuruf"
      ]
    },
    "outputs": [
      {
        "about": {
          "description": "This package is a generic way to obtain the C compiler for your system\nthat conda-forge used to compile its ecosystem.  This compiler is,\ntherefore, guaranteed to be ABI compatible with the conda packages\nyou have installed.\n\nThis compiler metapackage is a convenience ONLY for users.\nDo NOT use this package as a build or host dependency in other\nrecipes.  Use the Jinja template function compiler('c') instead.\n",
          "home": "https://conda-forge.org",
          "license": "BSD-3-Clause",
          "summary": "A metapackage to obtain a C compiler"
        },
        "name": "c-compiler",
        "requirements": {
          "run": [
            "c_compiler_stub"
          ]
        },
        "test": {
          "commands": null
        }
      },
      {
        "about": {
          "description": "This package is a generic way to obtain the C++ compiler for your system\nthat conda-forge used to compile its ecosystem.  This compiler is,\ntherefore, guaranteed to be ABI compatible with the conda packages\nyou have installed.\n\nThis compiler metapackage is a convenience ONLY for users.\nDo NOT use this package as a build or host dependency in other\nrecipes.  Use the Jinja template function compiler('cxx') instead.\n",
          "home": "https://conda-forge.org",
          "license": "BSD-3-Clause",
          "summary": "A metapackage to obtain a C++ compiler"
        },
        "name": "cxx-compiler",
        "requirements": {
          "run": [
            "cxx_compiler_stub"
          ]
        },
        "test": {
          "commands": null
        }
      },
      {
        "about": {
          "description": "This package is a generic way to obtain the Fortran compiler for your\nsystem that conda-forge used to compile its ecosystem.  This compiler\nis, therefore, guaranteed to be ABI compatible with the conda packages\nyou have installed.\n\nThis compiler metapackage is a convenience ONLY for users.\nDo NOT use this package as a build or host dependency in other\nrecipes.  Use the Jinja template function compiler('fortran') instead.\n",
          "home": "https://conda-forge.org",
          "license": "BSD-3-Clause",
          "summary": "A metapackage to obtain a Fortran compiler"
        },
        "name": "fortran-compiler",
        "requirements": {
          "run": [
            "fortran_compiler_stub"
          ]
        },
        "test": {
          "commands": null
        }
      },
      {
        "name": "compilers",
        "requirements": {
          "run": [
            "c-compiler",
            "cxx-compiler",
            "fortran-compiler"
          ]
        },
        "test": {
          "commands": null
        }
      }
    ],
    "package": {
      "name": "compilers",
      "version": "1.11.0"
    },
    "schema_version": 0
  },
  "win_64_requirements": {
    "build": {
      "__set__": true,
      "elements": []
    },
    "host": {
      "__set__": true,
      "elements": []
    },
    "run": {
      "__set__": true,
      "elements": [
        "c-compiler",
        "c_compiler_stub",
        "cxx-compiler",
        "cxx_compiler_stub",
        "fortran-compiler",
        "fortran_compiler_stub"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  }
}