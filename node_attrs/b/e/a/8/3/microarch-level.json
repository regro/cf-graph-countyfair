{
  "archived": false,
  "branch": "main",
  "conda-forge.yml": {
    "conda_build": {
      "error_overlinking": true
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    }
  },
  "feedstock_hash": "22b4f639e8beed5ead5dd2b64c7464aac57d1b95",
  "feedstock_hash_ts": 1737351957,
  "feedstock_name": "microarch-level",
  "linux_64_meta_yaml": {
    "about": {
      "home": "https://github.com/conda-forge/microarch-level-feedstock",
      "license": "BSD-3-Clause",
      "license_file": "LICENSE.txt",
      "summary": "Meta package to build conda recipes with microarchitecture levels"
    },
    "build": {
      "noarch": "generic",
      "number": "2",
      "string": "2_zen5"
    },
    "extra": {
      "feedstock-name": "microarch-level",
      "recipe-maintainers": [
        "isuruf"
      ]
    },
    "outputs": [
      {
        "about": {
          "description": "The meta-package _ppc64le-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee ppc64le-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_power10le"
        },
        "name": "_ppc64le-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=power10le"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package ppc64le-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_ppc64le-microarch-level >=10"
            ]
          },
          "string": "2_power10le"
        },
        "name": "ppc64le-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      },
      {
        "about": {
          "description": "The meta-package _ppc64le-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee ppc64le-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_power8le"
        },
        "name": "_ppc64le-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=power8le"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package ppc64le-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_ppc64le-microarch-level >=8"
            ]
          },
          "string": "2_power8le"
        },
        "name": "ppc64le-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      },
      {
        "about": {
          "description": "The meta-package _ppc64le-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee ppc64le-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_ppc64le"
        },
        "name": "_ppc64le-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=ppc64le"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package ppc64le-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_ppc64le-microarch-level >=8"
            ]
          },
          "string": "2_ppc64le"
        },
        "name": "ppc64le-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      },
      {
        "about": {
          "description": "The meta-package _ppc64le-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee ppc64le-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_power9le"
        },
        "name": "_ppc64le-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=power9le"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package ppc64le-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_ppc64le-microarch-level >=9"
            ]
          },
          "string": "2_power9le"
        },
        "name": "ppc64le-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      },
      {
        "about": {
          "description": "The meta-package _x86_64-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee x86_64-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_core2"
        },
        "name": "_x86_64-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=core2"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package x86_64-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_x86_64-microarch-level >=1"
            ]
          },
          "string": "2_core2"
        },
        "name": "x86_64-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      },
      {
        "about": {
          "description": "The meta-package _x86_64-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee x86_64-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_k10"
        },
        "name": "_x86_64-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=k10"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package x86_64-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_x86_64-microarch-level >=1"
            ]
          },
          "string": "2_k10"
        },
        "name": "x86_64-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      },
      {
        "about": {
          "description": "The meta-package _x86_64-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee x86_64-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_nocona"
        },
        "name": "_x86_64-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=nocona"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package x86_64-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_x86_64-microarch-level >=1"
            ]
          },
          "string": "2_nocona"
        },
        "name": "x86_64-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      },
      {
        "about": {
          "description": "The meta-package _x86_64-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee x86_64-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_x86_64"
        },
        "name": "_x86_64-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=x86_64"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package x86_64-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_x86_64-microarch-level >=1"
            ]
          },
          "string": "2_x86_64"
        },
        "name": "x86_64-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      },
      {
        "about": {
          "description": "The meta-package _x86_64-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee x86_64-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_bulldozer"
        },
        "name": "_x86_64-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=bulldozer"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package x86_64-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_x86_64-microarch-level >=2"
            ]
          },
          "string": "2_bulldozer"
        },
        "name": "x86_64-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      },
      {
        "about": {
          "description": "The meta-package _x86_64-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee x86_64-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_ivybridge"
        },
        "name": "_x86_64-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=ivybridge"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package x86_64-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_x86_64-microarch-level >=2"
            ]
          },
          "string": "2_ivybridge"
        },
        "name": "x86_64-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      },
      {
        "about": {
          "description": "The meta-package _x86_64-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee x86_64-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_nehalem"
        },
        "name": "_x86_64-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=nehalem"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package x86_64-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_x86_64-microarch-level >=2"
            ]
          },
          "string": "2_nehalem"
        },
        "name": "x86_64-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      },
      {
        "about": {
          "description": "The meta-package _x86_64-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee x86_64-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_piledriver"
        },
        "name": "_x86_64-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=piledriver"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package x86_64-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_x86_64-microarch-level >=2"
            ]
          },
          "string": "2_piledriver"
        },
        "name": "x86_64-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      },
      {
        "about": {
          "description": "The meta-package _x86_64-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee x86_64-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_sandybridge"
        },
        "name": "_x86_64-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=sandybridge"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package x86_64-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_x86_64-microarch-level >=2"
            ]
          },
          "string": "2_sandybridge"
        },
        "name": "x86_64-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      },
      {
        "about": {
          "description": "The meta-package _x86_64-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee x86_64-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_steamroller"
        },
        "name": "_x86_64-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=steamroller"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package x86_64-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_x86_64-microarch-level >=2"
            ]
          },
          "string": "2_steamroller"
        },
        "name": "x86_64-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      },
      {
        "about": {
          "description": "The meta-package _x86_64-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee x86_64-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_westmere"
        },
        "name": "_x86_64-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=westmere"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package x86_64-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_x86_64-microarch-level >=2"
            ]
          },
          "string": "2_westmere"
        },
        "name": "x86_64-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      },
      {
        "about": {
          "description": "The meta-package _x86_64-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee x86_64-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_x86_64_v2"
        },
        "name": "_x86_64-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=x86_64_v2"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package x86_64-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_x86_64-microarch-level >=2"
            ]
          },
          "string": "2_x86_64_v2"
        },
        "name": "x86_64-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      },
      {
        "about": {
          "description": "The meta-package _x86_64-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee x86_64-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_broadwell"
        },
        "name": "_x86_64-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=broadwell"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package x86_64-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_x86_64-microarch-level >=3"
            ]
          },
          "string": "2_broadwell"
        },
        "name": "x86_64-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      },
      {
        "about": {
          "description": "The meta-package _x86_64-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee x86_64-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_cannonlake"
        },
        "name": "_x86_64-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=cannonlake"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package x86_64-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_x86_64-microarch-level >=3"
            ]
          },
          "string": "2_cannonlake"
        },
        "name": "x86_64-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      },
      {
        "about": {
          "description": "The meta-package _x86_64-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee x86_64-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_excavator"
        },
        "name": "_x86_64-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=excavator"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package x86_64-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_x86_64-microarch-level >=3"
            ]
          },
          "string": "2_excavator"
        },
        "name": "x86_64-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      },
      {
        "about": {
          "description": "The meta-package _x86_64-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee x86_64-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_haswell"
        },
        "name": "_x86_64-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=haswell"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package x86_64-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_x86_64-microarch-level >=3"
            ]
          },
          "string": "2_haswell"
        },
        "name": "x86_64-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      },
      {
        "about": {
          "description": "The meta-package _x86_64-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee x86_64-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_mic_knl"
        },
        "name": "_x86_64-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=mic_knl"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package x86_64-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_x86_64-microarch-level >=3"
            ]
          },
          "string": "2_mic_knl"
        },
        "name": "x86_64-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      },
      {
        "about": {
          "description": "The meta-package _x86_64-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee x86_64-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_skylake"
        },
        "name": "_x86_64-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=skylake"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package x86_64-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_x86_64-microarch-level >=3"
            ]
          },
          "string": "2_skylake"
        },
        "name": "x86_64-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      },
      {
        "about": {
          "description": "The meta-package _x86_64-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee x86_64-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_x86_64_v3"
        },
        "name": "_x86_64-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=x86_64_v3"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package x86_64-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_x86_64-microarch-level >=3"
            ]
          },
          "string": "2_x86_64_v3"
        },
        "name": "x86_64-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      },
      {
        "about": {
          "description": "The meta-package _x86_64-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee x86_64-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_zen"
        },
        "name": "_x86_64-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=zen"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package x86_64-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_x86_64-microarch-level >=3"
            ]
          },
          "string": "2_zen"
        },
        "name": "x86_64-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      },
      {
        "about": {
          "description": "The meta-package _x86_64-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee x86_64-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_zen2"
        },
        "name": "_x86_64-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=zen2"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package x86_64-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_x86_64-microarch-level >=3"
            ]
          },
          "string": "2_zen2"
        },
        "name": "x86_64-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      },
      {
        "about": {
          "description": "The meta-package _x86_64-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee x86_64-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_zen3"
        },
        "name": "_x86_64-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=zen3"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package x86_64-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_x86_64-microarch-level >=3"
            ]
          },
          "string": "2_zen3"
        },
        "name": "x86_64-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      },
      {
        "about": {
          "description": "The meta-package _x86_64-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee x86_64-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_cascadelake"
        },
        "name": "_x86_64-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=cascadelake"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package x86_64-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_x86_64-microarch-level >=4"
            ]
          },
          "string": "2_cascadelake"
        },
        "name": "x86_64-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      },
      {
        "about": {
          "description": "The meta-package _x86_64-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee x86_64-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_icelake"
        },
        "name": "_x86_64-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=icelake"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package x86_64-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_x86_64-microarch-level >=4"
            ]
          },
          "string": "2_icelake"
        },
        "name": "x86_64-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      },
      {
        "about": {
          "description": "The meta-package _x86_64-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee x86_64-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_sapphirerapids"
        },
        "name": "_x86_64-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=sapphirerapids"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package x86_64-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_x86_64-microarch-level >=4"
            ]
          },
          "string": "2_sapphirerapids"
        },
        "name": "x86_64-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      },
      {
        "about": {
          "description": "The meta-package _x86_64-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee x86_64-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_skylake_avx512"
        },
        "name": "_x86_64-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=skylake_avx512"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package x86_64-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_x86_64-microarch-level >=4"
            ]
          },
          "string": "2_skylake_avx512"
        },
        "name": "x86_64-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      },
      {
        "about": {
          "description": "The meta-package _x86_64-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee x86_64-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_x86_64_v4"
        },
        "name": "_x86_64-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=x86_64_v4"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package x86_64-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_x86_64-microarch-level >=4"
            ]
          },
          "string": "2_x86_64_v4"
        },
        "name": "x86_64-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      },
      {
        "about": {
          "description": "The meta-package _x86_64-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee x86_64-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_zen4"
        },
        "name": "_x86_64-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=zen4"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package x86_64-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_x86_64-microarch-level >=4"
            ]
          },
          "string": "2_zen4"
        },
        "name": "x86_64-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      },
      {
        "about": {
          "description": "The meta-package _x86_64-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee x86_64-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_zen5"
        },
        "name": "_x86_64-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=zen5"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package x86_64-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_x86_64-microarch-level >=4"
            ]
          },
          "string": "2_zen5"
        },
        "name": "x86_64-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      }
    ],
    "package": {
      "name": "microarch-level-split",
      "version": "4"
    },
    "schema_version": 0
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": []
    },
    "host": {
      "__set__": true,
      "elements": []
    },
    "run": {
      "__set__": true,
      "elements": [
        "__archspec",
        "__unix"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "meta_yaml": {
    "about": {
      "home": "https://github.com/conda-forge/microarch-level-feedstock",
      "license": "BSD-3-Clause",
      "license_file": "LICENSE.txt",
      "summary": "Meta package to build conda recipes with microarchitecture levels"
    },
    "build": {
      "noarch": "generic",
      "number": "2",
      "string": "2_zen5"
    },
    "extra": {
      "feedstock-name": "microarch-level",
      "recipe-maintainers": [
        "isuruf"
      ]
    },
    "outputs": [
      {
        "about": {
          "description": "The meta-package _ppc64le-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee ppc64le-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_power10le"
        },
        "name": "_ppc64le-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=power10le"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package ppc64le-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_ppc64le-microarch-level >=10"
            ]
          },
          "string": "2_power10le"
        },
        "name": "ppc64le-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      },
      {
        "about": {
          "description": "The meta-package _ppc64le-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee ppc64le-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_power8le"
        },
        "name": "_ppc64le-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=power8le"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package ppc64le-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_ppc64le-microarch-level >=8"
            ]
          },
          "string": "2_power8le"
        },
        "name": "ppc64le-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      },
      {
        "about": {
          "description": "The meta-package _ppc64le-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee ppc64le-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_ppc64le"
        },
        "name": "_ppc64le-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=ppc64le"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package ppc64le-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_ppc64le-microarch-level >=8"
            ]
          },
          "string": "2_ppc64le"
        },
        "name": "ppc64le-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      },
      {
        "about": {
          "description": "The meta-package _ppc64le-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee ppc64le-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_power9le"
        },
        "name": "_ppc64le-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=power9le"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package ppc64le-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_ppc64le-microarch-level >=9"
            ]
          },
          "string": "2_power9le"
        },
        "name": "ppc64le-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      },
      {
        "about": {
          "description": "The meta-package _x86_64-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee x86_64-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_core2"
        },
        "name": "_x86_64-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=core2"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package x86_64-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_x86_64-microarch-level >=1"
            ]
          },
          "string": "2_core2"
        },
        "name": "x86_64-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      },
      {
        "about": {
          "description": "The meta-package _x86_64-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee x86_64-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_k10"
        },
        "name": "_x86_64-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=k10"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package x86_64-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_x86_64-microarch-level >=1"
            ]
          },
          "string": "2_k10"
        },
        "name": "x86_64-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      },
      {
        "about": {
          "description": "The meta-package _x86_64-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee x86_64-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_nocona"
        },
        "name": "_x86_64-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=nocona"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package x86_64-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_x86_64-microarch-level >=1"
            ]
          },
          "string": "2_nocona"
        },
        "name": "x86_64-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      },
      {
        "about": {
          "description": "The meta-package _x86_64-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee x86_64-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_x86_64"
        },
        "name": "_x86_64-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=x86_64"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package x86_64-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_x86_64-microarch-level >=1"
            ]
          },
          "string": "2_x86_64"
        },
        "name": "x86_64-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      },
      {
        "about": {
          "description": "The meta-package _x86_64-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee x86_64-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_bulldozer"
        },
        "name": "_x86_64-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=bulldozer"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package x86_64-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_x86_64-microarch-level >=2"
            ]
          },
          "string": "2_bulldozer"
        },
        "name": "x86_64-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      },
      {
        "about": {
          "description": "The meta-package _x86_64-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee x86_64-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_ivybridge"
        },
        "name": "_x86_64-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=ivybridge"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package x86_64-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_x86_64-microarch-level >=2"
            ]
          },
          "string": "2_ivybridge"
        },
        "name": "x86_64-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      },
      {
        "about": {
          "description": "The meta-package _x86_64-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee x86_64-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_nehalem"
        },
        "name": "_x86_64-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=nehalem"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package x86_64-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_x86_64-microarch-level >=2"
            ]
          },
          "string": "2_nehalem"
        },
        "name": "x86_64-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      },
      {
        "about": {
          "description": "The meta-package _x86_64-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee x86_64-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_piledriver"
        },
        "name": "_x86_64-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=piledriver"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package x86_64-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_x86_64-microarch-level >=2"
            ]
          },
          "string": "2_piledriver"
        },
        "name": "x86_64-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      },
      {
        "about": {
          "description": "The meta-package _x86_64-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee x86_64-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_sandybridge"
        },
        "name": "_x86_64-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=sandybridge"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package x86_64-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_x86_64-microarch-level >=2"
            ]
          },
          "string": "2_sandybridge"
        },
        "name": "x86_64-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      },
      {
        "about": {
          "description": "The meta-package _x86_64-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee x86_64-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_steamroller"
        },
        "name": "_x86_64-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=steamroller"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package x86_64-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_x86_64-microarch-level >=2"
            ]
          },
          "string": "2_steamroller"
        },
        "name": "x86_64-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      },
      {
        "about": {
          "description": "The meta-package _x86_64-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee x86_64-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_westmere"
        },
        "name": "_x86_64-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=westmere"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package x86_64-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_x86_64-microarch-level >=2"
            ]
          },
          "string": "2_westmere"
        },
        "name": "x86_64-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      },
      {
        "about": {
          "description": "The meta-package _x86_64-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee x86_64-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_x86_64_v2"
        },
        "name": "_x86_64-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=x86_64_v2"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package x86_64-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_x86_64-microarch-level >=2"
            ]
          },
          "string": "2_x86_64_v2"
        },
        "name": "x86_64-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      },
      {
        "about": {
          "description": "The meta-package _x86_64-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee x86_64-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_broadwell"
        },
        "name": "_x86_64-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=broadwell"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package x86_64-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_x86_64-microarch-level >=3"
            ]
          },
          "string": "2_broadwell"
        },
        "name": "x86_64-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      },
      {
        "about": {
          "description": "The meta-package _x86_64-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee x86_64-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_cannonlake"
        },
        "name": "_x86_64-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=cannonlake"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package x86_64-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_x86_64-microarch-level >=3"
            ]
          },
          "string": "2_cannonlake"
        },
        "name": "x86_64-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      },
      {
        "about": {
          "description": "The meta-package _x86_64-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee x86_64-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_excavator"
        },
        "name": "_x86_64-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=excavator"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package x86_64-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_x86_64-microarch-level >=3"
            ]
          },
          "string": "2_excavator"
        },
        "name": "x86_64-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      },
      {
        "about": {
          "description": "The meta-package _x86_64-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee x86_64-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_haswell"
        },
        "name": "_x86_64-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=haswell"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package x86_64-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_x86_64-microarch-level >=3"
            ]
          },
          "string": "2_haswell"
        },
        "name": "x86_64-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      },
      {
        "about": {
          "description": "The meta-package _x86_64-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee x86_64-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_mic_knl"
        },
        "name": "_x86_64-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=mic_knl"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package x86_64-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_x86_64-microarch-level >=3"
            ]
          },
          "string": "2_mic_knl"
        },
        "name": "x86_64-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      },
      {
        "about": {
          "description": "The meta-package _x86_64-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee x86_64-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_skylake"
        },
        "name": "_x86_64-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=skylake"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package x86_64-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_x86_64-microarch-level >=3"
            ]
          },
          "string": "2_skylake"
        },
        "name": "x86_64-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      },
      {
        "about": {
          "description": "The meta-package _x86_64-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee x86_64-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_x86_64_v3"
        },
        "name": "_x86_64-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=x86_64_v3"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package x86_64-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_x86_64-microarch-level >=3"
            ]
          },
          "string": "2_x86_64_v3"
        },
        "name": "x86_64-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      },
      {
        "about": {
          "description": "The meta-package _x86_64-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee x86_64-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_zen"
        },
        "name": "_x86_64-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=zen"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package x86_64-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_x86_64-microarch-level >=3"
            ]
          },
          "string": "2_zen"
        },
        "name": "x86_64-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      },
      {
        "about": {
          "description": "The meta-package _x86_64-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee x86_64-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_zen2"
        },
        "name": "_x86_64-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=zen2"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package x86_64-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_x86_64-microarch-level >=3"
            ]
          },
          "string": "2_zen2"
        },
        "name": "x86_64-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      },
      {
        "about": {
          "description": "The meta-package _x86_64-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee x86_64-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_zen3"
        },
        "name": "_x86_64-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=zen3"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package x86_64-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_x86_64-microarch-level >=3"
            ]
          },
          "string": "2_zen3"
        },
        "name": "x86_64-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      },
      {
        "about": {
          "description": "The meta-package _x86_64-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee x86_64-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_cascadelake"
        },
        "name": "_x86_64-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=cascadelake"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package x86_64-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_x86_64-microarch-level >=4"
            ]
          },
          "string": "2_cascadelake"
        },
        "name": "x86_64-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      },
      {
        "about": {
          "description": "The meta-package _x86_64-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee x86_64-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_icelake"
        },
        "name": "_x86_64-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=icelake"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package x86_64-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_x86_64-microarch-level >=4"
            ]
          },
          "string": "2_icelake"
        },
        "name": "x86_64-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      },
      {
        "about": {
          "description": "The meta-package _x86_64-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee x86_64-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_sapphirerapids"
        },
        "name": "_x86_64-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=sapphirerapids"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package x86_64-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_x86_64-microarch-level >=4"
            ]
          },
          "string": "2_sapphirerapids"
        },
        "name": "x86_64-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      },
      {
        "about": {
          "description": "The meta-package _x86_64-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee x86_64-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_skylake_avx512"
        },
        "name": "_x86_64-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=skylake_avx512"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package x86_64-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_x86_64-microarch-level >=4"
            ]
          },
          "string": "2_skylake_avx512"
        },
        "name": "x86_64-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      },
      {
        "about": {
          "description": "The meta-package _x86_64-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee x86_64-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_x86_64_v4"
        },
        "name": "_x86_64-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=x86_64_v4"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package x86_64-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_x86_64-microarch-level >=4"
            ]
          },
          "string": "2_x86_64_v4"
        },
        "name": "x86_64-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      },
      {
        "about": {
          "description": "The meta-package _x86_64-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee x86_64-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_zen4"
        },
        "name": "_x86_64-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=zen4"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package x86_64-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_x86_64-microarch-level >=4"
            ]
          },
          "string": "2_zen4"
        },
        "name": "x86_64-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      },
      {
        "about": {
          "description": "The meta-package _x86_64-microarch-level enforces the microarchitecture in the\nuser system.\n\nNote that a user would need the archspec conda package installed\nin the base environment where conda/mamba is run from.\nNote also that this package is not intended to be directly interacted\nwith by users.\n\nSee x86_64-microarch-level for using this in conda recipes\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "string": "2_zen5"
        },
        "name": "_x86_64-microarch-level",
        "requirements": {
          "run": [
            "__archspec  1=zen5"
          ]
        }
      },
      {
        "about": {
          "description": "Use the meta-package x86_64-microarch-level in requirements/build in conda\nrecipes to set up the compiler flags and set up the virtual package\nrequirements in the run requirements.\n\nWhen building packages on CI, level=4 will not be guaranteed, so\nyou can only use level<=3 to build.\n\nThe run_exports only has a lower bound and therefore a level=2\nbuild can be installed on a level=3 user system. A tighter bound\nis not added because we want to be able to test both level=2 and\nlevel=3 on a CI machine with level=3.\nTherefore in order to prioritise the highest level, use the build\nnumber to prioritise the level.\n\nIn [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\nwhere a particular level needs to be forced, this can be achieved by\noverriding the `__archspec`\n[virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\nby setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\nthe environment solve.\nFor example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\nlevel=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\nwill force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\nwill force level=2.\nNote that no checks will be done to ensure that the level is viable.\n\nOnly supported on Linux and macOS.\n",
          "home": "https://github.com/conda-forge/microarch-level-feedstock",
          "license": "BSD-3-Clause",
          "license_file": "LICENSE.txt",
          "summary": "Meta package to build conda recipes with microarchitecture levels"
        },
        "build": {
          "noarch": "generic",
          "number": "2",
          "run_exports": {
            "strong": [
              "_x86_64-microarch-level >=4"
            ]
          },
          "string": "2_zen5"
        },
        "name": "x86_64-microarch-level",
        "requirements": {
          "run": [
            "__unix"
          ]
        },
        "script": "install_scripts.sh"
      }
    ],
    "package": {
      "name": "microarch-level-split",
      "version": "4"
    },
    "schema_version": 0
  },
  "name": "microarch-level-split",
  "outputs_names": {
    "__set__": true,
    "elements": [
      "_ppc64le-microarch-level",
      "_x86_64-microarch-level",
      "ppc64le-microarch-level",
      "x86_64-microarch-level"
    ]
  },
  "parsing_error": false,
  "platforms": [
    "linux_64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/microarch-level.json"
  },
  "raw_meta_yaml": "{% set number = 2 %}\n\npackage:\n  name: microarch-level-split\n  version: {{ level }}\n\nbuild:\n  number: {{ number }}\n  string: {{ number }}_{{ microarchitecture }}\n  noarch: generic\n\noutputs:\n  - name: _{{ family }}-microarch-level\n    build:\n      number: {{ number }}\n      string: {{ number }}_{{ microarchitecture }}\n      noarch: generic\n    requirements:\n      run:\n        - __archspec  1={{ microarchitecture }}\n\n    about:\n      home: https://github.com/conda-forge/microarch-level-feedstock\n      summary: 'Meta package to build conda recipes with microarchitecture levels'\n      description: |\n        The meta-package _{{ family }}-microarch-level enforces the microarchitecture in the\n        user system.\n\n        Note that a user would need the archspec conda package installed\n        in the base environment where conda/mamba is run from.\n        Note also that this package is not intended to be directly interacted\n        with by users.\n\n        See {{ family }}-microarch-level for using this in conda recipes\n      license: BSD-3-Clause\n      license_file: LICENSE.txt\n\n  - name: {{ family }}-microarch-level\n    script: install_scripts.sh\n    build:\n      number: {{ number }}\n      string: {{ number }}_{{ microarchitecture }}\n      noarch: generic\n      run_exports:\n        strong:\n          - _{{ family }}-microarch-level >={{ level }}\n    requirements:\n      run:\n        - __unix\n    about:\n      home: https://github.com/conda-forge/microarch-level-feedstock\n      summary: 'Meta package to build conda recipes with microarchitecture levels'\n      description: |\n        Use the meta-package {{ family }}-microarch-level in requirements/build in conda\n        recipes to set up the compiler flags and set up the virtual package\n        requirements in the run requirements.\n\n        When building packages on CI, level=4 will not be guaranteed, so\n        you can only use level<=3 to build.\n\n        The run_exports only has a lower bound and therefore a level=2\n        build can be installed on a level=3 user system. A tighter bound\n        is not added because we want to be able to test both level=2 and\n        level=3 on a CI machine with level=3.\n        Therefore in order to prioritise the highest level, use the build\n        number to prioritise the level.\n\n        In [rare circumstances](https://github.com/conda-forge/microarch-level-feedstock/issues/13#issuecomment-2551385113)\n        where a particular level needs to be forced, this can be achieved by\n        overriding the `__archspec`\n        [virtual package](https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html)\n        by setting the `CONDA_OVERRIDE_ARCHSPEC` environment variable during\n        the environment solve.\n        For example, setting `CONDA_OVERRIDE_ARCHSPEC=x86_64` will force\n        level=1. For levels higher than 1 `CONDA_OVERRIDE_ARCHSPEC=x86_64_vx`\n        will force level=x. For example, `CONDA_OVERRIDE_ARCHSPEC=x86_64_v2`\n        will force level=2.\n        Note that no checks will be done to ensure that the level is viable.\n\n        Only supported on Linux and macOS.\n      license: BSD-3-Clause\n      license_file: LICENSE.txt\n\nabout:\n  home: https://github.com/conda-forge/microarch-level-feedstock\n  summary: 'Meta package to build conda recipes with microarchitecture levels'\n  license: BSD-3-Clause\n  license_file: LICENSE.txt\n\nextra:\n  feedstock-name: microarch-level\n  recipe-maintainers:\n    - isuruf\n",
  "req": {
    "__set__": true,
    "elements": [
      "__archspec",
      "__unix"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": []
    },
    "host": {
      "__set__": true,
      "elements": []
    },
    "run": {
      "__set__": true,
      "elements": [
        "__archspec",
        "__unix"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "strong_exports": true,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": []
    },
    "host": {
      "__set__": true,
      "elements": []
    },
    "run": {
      "__set__": true,
      "elements": [
        "__archspec  1=broadwell",
        "__archspec  1=bulldozer",
        "__archspec  1=cannonlake",
        "__archspec  1=cascadelake",
        "__archspec  1=core2",
        "__archspec  1=excavator",
        "__archspec  1=haswell",
        "__archspec  1=icelake",
        "__archspec  1=ivybridge",
        "__archspec  1=k10",
        "__archspec  1=mic_knl",
        "__archspec  1=nehalem",
        "__archspec  1=nocona",
        "__archspec  1=piledriver",
        "__archspec  1=power10le",
        "__archspec  1=power8le",
        "__archspec  1=power9le",
        "__archspec  1=ppc64le",
        "__archspec  1=sandybridge",
        "__archspec  1=sapphirerapids",
        "__archspec  1=skylake",
        "__archspec  1=skylake_avx512",
        "__archspec  1=steamroller",
        "__archspec  1=westmere",
        "__archspec  1=x86_64",
        "__archspec  1=x86_64_v2",
        "__archspec  1=x86_64_v3",
        "__archspec  1=x86_64_v4",
        "__archspec  1=zen",
        "__archspec  1=zen2",
        "__archspec  1=zen3",
        "__archspec  1=zen4",
        "__archspec  1=zen5",
        "__unix"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "version": "4",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/microarch-level.json"
  }
}