{
  "archived": false,
  "branch": "main",
  "conda-forge.yml": {
    "conda_build": {
      "error_overlinking": true
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    }
  },
  "feedstock_hash": "36eb04a4dff247e751ea5c367fd2e231794f3b7d",
  "feedstock_hash_ts": 1760492896,
  "feedstock_name": "cogger",
  "hash_type": "sha256",
  "linux_64_meta_yaml": {
    "about": {
      "description": "Cogger is a standalone binary and a golang library that reads an\ninternally tiled geotiff (optionally with overviews and masks) and\nrewrites it as a Cloud Optimized Geotiff (COG). This process being a\nreshuffling of the original geotiff's bytes, it should run as fast as\nthe underlying disk or network i/o.\n",
      "dev_url": "https://github.com/airbusgeo/cogger",
      "doc_url": "https://github.com/airbusgeo/cogger",
      "home": "https://github.com/airbusgeo/cogger",
      "license": "Apache-2.0",
      "license_file": [
        "LICENSE",
        "library_licenses/"
      ],
      "summary": "cogger is a fast geotiff to COG converter"
    },
    "build": {
      "number": "0",
      "script": [
        "go-licenses save . --save_path library_licenses ./cmd/cogger",
        "go test -v ./cmd/cogger",
        "go build -v -o $PREFIX/bin/cogger -ldflags=\"-s -w\" ./cmd/cogger"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "phargogh"
      ]
    },
    "package": {
      "name": "cogger",
      "version": "0.0.7"
    },
    "requirements": {
      "build": [
        "go-nocgo_compiler_stub",
        "go-licenses"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "1bbccd1500a517b6eb44bfa12dff20c0b92612bc0c10b5dca78e1b0eff557097",
      "url": "https://github.com/airbusgeo/cogger/archive/v0.0.7.tar.gz"
    },
    "test": {
      "commands": [
        "cogger --help"
      ]
    }
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "go-licenses",
        "go-nocgo_compiler_stub"
      ]
    },
    "host": {
      "__set__": true,
      "elements": []
    },
    "run": {
      "__set__": true,
      "elements": []
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "meta_yaml": {
    "about": {
      "description": "Cogger is a standalone binary and a golang library that reads an\ninternally tiled geotiff (optionally with overviews and masks) and\nrewrites it as a Cloud Optimized Geotiff (COG). This process being a\nreshuffling of the original geotiff's bytes, it should run as fast as\nthe underlying disk or network i/o.\n",
      "dev_url": "https://github.com/airbusgeo/cogger",
      "doc_url": "https://github.com/airbusgeo/cogger",
      "home": "https://github.com/airbusgeo/cogger",
      "license": "Apache-2.0",
      "license_file": [
        "LICENSE",
        "library_licenses/"
      ],
      "summary": "cogger is a fast geotiff to COG converter"
    },
    "build": {
      "number": "0",
      "script": [
        "go-licenses save . --save_path library_licenses ./cmd/cogger",
        "go test -v ./cmd/cogger",
        "go build -v -o $PREFIX/bin/cogger -ldflags=\"-s -w\" ./cmd/cogger",
        "go build -v -o %LIBRARY_BIN%\\cogger.exe -ldflags=\"-s\" ./cmd/cogger"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "phargogh"
      ]
    },
    "package": {
      "name": "cogger",
      "version": "0.0.7"
    },
    "requirements": {
      "build": [
        "go-nocgo_compiler_stub",
        "go-licenses"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "1bbccd1500a517b6eb44bfa12dff20c0b92612bc0c10b5dca78e1b0eff557097",
      "url": "https://github.com/airbusgeo/cogger/archive/v0.0.7.tar.gz"
    },
    "test": {
      "commands": [
        "cogger --help"
      ]
    }
  },
  "name": "cogger",
  "osx_64_meta_yaml": {
    "about": {
      "description": "Cogger is a standalone binary and a golang library that reads an\ninternally tiled geotiff (optionally with overviews and masks) and\nrewrites it as a Cloud Optimized Geotiff (COG). This process being a\nreshuffling of the original geotiff's bytes, it should run as fast as\nthe underlying disk or network i/o.\n",
      "dev_url": "https://github.com/airbusgeo/cogger",
      "doc_url": "https://github.com/airbusgeo/cogger",
      "home": "https://github.com/airbusgeo/cogger",
      "license": "Apache-2.0",
      "license_file": [
        "LICENSE",
        "library_licenses/"
      ],
      "summary": "cogger is a fast geotiff to COG converter"
    },
    "build": {
      "number": "0",
      "script": [
        "go-licenses save . --save_path library_licenses ./cmd/cogger",
        "go test -v ./cmd/cogger",
        "go build -v -o $PREFIX/bin/cogger -ldflags=\"-s -w\" ./cmd/cogger"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "phargogh"
      ]
    },
    "package": {
      "name": "cogger",
      "version": "0.0.7"
    },
    "requirements": {
      "build": [
        "go-nocgo_compiler_stub",
        "go-licenses"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "1bbccd1500a517b6eb44bfa12dff20c0b92612bc0c10b5dca78e1b0eff557097",
      "url": "https://github.com/airbusgeo/cogger/archive/v0.0.7.tar.gz"
    },
    "test": {
      "commands": [
        "cogger --help"
      ]
    }
  },
  "osx_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "go-licenses",
        "go-nocgo_compiler_stub"
      ]
    },
    "host": {
      "__set__": true,
      "elements": []
    },
    "run": {
      "__set__": true,
      "elements": []
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "outputs_names": {
    "__set__": true,
    "elements": [
      "cogger"
    ]
  },
  "parsing_error": false,
  "platforms": [
    "linux_64",
    "osx_64",
    "win_64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/cogger.json"
  },
  "raw_meta_yaml": "{% set version = \"0.0.7\" %}\n\npackage:\n    name: cogger\n    version: {{ version }}\n\nsource:\n    url: https://github.com/airbusgeo/cogger/archive/v{{ version }}.tar.gz\n    sha256: 1bbccd1500a517b6eb44bfa12dff20c0b92612bc0c10b5dca78e1b0eff557097\n\nbuild:\n    number: 0\n    script:\n        - go-licenses save . --save_path library_licenses ./cmd/cogger\n        - go test -v ./cmd/cogger\n        - go build -v -o $PREFIX/bin/cogger -ldflags=\"-s -w\" ./cmd/cogger     # [not win]\n        - go build -v -o %LIBRARY_BIN%\\cogger.exe -ldflags=\"-s\" ./cmd/cogger  # [win]\n\nrequirements:\n    build:\n        - {{ compiler('go-nocgo') }}\n        - go-licenses\n\ntest:\n    commands:\n        - cogger --help\n\nabout:\n    home: https://github.com/airbusgeo/cogger\n    summary: \"cogger is a fast geotiff to COG converter\"\n    description: |\n        Cogger is a standalone binary and a golang library that reads an\n        internally tiled geotiff (optionally with overviews and masks) and\n        rewrites it as a Cloud Optimized Geotiff (COG). This process being a\n        reshuffling of the original geotiff's bytes, it should run as fast as\n        the underlying disk or network i/o.\n    license: Apache-2.0\n    license_file:\n        - LICENSE\n        - library_licenses/\n    doc_url: https://github.com/airbusgeo/cogger\n    dev_url: https://github.com/airbusgeo/cogger\n\nextra:\n    recipe-maintainers:\n        - phargogh\n",
  "req": {
    "__set__": true,
    "elements": [
      "go-licenses",
      "go-nocgo_compiler_stub"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "go-licenses",
        "go-nocgo_compiler_stub"
      ]
    },
    "host": {
      "__set__": true,
      "elements": []
    },
    "run": {
      "__set__": true,
      "elements": []
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "go-licenses",
        "go-nocgo_compiler_stub"
      ]
    },
    "host": {
      "__set__": true,
      "elements": []
    },
    "run": {
      "__set__": true,
      "elements": []
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "url": "https://github.com/airbusgeo/cogger/archive/v0.0.7.tar.gz",
  "version": "0.0.7",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/cogger.json"
  },
  "win_64_meta_yaml": {
    "about": {
      "description": "Cogger is a standalone binary and a golang library that reads an\ninternally tiled geotiff (optionally with overviews and masks) and\nrewrites it as a Cloud Optimized Geotiff (COG). This process being a\nreshuffling of the original geotiff's bytes, it should run as fast as\nthe underlying disk or network i/o.\n",
      "dev_url": "https://github.com/airbusgeo/cogger",
      "doc_url": "https://github.com/airbusgeo/cogger",
      "home": "https://github.com/airbusgeo/cogger",
      "license": "Apache-2.0",
      "license_file": [
        "LICENSE",
        "library_licenses/"
      ],
      "summary": "cogger is a fast geotiff to COG converter"
    },
    "build": {
      "number": "0",
      "script": [
        "go-licenses save . --save_path library_licenses ./cmd/cogger",
        "go test -v ./cmd/cogger",
        "go build -v -o %LIBRARY_BIN%\\cogger.exe -ldflags=\"-s\" ./cmd/cogger"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "phargogh"
      ]
    },
    "package": {
      "name": "cogger",
      "version": "0.0.7"
    },
    "requirements": {
      "build": [
        "go-nocgo_compiler_stub",
        "go-licenses"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "1bbccd1500a517b6eb44bfa12dff20c0b92612bc0c10b5dca78e1b0eff557097",
      "url": "https://github.com/airbusgeo/cogger/archive/v0.0.7.tar.gz"
    },
    "test": {
      "commands": [
        "cogger --help"
      ]
    }
  },
  "win_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "go-licenses",
        "go-nocgo_compiler_stub"
      ]
    },
    "host": {
      "__set__": true,
      "elements": []
    },
    "run": {
      "__set__": true,
      "elements": []
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  }
}