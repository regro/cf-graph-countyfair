{
  "archived": false,
  "branch": "main",
  "conda-forge.yml": {
    "bot": {
      "inspection": "hint-all"
    },
    "conda_build": {
      "pkg_format": "2"
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    }
  },
  "feedstock_name": "werkzeug",
  "hash_type": "sha256",
  "linux_64_meta_yaml": {
    "about": {
      "description": "**_werkzeug_** German noun: \"tool\". Etymology: *werk* (\"work\"), *zeug* (\"stuff\")\n\nWerkzeug is a comprehensive [WSGI](https://wsgi.readthedocs.io/en/latest/) web application library. It began as\na simple collection of various utilities for WSGI applications and has\nbecome one of the most advanced WSGI utility libraries.\n\nIt includes:\n\n  -   An interactive debugger that allows inspecting stack traces and\n      source code in the browser with an interactive interpreter for any\n      frame in the stack.\n  -   A full-featured request object with objects to interact with\n      headers, query args, form data, files, and cookies.\n  -   A response object that can wrap other WSGI applications and handle\n      streaming data.\n  -   A routing system for matching URLs to endpoints and generating URLs\n      for endpoints, with an extensible system for capturing variables\n      from URLs.\n  -   HTTP utilities to handle entity tags, cache control, dates, user\n      agents, cookies, files, and more.\n  -   A threaded WSGI server for use while developing applications\n      locally.\n  -   A test client for simulating HTTP requests during testing without\n      requiring running a server.\n\nWerkzeug doesn't enforce any dependencies. It is up to the developer to\nchoose a template engine, database adapter, and even how to handle\nrequests. It can be used to build all sorts of end user applications\nsuch as blogs, wikis, or bulletin boards.\n\n[Flask](https://www.palletsprojects.com/p/flask/) wraps Werkzeug, using it to handle the details of WSGI while\nproviding more structure and patterns for defining powerful\napplications.\n",
      "dev_url": "https://github.com/pallets/werkzeug",
      "doc_url": "https://werkzeug.palletsprojects.com/",
      "home": "https://palletsprojects.com/p/werkzeug/",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE.txt",
      "summary": "The comprehensive WSGI web application library."
    },
    "build": {
      "noarch": "python",
      "number": "1",
      "script": [
        "PYTHON -m pip install . --no-deps -vv --no-build-isolation --disable-pip-version-check"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "goanpeca",
        "bollwyvl"
      ]
    },
    "package": {
      "name": "werkzeug",
      "version": "3.1.3"
    },
    "requirements": {
      "host": [
        "flit-core <4",
        "pip",
        "python 3.9"
      ],
      "run": [
        "markupsafe >=2.1.1",
        "python >=3.9"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "60723ce945c19328679790e3282cc758aa4a6040e4bb330f53d30fa546d44746",
      "url": "https://pypi.org/packages/source/w/werkzeug/werkzeug-3.1.3.tar.gz"
    },
    "test": {
      "commands": [
        "pip check",
        "coverage run -m pytest -vv --tb=long --color=yes -k \"not exclude_patterns\"",
        "coverage report --fail-under=83",
        "mypy --disable-error-code unused-ignore -p werkzeug"
      ],
      "imports": [
        "werkzeug"
      ],
      "requires": [
        "coverage",
        "cryptography",
        "ephemeral-port-reserve",
        "greenlet",
        "mypy",
        "pip",
        "pytest",
        "pytest-timeout",
        "pytest-xprocess",
        "python 3.9",
        "types-setuptools",
        "watchdog"
      ],
      "source_files": [
        "tests",
        "pyproject.toml"
      ]
    }
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": []
    },
    "host": {
      "__set__": true,
      "elements": [
        "flit-core",
        "pip",
        "python"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "markupsafe",
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "coverage",
        "cryptography",
        "ephemeral-port-reserve",
        "greenlet",
        "mypy",
        "pip",
        "pytest",
        "pytest-timeout",
        "pytest-xprocess",
        "python",
        "types-setuptools",
        "watchdog"
      ]
    }
  },
  "meta_yaml": {
    "about": {
      "description": "**_werkzeug_** German noun: \"tool\". Etymology: *werk* (\"work\"), *zeug* (\"stuff\")\n\nWerkzeug is a comprehensive [WSGI](https://wsgi.readthedocs.io/en/latest/) web application library. It began as\na simple collection of various utilities for WSGI applications and has\nbecome one of the most advanced WSGI utility libraries.\n\nIt includes:\n\n  -   An interactive debugger that allows inspecting stack traces and\n      source code in the browser with an interactive interpreter for any\n      frame in the stack.\n  -   A full-featured request object with objects to interact with\n      headers, query args, form data, files, and cookies.\n  -   A response object that can wrap other WSGI applications and handle\n      streaming data.\n  -   A routing system for matching URLs to endpoints and generating URLs\n      for endpoints, with an extensible system for capturing variables\n      from URLs.\n  -   HTTP utilities to handle entity tags, cache control, dates, user\n      agents, cookies, files, and more.\n  -   A threaded WSGI server for use while developing applications\n      locally.\n  -   A test client for simulating HTTP requests during testing without\n      requiring running a server.\n\nWerkzeug doesn't enforce any dependencies. It is up to the developer to\nchoose a template engine, database adapter, and even how to handle\nrequests. It can be used to build all sorts of end user applications\nsuch as blogs, wikis, or bulletin boards.\n\n[Flask](https://www.palletsprojects.com/p/flask/) wraps Werkzeug, using it to handle the details of WSGI while\nproviding more structure and patterns for defining powerful\napplications.\n",
      "dev_url": "https://github.com/pallets/werkzeug",
      "doc_url": "https://werkzeug.palletsprojects.com/",
      "home": "https://palletsprojects.com/p/werkzeug/",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE.txt",
      "summary": "The comprehensive WSGI web application library."
    },
    "build": {
      "noarch": "python",
      "number": "1",
      "script": [
        "PYTHON -m pip install . --no-deps -vv --no-build-isolation --disable-pip-version-check"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "goanpeca",
        "bollwyvl"
      ]
    },
    "package": {
      "name": "werkzeug",
      "version": "3.1.3"
    },
    "requirements": {
      "host": [
        "flit-core <4",
        "pip",
        "python 3.9"
      ],
      "run": [
        "markupsafe >=2.1.1",
        "python >=3.9"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "60723ce945c19328679790e3282cc758aa4a6040e4bb330f53d30fa546d44746",
      "url": "https://pypi.org/packages/source/w/werkzeug/werkzeug-3.1.3.tar.gz"
    },
    "test": {
      "commands": [
        "pip check",
        "coverage run -m pytest -vv --tb=long --color=yes -k \"not exclude_patterns\"",
        "coverage report --fail-under=83",
        "mypy --disable-error-code unused-ignore -p werkzeug"
      ],
      "imports": [
        "werkzeug"
      ],
      "requires": [
        "coverage",
        "cryptography",
        "ephemeral-port-reserve",
        "greenlet",
        "mypy",
        "pip",
        "pytest",
        "pytest-timeout",
        "pytest-xprocess",
        "python 3.9",
        "types-setuptools",
        "watchdog"
      ],
      "source_files": [
        "tests",
        "pyproject.toml"
      ]
    }
  },
  "name": "werkzeug",
  "outputs_names": {
    "__set__": true,
    "elements": [
      "werkzeug"
    ]
  },
  "parsing_error": "make_graph: 503",
  "platforms": [
    "linux_64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/werkzeug.json"
  },
  "raw_meta_yaml": "{% set version = \"3.1.3\" %}\n{% set python_min = python_min | default(\"3.9\") %}\n{% set cov_fail_under = 83 %}\n# if this becomes a list, should be ` or `-delimited, with parentheses: \"(exclude_patterns or foo_bar)\"\n{% set test_skip = \"exclude_patterns\" %}\n\npackage:\n  name: werkzeug\n  version: {{ version }}\n\nsource:\n  url: https://pypi.org/packages/source/w/werkzeug/werkzeug-{{ version }}.tar.gz\n  sha256: 60723ce945c19328679790e3282cc758aa4a6040e4bb330f53d30fa546d44746\n\nbuild:\n  noarch: python\n  number: 1\n  script:\n    - {{ PYTHON }} -m pip install . --no-deps -vv --no-build-isolation --disable-pip-version-check\n\nrequirements:\n  host:\n    - flit-core <4\n    - pip\n    - python {{ python_min }}\n  run:\n    - markupsafe >=2.1.1\n    - python >={{ python_min }}\n\ntest:\n  source_files:\n    - tests\n    - pyproject.toml\n  requires:\n    - coverage\n    - cryptography\n    - ephemeral-port-reserve\n    - greenlet\n    - mypy\n    - pip\n    - pytest\n    - pytest-timeout\n    - pytest-xprocess\n    - python {{ python_min }}\n    - types-setuptools\n    - watchdog\n  imports:\n    - werkzeug\n  commands:\n    - pip check\n    - coverage run -m pytest -vv --tb=long --color=yes -k \"not {{ test_skip }}\"\n    - coverage report --fail-under={{ cov_fail_under }}\n    - mypy --disable-error-code unused-ignore -p werkzeug\n\nabout:\n  home: https://palletsprojects.com/p/werkzeug/\n  license: BSD-3-Clause\n  license_family: BSD\n  license_file: LICENSE.txt\n  summary: The comprehensive WSGI web application library.\n  description: |\n    **_werkzeug_** German noun: \"tool\". Etymology: *werk* (\"work\"), *zeug* (\"stuff\")\n\n    Werkzeug is a comprehensive [WSGI](https://wsgi.readthedocs.io/en/latest/) web application library. It began as\n    a simple collection of various utilities for WSGI applications and has\n    become one of the most advanced WSGI utility libraries.\n\n    It includes:\n\n      -   An interactive debugger that allows inspecting stack traces and\n          source code in the browser with an interactive interpreter for any\n          frame in the stack.\n      -   A full-featured request object with objects to interact with\n          headers, query args, form data, files, and cookies.\n      -   A response object that can wrap other WSGI applications and handle\n          streaming data.\n      -   A routing system for matching URLs to endpoints and generating URLs\n          for endpoints, with an extensible system for capturing variables\n          from URLs.\n      -   HTTP utilities to handle entity tags, cache control, dates, user\n          agents, cookies, files, and more.\n      -   A threaded WSGI server for use while developing applications\n          locally.\n      -   A test client for simulating HTTP requests during testing without\n          requiring running a server.\n\n    Werkzeug doesn't enforce any dependencies. It is up to the developer to\n    choose a template engine, database adapter, and even how to handle\n    requests. It can be used to build all sorts of end user applications\n    such as blogs, wikis, or bulletin boards.\n\n    [Flask](https://www.palletsprojects.com/p/flask/) wraps Werkzeug, using it to handle the details of WSGI while\n    providing more structure and patterns for defining powerful\n    applications.\n  doc_url: https://werkzeug.palletsprojects.com/\n  dev_url: https://github.com/pallets/werkzeug\n\nextra:\n  recipe-maintainers:\n    - goanpeca\n    - bollwyvl\n",
  "req": {
    "__set__": true,
    "elements": [
      "flit-core",
      "markupsafe",
      "pip",
      "python"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": []
    },
    "host": {
      "__set__": true,
      "elements": [
        "flit-core",
        "pip",
        "python"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "markupsafe",
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "coverage",
        "cryptography",
        "ephemeral-port-reserve",
        "greenlet",
        "mypy",
        "pip",
        "pytest",
        "pytest-timeout",
        "pytest-xprocess",
        "python",
        "types-setuptools",
        "watchdog"
      ]
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": []
    },
    "host": {
      "__set__": true,
      "elements": [
        "flit-core <4",
        "pip",
        "python 3.9"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "markupsafe >=2.1.1",
        "python >=3.9"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "coverage",
        "cryptography",
        "ephemeral-port-reserve",
        "greenlet",
        "mypy",
        "pip",
        "pytest",
        "pytest-timeout",
        "pytest-xprocess",
        "python 3.9",
        "types-setuptools",
        "watchdog"
      ]
    }
  },
  "url": "https://pypi.org/packages/source/w/werkzeug/werkzeug-3.1.3.tar.gz",
  "version": "3.1.3",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/werkzeug.json"
  }
}