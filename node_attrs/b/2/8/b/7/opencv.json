{
  "archived": false,
  "branch": "main",
  "conda-forge.yml": {
    "build_platform": {
      "linux_aarch64": "linux_64",
      "linux_ppc64le": "linux_64",
      "osx_arm64": "osx_64"
    },
    "conda_build": {
      "pkg_format": "2"
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    },
    "provider": {
      "linux_aarch64": "azure",
      "linux_ppc64le": "azure"
    },
    "test": "native_and_emulated"
  },
  "feedstock_name": "opencv",
  "hash_type": "sha256",
  "linux_64_meta_yaml": {
    "about": {
      "dev_url": "https://github.com/opencv/opencv",
      "doc_url": "https://docs.opencv.org/4.x/",
      "home": "https://opencv.org/",
      "license": "Apache-2.0",
      "license_family": "Apache",
      "license_file": "LICENSE",
      "summary": "Computer vision and machine learning software library."
    },
    "build": {
      "ignore_run_exports_from": [
        "python"
      ],
      "number": "2",
      "run_exports": [
        "libopencv"
      ],
      "string": "headless_py39h1234567_2"
    },
    "extra": {
      "recipe-maintainers": [
        "h-vetinari",
        "xhochy",
        "jakirkham",
        "msarahan",
        "patricksnape",
        "zym1010",
        "hajapy",
        "ocefpaf",
        "hmaarrfk",
        "ilya-lavrenov"
      ]
    },
    "outputs": [
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "qt6_py310h1234567_602"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "qt6_py310h1234567_602"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2; assert 'Unknown' not in cv2.videoio_registry.getBackendName(cv2.CAP_V4L)\"",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "headless_py310h1234567_2"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "headless_py310h1234567_2"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2; assert 'Unknown' not in cv2.videoio_registry.getBackendName(cv2.CAP_V4L)\"",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "qt6_py311h1234567_602"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "qt6_py311h1234567_602"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2; assert 'Unknown' not in cv2.videoio_registry.getBackendName(cv2.CAP_V4L)\"",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "headless_py311h1234567_2"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "headless_py311h1234567_2"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2; assert 'Unknown' not in cv2.videoio_registry.getBackendName(cv2.CAP_V4L)\"",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "qt6_py312h1234567_602"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "qt6_py312h1234567_602"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2; assert 'Unknown' not in cv2.videoio_registry.getBackendName(cv2.CAP_V4L)\"",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "headless_py312h1234567_2"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "headless_py312h1234567_2"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2; assert 'Unknown' not in cv2.videoio_registry.getBackendName(cv2.CAP_V4L)\"",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "qt6_py313h1234567_602"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "qt6_py313h1234567_602"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2; assert 'Unknown' not in cv2.videoio_registry.getBackendName(cv2.CAP_V4L)\"",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "headless_py313h1234567_2"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "headless_py313h1234567_2"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2; assert 'Unknown' not in cv2.videoio_registry.getBackendName(cv2.CAP_V4L)\"",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "qt6_py39h1234567_602"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "qt6_py39h1234567_602"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2; assert 'Unknown' not in cv2.videoio_registry.getBackendName(cv2.CAP_V4L)\"",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "headless_py39h1234567_2"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "headless_py39h1234567_2"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2; assert 'Unknown' not in cv2.videoio_registry.getBackendName(cv2.CAP_V4L)\"",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      }
    ],
    "package": {
      "name": "libopencv",
      "version": "4.12.0"
    },
    "requirements": {
      "build": [
        "pkg-config",
        "cmake",
        "ninja",
        "libgomp",
        "c_stdlib_stub",
        "c_compiler_stub",
        "cxx_compiler_stub"
      ],
      "host": [
        "libgl-devel",
        "libegl-devel",
        "python",
        "numpy",
        "eigen",
        "ffmpeg 7 lgpl_*",
        "freetype",
        "harfbuzz",
        "gettext",
        "glib",
        "hdf5",
        "hdf5 * nompi*",
        "jasper",
        "libavif",
        "libcblas",
        "libiconv",
        "libjpeg-turbo",
        "liblapack",
        "liblapacke",
        "libpng",
        "libprotobuf",
        "libtiff",
        "libwebp",
        "openexr",
        "imath",
        "qt6-main",
        "zlib",
        "libopenvino-dev",
        "expat"
      ]
    },
    "schema_version": 0,
    "source": [
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      }
    ],
    "test": {
      "commands": [
        "OPENCV_FLAGS=\"`pkg-config --cflags opencv4`\"",
        "$CXX -std=c++11 $RECIPE_DIR/test.cpp ${OPENCV_FLAGS} -o test",
        "if [[ $(./test) != $PKG_VERSION ]]; then exit 1 ; fi",
        "echo Testing for presence of alphamat",
        "test -f $PREFIX/lib/libopencv_alphamat${SHLIB_EXT}",
        "echo Found                   alphamat",
        "echo Testing for presence of aruco",
        "test -f $PREFIX/lib/libopencv_aruco${SHLIB_EXT}",
        "echo Found                   aruco",
        "echo Testing for presence of bgsegm",
        "test -f $PREFIX/lib/libopencv_bgsegm${SHLIB_EXT}",
        "echo Found                   bgsegm",
        "echo Testing for presence of calib3d",
        "test -f $PREFIX/lib/libopencv_calib3d${SHLIB_EXT}",
        "echo Found                   calib3d",
        "echo Testing for presence of ccalib",
        "test -f $PREFIX/lib/libopencv_ccalib${SHLIB_EXT}",
        "echo Found                   ccalib",
        "echo Testing for presence of core",
        "test -f $PREFIX/lib/libopencv_core${SHLIB_EXT}",
        "echo Found                   core",
        "echo Testing for presence of datasets",
        "test -f $PREFIX/lib/libopencv_datasets${SHLIB_EXT}",
        "echo Found                   datasets",
        "echo Testing for presence of dnn",
        "test -f $PREFIX/lib/libopencv_dnn${SHLIB_EXT}",
        "echo Found                   dnn",
        "echo Testing for presence of dnn_objdetect",
        "test -f $PREFIX/lib/libopencv_dnn_objdetect${SHLIB_EXT}",
        "echo Found                   dnn_objdetect",
        "echo Testing for presence of dnn_superres",
        "test -f $PREFIX/lib/libopencv_dnn_superres${SHLIB_EXT}",
        "echo Found                   dnn_superres",
        "echo Testing for presence of dpm",
        "test -f $PREFIX/lib/libopencv_dpm${SHLIB_EXT}",
        "echo Found                   dpm",
        "echo Testing for presence of face",
        "test -f $PREFIX/lib/libopencv_face${SHLIB_EXT}",
        "echo Found                   face",
        "echo Testing for presence of features2d",
        "test -f $PREFIX/lib/libopencv_features2d${SHLIB_EXT}",
        "echo Found                   features2d",
        "echo Testing for presence of flann",
        "test -f $PREFIX/lib/libopencv_flann${SHLIB_EXT}",
        "echo Found                   flann",
        "echo Testing for presence of freetype",
        "test -f $PREFIX/lib/libopencv_freetype${SHLIB_EXT}",
        "echo Found                   freetype",
        "echo Testing for presence of fuzzy",
        "test -f $PREFIX/lib/libopencv_fuzzy${SHLIB_EXT}",
        "echo Found                   fuzzy",
        "echo Testing for presence of gapi",
        "test -f $PREFIX/lib/libopencv_gapi${SHLIB_EXT}",
        "echo Found                   gapi",
        "echo Testing for presence of hfs",
        "test -f $PREFIX/lib/libopencv_hfs${SHLIB_EXT}",
        "echo Found                   hfs",
        "echo Testing for presence of highgui",
        "test -f $PREFIX/lib/libopencv_highgui${SHLIB_EXT}",
        "echo Found                   highgui",
        "echo Testing for presence of img_hash",
        "test -f $PREFIX/lib/libopencv_img_hash${SHLIB_EXT}",
        "echo Found                   img_hash",
        "echo Testing for presence of imgcodecs",
        "test -f $PREFIX/lib/libopencv_imgcodecs${SHLIB_EXT}",
        "echo Found                   imgcodecs",
        "echo Testing for presence of imgproc",
        "test -f $PREFIX/lib/libopencv_imgproc${SHLIB_EXT}",
        "echo Found                   imgproc",
        "echo Testing for presence of intensity_transform",
        "test -f $PREFIX/lib/libopencv_intensity_transform${SHLIB_EXT}",
        "echo Found                   intensity_transform",
        "echo Testing for presence of line_descriptor",
        "test -f $PREFIX/lib/libopencv_line_descriptor${SHLIB_EXT}",
        "echo Found                   line_descriptor",
        "echo Testing for presence of mcc",
        "test -f $PREFIX/lib/libopencv_mcc${SHLIB_EXT}",
        "echo Found                   mcc",
        "echo Testing for presence of ml",
        "test -f $PREFIX/lib/libopencv_ml${SHLIB_EXT}",
        "echo Found                   ml",
        "echo Testing for presence of objdetect",
        "test -f $PREFIX/lib/libopencv_objdetect${SHLIB_EXT}",
        "echo Found                   objdetect",
        "echo Testing for presence of optflow",
        "test -f $PREFIX/lib/libopencv_optflow${SHLIB_EXT}",
        "echo Found                   optflow",
        "echo Testing for presence of phase_unwrapping",
        "test -f $PREFIX/lib/libopencv_phase_unwrapping${SHLIB_EXT}",
        "echo Found                   phase_unwrapping",
        "echo Testing for presence of photo",
        "test -f $PREFIX/lib/libopencv_photo${SHLIB_EXT}",
        "echo Found                   photo",
        "echo Testing for presence of plot",
        "test -f $PREFIX/lib/libopencv_plot${SHLIB_EXT}",
        "echo Found                   plot",
        "echo Testing for presence of quality",
        "test -f $PREFIX/lib/libopencv_quality${SHLIB_EXT}",
        "echo Found                   quality",
        "echo Testing for presence of rapid",
        "test -f $PREFIX/lib/libopencv_rapid${SHLIB_EXT}",
        "echo Found                   rapid",
        "echo Testing for presence of reg",
        "test -f $PREFIX/lib/libopencv_reg${SHLIB_EXT}",
        "echo Found                   reg",
        "echo Testing for presence of rgbd",
        "test -f $PREFIX/lib/libopencv_rgbd${SHLIB_EXT}",
        "echo Found                   rgbd",
        "echo Testing for presence of saliency",
        "test -f $PREFIX/lib/libopencv_saliency${SHLIB_EXT}",
        "echo Found                   saliency",
        "echo Testing for presence of shape",
        "test -f $PREFIX/lib/libopencv_shape${SHLIB_EXT}",
        "echo Found                   shape",
        "echo Testing for presence of stereo",
        "test -f $PREFIX/lib/libopencv_stereo${SHLIB_EXT}",
        "echo Found                   stereo",
        "echo Testing for presence of stitching",
        "test -f $PREFIX/lib/libopencv_stitching${SHLIB_EXT}",
        "echo Found                   stitching",
        "echo Testing for presence of structured_light",
        "test -f $PREFIX/lib/libopencv_structured_light${SHLIB_EXT}",
        "echo Found                   structured_light",
        "echo Testing for presence of superres",
        "test -f $PREFIX/lib/libopencv_superres${SHLIB_EXT}",
        "echo Found                   superres",
        "echo Testing for presence of surface_matching",
        "test -f $PREFIX/lib/libopencv_surface_matching${SHLIB_EXT}",
        "echo Found                   surface_matching",
        "echo Testing for presence of text",
        "test -f $PREFIX/lib/libopencv_text${SHLIB_EXT}",
        "echo Found                   text",
        "echo Testing for presence of tracking",
        "test -f $PREFIX/lib/libopencv_tracking${SHLIB_EXT}",
        "echo Found                   tracking",
        "echo Testing for presence of video",
        "test -f $PREFIX/lib/libopencv_video${SHLIB_EXT}",
        "echo Found                   video",
        "echo Testing for presence of videoio",
        "test -f $PREFIX/lib/libopencv_videoio${SHLIB_EXT}",
        "echo Found                   videoio",
        "echo Testing for presence of videostab",
        "test -f $PREFIX/lib/libopencv_videostab${SHLIB_EXT}",
        "echo Found                   videostab",
        "echo Testing for presence of wechat_qrcode",
        "test -f $PREFIX/lib/libopencv_wechat_qrcode${SHLIB_EXT}",
        "echo Found                   wechat_qrcode",
        "echo Testing for presence of xfeatures2d",
        "test -f $PREFIX/lib/libopencv_xfeatures2d${SHLIB_EXT}",
        "echo Found                   xfeatures2d",
        "echo Testing for presence of ximgproc",
        "test -f $PREFIX/lib/libopencv_ximgproc${SHLIB_EXT}",
        "echo Found                   ximgproc",
        "echo Testing for presence of xobjdetect",
        "test -f $PREFIX/lib/libopencv_xobjdetect${SHLIB_EXT}",
        "echo Found                   xobjdetect",
        "echo Testing for presence of xphoto",
        "test -f $PREFIX/lib/libopencv_xphoto${SHLIB_EXT}",
        "echo Found                   xphoto",
        "test -f $PREFIX/lib/libopencv_bioinspired${SHLIB_EXT}",
        "test -f $PREFIX/lib/libopencv_hdf${SHLIB_EXT}",
        "mkdir -p cmake_build_test && pushd cmake_build_test",
        "cmake -G \"Ninja\" ..",
        "cmake --build . --config Release",
        "popd"
      ],
      "files": [
        "CMakeLists.txt",
        "test.cpp"
      ],
      "requires": [
        "c_compiler_stub",
        "cxx_compiler_stub",
        "pkg-config",
        "cmake",
        "ninja"
      ]
    }
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "libgomp",
        "ninja",
        "pkg-config"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "eigen",
        "expat",
        "ffmpeg",
        "freetype",
        "gettext",
        "glib",
        "harfbuzz",
        "hdf5",
        "imath",
        "jasper",
        "libavif",
        "libcblas",
        "libegl-devel",
        "libgl-devel",
        "libiconv",
        "libjpeg-turbo",
        "liblapack",
        "liblapacke",
        "libopenvino-dev",
        "libpng",
        "libprotobuf",
        "libtiff",
        "libwebp",
        "numpy",
        "openexr",
        "python",
        "qt6-main",
        "zlib"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "libopencv",
        "py-opencv",
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "cmake",
        "cxx_compiler_stub",
        "liblapack",
        "ninja",
        "pip",
        "pkg-config"
      ]
    }
  },
  "linux_aarch64_meta_yaml": {
    "about": {
      "dev_url": "https://github.com/opencv/opencv",
      "doc_url": "https://docs.opencv.org/4.x/",
      "home": "https://opencv.org/",
      "license": "Apache-2.0",
      "license_family": "Apache",
      "license_file": "LICENSE",
      "summary": "Computer vision and machine learning software library."
    },
    "build": {
      "ignore_run_exports_from": [
        "python"
      ],
      "number": "2",
      "run_exports": [
        "libopencv"
      ],
      "string": "headless_py39h1234567_2"
    },
    "extra": {
      "recipe-maintainers": [
        "h-vetinari",
        "xhochy",
        "jakirkham",
        "msarahan",
        "patricksnape",
        "zym1010",
        "hajapy",
        "ocefpaf",
        "hmaarrfk",
        "ilya-lavrenov"
      ]
    },
    "outputs": [
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "qt6_py310h1234567_602"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "qt6_py310h1234567_602"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2; assert 'Unknown' not in cv2.videoio_registry.getBackendName(cv2.CAP_V4L)\"",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "headless_py310h1234567_2"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "headless_py310h1234567_2"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2; assert 'Unknown' not in cv2.videoio_registry.getBackendName(cv2.CAP_V4L)\"",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "qt6_py311h1234567_602"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "qt6_py311h1234567_602"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2; assert 'Unknown' not in cv2.videoio_registry.getBackendName(cv2.CAP_V4L)\"",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "headless_py311h1234567_2"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "headless_py311h1234567_2"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2; assert 'Unknown' not in cv2.videoio_registry.getBackendName(cv2.CAP_V4L)\"",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "qt6_py312h1234567_602"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "qt6_py312h1234567_602"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2; assert 'Unknown' not in cv2.videoio_registry.getBackendName(cv2.CAP_V4L)\"",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "headless_py312h1234567_2"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "headless_py312h1234567_2"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2; assert 'Unknown' not in cv2.videoio_registry.getBackendName(cv2.CAP_V4L)\"",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "qt6_py313h1234567_602"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "qt6_py313h1234567_602"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2; assert 'Unknown' not in cv2.videoio_registry.getBackendName(cv2.CAP_V4L)\"",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "headless_py313h1234567_2"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "headless_py313h1234567_2"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2; assert 'Unknown' not in cv2.videoio_registry.getBackendName(cv2.CAP_V4L)\"",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "qt6_py39h1234567_602"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "qt6_py39h1234567_602"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2; assert 'Unknown' not in cv2.videoio_registry.getBackendName(cv2.CAP_V4L)\"",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "headless_py39h1234567_2"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "headless_py39h1234567_2"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2; assert 'Unknown' not in cv2.videoio_registry.getBackendName(cv2.CAP_V4L)\"",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      }
    ],
    "package": {
      "name": "libopencv",
      "version": "4.12.0"
    },
    "requirements": {
      "build": [
        "pkg-config",
        "cmake",
        "ninja",
        "libgomp",
        "c_stdlib_stub",
        "c_compiler_stub",
        "cxx_compiler_stub"
      ],
      "host": [
        "libgl-devel",
        "libegl-devel",
        "python",
        "numpy",
        "eigen",
        "ffmpeg 7 lgpl_*",
        "freetype",
        "harfbuzz",
        "gettext",
        "glib",
        "hdf5",
        "hdf5 * nompi*",
        "jasper",
        "libavif",
        "libcblas",
        "libiconv",
        "libjpeg-turbo",
        "liblapack",
        "liblapacke",
        "libpng",
        "libprotobuf",
        "libtiff",
        "libwebp",
        "openexr",
        "imath",
        "qt6-main",
        "zlib",
        "libopenvino-dev",
        "expat"
      ]
    },
    "schema_version": 0,
    "source": [
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      }
    ],
    "test": {
      "commands": [
        "OPENCV_FLAGS=\"`pkg-config --cflags opencv4`\"",
        "$CXX -std=c++11 $RECIPE_DIR/test.cpp ${OPENCV_FLAGS} -o test",
        "if [[ $(./test) != $PKG_VERSION ]]; then exit 1 ; fi",
        "echo Testing for presence of alphamat",
        "test -f $PREFIX/lib/libopencv_alphamat${SHLIB_EXT}",
        "echo Found                   alphamat",
        "echo Testing for presence of aruco",
        "test -f $PREFIX/lib/libopencv_aruco${SHLIB_EXT}",
        "echo Found                   aruco",
        "echo Testing for presence of bgsegm",
        "test -f $PREFIX/lib/libopencv_bgsegm${SHLIB_EXT}",
        "echo Found                   bgsegm",
        "echo Testing for presence of calib3d",
        "test -f $PREFIX/lib/libopencv_calib3d${SHLIB_EXT}",
        "echo Found                   calib3d",
        "echo Testing for presence of ccalib",
        "test -f $PREFIX/lib/libopencv_ccalib${SHLIB_EXT}",
        "echo Found                   ccalib",
        "echo Testing for presence of core",
        "test -f $PREFIX/lib/libopencv_core${SHLIB_EXT}",
        "echo Found                   core",
        "echo Testing for presence of datasets",
        "test -f $PREFIX/lib/libopencv_datasets${SHLIB_EXT}",
        "echo Found                   datasets",
        "echo Testing for presence of dnn",
        "test -f $PREFIX/lib/libopencv_dnn${SHLIB_EXT}",
        "echo Found                   dnn",
        "echo Testing for presence of dnn_objdetect",
        "test -f $PREFIX/lib/libopencv_dnn_objdetect${SHLIB_EXT}",
        "echo Found                   dnn_objdetect",
        "echo Testing for presence of dnn_superres",
        "test -f $PREFIX/lib/libopencv_dnn_superres${SHLIB_EXT}",
        "echo Found                   dnn_superres",
        "echo Testing for presence of dpm",
        "test -f $PREFIX/lib/libopencv_dpm${SHLIB_EXT}",
        "echo Found                   dpm",
        "echo Testing for presence of face",
        "test -f $PREFIX/lib/libopencv_face${SHLIB_EXT}",
        "echo Found                   face",
        "echo Testing for presence of features2d",
        "test -f $PREFIX/lib/libopencv_features2d${SHLIB_EXT}",
        "echo Found                   features2d",
        "echo Testing for presence of flann",
        "test -f $PREFIX/lib/libopencv_flann${SHLIB_EXT}",
        "echo Found                   flann",
        "echo Testing for presence of freetype",
        "test -f $PREFIX/lib/libopencv_freetype${SHLIB_EXT}",
        "echo Found                   freetype",
        "echo Testing for presence of fuzzy",
        "test -f $PREFIX/lib/libopencv_fuzzy${SHLIB_EXT}",
        "echo Found                   fuzzy",
        "echo Testing for presence of gapi",
        "test -f $PREFIX/lib/libopencv_gapi${SHLIB_EXT}",
        "echo Found                   gapi",
        "echo Testing for presence of hfs",
        "test -f $PREFIX/lib/libopencv_hfs${SHLIB_EXT}",
        "echo Found                   hfs",
        "echo Testing for presence of highgui",
        "test -f $PREFIX/lib/libopencv_highgui${SHLIB_EXT}",
        "echo Found                   highgui",
        "echo Testing for presence of img_hash",
        "test -f $PREFIX/lib/libopencv_img_hash${SHLIB_EXT}",
        "echo Found                   img_hash",
        "echo Testing for presence of imgcodecs",
        "test -f $PREFIX/lib/libopencv_imgcodecs${SHLIB_EXT}",
        "echo Found                   imgcodecs",
        "echo Testing for presence of imgproc",
        "test -f $PREFIX/lib/libopencv_imgproc${SHLIB_EXT}",
        "echo Found                   imgproc",
        "echo Testing for presence of intensity_transform",
        "test -f $PREFIX/lib/libopencv_intensity_transform${SHLIB_EXT}",
        "echo Found                   intensity_transform",
        "echo Testing for presence of line_descriptor",
        "test -f $PREFIX/lib/libopencv_line_descriptor${SHLIB_EXT}",
        "echo Found                   line_descriptor",
        "echo Testing for presence of mcc",
        "test -f $PREFIX/lib/libopencv_mcc${SHLIB_EXT}",
        "echo Found                   mcc",
        "echo Testing for presence of ml",
        "test -f $PREFIX/lib/libopencv_ml${SHLIB_EXT}",
        "echo Found                   ml",
        "echo Testing for presence of objdetect",
        "test -f $PREFIX/lib/libopencv_objdetect${SHLIB_EXT}",
        "echo Found                   objdetect",
        "echo Testing for presence of optflow",
        "test -f $PREFIX/lib/libopencv_optflow${SHLIB_EXT}",
        "echo Found                   optflow",
        "echo Testing for presence of phase_unwrapping",
        "test -f $PREFIX/lib/libopencv_phase_unwrapping${SHLIB_EXT}",
        "echo Found                   phase_unwrapping",
        "echo Testing for presence of photo",
        "test -f $PREFIX/lib/libopencv_photo${SHLIB_EXT}",
        "echo Found                   photo",
        "echo Testing for presence of plot",
        "test -f $PREFIX/lib/libopencv_plot${SHLIB_EXT}",
        "echo Found                   plot",
        "echo Testing for presence of quality",
        "test -f $PREFIX/lib/libopencv_quality${SHLIB_EXT}",
        "echo Found                   quality",
        "echo Testing for presence of rapid",
        "test -f $PREFIX/lib/libopencv_rapid${SHLIB_EXT}",
        "echo Found                   rapid",
        "echo Testing for presence of reg",
        "test -f $PREFIX/lib/libopencv_reg${SHLIB_EXT}",
        "echo Found                   reg",
        "echo Testing for presence of rgbd",
        "test -f $PREFIX/lib/libopencv_rgbd${SHLIB_EXT}",
        "echo Found                   rgbd",
        "echo Testing for presence of saliency",
        "test -f $PREFIX/lib/libopencv_saliency${SHLIB_EXT}",
        "echo Found                   saliency",
        "echo Testing for presence of shape",
        "test -f $PREFIX/lib/libopencv_shape${SHLIB_EXT}",
        "echo Found                   shape",
        "echo Testing for presence of stereo",
        "test -f $PREFIX/lib/libopencv_stereo${SHLIB_EXT}",
        "echo Found                   stereo",
        "echo Testing for presence of stitching",
        "test -f $PREFIX/lib/libopencv_stitching${SHLIB_EXT}",
        "echo Found                   stitching",
        "echo Testing for presence of structured_light",
        "test -f $PREFIX/lib/libopencv_structured_light${SHLIB_EXT}",
        "echo Found                   structured_light",
        "echo Testing for presence of superres",
        "test -f $PREFIX/lib/libopencv_superres${SHLIB_EXT}",
        "echo Found                   superres",
        "echo Testing for presence of surface_matching",
        "test -f $PREFIX/lib/libopencv_surface_matching${SHLIB_EXT}",
        "echo Found                   surface_matching",
        "echo Testing for presence of text",
        "test -f $PREFIX/lib/libopencv_text${SHLIB_EXT}",
        "echo Found                   text",
        "echo Testing for presence of tracking",
        "test -f $PREFIX/lib/libopencv_tracking${SHLIB_EXT}",
        "echo Found                   tracking",
        "echo Testing for presence of video",
        "test -f $PREFIX/lib/libopencv_video${SHLIB_EXT}",
        "echo Found                   video",
        "echo Testing for presence of videoio",
        "test -f $PREFIX/lib/libopencv_videoio${SHLIB_EXT}",
        "echo Found                   videoio",
        "echo Testing for presence of videostab",
        "test -f $PREFIX/lib/libopencv_videostab${SHLIB_EXT}",
        "echo Found                   videostab",
        "echo Testing for presence of wechat_qrcode",
        "test -f $PREFIX/lib/libopencv_wechat_qrcode${SHLIB_EXT}",
        "echo Found                   wechat_qrcode",
        "echo Testing for presence of xfeatures2d",
        "test -f $PREFIX/lib/libopencv_xfeatures2d${SHLIB_EXT}",
        "echo Found                   xfeatures2d",
        "echo Testing for presence of ximgproc",
        "test -f $PREFIX/lib/libopencv_ximgproc${SHLIB_EXT}",
        "echo Found                   ximgproc",
        "echo Testing for presence of xobjdetect",
        "test -f $PREFIX/lib/libopencv_xobjdetect${SHLIB_EXT}",
        "echo Found                   xobjdetect",
        "echo Testing for presence of xphoto",
        "test -f $PREFIX/lib/libopencv_xphoto${SHLIB_EXT}",
        "echo Found                   xphoto",
        "test -f $PREFIX/lib/libopencv_bioinspired${SHLIB_EXT}",
        "test -f $PREFIX/lib/libopencv_hdf${SHLIB_EXT}",
        "mkdir -p cmake_build_test && pushd cmake_build_test",
        "cmake -G \"Ninja\" ..",
        "cmake --build . --config Release",
        "popd"
      ],
      "files": [
        "CMakeLists.txt",
        "test.cpp"
      ],
      "requires": [
        "c_compiler_stub",
        "cxx_compiler_stub",
        "pkg-config",
        "cmake",
        "ninja"
      ]
    }
  },
  "linux_aarch64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "libgomp",
        "ninja",
        "pkg-config"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "eigen",
        "expat",
        "ffmpeg",
        "freetype",
        "gettext",
        "glib",
        "harfbuzz",
        "hdf5",
        "imath",
        "jasper",
        "libavif",
        "libcblas",
        "libegl-devel",
        "libgl-devel",
        "libiconv",
        "libjpeg-turbo",
        "liblapack",
        "liblapacke",
        "libopenvino-dev",
        "libpng",
        "libprotobuf",
        "libtiff",
        "libwebp",
        "numpy",
        "openexr",
        "python",
        "qt6-main",
        "zlib"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "libopencv",
        "py-opencv",
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "cmake",
        "cxx_compiler_stub",
        "liblapack",
        "ninja",
        "pip",
        "pkg-config"
      ]
    }
  },
  "linux_ppc64le_meta_yaml": {
    "about": {
      "dev_url": "https://github.com/opencv/opencv",
      "doc_url": "https://docs.opencv.org/4.x/",
      "home": "https://opencv.org/",
      "license": "Apache-2.0",
      "license_family": "Apache",
      "license_file": "LICENSE",
      "summary": "Computer vision and machine learning software library."
    },
    "build": {
      "ignore_run_exports_from": [
        "python"
      ],
      "number": "2",
      "run_exports": [
        "libopencv"
      ],
      "string": "headless_py39h1234567_2"
    },
    "extra": {
      "recipe-maintainers": [
        "h-vetinari",
        "xhochy",
        "jakirkham",
        "msarahan",
        "patricksnape",
        "zym1010",
        "hajapy",
        "ocefpaf",
        "hmaarrfk",
        "ilya-lavrenov"
      ]
    },
    "outputs": [
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "headless_py310h1234567_2"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "headless_py310h1234567_2"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2; assert 'Unknown' not in cv2.videoio_registry.getBackendName(cv2.CAP_V4L)\"",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "headless_py311h1234567_2"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "headless_py311h1234567_2"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2; assert 'Unknown' not in cv2.videoio_registry.getBackendName(cv2.CAP_V4L)\"",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "headless_py312h1234567_2"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "headless_py312h1234567_2"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2; assert 'Unknown' not in cv2.videoio_registry.getBackendName(cv2.CAP_V4L)\"",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "headless_py313h1234567_2"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "headless_py313h1234567_2"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2; assert 'Unknown' not in cv2.videoio_registry.getBackendName(cv2.CAP_V4L)\"",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "headless_py39h1234567_2"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "headless_py39h1234567_2"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2; assert 'Unknown' not in cv2.videoio_registry.getBackendName(cv2.CAP_V4L)\"",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      }
    ],
    "package": {
      "name": "libopencv",
      "version": "4.12.0"
    },
    "requirements": {
      "build": [
        "pkg-config",
        "cmake",
        "ninja",
        "libgomp",
        "c_stdlib_stub",
        "c_compiler_stub",
        "cxx_compiler_stub"
      ],
      "host": [
        "python",
        "numpy",
        "eigen",
        "ffmpeg 7 lgpl_*",
        "freetype",
        "harfbuzz",
        "gettext",
        "glib",
        "hdf5",
        "hdf5 * nompi*",
        "jasper",
        "libavif",
        "libcblas",
        "libiconv",
        "libjpeg-turbo",
        "liblapack",
        "liblapacke",
        "libpng",
        "libprotobuf",
        "libtiff",
        "libwebp",
        "openexr",
        "imath",
        "zlib",
        "expat"
      ]
    },
    "schema_version": 0,
    "source": [
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      }
    ],
    "test": {
      "commands": [
        "OPENCV_FLAGS=\"`pkg-config --cflags opencv4`\"",
        "$CXX -std=c++11 $RECIPE_DIR/test.cpp ${OPENCV_FLAGS} -o test",
        "if [[ $(./test) != $PKG_VERSION ]]; then exit 1 ; fi",
        "echo Testing for presence of alphamat",
        "test -f $PREFIX/lib/libopencv_alphamat${SHLIB_EXT}",
        "echo Found                   alphamat",
        "echo Testing for presence of aruco",
        "test -f $PREFIX/lib/libopencv_aruco${SHLIB_EXT}",
        "echo Found                   aruco",
        "echo Testing for presence of bgsegm",
        "test -f $PREFIX/lib/libopencv_bgsegm${SHLIB_EXT}",
        "echo Found                   bgsegm",
        "echo Testing for presence of calib3d",
        "test -f $PREFIX/lib/libopencv_calib3d${SHLIB_EXT}",
        "echo Found                   calib3d",
        "echo Testing for presence of ccalib",
        "test -f $PREFIX/lib/libopencv_ccalib${SHLIB_EXT}",
        "echo Found                   ccalib",
        "echo Testing for presence of core",
        "test -f $PREFIX/lib/libopencv_core${SHLIB_EXT}",
        "echo Found                   core",
        "echo Testing for presence of datasets",
        "test -f $PREFIX/lib/libopencv_datasets${SHLIB_EXT}",
        "echo Found                   datasets",
        "echo Testing for presence of dnn",
        "test -f $PREFIX/lib/libopencv_dnn${SHLIB_EXT}",
        "echo Found                   dnn",
        "echo Testing for presence of dnn_objdetect",
        "test -f $PREFIX/lib/libopencv_dnn_objdetect${SHLIB_EXT}",
        "echo Found                   dnn_objdetect",
        "echo Testing for presence of dnn_superres",
        "test -f $PREFIX/lib/libopencv_dnn_superres${SHLIB_EXT}",
        "echo Found                   dnn_superres",
        "echo Testing for presence of dpm",
        "test -f $PREFIX/lib/libopencv_dpm${SHLIB_EXT}",
        "echo Found                   dpm",
        "echo Testing for presence of face",
        "test -f $PREFIX/lib/libopencv_face${SHLIB_EXT}",
        "echo Found                   face",
        "echo Testing for presence of features2d",
        "test -f $PREFIX/lib/libopencv_features2d${SHLIB_EXT}",
        "echo Found                   features2d",
        "echo Testing for presence of flann",
        "test -f $PREFIX/lib/libopencv_flann${SHLIB_EXT}",
        "echo Found                   flann",
        "echo Testing for presence of freetype",
        "test -f $PREFIX/lib/libopencv_freetype${SHLIB_EXT}",
        "echo Found                   freetype",
        "echo Testing for presence of fuzzy",
        "test -f $PREFIX/lib/libopencv_fuzzy${SHLIB_EXT}",
        "echo Found                   fuzzy",
        "echo Testing for presence of gapi",
        "test -f $PREFIX/lib/libopencv_gapi${SHLIB_EXT}",
        "echo Found                   gapi",
        "echo Testing for presence of hfs",
        "test -f $PREFIX/lib/libopencv_hfs${SHLIB_EXT}",
        "echo Found                   hfs",
        "echo Testing for presence of highgui",
        "test -f $PREFIX/lib/libopencv_highgui${SHLIB_EXT}",
        "echo Found                   highgui",
        "echo Testing for presence of img_hash",
        "test -f $PREFIX/lib/libopencv_img_hash${SHLIB_EXT}",
        "echo Found                   img_hash",
        "echo Testing for presence of imgcodecs",
        "test -f $PREFIX/lib/libopencv_imgcodecs${SHLIB_EXT}",
        "echo Found                   imgcodecs",
        "echo Testing for presence of imgproc",
        "test -f $PREFIX/lib/libopencv_imgproc${SHLIB_EXT}",
        "echo Found                   imgproc",
        "echo Testing for presence of intensity_transform",
        "test -f $PREFIX/lib/libopencv_intensity_transform${SHLIB_EXT}",
        "echo Found                   intensity_transform",
        "echo Testing for presence of line_descriptor",
        "test -f $PREFIX/lib/libopencv_line_descriptor${SHLIB_EXT}",
        "echo Found                   line_descriptor",
        "echo Testing for presence of mcc",
        "test -f $PREFIX/lib/libopencv_mcc${SHLIB_EXT}",
        "echo Found                   mcc",
        "echo Testing for presence of ml",
        "test -f $PREFIX/lib/libopencv_ml${SHLIB_EXT}",
        "echo Found                   ml",
        "echo Testing for presence of objdetect",
        "test -f $PREFIX/lib/libopencv_objdetect${SHLIB_EXT}",
        "echo Found                   objdetect",
        "echo Testing for presence of optflow",
        "test -f $PREFIX/lib/libopencv_optflow${SHLIB_EXT}",
        "echo Found                   optflow",
        "echo Testing for presence of phase_unwrapping",
        "test -f $PREFIX/lib/libopencv_phase_unwrapping${SHLIB_EXT}",
        "echo Found                   phase_unwrapping",
        "echo Testing for presence of photo",
        "test -f $PREFIX/lib/libopencv_photo${SHLIB_EXT}",
        "echo Found                   photo",
        "echo Testing for presence of plot",
        "test -f $PREFIX/lib/libopencv_plot${SHLIB_EXT}",
        "echo Found                   plot",
        "echo Testing for presence of quality",
        "test -f $PREFIX/lib/libopencv_quality${SHLIB_EXT}",
        "echo Found                   quality",
        "echo Testing for presence of rapid",
        "test -f $PREFIX/lib/libopencv_rapid${SHLIB_EXT}",
        "echo Found                   rapid",
        "echo Testing for presence of reg",
        "test -f $PREFIX/lib/libopencv_reg${SHLIB_EXT}",
        "echo Found                   reg",
        "echo Testing for presence of rgbd",
        "test -f $PREFIX/lib/libopencv_rgbd${SHLIB_EXT}",
        "echo Found                   rgbd",
        "echo Testing for presence of saliency",
        "test -f $PREFIX/lib/libopencv_saliency${SHLIB_EXT}",
        "echo Found                   saliency",
        "echo Testing for presence of shape",
        "test -f $PREFIX/lib/libopencv_shape${SHLIB_EXT}",
        "echo Found                   shape",
        "echo Testing for presence of stereo",
        "test -f $PREFIX/lib/libopencv_stereo${SHLIB_EXT}",
        "echo Found                   stereo",
        "echo Testing for presence of stitching",
        "test -f $PREFIX/lib/libopencv_stitching${SHLIB_EXT}",
        "echo Found                   stitching",
        "echo Testing for presence of structured_light",
        "test -f $PREFIX/lib/libopencv_structured_light${SHLIB_EXT}",
        "echo Found                   structured_light",
        "echo Testing for presence of superres",
        "test -f $PREFIX/lib/libopencv_superres${SHLIB_EXT}",
        "echo Found                   superres",
        "echo Testing for presence of surface_matching",
        "test -f $PREFIX/lib/libopencv_surface_matching${SHLIB_EXT}",
        "echo Found                   surface_matching",
        "echo Testing for presence of text",
        "test -f $PREFIX/lib/libopencv_text${SHLIB_EXT}",
        "echo Found                   text",
        "echo Testing for presence of tracking",
        "test -f $PREFIX/lib/libopencv_tracking${SHLIB_EXT}",
        "echo Found                   tracking",
        "echo Testing for presence of video",
        "test -f $PREFIX/lib/libopencv_video${SHLIB_EXT}",
        "echo Found                   video",
        "echo Testing for presence of videoio",
        "test -f $PREFIX/lib/libopencv_videoio${SHLIB_EXT}",
        "echo Found                   videoio",
        "echo Testing for presence of videostab",
        "test -f $PREFIX/lib/libopencv_videostab${SHLIB_EXT}",
        "echo Found                   videostab",
        "echo Testing for presence of wechat_qrcode",
        "test -f $PREFIX/lib/libopencv_wechat_qrcode${SHLIB_EXT}",
        "echo Found                   wechat_qrcode",
        "echo Testing for presence of xfeatures2d",
        "test -f $PREFIX/lib/libopencv_xfeatures2d${SHLIB_EXT}",
        "echo Found                   xfeatures2d",
        "echo Testing for presence of ximgproc",
        "test -f $PREFIX/lib/libopencv_ximgproc${SHLIB_EXT}",
        "echo Found                   ximgproc",
        "echo Testing for presence of xobjdetect",
        "test -f $PREFIX/lib/libopencv_xobjdetect${SHLIB_EXT}",
        "echo Found                   xobjdetect",
        "echo Testing for presence of xphoto",
        "test -f $PREFIX/lib/libopencv_xphoto${SHLIB_EXT}",
        "echo Found                   xphoto",
        "test -f $PREFIX/lib/libopencv_bioinspired${SHLIB_EXT}",
        "test -f $PREFIX/lib/libopencv_hdf${SHLIB_EXT}",
        "mkdir -p cmake_build_test && pushd cmake_build_test",
        "cmake -G \"Ninja\" ..",
        "cmake --build . --config Release",
        "popd"
      ],
      "files": [
        "CMakeLists.txt",
        "test.cpp"
      ],
      "requires": [
        "c_compiler_stub",
        "cxx_compiler_stub",
        "pkg-config",
        "cmake",
        "ninja"
      ]
    }
  },
  "linux_ppc64le_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "libgomp",
        "ninja",
        "pkg-config"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "eigen",
        "expat",
        "ffmpeg",
        "freetype",
        "gettext",
        "glib",
        "harfbuzz",
        "hdf5",
        "imath",
        "jasper",
        "libavif",
        "libcblas",
        "libiconv",
        "libjpeg-turbo",
        "liblapack",
        "liblapacke",
        "libpng",
        "libprotobuf",
        "libtiff",
        "libwebp",
        "numpy",
        "openexr",
        "python",
        "zlib"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "libopencv",
        "py-opencv",
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "cmake",
        "cxx_compiler_stub",
        "liblapack",
        "ninja",
        "pip",
        "pkg-config"
      ]
    }
  },
  "meta_yaml": {
    "about": {
      "dev_url": "https://github.com/opencv/opencv",
      "doc_url": "https://docs.opencv.org/4.x/",
      "home": "https://opencv.org/",
      "license": "Apache-2.0",
      "license_family": "Apache",
      "license_file": "LICENSE",
      "summary": "Computer vision and machine learning software library."
    },
    "build": {
      "ignore_run_exports_from": [
        "python"
      ],
      "number": "2",
      "run_exports": [
        "libopencv"
      ],
      "string": "headless_py39h1234567_2"
    },
    "extra": {
      "recipe-maintainers": [
        "h-vetinari",
        "xhochy",
        "jakirkham",
        "msarahan",
        "patricksnape",
        "zym1010",
        "hajapy",
        "ocefpaf",
        "hmaarrfk",
        "ilya-lavrenov"
      ]
    },
    "outputs": [
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "qt6_py310h1234567_602"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "qt6_py310h1234567_602"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2; assert 'Unknown' not in cv2.videoio_registry.getBackendName(cv2.CAP_V4L)\"",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "headless_py310h1234567_2"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "headless_py310h1234567_2"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2; assert 'Unknown' not in cv2.videoio_registry.getBackendName(cv2.CAP_V4L)\"",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "qt6_py311h1234567_602"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "qt6_py311h1234567_602"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2; assert 'Unknown' not in cv2.videoio_registry.getBackendName(cv2.CAP_V4L)\"",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "headless_py311h1234567_2"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "headless_py311h1234567_2"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2; assert 'Unknown' not in cv2.videoio_registry.getBackendName(cv2.CAP_V4L)\"",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "qt6_py312h1234567_602"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "qt6_py312h1234567_602"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2; assert 'Unknown' not in cv2.videoio_registry.getBackendName(cv2.CAP_V4L)\"",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "headless_py312h1234567_2"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "headless_py312h1234567_2"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2; assert 'Unknown' not in cv2.videoio_registry.getBackendName(cv2.CAP_V4L)\"",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "qt6_py313h1234567_602"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "qt6_py313h1234567_602"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2; assert 'Unknown' not in cv2.videoio_registry.getBackendName(cv2.CAP_V4L)\"",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "headless_py313h1234567_2"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "headless_py313h1234567_2"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2; assert 'Unknown' not in cv2.videoio_registry.getBackendName(cv2.CAP_V4L)\"",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "qt6_py39h1234567_602"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "qt6_py39h1234567_602"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2; assert 'Unknown' not in cv2.videoio_registry.getBackendName(cv2.CAP_V4L)\"",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "headless_py39h1234567_2"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "headless_py39h1234567_2"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2; assert 'Unknown' not in cv2.videoio_registry.getBackendName(cv2.CAP_V4L)\"",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "qt6_py310h1234567_602"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "qt6_py310h1234567_602"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2; assert 'Unknown' not in cv2.videoio_registry.getBackendName(cv2.CAP_V4L)\"",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "headless_py310h1234567_2"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "headless_py310h1234567_2"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2; assert 'Unknown' not in cv2.videoio_registry.getBackendName(cv2.CAP_V4L)\"",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "qt6_py311h1234567_602"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "qt6_py311h1234567_602"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2; assert 'Unknown' not in cv2.videoio_registry.getBackendName(cv2.CAP_V4L)\"",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "headless_py311h1234567_2"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "headless_py311h1234567_2"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2; assert 'Unknown' not in cv2.videoio_registry.getBackendName(cv2.CAP_V4L)\"",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "qt6_py312h1234567_602"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "qt6_py312h1234567_602"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2; assert 'Unknown' not in cv2.videoio_registry.getBackendName(cv2.CAP_V4L)\"",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "headless_py312h1234567_2"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "headless_py312h1234567_2"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2; assert 'Unknown' not in cv2.videoio_registry.getBackendName(cv2.CAP_V4L)\"",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "qt6_py313h1234567_602"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "qt6_py313h1234567_602"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2; assert 'Unknown' not in cv2.videoio_registry.getBackendName(cv2.CAP_V4L)\"",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "headless_py313h1234567_2"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "headless_py313h1234567_2"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2; assert 'Unknown' not in cv2.videoio_registry.getBackendName(cv2.CAP_V4L)\"",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "qt6_py39h1234567_602"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "qt6_py39h1234567_602"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2; assert 'Unknown' not in cv2.videoio_registry.getBackendName(cv2.CAP_V4L)\"",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "headless_py39h1234567_2"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "headless_py39h1234567_2"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2; assert 'Unknown' not in cv2.videoio_registry.getBackendName(cv2.CAP_V4L)\"",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "headless_py310h1234567_2"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "headless_py310h1234567_2"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2; assert 'Unknown' not in cv2.videoio_registry.getBackendName(cv2.CAP_V4L)\"",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "headless_py311h1234567_2"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "headless_py311h1234567_2"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2; assert 'Unknown' not in cv2.videoio_registry.getBackendName(cv2.CAP_V4L)\"",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "headless_py312h1234567_2"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "headless_py312h1234567_2"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2; assert 'Unknown' not in cv2.videoio_registry.getBackendName(cv2.CAP_V4L)\"",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "headless_py313h1234567_2"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "headless_py313h1234567_2"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2; assert 'Unknown' not in cv2.videoio_registry.getBackendName(cv2.CAP_V4L)\"",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "headless_py39h1234567_2"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "headless_py39h1234567_2"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2; assert 'Unknown' not in cv2.videoio_registry.getBackendName(cv2.CAP_V4L)\"",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "qt6_py310h1234567_602"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "qt6_py310h1234567_602"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "headless_py310h1234567_2"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "headless_py310h1234567_2"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "qt6_py311h1234567_602"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "qt6_py311h1234567_602"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "headless_py311h1234567_2"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "headless_py311h1234567_2"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "qt6_py312h1234567_602"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "qt6_py312h1234567_602"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "headless_py312h1234567_2"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "headless_py312h1234567_2"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "qt6_py313h1234567_602"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "qt6_py313h1234567_602"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "headless_py313h1234567_2"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "headless_py313h1234567_2"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "qt6_py39h1234567_602"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "qt6_py39h1234567_602"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "headless_py39h1234567_2"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "headless_py39h1234567_2"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "qt6_py310h1234567_602"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "qt6_py310h1234567_602"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "headless_py310h1234567_2"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "headless_py310h1234567_2"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "qt6_py311h1234567_602"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "qt6_py311h1234567_602"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "headless_py311h1234567_2"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "headless_py311h1234567_2"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "qt6_py312h1234567_602"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "qt6_py312h1234567_602"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "headless_py312h1234567_2"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "headless_py312h1234567_2"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "qt6_py313h1234567_602"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "qt6_py313h1234567_602"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "headless_py313h1234567_2"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "headless_py313h1234567_2"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "qt6_py39h1234567_602"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "qt6_py39h1234567_602"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "headless_py39h1234567_2"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "headless_py39h1234567_2"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "qt6_py310h1234567_602"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "qt6_py310h1234567_602"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "headless_py310h1234567_2"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "headless_py310h1234567_2"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "qt6_py311h1234567_602"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "qt6_py311h1234567_602"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "headless_py311h1234567_2"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "headless_py311h1234567_2"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "qt6_py312h1234567_602"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "qt6_py312h1234567_602"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "headless_py312h1234567_2"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "headless_py312h1234567_2"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "qt6_py313h1234567_602"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "qt6_py313h1234567_602"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "headless_py313h1234567_2"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "headless_py313h1234567_2"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "qt6_py39h1234567_602"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "qt6_py39h1234567_602"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "headless_py39h1234567_2"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "headless_py39h1234567_2"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      }
    ],
    "package": {
      "name": "libopencv",
      "version": "4.12.0"
    },
    "requirements": {
      "build": [
        "pkg-config",
        "cmake",
        "ninja",
        "libgomp",
        "c_stdlib_stub",
        "c_compiler_stub",
        "cxx_compiler_stub"
      ],
      "host": [
        "libgl-devel",
        "libegl-devel",
        "python",
        "numpy",
        "eigen",
        "ffmpeg 7 lgpl_*",
        "freetype",
        "harfbuzz",
        "gettext",
        "glib",
        "hdf5",
        "hdf5 * nompi*",
        "jasper",
        "libavif",
        "libcblas",
        "libiconv",
        "libjpeg-turbo",
        "liblapack",
        "liblapacke",
        "libpng",
        "libprotobuf",
        "libtiff",
        "libwebp",
        "openexr",
        "imath",
        "qt6-main",
        "zlib",
        "libopenvino-dev",
        "expat"
      ]
    },
    "schema_version": 0,
    "source": [
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      }
    ],
    "test": {
      "commands": [
        "OPENCV_FLAGS=\"`pkg-config --cflags opencv4`\"",
        "$CXX -std=c++11 $RECIPE_DIR/test.cpp ${OPENCV_FLAGS} -o test",
        "if [[ $(./test) != $PKG_VERSION ]]; then exit 1 ; fi",
        "echo Testing for presence of alphamat",
        "test -f $PREFIX/lib/libopencv_alphamat${SHLIB_EXT}",
        "echo Found                   alphamat",
        "echo Testing for presence of aruco",
        "test -f $PREFIX/lib/libopencv_aruco${SHLIB_EXT}",
        "echo Found                   aruco",
        "echo Testing for presence of bgsegm",
        "test -f $PREFIX/lib/libopencv_bgsegm${SHLIB_EXT}",
        "echo Found                   bgsegm",
        "echo Testing for presence of calib3d",
        "test -f $PREFIX/lib/libopencv_calib3d${SHLIB_EXT}",
        "echo Found                   calib3d",
        "echo Testing for presence of ccalib",
        "test -f $PREFIX/lib/libopencv_ccalib${SHLIB_EXT}",
        "echo Found                   ccalib",
        "echo Testing for presence of core",
        "test -f $PREFIX/lib/libopencv_core${SHLIB_EXT}",
        "echo Found                   core",
        "echo Testing for presence of datasets",
        "test -f $PREFIX/lib/libopencv_datasets${SHLIB_EXT}",
        "echo Found                   datasets",
        "echo Testing for presence of dnn",
        "test -f $PREFIX/lib/libopencv_dnn${SHLIB_EXT}",
        "echo Found                   dnn",
        "echo Testing for presence of dnn_objdetect",
        "test -f $PREFIX/lib/libopencv_dnn_objdetect${SHLIB_EXT}",
        "echo Found                   dnn_objdetect",
        "echo Testing for presence of dnn_superres",
        "test -f $PREFIX/lib/libopencv_dnn_superres${SHLIB_EXT}",
        "echo Found                   dnn_superres",
        "echo Testing for presence of dpm",
        "test -f $PREFIX/lib/libopencv_dpm${SHLIB_EXT}",
        "echo Found                   dpm",
        "echo Testing for presence of face",
        "test -f $PREFIX/lib/libopencv_face${SHLIB_EXT}",
        "echo Found                   face",
        "echo Testing for presence of features2d",
        "test -f $PREFIX/lib/libopencv_features2d${SHLIB_EXT}",
        "echo Found                   features2d",
        "echo Testing for presence of flann",
        "test -f $PREFIX/lib/libopencv_flann${SHLIB_EXT}",
        "echo Found                   flann",
        "echo Testing for presence of freetype",
        "test -f $PREFIX/lib/libopencv_freetype${SHLIB_EXT}",
        "echo Found                   freetype",
        "echo Testing for presence of fuzzy",
        "test -f $PREFIX/lib/libopencv_fuzzy${SHLIB_EXT}",
        "echo Found                   fuzzy",
        "echo Testing for presence of gapi",
        "test -f $PREFIX/lib/libopencv_gapi${SHLIB_EXT}",
        "echo Found                   gapi",
        "echo Testing for presence of hfs",
        "test -f $PREFIX/lib/libopencv_hfs${SHLIB_EXT}",
        "echo Found                   hfs",
        "echo Testing for presence of highgui",
        "test -f $PREFIX/lib/libopencv_highgui${SHLIB_EXT}",
        "echo Found                   highgui",
        "echo Testing for presence of img_hash",
        "test -f $PREFIX/lib/libopencv_img_hash${SHLIB_EXT}",
        "echo Found                   img_hash",
        "echo Testing for presence of imgcodecs",
        "test -f $PREFIX/lib/libopencv_imgcodecs${SHLIB_EXT}",
        "echo Found                   imgcodecs",
        "echo Testing for presence of imgproc",
        "test -f $PREFIX/lib/libopencv_imgproc${SHLIB_EXT}",
        "echo Found                   imgproc",
        "echo Testing for presence of intensity_transform",
        "test -f $PREFIX/lib/libopencv_intensity_transform${SHLIB_EXT}",
        "echo Found                   intensity_transform",
        "echo Testing for presence of line_descriptor",
        "test -f $PREFIX/lib/libopencv_line_descriptor${SHLIB_EXT}",
        "echo Found                   line_descriptor",
        "echo Testing for presence of mcc",
        "test -f $PREFIX/lib/libopencv_mcc${SHLIB_EXT}",
        "echo Found                   mcc",
        "echo Testing for presence of ml",
        "test -f $PREFIX/lib/libopencv_ml${SHLIB_EXT}",
        "echo Found                   ml",
        "echo Testing for presence of objdetect",
        "test -f $PREFIX/lib/libopencv_objdetect${SHLIB_EXT}",
        "echo Found                   objdetect",
        "echo Testing for presence of optflow",
        "test -f $PREFIX/lib/libopencv_optflow${SHLIB_EXT}",
        "echo Found                   optflow",
        "echo Testing for presence of phase_unwrapping",
        "test -f $PREFIX/lib/libopencv_phase_unwrapping${SHLIB_EXT}",
        "echo Found                   phase_unwrapping",
        "echo Testing for presence of photo",
        "test -f $PREFIX/lib/libopencv_photo${SHLIB_EXT}",
        "echo Found                   photo",
        "echo Testing for presence of plot",
        "test -f $PREFIX/lib/libopencv_plot${SHLIB_EXT}",
        "echo Found                   plot",
        "echo Testing for presence of quality",
        "test -f $PREFIX/lib/libopencv_quality${SHLIB_EXT}",
        "echo Found                   quality",
        "echo Testing for presence of rapid",
        "test -f $PREFIX/lib/libopencv_rapid${SHLIB_EXT}",
        "echo Found                   rapid",
        "echo Testing for presence of reg",
        "test -f $PREFIX/lib/libopencv_reg${SHLIB_EXT}",
        "echo Found                   reg",
        "echo Testing for presence of rgbd",
        "test -f $PREFIX/lib/libopencv_rgbd${SHLIB_EXT}",
        "echo Found                   rgbd",
        "echo Testing for presence of saliency",
        "test -f $PREFIX/lib/libopencv_saliency${SHLIB_EXT}",
        "echo Found                   saliency",
        "echo Testing for presence of shape",
        "test -f $PREFIX/lib/libopencv_shape${SHLIB_EXT}",
        "echo Found                   shape",
        "echo Testing for presence of stereo",
        "test -f $PREFIX/lib/libopencv_stereo${SHLIB_EXT}",
        "echo Found                   stereo",
        "echo Testing for presence of stitching",
        "test -f $PREFIX/lib/libopencv_stitching${SHLIB_EXT}",
        "echo Found                   stitching",
        "echo Testing for presence of structured_light",
        "test -f $PREFIX/lib/libopencv_structured_light${SHLIB_EXT}",
        "echo Found                   structured_light",
        "echo Testing for presence of superres",
        "test -f $PREFIX/lib/libopencv_superres${SHLIB_EXT}",
        "echo Found                   superres",
        "echo Testing for presence of surface_matching",
        "test -f $PREFIX/lib/libopencv_surface_matching${SHLIB_EXT}",
        "echo Found                   surface_matching",
        "echo Testing for presence of text",
        "test -f $PREFIX/lib/libopencv_text${SHLIB_EXT}",
        "echo Found                   text",
        "echo Testing for presence of tracking",
        "test -f $PREFIX/lib/libopencv_tracking${SHLIB_EXT}",
        "echo Found                   tracking",
        "echo Testing for presence of video",
        "test -f $PREFIX/lib/libopencv_video${SHLIB_EXT}",
        "echo Found                   video",
        "echo Testing for presence of videoio",
        "test -f $PREFIX/lib/libopencv_videoio${SHLIB_EXT}",
        "echo Found                   videoio",
        "echo Testing for presence of videostab",
        "test -f $PREFIX/lib/libopencv_videostab${SHLIB_EXT}",
        "echo Found                   videostab",
        "echo Testing for presence of wechat_qrcode",
        "test -f $PREFIX/lib/libopencv_wechat_qrcode${SHLIB_EXT}",
        "echo Found                   wechat_qrcode",
        "echo Testing for presence of xfeatures2d",
        "test -f $PREFIX/lib/libopencv_xfeatures2d${SHLIB_EXT}",
        "echo Found                   xfeatures2d",
        "echo Testing for presence of ximgproc",
        "test -f $PREFIX/lib/libopencv_ximgproc${SHLIB_EXT}",
        "echo Found                   ximgproc",
        "echo Testing for presence of xobjdetect",
        "test -f $PREFIX/lib/libopencv_xobjdetect${SHLIB_EXT}",
        "echo Found                   xobjdetect",
        "echo Testing for presence of xphoto",
        "test -f $PREFIX/lib/libopencv_xphoto${SHLIB_EXT}",
        "echo Found                   xphoto",
        "test -f $PREFIX/lib/libopencv_bioinspired${SHLIB_EXT}",
        "test -f $PREFIX/lib/libopencv_hdf${SHLIB_EXT}",
        "mkdir -p cmake_build_test && pushd cmake_build_test",
        "cmake -G \"Ninja\" ..",
        "cmake --build . --config Release",
        "popd",
        "export MACOSX_DEPLOYMENT_TARGET=11.0",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_alphamat4120.dll exit 1",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_aruco4120.dll exit 1",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_bgsegm4120.dll exit 1",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_calib3d4120.dll exit 1",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_ccalib4120.dll exit 1",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_core4120.dll exit 1",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_datasets4120.dll exit 1",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_dnn4120.dll exit 1",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_dnn_objdetect4120.dll exit 1",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_dnn_superres4120.dll exit 1",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_dpm4120.dll exit 1",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_face4120.dll exit 1",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_features2d4120.dll exit 1",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_flann4120.dll exit 1",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_freetype4120.dll exit 1",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_fuzzy4120.dll exit 1",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_gapi4120.dll exit 1",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_hfs4120.dll exit 1",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_highgui4120.dll exit 1",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_img_hash4120.dll exit 1",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_imgcodecs4120.dll exit 1",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_imgproc4120.dll exit 1",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_intensity_transform4120.dll exit 1",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_line_descriptor4120.dll exit 1",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_mcc4120.dll exit 1",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_ml4120.dll exit 1",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_objdetect4120.dll exit 1",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_optflow4120.dll exit 1",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_phase_unwrapping4120.dll exit 1",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_photo4120.dll exit 1",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_plot4120.dll exit 1",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_quality4120.dll exit 1",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_rapid4120.dll exit 1",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_reg4120.dll exit 1",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_rgbd4120.dll exit 1",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_saliency4120.dll exit 1",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_shape4120.dll exit 1",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_stereo4120.dll exit 1",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_stitching4120.dll exit 1",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_structured_light4120.dll exit 1",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_superres4120.dll exit 1",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_surface_matching4120.dll exit 1",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_text4120.dll exit 1",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_tracking4120.dll exit 1",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_video4120.dll exit 1",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_videoio4120.dll exit 1",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_videostab4120.dll exit 1",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_wechat_qrcode4120.dll exit 1",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_xfeatures2d4120.dll exit 1",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_ximgproc4120.dll exit 1",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_xobjdetect4120.dll exit 1",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_xphoto4120.dll exit 1"
      ],
      "files": [
        "CMakeLists.txt",
        "test.cpp"
      ],
      "requires": [
        "c_compiler_stub",
        "cxx_compiler_stub",
        "pkg-config",
        "cmake",
        "ninja"
      ]
    }
  },
  "name": "libopencv",
  "osx_64_meta_yaml": {
    "about": {
      "dev_url": "https://github.com/opencv/opencv",
      "doc_url": "https://docs.opencv.org/4.x/",
      "home": "https://opencv.org/",
      "license": "Apache-2.0",
      "license_family": "Apache",
      "license_file": "LICENSE",
      "summary": "Computer vision and machine learning software library."
    },
    "build": {
      "ignore_run_exports_from": [
        "python"
      ],
      "number": "2",
      "run_exports": [
        "libopencv"
      ],
      "string": "headless_py39h1234567_2"
    },
    "extra": {
      "recipe-maintainers": [
        "h-vetinari",
        "xhochy",
        "jakirkham",
        "msarahan",
        "patricksnape",
        "zym1010",
        "hajapy",
        "ocefpaf",
        "hmaarrfk",
        "ilya-lavrenov"
      ]
    },
    "outputs": [
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "qt6_py310h1234567_602"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "qt6_py310h1234567_602"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "headless_py310h1234567_2"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "headless_py310h1234567_2"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "qt6_py311h1234567_602"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "qt6_py311h1234567_602"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "headless_py311h1234567_2"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "headless_py311h1234567_2"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "qt6_py312h1234567_602"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "qt6_py312h1234567_602"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "headless_py312h1234567_2"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "headless_py312h1234567_2"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "qt6_py313h1234567_602"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "qt6_py313h1234567_602"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "headless_py313h1234567_2"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "headless_py313h1234567_2"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "qt6_py39h1234567_602"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "qt6_py39h1234567_602"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "headless_py39h1234567_2"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "headless_py39h1234567_2"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      }
    ],
    "package": {
      "name": "libopencv",
      "version": "4.12.0"
    },
    "requirements": {
      "build": [
        "pkg-config",
        "cmake",
        "ninja",
        "c_stdlib_stub",
        "c_compiler_stub",
        "cxx_compiler_stub"
      ],
      "host": [
        "python",
        "numpy",
        "eigen",
        "ffmpeg 7 lgpl_*",
        "freetype",
        "harfbuzz",
        "gettext",
        "glib",
        "hdf5",
        "hdf5 * nompi*",
        "jasper",
        "libavif",
        "libcblas",
        "libiconv",
        "libjpeg-turbo",
        "liblapack",
        "liblapacke",
        "libpng",
        "libprotobuf",
        "libtiff",
        "libwebp",
        "openexr",
        "imath",
        "qt6-main",
        "zlib",
        "libopenvino-dev",
        "expat"
      ]
    },
    "schema_version": 0,
    "source": [
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      }
    ],
    "test": {
      "commands": [
        "export MACOSX_DEPLOYMENT_TARGET=11.0",
        "OPENCV_FLAGS=\"`pkg-config --cflags opencv4`\"",
        "$CXX -std=c++11 $RECIPE_DIR/test.cpp ${OPENCV_FLAGS} -o test",
        "if [[ $(./test) != $PKG_VERSION ]]; then exit 1 ; fi",
        "echo Testing for presence of alphamat",
        "test -f $PREFIX/lib/libopencv_alphamat${SHLIB_EXT}",
        "echo Found                   alphamat",
        "echo Testing for presence of aruco",
        "test -f $PREFIX/lib/libopencv_aruco${SHLIB_EXT}",
        "echo Found                   aruco",
        "echo Testing for presence of bgsegm",
        "test -f $PREFIX/lib/libopencv_bgsegm${SHLIB_EXT}",
        "echo Found                   bgsegm",
        "echo Testing for presence of calib3d",
        "test -f $PREFIX/lib/libopencv_calib3d${SHLIB_EXT}",
        "echo Found                   calib3d",
        "echo Testing for presence of ccalib",
        "test -f $PREFIX/lib/libopencv_ccalib${SHLIB_EXT}",
        "echo Found                   ccalib",
        "echo Testing for presence of core",
        "test -f $PREFIX/lib/libopencv_core${SHLIB_EXT}",
        "echo Found                   core",
        "echo Testing for presence of datasets",
        "test -f $PREFIX/lib/libopencv_datasets${SHLIB_EXT}",
        "echo Found                   datasets",
        "echo Testing for presence of dnn",
        "test -f $PREFIX/lib/libopencv_dnn${SHLIB_EXT}",
        "echo Found                   dnn",
        "echo Testing for presence of dnn_objdetect",
        "test -f $PREFIX/lib/libopencv_dnn_objdetect${SHLIB_EXT}",
        "echo Found                   dnn_objdetect",
        "echo Testing for presence of dnn_superres",
        "test -f $PREFIX/lib/libopencv_dnn_superres${SHLIB_EXT}",
        "echo Found                   dnn_superres",
        "echo Testing for presence of dpm",
        "test -f $PREFIX/lib/libopencv_dpm${SHLIB_EXT}",
        "echo Found                   dpm",
        "echo Testing for presence of face",
        "test -f $PREFIX/lib/libopencv_face${SHLIB_EXT}",
        "echo Found                   face",
        "echo Testing for presence of features2d",
        "test -f $PREFIX/lib/libopencv_features2d${SHLIB_EXT}",
        "echo Found                   features2d",
        "echo Testing for presence of flann",
        "test -f $PREFIX/lib/libopencv_flann${SHLIB_EXT}",
        "echo Found                   flann",
        "echo Testing for presence of freetype",
        "test -f $PREFIX/lib/libopencv_freetype${SHLIB_EXT}",
        "echo Found                   freetype",
        "echo Testing for presence of fuzzy",
        "test -f $PREFIX/lib/libopencv_fuzzy${SHLIB_EXT}",
        "echo Found                   fuzzy",
        "echo Testing for presence of gapi",
        "test -f $PREFIX/lib/libopencv_gapi${SHLIB_EXT}",
        "echo Found                   gapi",
        "echo Testing for presence of hfs",
        "test -f $PREFIX/lib/libopencv_hfs${SHLIB_EXT}",
        "echo Found                   hfs",
        "echo Testing for presence of highgui",
        "test -f $PREFIX/lib/libopencv_highgui${SHLIB_EXT}",
        "echo Found                   highgui",
        "echo Testing for presence of img_hash",
        "test -f $PREFIX/lib/libopencv_img_hash${SHLIB_EXT}",
        "echo Found                   img_hash",
        "echo Testing for presence of imgcodecs",
        "test -f $PREFIX/lib/libopencv_imgcodecs${SHLIB_EXT}",
        "echo Found                   imgcodecs",
        "echo Testing for presence of imgproc",
        "test -f $PREFIX/lib/libopencv_imgproc${SHLIB_EXT}",
        "echo Found                   imgproc",
        "echo Testing for presence of intensity_transform",
        "test -f $PREFIX/lib/libopencv_intensity_transform${SHLIB_EXT}",
        "echo Found                   intensity_transform",
        "echo Testing for presence of line_descriptor",
        "test -f $PREFIX/lib/libopencv_line_descriptor${SHLIB_EXT}",
        "echo Found                   line_descriptor",
        "echo Testing for presence of mcc",
        "test -f $PREFIX/lib/libopencv_mcc${SHLIB_EXT}",
        "echo Found                   mcc",
        "echo Testing for presence of ml",
        "test -f $PREFIX/lib/libopencv_ml${SHLIB_EXT}",
        "echo Found                   ml",
        "echo Testing for presence of objdetect",
        "test -f $PREFIX/lib/libopencv_objdetect${SHLIB_EXT}",
        "echo Found                   objdetect",
        "echo Testing for presence of optflow",
        "test -f $PREFIX/lib/libopencv_optflow${SHLIB_EXT}",
        "echo Found                   optflow",
        "echo Testing for presence of phase_unwrapping",
        "test -f $PREFIX/lib/libopencv_phase_unwrapping${SHLIB_EXT}",
        "echo Found                   phase_unwrapping",
        "echo Testing for presence of photo",
        "test -f $PREFIX/lib/libopencv_photo${SHLIB_EXT}",
        "echo Found                   photo",
        "echo Testing for presence of plot",
        "test -f $PREFIX/lib/libopencv_plot${SHLIB_EXT}",
        "echo Found                   plot",
        "echo Testing for presence of quality",
        "test -f $PREFIX/lib/libopencv_quality${SHLIB_EXT}",
        "echo Found                   quality",
        "echo Testing for presence of rapid",
        "test -f $PREFIX/lib/libopencv_rapid${SHLIB_EXT}",
        "echo Found                   rapid",
        "echo Testing for presence of reg",
        "test -f $PREFIX/lib/libopencv_reg${SHLIB_EXT}",
        "echo Found                   reg",
        "echo Testing for presence of rgbd",
        "test -f $PREFIX/lib/libopencv_rgbd${SHLIB_EXT}",
        "echo Found                   rgbd",
        "echo Testing for presence of saliency",
        "test -f $PREFIX/lib/libopencv_saliency${SHLIB_EXT}",
        "echo Found                   saliency",
        "echo Testing for presence of shape",
        "test -f $PREFIX/lib/libopencv_shape${SHLIB_EXT}",
        "echo Found                   shape",
        "echo Testing for presence of stereo",
        "test -f $PREFIX/lib/libopencv_stereo${SHLIB_EXT}",
        "echo Found                   stereo",
        "echo Testing for presence of stitching",
        "test -f $PREFIX/lib/libopencv_stitching${SHLIB_EXT}",
        "echo Found                   stitching",
        "echo Testing for presence of structured_light",
        "test -f $PREFIX/lib/libopencv_structured_light${SHLIB_EXT}",
        "echo Found                   structured_light",
        "echo Testing for presence of superres",
        "test -f $PREFIX/lib/libopencv_superres${SHLIB_EXT}",
        "echo Found                   superres",
        "echo Testing for presence of surface_matching",
        "test -f $PREFIX/lib/libopencv_surface_matching${SHLIB_EXT}",
        "echo Found                   surface_matching",
        "echo Testing for presence of text",
        "test -f $PREFIX/lib/libopencv_text${SHLIB_EXT}",
        "echo Found                   text",
        "echo Testing for presence of tracking",
        "test -f $PREFIX/lib/libopencv_tracking${SHLIB_EXT}",
        "echo Found                   tracking",
        "echo Testing for presence of video",
        "test -f $PREFIX/lib/libopencv_video${SHLIB_EXT}",
        "echo Found                   video",
        "echo Testing for presence of videoio",
        "test -f $PREFIX/lib/libopencv_videoio${SHLIB_EXT}",
        "echo Found                   videoio",
        "echo Testing for presence of videostab",
        "test -f $PREFIX/lib/libopencv_videostab${SHLIB_EXT}",
        "echo Found                   videostab",
        "echo Testing for presence of wechat_qrcode",
        "test -f $PREFIX/lib/libopencv_wechat_qrcode${SHLIB_EXT}",
        "echo Found                   wechat_qrcode",
        "echo Testing for presence of xfeatures2d",
        "test -f $PREFIX/lib/libopencv_xfeatures2d${SHLIB_EXT}",
        "echo Found                   xfeatures2d",
        "echo Testing for presence of ximgproc",
        "test -f $PREFIX/lib/libopencv_ximgproc${SHLIB_EXT}",
        "echo Found                   ximgproc",
        "echo Testing for presence of xobjdetect",
        "test -f $PREFIX/lib/libopencv_xobjdetect${SHLIB_EXT}",
        "echo Found                   xobjdetect",
        "echo Testing for presence of xphoto",
        "test -f $PREFIX/lib/libopencv_xphoto${SHLIB_EXT}",
        "echo Found                   xphoto",
        "test -f $PREFIX/lib/libopencv_bioinspired${SHLIB_EXT}",
        "test -f $PREFIX/lib/libopencv_hdf${SHLIB_EXT}",
        "mkdir -p cmake_build_test && pushd cmake_build_test",
        "cmake -G \"Ninja\" ..",
        "cmake --build . --config Release",
        "popd"
      ],
      "files": [
        "CMakeLists.txt",
        "test.cpp"
      ],
      "requires": [
        "c_compiler_stub",
        "cxx_compiler_stub",
        "pkg-config",
        "cmake",
        "ninja"
      ]
    }
  },
  "osx_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "ninja",
        "pkg-config"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "eigen",
        "expat",
        "ffmpeg",
        "freetype",
        "gettext",
        "glib",
        "harfbuzz",
        "hdf5",
        "imath",
        "jasper",
        "libavif",
        "libcblas",
        "libiconv",
        "libjpeg-turbo",
        "liblapack",
        "liblapacke",
        "libopenvino-dev",
        "libpng",
        "libprotobuf",
        "libtiff",
        "libwebp",
        "numpy",
        "openexr",
        "python",
        "qt6-main",
        "zlib"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "libopencv",
        "py-opencv",
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "cmake",
        "cxx_compiler_stub",
        "liblapack",
        "ninja",
        "pip",
        "pkg-config"
      ]
    }
  },
  "osx_arm64_meta_yaml": {
    "about": {
      "dev_url": "https://github.com/opencv/opencv",
      "doc_url": "https://docs.opencv.org/4.x/",
      "home": "https://opencv.org/",
      "license": "Apache-2.0",
      "license_family": "Apache",
      "license_file": "LICENSE",
      "summary": "Computer vision and machine learning software library."
    },
    "build": {
      "ignore_run_exports_from": [
        "python"
      ],
      "number": "2",
      "run_exports": [
        "libopencv"
      ],
      "string": "headless_py39h1234567_2"
    },
    "extra": {
      "recipe-maintainers": [
        "h-vetinari",
        "xhochy",
        "jakirkham",
        "msarahan",
        "patricksnape",
        "zym1010",
        "hajapy",
        "ocefpaf",
        "hmaarrfk",
        "ilya-lavrenov"
      ]
    },
    "outputs": [
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "qt6_py310h1234567_602"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "qt6_py310h1234567_602"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "headless_py310h1234567_2"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "headless_py310h1234567_2"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "qt6_py311h1234567_602"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "qt6_py311h1234567_602"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "headless_py311h1234567_2"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "headless_py311h1234567_2"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "qt6_py312h1234567_602"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "qt6_py312h1234567_602"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "headless_py312h1234567_2"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "headless_py312h1234567_2"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "qt6_py313h1234567_602"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "qt6_py313h1234567_602"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "headless_py313h1234567_2"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "headless_py313h1234567_2"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "qt6_py39h1234567_602"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "qt6_py39h1234567_602"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "headless_py39h1234567_2"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "headless_py39h1234567_2"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list",
            "test $(pip list | grep \"opencv-python \" | wc -l) -eq 1",
            "test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      }
    ],
    "package": {
      "name": "libopencv",
      "version": "4.12.0"
    },
    "requirements": {
      "build": [
        "pkg-config",
        "cmake",
        "ninja",
        "c_stdlib_stub",
        "c_compiler_stub",
        "cxx_compiler_stub"
      ],
      "host": [
        "python",
        "numpy",
        "eigen",
        "ffmpeg 7 lgpl_*",
        "freetype",
        "harfbuzz",
        "gettext",
        "glib",
        "hdf5",
        "hdf5 * nompi*",
        "jasper",
        "libavif",
        "libcblas",
        "libiconv",
        "libjpeg-turbo",
        "liblapack",
        "liblapacke",
        "libpng",
        "libprotobuf",
        "libtiff",
        "libwebp",
        "openexr",
        "imath",
        "qt6-main",
        "zlib",
        "libopenvino-dev",
        "expat"
      ]
    },
    "schema_version": 0,
    "source": [
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      }
    ],
    "test": {
      "commands": [
        "export MACOSX_DEPLOYMENT_TARGET=11.0",
        "OPENCV_FLAGS=\"`pkg-config --cflags opencv4`\"",
        "$CXX -std=c++11 $RECIPE_DIR/test.cpp ${OPENCV_FLAGS} -o test",
        "if [[ $(./test) != $PKG_VERSION ]]; then exit 1 ; fi",
        "echo Testing for presence of alphamat",
        "test -f $PREFIX/lib/libopencv_alphamat${SHLIB_EXT}",
        "echo Found                   alphamat",
        "echo Testing for presence of aruco",
        "test -f $PREFIX/lib/libopencv_aruco${SHLIB_EXT}",
        "echo Found                   aruco",
        "echo Testing for presence of bgsegm",
        "test -f $PREFIX/lib/libopencv_bgsegm${SHLIB_EXT}",
        "echo Found                   bgsegm",
        "echo Testing for presence of calib3d",
        "test -f $PREFIX/lib/libopencv_calib3d${SHLIB_EXT}",
        "echo Found                   calib3d",
        "echo Testing for presence of ccalib",
        "test -f $PREFIX/lib/libopencv_ccalib${SHLIB_EXT}",
        "echo Found                   ccalib",
        "echo Testing for presence of core",
        "test -f $PREFIX/lib/libopencv_core${SHLIB_EXT}",
        "echo Found                   core",
        "echo Testing for presence of datasets",
        "test -f $PREFIX/lib/libopencv_datasets${SHLIB_EXT}",
        "echo Found                   datasets",
        "echo Testing for presence of dnn",
        "test -f $PREFIX/lib/libopencv_dnn${SHLIB_EXT}",
        "echo Found                   dnn",
        "echo Testing for presence of dnn_objdetect",
        "test -f $PREFIX/lib/libopencv_dnn_objdetect${SHLIB_EXT}",
        "echo Found                   dnn_objdetect",
        "echo Testing for presence of dnn_superres",
        "test -f $PREFIX/lib/libopencv_dnn_superres${SHLIB_EXT}",
        "echo Found                   dnn_superres",
        "echo Testing for presence of dpm",
        "test -f $PREFIX/lib/libopencv_dpm${SHLIB_EXT}",
        "echo Found                   dpm",
        "echo Testing for presence of face",
        "test -f $PREFIX/lib/libopencv_face${SHLIB_EXT}",
        "echo Found                   face",
        "echo Testing for presence of features2d",
        "test -f $PREFIX/lib/libopencv_features2d${SHLIB_EXT}",
        "echo Found                   features2d",
        "echo Testing for presence of flann",
        "test -f $PREFIX/lib/libopencv_flann${SHLIB_EXT}",
        "echo Found                   flann",
        "echo Testing for presence of freetype",
        "test -f $PREFIX/lib/libopencv_freetype${SHLIB_EXT}",
        "echo Found                   freetype",
        "echo Testing for presence of fuzzy",
        "test -f $PREFIX/lib/libopencv_fuzzy${SHLIB_EXT}",
        "echo Found                   fuzzy",
        "echo Testing for presence of gapi",
        "test -f $PREFIX/lib/libopencv_gapi${SHLIB_EXT}",
        "echo Found                   gapi",
        "echo Testing for presence of hfs",
        "test -f $PREFIX/lib/libopencv_hfs${SHLIB_EXT}",
        "echo Found                   hfs",
        "echo Testing for presence of highgui",
        "test -f $PREFIX/lib/libopencv_highgui${SHLIB_EXT}",
        "echo Found                   highgui",
        "echo Testing for presence of img_hash",
        "test -f $PREFIX/lib/libopencv_img_hash${SHLIB_EXT}",
        "echo Found                   img_hash",
        "echo Testing for presence of imgcodecs",
        "test -f $PREFIX/lib/libopencv_imgcodecs${SHLIB_EXT}",
        "echo Found                   imgcodecs",
        "echo Testing for presence of imgproc",
        "test -f $PREFIX/lib/libopencv_imgproc${SHLIB_EXT}",
        "echo Found                   imgproc",
        "echo Testing for presence of intensity_transform",
        "test -f $PREFIX/lib/libopencv_intensity_transform${SHLIB_EXT}",
        "echo Found                   intensity_transform",
        "echo Testing for presence of line_descriptor",
        "test -f $PREFIX/lib/libopencv_line_descriptor${SHLIB_EXT}",
        "echo Found                   line_descriptor",
        "echo Testing for presence of mcc",
        "test -f $PREFIX/lib/libopencv_mcc${SHLIB_EXT}",
        "echo Found                   mcc",
        "echo Testing for presence of ml",
        "test -f $PREFIX/lib/libopencv_ml${SHLIB_EXT}",
        "echo Found                   ml",
        "echo Testing for presence of objdetect",
        "test -f $PREFIX/lib/libopencv_objdetect${SHLIB_EXT}",
        "echo Found                   objdetect",
        "echo Testing for presence of optflow",
        "test -f $PREFIX/lib/libopencv_optflow${SHLIB_EXT}",
        "echo Found                   optflow",
        "echo Testing for presence of phase_unwrapping",
        "test -f $PREFIX/lib/libopencv_phase_unwrapping${SHLIB_EXT}",
        "echo Found                   phase_unwrapping",
        "echo Testing for presence of photo",
        "test -f $PREFIX/lib/libopencv_photo${SHLIB_EXT}",
        "echo Found                   photo",
        "echo Testing for presence of plot",
        "test -f $PREFIX/lib/libopencv_plot${SHLIB_EXT}",
        "echo Found                   plot",
        "echo Testing for presence of quality",
        "test -f $PREFIX/lib/libopencv_quality${SHLIB_EXT}",
        "echo Found                   quality",
        "echo Testing for presence of rapid",
        "test -f $PREFIX/lib/libopencv_rapid${SHLIB_EXT}",
        "echo Found                   rapid",
        "echo Testing for presence of reg",
        "test -f $PREFIX/lib/libopencv_reg${SHLIB_EXT}",
        "echo Found                   reg",
        "echo Testing for presence of rgbd",
        "test -f $PREFIX/lib/libopencv_rgbd${SHLIB_EXT}",
        "echo Found                   rgbd",
        "echo Testing for presence of saliency",
        "test -f $PREFIX/lib/libopencv_saliency${SHLIB_EXT}",
        "echo Found                   saliency",
        "echo Testing for presence of shape",
        "test -f $PREFIX/lib/libopencv_shape${SHLIB_EXT}",
        "echo Found                   shape",
        "echo Testing for presence of stereo",
        "test -f $PREFIX/lib/libopencv_stereo${SHLIB_EXT}",
        "echo Found                   stereo",
        "echo Testing for presence of stitching",
        "test -f $PREFIX/lib/libopencv_stitching${SHLIB_EXT}",
        "echo Found                   stitching",
        "echo Testing for presence of structured_light",
        "test -f $PREFIX/lib/libopencv_structured_light${SHLIB_EXT}",
        "echo Found                   structured_light",
        "echo Testing for presence of superres",
        "test -f $PREFIX/lib/libopencv_superres${SHLIB_EXT}",
        "echo Found                   superres",
        "echo Testing for presence of surface_matching",
        "test -f $PREFIX/lib/libopencv_surface_matching${SHLIB_EXT}",
        "echo Found                   surface_matching",
        "echo Testing for presence of text",
        "test -f $PREFIX/lib/libopencv_text${SHLIB_EXT}",
        "echo Found                   text",
        "echo Testing for presence of tracking",
        "test -f $PREFIX/lib/libopencv_tracking${SHLIB_EXT}",
        "echo Found                   tracking",
        "echo Testing for presence of video",
        "test -f $PREFIX/lib/libopencv_video${SHLIB_EXT}",
        "echo Found                   video",
        "echo Testing for presence of videoio",
        "test -f $PREFIX/lib/libopencv_videoio${SHLIB_EXT}",
        "echo Found                   videoio",
        "echo Testing for presence of videostab",
        "test -f $PREFIX/lib/libopencv_videostab${SHLIB_EXT}",
        "echo Found                   videostab",
        "echo Testing for presence of wechat_qrcode",
        "test -f $PREFIX/lib/libopencv_wechat_qrcode${SHLIB_EXT}",
        "echo Found                   wechat_qrcode",
        "echo Testing for presence of xfeatures2d",
        "test -f $PREFIX/lib/libopencv_xfeatures2d${SHLIB_EXT}",
        "echo Found                   xfeatures2d",
        "echo Testing for presence of ximgproc",
        "test -f $PREFIX/lib/libopencv_ximgproc${SHLIB_EXT}",
        "echo Found                   ximgproc",
        "echo Testing for presence of xobjdetect",
        "test -f $PREFIX/lib/libopencv_xobjdetect${SHLIB_EXT}",
        "echo Found                   xobjdetect",
        "echo Testing for presence of xphoto",
        "test -f $PREFIX/lib/libopencv_xphoto${SHLIB_EXT}",
        "echo Found                   xphoto",
        "test -f $PREFIX/lib/libopencv_bioinspired${SHLIB_EXT}",
        "test -f $PREFIX/lib/libopencv_hdf${SHLIB_EXT}",
        "mkdir -p cmake_build_test && pushd cmake_build_test",
        "cmake -G \"Ninja\" ..",
        "cmake --build . --config Release",
        "popd"
      ],
      "files": [
        "CMakeLists.txt",
        "test.cpp"
      ],
      "requires": [
        "c_compiler_stub",
        "cxx_compiler_stub",
        "pkg-config",
        "cmake",
        "ninja"
      ]
    }
  },
  "osx_arm64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "ninja",
        "pkg-config"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "eigen",
        "expat",
        "ffmpeg",
        "freetype",
        "gettext",
        "glib",
        "harfbuzz",
        "hdf5",
        "imath",
        "jasper",
        "libavif",
        "libcblas",
        "libiconv",
        "libjpeg-turbo",
        "liblapack",
        "liblapacke",
        "libopenvino-dev",
        "libpng",
        "libprotobuf",
        "libtiff",
        "libwebp",
        "numpy",
        "openexr",
        "python",
        "qt6-main",
        "zlib"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "libopencv",
        "py-opencv",
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "cmake",
        "cxx_compiler_stub",
        "liblapack",
        "ninja",
        "pip",
        "pkg-config"
      ]
    }
  },
  "outputs_names": {
    "__set__": true,
    "elements": [
      "libopencv",
      "opencv",
      "py-opencv"
    ]
  },
  "parsing_error": false,
  "platforms": [
    "linux_64",
    "linux_aarch64",
    "linux_ppc64le",
    "osx_64",
    "osx_arm64",
    "win_64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/opencv.json"
  },
  "raw_meta_yaml": "# This recipe creates 3 packages\n# libopencv, py-opencv, opencv\n#\n# libopencv actually contains all the files, including the site-packages\n# file needed to run opencv with python.\n#     opencv-dnn seems to change on every patch version, therefore, we pin\n#     to the patch version x.x.x\n#\n# py-opencv is a meta package that constrains the python dependencies\n#     This one is pinned to the minor version. x.x\n#\n# opencv is a backward compatible package, with no pinnings\n#\n# This approach is different than the one in defaults. Default's package\n# seperates well the files generated with python dependencies, from those\n# generated without. Unfortunately, this isn't entirely supported by\n# upstream. Their hacks are quite elaborate, making it seem difficult to\n# maintain as opencv has been changing their build system recently.\n#\n# By putting all the generated files in 1 package, this makes the build process\n# much easier, at the expense of a few MBs in the 'lib' package.\n{% set version = \"4.12.0\" %}\n{% set major_version = version.split('.')[0] %}\n{% set PY_VER_MAJOR = PY_VER.split('.')[0] %}\n{% set PY_VER_MINOR = PY_VER.split('.')[1] %}\n\n{% set build = 2 %}\n\n# Allow the qt version to be easily read from the build number 100's value.\n# This used to be more important when we supported both qt5 and qt6\n{% if qt_version == \"6\" %}\n{% set build = build + 600 %}\n{% endif %}\n\npackage:\n  name: libopencv\n  version: {{ version }}\n\nsource:\n  - url: https://github.com/opencv/opencv/archive/{{ version }}.tar.gz\n    fn: opencv-{{ version }}.tar.gz\n    sha256: 44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d\n    patches:\n      # backport https://github.com/opencv/opencv/pull/21611 (unmerged as of 06/2023)\n      - patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch\n      - patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch\n      - patches_opencv/0002-delete-lines-that-download-opencv.patch\n      - patches_opencv/0003-find-pkgconfig-on-windows.patch\n      - patches_opencv/0004-fix-detection-for-protobuf-23.x.patch\n  - url: https://github.com/opencv/opencv_contrib/archive/{{ version }}.tar.gz\n    fn: opencv_contrib-{{ version }}.tar.gz\n    sha256: 4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e\n    folder: opencv_contrib\n    patches:\n      # Allow attempt to find HDF5 on cross-compile\n      - patches_opencv_contrib/cmake_hdf5_xpile.patch\n  - fn: test.avi\n    url: https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi\n    sha256: 78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310\n\nbuild:\n  number: {{ build }}\n  string: headless_py{{ PY_VER_MAJOR }}{{ PY_VER_MINOR }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [qt_version == \"none\"]\n  string: qt{{ qt_version }}_py{{ PY_VER_MAJOR }}{{ PY_VER_MINOR }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [qt_version != \"none\"]\n  run_exports:\n    # https://abi-laboratory.pro/index.php?view=timeline&l=opencv\n    # Things seem to change every patch versions, mostly the dnn module\n    - {{ pin_subpackage('libopencv', max_pin='x.x.x') }}\n  ignore_run_exports_from:\n    - python\n\nrequirements:\n  build:\n    - python                                 # [build_platform != target_platform]\n    - cross-python_{{ target_platform }}     # [build_platform != target_platform]\n    - numpy                                  # [build_platform != target_platform]\n    - libprotobuf                            # [build_platform != target_platform]\n    - qt6-main                               # [build_platform != target_platform and qt_version == 6]\n    # pkg-config is required to find ffpmeg\n    - pkg-config\n    - cmake\n    - ninja\n    - libgomp                        # [linux]\n    # ICE when enabling this\n    # - llvm-openmp                    # [osx]\n    - {{ stdlib('c') }}\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n  host:\n    - libgl-devel                        # [linux and (qt_version == 5 or qt_version == 6)]\n    - libegl-devel                       # [linux and (qt_version == 5 or qt_version == 6)]\n    - python\n    - numpy\n    - eigen\n    # Specify lgpl version of ffmpeg so that there are\n    # no quesitons about the license of the resulting opencv\n    # binary\n    - ffmpeg {{ ffmpeg }} lgpl_*\n    - freetype\n    # harfbuzz, glib, gettext are both needed for freetype support\n    - harfbuzz\n    - gettext\n    - glib\n    - hdf5\n    # Ensure that we build with nompi variant\n    # it provides downstream packages with the most flexibility\n    - hdf5 * nompi*\n    - jasper\n    - libavif\n    - libcblas\n    - libiconv                       # [unix]\n    - libjpeg-turbo\n    - liblapack\n    - liblapacke\n    - libpng\n    - libprotobuf\n    - libtiff\n    - libwebp\n    - openexr\n    # While imath doesn't trigger overlinking warnings\n    # It does seem to be linked to opencv - libopencv_imgcodecs\n    # https://github.com/conda-forge/opencv-feedstock/issues/486\n    - imath\n    - qt6-main                       # [qt_version == 6]\n    - zlib\n    - libopenvino-dev                # [not ppc64le]\n    # Why do I need expat here??? At the very least it helps find FFMPEG\n    # And start the compilation on windows\n    - expat\n\ntest:\n  requires:\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n    - pkg-config                      # [not win]\n    # Test with the two currently supported lapack implementatons\n    # One test done on different versions of python on each platform\n    - liblapack * *openblas           # [py==36]\n    - liblapack * *mkl                # [py==37 and linux64]\n    - cmake\n    - ninja\n  files:\n    - CMakeLists.txt\n    - test.cpp\n  commands:\n    # Verify dynamic libraries on all systems\n    {% set win_ver_lib = version|replace(\".\", \"\") %}\n    # The bot doesn't support multiline jinja, so use\n    # single line jinja.\n    {% set opencv_libs = [\"alphamat\", \"aruco\", \"bgsegm\", \"calib3d\", \"ccalib\", \"core\", \"datasets\", \"dnn\", \"dnn_objdetect\", \"dnn_superres\", \"dpm\", \"face\", \"features2d\", \"flann\", \"freetype\", \"fuzzy\", \"gapi\", \"hfs\", \"highgui\", \"img_hash\", \"imgcodecs\", \"imgproc\", \"intensity_transform\", \"line_descriptor\", \"mcc\", \"ml\", \"objdetect\", \"optflow\", \"phase_unwrapping\", \"photo\", \"plot\", \"quality\", \"rapid\", \"reg\", \"rgbd\", \"saliency\", \"shape\", \"stereo\", \"stitching\", \"structured_light\", \"superres\", \"surface_matching\", \"text\", \"tracking\", \"video\", \"videoio\", \"videostab\", \"wechat_qrcode\", \"xfeatures2d\", \"ximgproc\", \"xobjdetect\", \"xphoto\"] %}\n    - export MACOSX_DEPLOYMENT_TARGET={{ MACOSX_DEPLOYMENT_TARGET }}          # [osx]\n    # hmaarrfk - 2024/10\n    # Need to specify a default value for CONDA_BUILD_SYSROOT\n    # otherwise the bot seems to fail to help us update\n    # https://github.com/conda-forge/opencv-feedstock/issues/280\n    {% if CONDA_BUILD_SYSROOT is defined %}\n    - export CONDA_BUILD_SYSROOT={{ CONDA_BUILD_SYSROOT }}      # [osx]\n    {% endif %}\n    - OPENCV_FLAGS=\"`pkg-config --cflags opencv4`\"                            # [unix]\n    - $CXX -std=c++11 $RECIPE_DIR/test.cpp ${OPENCV_FLAGS} -o test            # [unix]\n    - if [[ $(./test) != $PKG_VERSION ]]; then exit 1 ; fi                    # [unix]\n    {% for each_opencv_lib in opencv_libs %}\n    - echo Testing for presence of {{ each_opencv_lib }}\n    - test -f $PREFIX/lib/libopencv_{{ each_opencv_lib }}${SHLIB_EXT}         # [unix]\n    - if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_{{ each_opencv_lib }}{{ win_ver_lib }}.dll exit 1      # [win]\n    - echo Found                   {{ each_opencv_lib }}\n    {% endfor %}\n    - test -f $PREFIX/lib/libopencv_bioinspired${SHLIB_EXT}      # [unix]\n    - test -f $PREFIX/lib/libopencv_hdf${SHLIB_EXT}              # [unix]\n    - mkdir -p cmake_build_test && pushd cmake_build_test\n    - cmake -G \"Ninja\" ..\n    - cmake --build . --config Release\n    - popd\n\noutputs:\n  - name: libopencv\n  - name: opencv\n    build:\n      string: headless_py{{ PY_VER_MAJOR }}{{ PY_VER_MINOR }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [qt_version == \"none\"]\n      string: qt{{ qt_version }}_py{{ PY_VER_MAJOR }}{{ PY_VER_MINOR }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [qt_version != \"none\"]\n    requirements:\n      host:\n        # Explicitely add a python requirement so that the hash changes between\n        # opencv    for pypy36 and python3.6\n        # similarly for pypy37 and python3.7\n        - python\n        # Similarly for libprotobuf since we are building a few different versions now\n        - libprotobuf\n      run:\n        - {{ pin_subpackage('libopencv', exact=True) }}\n        - {{ pin_subpackage('py-opencv', exact=True) }}\n    test:\n      commands:\n        - echo \"tested in other outputs\"\n\n  - name: py-opencv\n    build:\n      string: headless_py{{ PY_VER_MAJOR }}{{ PY_VER_MINOR }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [qt_version == \"none\"]\n      string: qt{{ qt_version }}_py{{ PY_VER_MAJOR }}{{ PY_VER_MINOR }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [qt_version != \"none\"]\n      run_exports:\n        # Should we even have this???\n        # don't pin the python version so hard.\n        # Actually, I have found pretty good compatibility in the python\n        # package\n        - {{ pin_subpackage('py-opencv') }}\n    requirements:\n      # There is no build script, but I just want it to think\n      # that it needs python and numpy at build time\n      host:\n        - python\n        - numpy\n        # Similarly for libprotobuf since we are building a few different versions now\n        - libprotobuf\n      run:\n        - python\n        - {{ pin_subpackage('libopencv', exact=True) }}\n    test:\n      requires:\n        # Test with the two currently supported lapack implementatons\n        # One test done on different versions of python on each platform\n        - liblapack * *openblas         # [py==311]\n        - liblapack * *mkl              # [py==312 and linux64]\n        - pip\n      imports:\n        - cv2\n        - cv2.xfeatures2d\n        - cv2.freetype\n      files:\n        - run_py_test.py\n        - color_palette_alpha.png\n        - test_1_c1.jpg\n      source_files:\n        - test.avi\n      commands:\n        - python run_py_test.py\n        - if [[ $($PYTHON -c 'import cv2; print(cv2.__version__)') != $PKG_VERSION ]]; then exit 1; fi  # [unix]\n        - python -c \"import cv2; assert 'Unknown' not in cv2.videoio_registry.getBackendName(cv2.CAP_V4L)\"  # [linux]\n        - python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"\n        - pip check\n        - pip list\n        - test $(pip list | grep \"opencv-python \" | wc -l) -eq 1           # [unix]\n        - test $(pip list | grep \"opencv-python-headless \" | wc -l) -eq 1  # [unix]\n\nabout:\n  home: https://opencv.org/\n  license: Apache-2.0\n  license_family: Apache\n  license_file: LICENSE\n  summary: Computer vision and machine learning software library.\n  dev_url: https://github.com/opencv/opencv\n  doc_url: https://docs.opencv.org/{{ major_version }}.x/\n\nextra:\n  recipe-maintainers:\n    - h-vetinari\n    - xhochy\n    - jakirkham\n    - msarahan\n    - patricksnape\n    - zym1010\n    - hajapy\n    - ocefpaf\n    - hmaarrfk\n    - ilya-lavrenov\n",
  "req": {
    "__set__": true,
    "elements": [
      "c_compiler_stub",
      "c_stdlib_stub",
      "cmake",
      "cxx_compiler_stub",
      "eigen",
      "expat",
      "ffmpeg",
      "freetype",
      "gettext",
      "glib",
      "harfbuzz",
      "hdf5",
      "imath",
      "jasper",
      "libavif",
      "libcblas",
      "libegl-devel",
      "libgl-devel",
      "libgomp",
      "libiconv",
      "libjpeg-turbo",
      "liblapack",
      "liblapacke",
      "libopencv",
      "libopenvino-dev",
      "libpng",
      "libprotobuf",
      "libtiff",
      "libwebp",
      "ninja",
      "numpy",
      "openexr",
      "pkg-config",
      "py-opencv",
      "python",
      "qt6-main",
      "zlib"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "libgomp",
        "ninja",
        "pkg-config"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "ctng-compilers",
        "cxx_compiler_stub",
        "eigen",
        "expat",
        "ffmpeg",
        "freetype",
        "gettext",
        "glib",
        "harfbuzz",
        "hdf5",
        "imath",
        "jasper",
        "libavif",
        "libcblas",
        "libegl-devel",
        "libgl-devel",
        "libiconv",
        "libjpeg-turbo",
        "liblapack",
        "liblapacke",
        "libopenvino-dev",
        "libpng",
        "libprotobuf",
        "libtiff",
        "libwebp",
        "numpy",
        "openexr",
        "python",
        "qt6-main",
        "zlib"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "ctng-compilers",
        "cxx_compiler_stub",
        "libopencv",
        "py-opencv",
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "cmake",
        "cxx_compiler_stub",
        "liblapack",
        "ninja",
        "pip",
        "pkg-config"
      ]
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "libgomp",
        "ninja",
        "pkg-config"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "eigen",
        "expat",
        "ffmpeg 7 lgpl_*",
        "freetype",
        "gettext",
        "glib",
        "harfbuzz",
        "hdf5",
        "hdf5 * nompi*",
        "imath",
        "jasper",
        "libavif",
        "libcblas",
        "libegl-devel",
        "libgl-devel",
        "libiconv",
        "libjpeg-turbo",
        "liblapack",
        "liblapacke",
        "libopenvino-dev",
        "libpng",
        "libprotobuf",
        "libtiff",
        "libwebp",
        "numpy",
        "openexr",
        "python",
        "qt6-main",
        "zlib"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "libopencv",
        "py-opencv",
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "cmake",
        "cxx_compiler_stub",
        "liblapack * *openblas",
        "ninja",
        "pip",
        "pkg-config"
      ]
    }
  },
  "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz",
  "version": "4.12.0",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/opencv.json"
  },
  "win_64_meta_yaml": {
    "about": {
      "dev_url": "https://github.com/opencv/opencv",
      "doc_url": "https://docs.opencv.org/4.x/",
      "home": "https://opencv.org/",
      "license": "Apache-2.0",
      "license_family": "Apache",
      "license_file": "LICENSE",
      "summary": "Computer vision and machine learning software library."
    },
    "build": {
      "ignore_run_exports_from": [
        "python"
      ],
      "number": "2",
      "run_exports": [
        "libopencv"
      ],
      "string": "headless_py39h1234567_2"
    },
    "extra": {
      "recipe-maintainers": [
        "h-vetinari",
        "xhochy",
        "jakirkham",
        "msarahan",
        "patricksnape",
        "zym1010",
        "hajapy",
        "ocefpaf",
        "hmaarrfk",
        "ilya-lavrenov"
      ]
    },
    "outputs": [
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "qt6_py310h1234567_602"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "qt6_py310h1234567_602"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "headless_py310h1234567_2"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "headless_py310h1234567_2"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "qt6_py311h1234567_602"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "qt6_py311h1234567_602"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "headless_py311h1234567_2"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "headless_py311h1234567_2"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "qt6_py312h1234567_602"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "qt6_py312h1234567_602"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "headless_py312h1234567_2"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "headless_py312h1234567_2"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "qt6_py313h1234567_602"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "qt6_py313h1234567_602"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "headless_py313h1234567_2"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "headless_py313h1234567_2"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "qt6_py39h1234567_602"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "qt6_py39h1234567_602"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      },
      {
        "name": "libopencv"
      },
      {
        "build": {
          "string": "headless_py39h1234567_2"
        },
        "name": "opencv",
        "requirements": {
          "host": [
            "python",
            "libprotobuf"
          ],
          "run": [
            "libopencv",
            "py-opencv"
          ]
        },
        "test": {
          "commands": [
            "echo \"tested in other outputs\""
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "py-opencv"
          ],
          "string": "headless_py39h1234567_2"
        },
        "name": "py-opencv",
        "requirements": {
          "host": [
            "python",
            "numpy",
            "libprotobuf"
          ],
          "run": [
            "python",
            "libopencv"
          ]
        },
        "test": {
          "commands": [
            "python run_py_test.py",
            "python -c \"import cv2, re; assert re.search('Lapack:\\s+YES', cv2.getBuildInformation())\"",
            "pip check",
            "pip list"
          ],
          "files": [
            "run_py_test.py",
            "color_palette_alpha.png",
            "test_1_c1.jpg"
          ],
          "imports": [
            "cv2",
            "cv2.xfeatures2d",
            "cv2.freetype"
          ],
          "requires": [
            "liblapack * *openblas",
            "pip"
          ],
          "source_files": [
            "test.avi"
          ]
        }
      }
    ],
    "package": {
      "name": "libopencv",
      "version": "4.12.0"
    },
    "requirements": {
      "build": [
        "pkg-config",
        "cmake",
        "ninja",
        "c_stdlib_stub",
        "c_compiler_stub",
        "cxx_compiler_stub"
      ],
      "host": [
        "python",
        "numpy",
        "eigen",
        "ffmpeg 7 lgpl_*",
        "freetype",
        "harfbuzz",
        "gettext",
        "glib",
        "hdf5",
        "hdf5 * nompi*",
        "jasper",
        "libavif",
        "libcblas",
        "libjpeg-turbo",
        "liblapack",
        "liblapacke",
        "libpng",
        "libprotobuf",
        "libtiff",
        "libwebp",
        "openexr",
        "imath",
        "qt6-main",
        "zlib",
        "libopenvino-dev",
        "expat"
      ]
    },
    "schema_version": 0,
    "source": [
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      },
      {
        "fn": "opencv-4.12.0.tar.gz",
        "patches": [
          "patches_opencv/0001-Add-installation-of-pip-metadata-from-cmake.patch",
          "patches_opencv/0001-Also-install-metadata-for-opencv-python-headless.patch",
          "patches_opencv/0002-delete-lines-that-download-opencv.patch",
          "patches_opencv/0003-find-pkgconfig-on-windows.patch",
          "patches_opencv/0004-fix-detection-for-protobuf-23.x.patch"
        ],
        "sha256": "44c106d5bb47efec04e531fd93008b3fcd1d27138985c5baf4eafac0e1ec9e9d",
        "url": "https://github.com/opencv/opencv/archive/4.12.0.tar.gz"
      },
      {
        "fn": "opencv_contrib-4.12.0.tar.gz",
        "folder": "opencv_contrib",
        "patches": [
          "patches_opencv_contrib/cmake_hdf5_xpile.patch"
        ],
        "sha256": "4197722b4c5ed42b476d42e29beb29a52b6b25c34ec7b4d589c3ae5145fee98e",
        "url": "https://github.com/opencv/opencv_contrib/archive/4.12.0.tar.gz"
      },
      {
        "fn": "test.avi",
        "sha256": "78884f64b564a3b06dc6ee731ed33b60c6d8cd864cea07f21d94ba0f90c7b310",
        "url": "https://github.com/opencv/opencv_extra/raw/master/testdata/highgui/video/VID00003-20100701-2204.avi"
      }
    ],
    "test": {
      "commands": [
        "echo Testing for presence of alphamat",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_alphamat4120.dll exit 1",
        "echo Found                   alphamat",
        "echo Testing for presence of aruco",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_aruco4120.dll exit 1",
        "echo Found                   aruco",
        "echo Testing for presence of bgsegm",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_bgsegm4120.dll exit 1",
        "echo Found                   bgsegm",
        "echo Testing for presence of calib3d",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_calib3d4120.dll exit 1",
        "echo Found                   calib3d",
        "echo Testing for presence of ccalib",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_ccalib4120.dll exit 1",
        "echo Found                   ccalib",
        "echo Testing for presence of core",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_core4120.dll exit 1",
        "echo Found                   core",
        "echo Testing for presence of datasets",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_datasets4120.dll exit 1",
        "echo Found                   datasets",
        "echo Testing for presence of dnn",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_dnn4120.dll exit 1",
        "echo Found                   dnn",
        "echo Testing for presence of dnn_objdetect",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_dnn_objdetect4120.dll exit 1",
        "echo Found                   dnn_objdetect",
        "echo Testing for presence of dnn_superres",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_dnn_superres4120.dll exit 1",
        "echo Found                   dnn_superres",
        "echo Testing for presence of dpm",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_dpm4120.dll exit 1",
        "echo Found                   dpm",
        "echo Testing for presence of face",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_face4120.dll exit 1",
        "echo Found                   face",
        "echo Testing for presence of features2d",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_features2d4120.dll exit 1",
        "echo Found                   features2d",
        "echo Testing for presence of flann",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_flann4120.dll exit 1",
        "echo Found                   flann",
        "echo Testing for presence of freetype",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_freetype4120.dll exit 1",
        "echo Found                   freetype",
        "echo Testing for presence of fuzzy",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_fuzzy4120.dll exit 1",
        "echo Found                   fuzzy",
        "echo Testing for presence of gapi",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_gapi4120.dll exit 1",
        "echo Found                   gapi",
        "echo Testing for presence of hfs",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_hfs4120.dll exit 1",
        "echo Found                   hfs",
        "echo Testing for presence of highgui",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_highgui4120.dll exit 1",
        "echo Found                   highgui",
        "echo Testing for presence of img_hash",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_img_hash4120.dll exit 1",
        "echo Found                   img_hash",
        "echo Testing for presence of imgcodecs",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_imgcodecs4120.dll exit 1",
        "echo Found                   imgcodecs",
        "echo Testing for presence of imgproc",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_imgproc4120.dll exit 1",
        "echo Found                   imgproc",
        "echo Testing for presence of intensity_transform",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_intensity_transform4120.dll exit 1",
        "echo Found                   intensity_transform",
        "echo Testing for presence of line_descriptor",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_line_descriptor4120.dll exit 1",
        "echo Found                   line_descriptor",
        "echo Testing for presence of mcc",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_mcc4120.dll exit 1",
        "echo Found                   mcc",
        "echo Testing for presence of ml",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_ml4120.dll exit 1",
        "echo Found                   ml",
        "echo Testing for presence of objdetect",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_objdetect4120.dll exit 1",
        "echo Found                   objdetect",
        "echo Testing for presence of optflow",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_optflow4120.dll exit 1",
        "echo Found                   optflow",
        "echo Testing for presence of phase_unwrapping",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_phase_unwrapping4120.dll exit 1",
        "echo Found                   phase_unwrapping",
        "echo Testing for presence of photo",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_photo4120.dll exit 1",
        "echo Found                   photo",
        "echo Testing for presence of plot",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_plot4120.dll exit 1",
        "echo Found                   plot",
        "echo Testing for presence of quality",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_quality4120.dll exit 1",
        "echo Found                   quality",
        "echo Testing for presence of rapid",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_rapid4120.dll exit 1",
        "echo Found                   rapid",
        "echo Testing for presence of reg",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_reg4120.dll exit 1",
        "echo Found                   reg",
        "echo Testing for presence of rgbd",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_rgbd4120.dll exit 1",
        "echo Found                   rgbd",
        "echo Testing for presence of saliency",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_saliency4120.dll exit 1",
        "echo Found                   saliency",
        "echo Testing for presence of shape",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_shape4120.dll exit 1",
        "echo Found                   shape",
        "echo Testing for presence of stereo",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_stereo4120.dll exit 1",
        "echo Found                   stereo",
        "echo Testing for presence of stitching",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_stitching4120.dll exit 1",
        "echo Found                   stitching",
        "echo Testing for presence of structured_light",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_structured_light4120.dll exit 1",
        "echo Found                   structured_light",
        "echo Testing for presence of superres",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_superres4120.dll exit 1",
        "echo Found                   superres",
        "echo Testing for presence of surface_matching",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_surface_matching4120.dll exit 1",
        "echo Found                   surface_matching",
        "echo Testing for presence of text",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_text4120.dll exit 1",
        "echo Found                   text",
        "echo Testing for presence of tracking",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_tracking4120.dll exit 1",
        "echo Found                   tracking",
        "echo Testing for presence of video",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_video4120.dll exit 1",
        "echo Found                   video",
        "echo Testing for presence of videoio",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_videoio4120.dll exit 1",
        "echo Found                   videoio",
        "echo Testing for presence of videostab",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_videostab4120.dll exit 1",
        "echo Found                   videostab",
        "echo Testing for presence of wechat_qrcode",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_wechat_qrcode4120.dll exit 1",
        "echo Found                   wechat_qrcode",
        "echo Testing for presence of xfeatures2d",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_xfeatures2d4120.dll exit 1",
        "echo Found                   xfeatures2d",
        "echo Testing for presence of ximgproc",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_ximgproc4120.dll exit 1",
        "echo Found                   ximgproc",
        "echo Testing for presence of xobjdetect",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_xobjdetect4120.dll exit 1",
        "echo Found                   xobjdetect",
        "echo Testing for presence of xphoto",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\opencv_xphoto4120.dll exit 1",
        "echo Found                   xphoto",
        "mkdir -p cmake_build_test && pushd cmake_build_test",
        "cmake -G \"Ninja\" ..",
        "cmake --build . --config Release",
        "popd"
      ],
      "files": [
        "CMakeLists.txt",
        "test.cpp"
      ],
      "requires": [
        "c_compiler_stub",
        "cxx_compiler_stub",
        "cmake",
        "ninja"
      ]
    }
  },
  "win_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "ninja",
        "pkg-config"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "eigen",
        "expat",
        "ffmpeg",
        "freetype",
        "gettext",
        "glib",
        "harfbuzz",
        "hdf5",
        "imath",
        "jasper",
        "libavif",
        "libcblas",
        "libjpeg-turbo",
        "liblapack",
        "liblapacke",
        "libopenvino-dev",
        "libpng",
        "libprotobuf",
        "libtiff",
        "libwebp",
        "numpy",
        "openexr",
        "python",
        "qt6-main",
        "zlib"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "libopencv",
        "py-opencv",
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "cmake",
        "cxx_compiler_stub",
        "liblapack",
        "ninja",
        "pip"
      ]
    }
  }
}