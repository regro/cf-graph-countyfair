{
  "archived": false,
  "branch": "main",
  "conda-forge.yml": {
    "azure": {
      "store_build_artifacts": true
    },
    "build_platform": {
      "linux_aarch64": "linux_64",
      "linux_ppc64le": "linux_64",
      "osx_arm64": "osx_64"
    },
    "conda_build": {
      "pkg_format": "2"
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    },
    "test": "native_and_emulated"
  },
  "feedstock_name": "codec2",
  "hash_type": "sha256",
  "linux_64_meta_yaml": {
    "about": {
      "description": "Open source speech codec designed for communications quality speech between 450\nand 3200 bit/s. The main application is low bandwidth HF/VHF digital radio.\n",
      "dev_url": "https://github.com/drowe67/codec2",
      "home": "http://www.rowetel.com/codec2.html",
      "license": "LGPL-2.1-or-later",
      "license_family": "LGPL",
      "license_file": "COPYING",
      "summary": "An open source low bit rate speech codec"
    },
    "build": {
      "number": "3"
    },
    "extra": {
      "feedstock-name": "codec2",
      "recipe-maintainers": [
        "ryanvolz"
      ]
    },
    "outputs": [
      {
        "build": {
          "run_exports": [
            "libcodec2"
          ]
        },
        "name": "libcodec2",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "c_stdlib_stub",
            "cmake",
            "ninja"
          ]
        },
        "script": "install_libcodec2.sh",
        "test": {
          "commands": [
            "test -f $PREFIX/include/codec2/codec2.h",
            "test -f $PREFIX/include/codec2/version.h",
            "test -f $PREFIX/lib/libcodec2${SHLIB_EXT}"
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "libcodec2"
          ]
        },
        "name": "codec2",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "c_stdlib_stub",
            "cmake",
            "ninja"
          ],
          "host": [
            "libcodec2"
          ],
          "run": [
            "libcodec2"
          ]
        },
        "script": "install_codec2.sh",
        "test": {
          "commands": [
            "c2dec || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "c2enc || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "c2sim || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "cohpsk_demod || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "cohpsk_get_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "cohpsk_mod || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "cohpsk_put_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "deframer || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fdmdv_demod || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fdmdv_get_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fdmdv_mod || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fdmdv_put_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "framer || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_data_raw_rx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_data_raw_tx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_data_rx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_data_tx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_mixed_rx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_mixed_tx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_rx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_tx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fsk_demod || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fsk_get_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fsk_mod || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fsk_put_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "ldpc_dec || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "ldpc_enc || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "ldpc_noise || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "ofdm_get_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "ofdm_put_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "vhf_deframe_c2 || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "vhf_frame_c2 || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi"
          ]
        }
      }
    ],
    "package": {
      "name": "codec2-split",
      "version": "1.2.0"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "ninja"
      ]
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "0001-Fix-CMake-include-of-GetPrerequisites.patch",
        "0002-Add-optional-installation-of-command-line-programs.patch"
      ],
      "sha256": "cbccae52b2c2ecc5d2757e407da567eb681241ff8dadce39d779a7219dbcf449",
      "url": "https://github.com/drowe67/codec2/archive/refs/tags/1.2.0.tar.gz"
    }
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "ninja"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "libcodec2"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "libcodec2"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "linux_aarch64_meta_yaml": {
    "about": {
      "description": "Open source speech codec designed for communications quality speech between 450\nand 3200 bit/s. The main application is low bandwidth HF/VHF digital radio.\n",
      "dev_url": "https://github.com/drowe67/codec2",
      "home": "http://www.rowetel.com/codec2.html",
      "license": "LGPL-2.1-or-later",
      "license_family": "LGPL",
      "license_file": "COPYING",
      "summary": "An open source low bit rate speech codec"
    },
    "build": {
      "number": "3"
    },
    "extra": {
      "feedstock-name": "codec2",
      "recipe-maintainers": [
        "ryanvolz"
      ]
    },
    "outputs": [
      {
        "build": {
          "run_exports": [
            "libcodec2"
          ]
        },
        "name": "libcodec2",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "c_stdlib_stub",
            "cmake",
            "ninja"
          ]
        },
        "script": "install_libcodec2.sh",
        "test": {
          "commands": [
            "test -f $PREFIX/include/codec2/codec2.h",
            "test -f $PREFIX/include/codec2/version.h",
            "test -f $PREFIX/lib/libcodec2${SHLIB_EXT}"
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "libcodec2"
          ]
        },
        "name": "codec2",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "c_stdlib_stub",
            "cmake",
            "ninja"
          ],
          "host": [
            "libcodec2"
          ],
          "run": [
            "libcodec2"
          ]
        },
        "script": "install_codec2.sh",
        "test": {
          "commands": [
            "c2dec || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "c2enc || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "c2sim || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "cohpsk_demod || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "cohpsk_get_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "cohpsk_mod || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "cohpsk_put_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "deframer || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fdmdv_demod || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fdmdv_get_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fdmdv_mod || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fdmdv_put_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "framer || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_data_raw_rx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_data_raw_tx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_data_rx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_data_tx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_mixed_rx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_mixed_tx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_rx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_tx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fsk_demod || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fsk_get_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fsk_mod || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fsk_put_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "ldpc_dec || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "ldpc_enc || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "ldpc_noise || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "ofdm_get_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "ofdm_put_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "vhf_deframe_c2 || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "vhf_frame_c2 || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi"
          ]
        }
      }
    ],
    "package": {
      "name": "codec2-split",
      "version": "1.2.0"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "ninja"
      ]
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "0001-Fix-CMake-include-of-GetPrerequisites.patch",
        "0002-Add-optional-installation-of-command-line-programs.patch"
      ],
      "sha256": "cbccae52b2c2ecc5d2757e407da567eb681241ff8dadce39d779a7219dbcf449",
      "url": "https://github.com/drowe67/codec2/archive/refs/tags/1.2.0.tar.gz"
    }
  },
  "linux_aarch64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "ninja"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "libcodec2"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "libcodec2"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "linux_ppc64le_meta_yaml": {
    "about": {
      "description": "Open source speech codec designed for communications quality speech between 450\nand 3200 bit/s. The main application is low bandwidth HF/VHF digital radio.\n",
      "dev_url": "https://github.com/drowe67/codec2",
      "home": "http://www.rowetel.com/codec2.html",
      "license": "LGPL-2.1-or-later",
      "license_family": "LGPL",
      "license_file": "COPYING",
      "summary": "An open source low bit rate speech codec"
    },
    "build": {
      "number": "3"
    },
    "extra": {
      "feedstock-name": "codec2",
      "recipe-maintainers": [
        "ryanvolz"
      ]
    },
    "outputs": [
      {
        "build": {
          "run_exports": [
            "libcodec2"
          ]
        },
        "name": "libcodec2",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "c_stdlib_stub",
            "cmake",
            "ninja"
          ]
        },
        "script": "install_libcodec2.sh",
        "test": {
          "commands": [
            "test -f $PREFIX/include/codec2/codec2.h",
            "test -f $PREFIX/include/codec2/version.h",
            "test -f $PREFIX/lib/libcodec2${SHLIB_EXT}"
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "libcodec2"
          ]
        },
        "name": "codec2",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "c_stdlib_stub",
            "cmake",
            "ninja"
          ],
          "host": [
            "libcodec2"
          ],
          "run": [
            "libcodec2"
          ]
        },
        "script": "install_codec2.sh",
        "test": {
          "commands": [
            "c2dec || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "c2enc || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "c2sim || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "cohpsk_demod || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "cohpsk_get_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "cohpsk_mod || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "cohpsk_put_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "deframer || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fdmdv_demod || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fdmdv_get_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fdmdv_mod || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fdmdv_put_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "framer || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_data_raw_rx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_data_raw_tx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_data_rx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_data_tx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_mixed_rx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_mixed_tx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_rx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_tx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fsk_demod || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fsk_get_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fsk_mod || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fsk_put_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "ldpc_dec || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "ldpc_enc || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "ldpc_noise || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "ofdm_get_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "ofdm_put_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "vhf_deframe_c2 || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "vhf_frame_c2 || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi"
          ]
        }
      }
    ],
    "package": {
      "name": "codec2-split",
      "version": "1.2.0"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "ninja"
      ]
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "0001-Fix-CMake-include-of-GetPrerequisites.patch",
        "0002-Add-optional-installation-of-command-line-programs.patch"
      ],
      "sha256": "cbccae52b2c2ecc5d2757e407da567eb681241ff8dadce39d779a7219dbcf449",
      "url": "https://github.com/drowe67/codec2/archive/refs/tags/1.2.0.tar.gz"
    }
  },
  "linux_ppc64le_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "ninja"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "libcodec2"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "libcodec2"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "meta_yaml": {
    "about": {
      "description": "Open source speech codec designed for communications quality speech between 450\nand 3200 bit/s. The main application is low bandwidth HF/VHF digital radio.\n",
      "dev_url": "https://github.com/drowe67/codec2",
      "home": "http://www.rowetel.com/codec2.html",
      "license": "LGPL-2.1-or-later",
      "license_family": "LGPL",
      "license_file": "COPYING",
      "summary": "An open source low bit rate speech codec"
    },
    "build": {
      "number": "3"
    },
    "extra": {
      "feedstock-name": "codec2",
      "recipe-maintainers": [
        "ryanvolz"
      ]
    },
    "outputs": [
      {
        "build": {
          "run_exports": [
            "libcodec2"
          ]
        },
        "name": "libcodec2",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "c_stdlib_stub",
            "cmake",
            "ninja"
          ]
        },
        "script": "install_libcodec2.sh",
        "test": {
          "commands": [
            "test -f $PREFIX/include/codec2/codec2.h",
            "test -f $PREFIX/include/codec2/version.h",
            "test -f $PREFIX/lib/libcodec2${SHLIB_EXT}"
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "libcodec2"
          ]
        },
        "name": "codec2",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "c_stdlib_stub",
            "cmake",
            "ninja"
          ],
          "host": [
            "libcodec2"
          ],
          "run": [
            "libcodec2"
          ]
        },
        "script": "install_codec2.sh",
        "test": {
          "commands": [
            "c2dec || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "c2enc || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "c2sim || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "cohpsk_demod || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "cohpsk_get_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "cohpsk_mod || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "cohpsk_put_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "deframer || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fdmdv_demod || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fdmdv_get_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fdmdv_mod || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fdmdv_put_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "framer || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_data_raw_rx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_data_raw_tx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_data_rx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_data_tx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_mixed_rx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_mixed_tx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_rx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_tx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fsk_demod || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fsk_get_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fsk_mod || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fsk_put_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "ldpc_dec || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "ldpc_enc || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "ldpc_noise || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "ofdm_get_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "ofdm_put_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "vhf_deframe_c2 || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "vhf_frame_c2 || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi"
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "libcodec2"
          ]
        },
        "name": "libcodec2",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "c_stdlib_stub",
            "cmake",
            "ninja"
          ]
        },
        "script": "install_libcodec2.sh",
        "test": {
          "commands": [
            "test -f $PREFIX/include/codec2/codec2.h",
            "test -f $PREFIX/include/codec2/version.h",
            "test -f $PREFIX/lib/libcodec2${SHLIB_EXT}"
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "libcodec2"
          ]
        },
        "name": "codec2",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "c_stdlib_stub",
            "cmake",
            "ninja"
          ],
          "host": [
            "libcodec2"
          ],
          "run": [
            "libcodec2"
          ]
        },
        "script": "install_codec2.sh",
        "test": {
          "commands": [
            "c2dec || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "c2enc || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "c2sim || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "cohpsk_demod || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "cohpsk_get_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "cohpsk_mod || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "cohpsk_put_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "deframer || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fdmdv_demod || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fdmdv_get_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fdmdv_mod || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fdmdv_put_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "framer || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_data_raw_rx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_data_raw_tx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_data_rx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_data_tx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_mixed_rx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_mixed_tx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_rx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_tx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fsk_demod || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fsk_get_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fsk_mod || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fsk_put_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "ldpc_dec || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "ldpc_enc || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "ldpc_noise || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "ofdm_get_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "ofdm_put_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "vhf_deframe_c2 || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "vhf_frame_c2 || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi"
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "libcodec2"
          ]
        },
        "name": "libcodec2",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "c_stdlib_stub",
            "cmake",
            "ninja"
          ]
        },
        "script": "install_libcodec2.sh",
        "test": {
          "commands": [
            "test -f $PREFIX/include/codec2/codec2.h",
            "test -f $PREFIX/include/codec2/version.h",
            "test -f $PREFIX/lib/libcodec2${SHLIB_EXT}"
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "libcodec2"
          ]
        },
        "name": "codec2",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "c_stdlib_stub",
            "cmake",
            "ninja"
          ],
          "host": [
            "libcodec2"
          ],
          "run": [
            "libcodec2"
          ]
        },
        "script": "install_codec2.sh",
        "test": {
          "commands": [
            "c2dec || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "c2enc || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "c2sim || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "cohpsk_demod || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "cohpsk_get_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "cohpsk_mod || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "cohpsk_put_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "deframer || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fdmdv_demod || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fdmdv_get_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fdmdv_mod || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fdmdv_put_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "framer || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_data_raw_rx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_data_raw_tx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_data_rx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_data_tx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_mixed_rx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_mixed_tx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_rx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_tx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fsk_demod || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fsk_get_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fsk_mod || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fsk_put_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "ldpc_dec || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "ldpc_enc || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "ldpc_noise || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "ofdm_get_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "ofdm_put_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "vhf_deframe_c2 || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "vhf_frame_c2 || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi"
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "libcodec2"
          ]
        },
        "name": "libcodec2",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "c_stdlib_stub",
            "cmake",
            "ninja"
          ]
        },
        "script": "install_libcodec2.sh",
        "test": {
          "commands": [
            "test -f $PREFIX/include/codec2/codec2.h",
            "test -f $PREFIX/include/codec2/version.h",
            "test -f $PREFIX/lib/libcodec2${SHLIB_EXT}"
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "libcodec2"
          ]
        },
        "name": "codec2",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "c_stdlib_stub",
            "cmake",
            "ninja"
          ],
          "host": [
            "libcodec2"
          ],
          "run": [
            "libcodec2"
          ]
        },
        "script": "install_codec2.sh",
        "test": {
          "commands": [
            "c2dec || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "c2enc || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "c2sim || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "cohpsk_demod || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "cohpsk_get_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "cohpsk_mod || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "cohpsk_put_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "deframer || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fdmdv_demod || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fdmdv_get_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fdmdv_mod || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fdmdv_put_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "framer || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_data_raw_rx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_data_raw_tx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_data_rx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_data_tx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_mixed_rx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_mixed_tx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_rx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_tx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fsk_demod || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fsk_get_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fsk_mod || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fsk_put_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "ldpc_dec || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "ldpc_enc || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "ldpc_noise || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "ofdm_get_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "ofdm_put_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "vhf_deframe_c2 || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "vhf_frame_c2 || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi"
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "libcodec2"
          ]
        },
        "name": "libcodec2",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "c_stdlib_stub",
            "cmake",
            "ninja"
          ]
        },
        "script": "install_libcodec2.sh",
        "test": {
          "commands": [
            "test -f $PREFIX/include/codec2/codec2.h",
            "test -f $PREFIX/include/codec2/version.h",
            "test -f $PREFIX/lib/libcodec2${SHLIB_EXT}"
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "libcodec2"
          ]
        },
        "name": "codec2",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "c_stdlib_stub",
            "cmake",
            "ninja"
          ],
          "host": [
            "libcodec2"
          ],
          "run": [
            "libcodec2"
          ]
        },
        "script": "install_codec2.sh",
        "test": {
          "commands": [
            "c2dec || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "c2enc || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "c2sim || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "cohpsk_demod || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "cohpsk_get_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "cohpsk_mod || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "cohpsk_put_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "deframer || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fdmdv_demod || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fdmdv_get_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fdmdv_mod || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fdmdv_put_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "framer || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_data_raw_rx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_data_raw_tx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_data_rx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_data_tx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_mixed_rx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_mixed_tx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_rx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_tx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fsk_demod || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fsk_get_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fsk_mod || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fsk_put_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "ldpc_dec || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "ldpc_enc || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "ldpc_noise || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "ofdm_get_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "ofdm_put_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "vhf_deframe_c2 || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "vhf_frame_c2 || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi"
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "libcodec2"
          ]
        },
        "name": "libcodec2",
        "requirements": {
          "build": [
            "m2w64_c_compiler_stub",
            "cmake",
            "ninja"
          ]
        },
        "script": "install_libcodec2.bat",
        "test": {
          "commands": [
            "if not exist %PREFIX%\\\\Library\\\\include\\\\codec2\\\\codec2.h exit 1",
            "if not exist %PREFIX%\\\\Library\\\\include\\\\codec2\\\\version.h exit 1",
            "if not exist %PREFIX%\\\\Library\\\\bin\\\\libcodec2.dll exit 1",
            "if not exist %PREFIX%\\\\Library\\\\lib\\\\libcodec2.dll.a exit 1",
            "if not exist %PREFIX%\\\\Library\\\\lib\\\\libcodec2.lib exit 1"
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "libcodec2"
          ]
        },
        "name": "codec2",
        "requirements": {
          "build": [
            "m2w64_c_compiler_stub",
            "cmake",
            "ninja"
          ],
          "host": [
            "libcodec2"
          ],
          "run": [
            "libcodec2"
          ]
        },
        "script": "install_codec2.bat",
        "test": {
          "commands": [
            "c2dec || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\"",
            "c2enc || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\"",
            "c2sim || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\"",
            "cohpsk_demod || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\"",
            "cohpsk_get_test_bits || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\"",
            "cohpsk_mod || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\"",
            "cohpsk_put_test_bits || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\"",
            "deframer || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\"",
            "fdmdv_demod || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\"",
            "fdmdv_get_test_bits || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\"",
            "fdmdv_mod || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\"",
            "fdmdv_put_test_bits || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\"",
            "framer || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\"",
            "freedv_data_raw_rx || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\"",
            "freedv_data_raw_tx || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\"",
            "freedv_data_rx || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\"",
            "freedv_data_tx || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\"",
            "freedv_mixed_rx || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\"",
            "freedv_mixed_tx || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\"",
            "freedv_rx || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\"",
            "freedv_tx || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\"",
            "fsk_demod || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\"",
            "fsk_get_test_bits || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\"",
            "fsk_mod || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\"",
            "fsk_put_test_bits || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\"",
            "ldpc_dec || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\"",
            "ldpc_enc || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\"",
            "ldpc_noise || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\"",
            "ofdm_get_test_bits || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\"",
            "ofdm_put_test_bits || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\"",
            "vhf_deframe_c2 || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\"",
            "vhf_frame_c2 || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\""
          ]
        }
      }
    ],
    "package": {
      "name": "codec2-split",
      "version": "1.2.0"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "ninja",
        "m2w64_c_compiler_stub",
        "m2w64_c_stdlib_stub"
      ]
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "0001-Fix-CMake-include-of-GetPrerequisites.patch",
        "0002-Add-optional-installation-of-command-line-programs.patch"
      ],
      "sha256": "cbccae52b2c2ecc5d2757e407da567eb681241ff8dadce39d779a7219dbcf449",
      "url": "https://github.com/drowe67/codec2/archive/refs/tags/1.2.0.tar.gz"
    }
  },
  "name": "codec2-split",
  "osx_64_meta_yaml": {
    "about": {
      "description": "Open source speech codec designed for communications quality speech between 450\nand 3200 bit/s. The main application is low bandwidth HF/VHF digital radio.\n",
      "dev_url": "https://github.com/drowe67/codec2",
      "home": "http://www.rowetel.com/codec2.html",
      "license": "LGPL-2.1-or-later",
      "license_family": "LGPL",
      "license_file": "COPYING",
      "summary": "An open source low bit rate speech codec"
    },
    "build": {
      "number": "3"
    },
    "extra": {
      "feedstock-name": "codec2",
      "recipe-maintainers": [
        "ryanvolz"
      ]
    },
    "outputs": [
      {
        "build": {
          "run_exports": [
            "libcodec2"
          ]
        },
        "name": "libcodec2",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "c_stdlib_stub",
            "cmake",
            "ninja"
          ]
        },
        "script": "install_libcodec2.sh",
        "test": {
          "commands": [
            "test -f $PREFIX/include/codec2/codec2.h",
            "test -f $PREFIX/include/codec2/version.h",
            "test -f $PREFIX/lib/libcodec2${SHLIB_EXT}"
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "libcodec2"
          ]
        },
        "name": "codec2",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "c_stdlib_stub",
            "cmake",
            "ninja"
          ],
          "host": [
            "libcodec2"
          ],
          "run": [
            "libcodec2"
          ]
        },
        "script": "install_codec2.sh",
        "test": {
          "commands": [
            "c2dec || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "c2enc || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "c2sim || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "cohpsk_demod || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "cohpsk_get_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "cohpsk_mod || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "cohpsk_put_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "deframer || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fdmdv_demod || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fdmdv_get_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fdmdv_mod || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fdmdv_put_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "framer || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_data_raw_rx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_data_raw_tx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_data_rx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_data_tx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_mixed_rx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_mixed_tx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_rx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_tx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fsk_demod || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fsk_get_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fsk_mod || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fsk_put_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "ldpc_dec || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "ldpc_enc || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "ldpc_noise || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "ofdm_get_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "ofdm_put_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "vhf_deframe_c2 || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "vhf_frame_c2 || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi"
          ]
        }
      }
    ],
    "package": {
      "name": "codec2-split",
      "version": "1.2.0"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "ninja"
      ]
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "0001-Fix-CMake-include-of-GetPrerequisites.patch",
        "0002-Add-optional-installation-of-command-line-programs.patch"
      ],
      "sha256": "cbccae52b2c2ecc5d2757e407da567eb681241ff8dadce39d779a7219dbcf449",
      "url": "https://github.com/drowe67/codec2/archive/refs/tags/1.2.0.tar.gz"
    }
  },
  "osx_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "ninja"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "libcodec2"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "libcodec2"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "osx_arm64_meta_yaml": {
    "about": {
      "description": "Open source speech codec designed for communications quality speech between 450\nand 3200 bit/s. The main application is low bandwidth HF/VHF digital radio.\n",
      "dev_url": "https://github.com/drowe67/codec2",
      "home": "http://www.rowetel.com/codec2.html",
      "license": "LGPL-2.1-or-later",
      "license_family": "LGPL",
      "license_file": "COPYING",
      "summary": "An open source low bit rate speech codec"
    },
    "build": {
      "number": "3"
    },
    "extra": {
      "feedstock-name": "codec2",
      "recipe-maintainers": [
        "ryanvolz"
      ]
    },
    "outputs": [
      {
        "build": {
          "run_exports": [
            "libcodec2"
          ]
        },
        "name": "libcodec2",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "c_stdlib_stub",
            "cmake",
            "ninja"
          ]
        },
        "script": "install_libcodec2.sh",
        "test": {
          "commands": [
            "test -f $PREFIX/include/codec2/codec2.h",
            "test -f $PREFIX/include/codec2/version.h",
            "test -f $PREFIX/lib/libcodec2${SHLIB_EXT}"
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "libcodec2"
          ]
        },
        "name": "codec2",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "c_stdlib_stub",
            "cmake",
            "ninja"
          ],
          "host": [
            "libcodec2"
          ],
          "run": [
            "libcodec2"
          ]
        },
        "script": "install_codec2.sh",
        "test": {
          "commands": [
            "c2dec || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "c2enc || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "c2sim || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "cohpsk_demod || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "cohpsk_get_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "cohpsk_mod || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "cohpsk_put_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "deframer || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fdmdv_demod || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fdmdv_get_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fdmdv_mod || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fdmdv_put_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "framer || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_data_raw_rx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_data_raw_tx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_data_rx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_data_tx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_mixed_rx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_mixed_tx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_rx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "freedv_tx || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fsk_demod || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fsk_get_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fsk_mod || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "fsk_put_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "ldpc_dec || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "ldpc_enc || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "ldpc_noise || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "ofdm_get_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "ofdm_put_test_bits || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "vhf_deframe_c2 || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi",
            "vhf_frame_c2 || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi"
          ]
        }
      }
    ],
    "package": {
      "name": "codec2-split",
      "version": "1.2.0"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "ninja"
      ]
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "0001-Fix-CMake-include-of-GetPrerequisites.patch",
        "0002-Add-optional-installation-of-command-line-programs.patch"
      ],
      "sha256": "cbccae52b2c2ecc5d2757e407da567eb681241ff8dadce39d779a7219dbcf449",
      "url": "https://github.com/drowe67/codec2/archive/refs/tags/1.2.0.tar.gz"
    }
  },
  "osx_arm64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "ninja"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "libcodec2"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "libcodec2"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "outputs_names": {
    "__set__": true,
    "elements": [
      "codec2",
      "libcodec2"
    ]
  },
  "parsing_error": false,
  "platforms": [
    "linux_64",
    "linux_aarch64",
    "linux_ppc64le",
    "osx_64",
    "osx_arm64",
    "win_64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/codec2.json"
  },
  "raw_meta_yaml": "{% set version = \"1.2.0\" %}\n\npackage:\n  name: codec2-split\n  version: {{ version }}\n\nsource:\n  url: https://github.com/drowe67/codec2/archive/refs/tags/{{ version }}.tar.gz\n  sha256: cbccae52b2c2ecc5d2757e407da567eb681241ff8dadce39d779a7219dbcf449\n  patches:\n    - 0001-Fix-CMake-include-of-GetPrerequisites.patch\n    - 0002-Add-optional-installation-of-command-line-programs.patch\n\nbuild:\n  number: 3\n\nrequirements:\n  build:\n    - {{ compiler('c') }}  # [not win]\n    - {{ stdlib('c') }}  # [not win]\n    # upstream does not support compiling with MSVC\n    - {{ compiler('m2w64_c') }}  # [win]\n    - {{ stdlib('m2w64_c') }}  # [win]\n    - cmake\n    - ninja\n\noutputs:\n  - name: libcodec2\n    script: install_libcodec2.bat  # [win]\n    script: install_libcodec2.sh  # [not win]\n    build:\n      run_exports:\n        - {{ pin_subpackage('libcodec2', max_pin='x.x') }}\n    requirements:\n      build:\n        - {{ compiler('c') }}  # [not win]\n        - {{ stdlib('c') }}  # [not win]\n        - {{ compiler('m2w64_c') }}  # [win]\n        - cmake\n        - ninja\n    test:\n      commands:\n        # verify that (some) headers get installed\n        - test -f $PREFIX/include/codec2/codec2.h  # [not win]\n        - test -f $PREFIX/include/codec2/version.h  # [not win]\n        - if not exist %PREFIX%\\\\Library\\\\include\\\\codec2\\\\codec2.h exit 1  # [win]\n        - if not exist %PREFIX%\\\\Library\\\\include\\\\codec2\\\\version.h exit 1  # [win]\n\n        # verify that libraries get installed\n        - test -f $PREFIX/lib/libcodec2${SHLIB_EXT}  # [not win]\n        - if not exist %PREFIX%\\\\Library\\\\bin\\\\libcodec2.dll exit 1  # [win]\n        - if not exist %PREFIX%\\\\Library\\\\lib\\\\libcodec2.dll.a exit 1  # [win]\n        - if not exist %PREFIX%\\\\Library\\\\lib\\\\libcodec2.lib exit 1  # [win]\n\n  - name: codec2\n    script: install_codec2.bat  # [win]\n    script: install_codec2.sh  # [not win]\n    build:\n      run_exports:\n        - {{ pin_subpackage('libcodec2', max_pin='x.x') }}\n    requirements:\n      build:\n        - {{ compiler('c') }}  # [not win]\n        - {{ stdlib('c') }}  # [not win]\n        - {{ compiler('m2w64_c') }}  # [win]\n        - cmake\n        - ninja\n      host:\n        - libcodec2\n      run:\n        - {{ pin_subpackage('libcodec2', exact=True) }}\n    test:\n      commands:\n        # verify that executables can be run\n        # don't test ofdm_demod, ofdm_mod, and tollr\n        # because they don't conform to the pattern (print usage, return 1)\n        {% set cmds = [\"c2dec\", \"c2enc\", \"c2sim\", \"cohpsk_demod\"] %}\n        {% set cmds = cmds + [\"cohpsk_get_test_bits\", \"cohpsk_mod\", \"cohpsk_put_test_bits\"] %}\n        {% set cmds = cmds + [\"deframer\", \"fdmdv_demod\"] %}\n        {% set cmds = cmds + [\"fdmdv_get_test_bits\", \"fdmdv_mod\", \"fdmdv_put_test_bits\"] %}\n        {% set cmds = cmds + [\"framer\"] %}\n        {% set cmds = cmds + [\"freedv_data_raw_rx\", \"freedv_data_raw_tx\"] %}\n        {% set cmds = cmds + [\"freedv_data_rx\", \"freedv_data_tx\"] %}\n        {% set cmds = cmds + [\"freedv_mixed_rx\", \"freedv_mixed_tx\"] %}\n        {% set cmds = cmds + [\"freedv_rx\", \"freedv_tx\"] %}\n        {% set cmds = cmds + [\"fsk_demod\", \"fsk_get_test_bits\", \"fsk_mod\"] %}\n        {% set cmds = cmds + [\"fsk_put_test_bits\"] %}\n        {% set cmds = cmds + [\"ldpc_dec\", \"ldpc_enc\", \"ldpc_noise\"] %}\n        {% set cmds = cmds + [\"ofdm_get_test_bits\", \"ofdm_put_test_bits\"] %}\n        {% set cmds = cmds + [\"vhf_deframe_c2\", \"vhf_frame_c2\"] %}\n        {% for cmd in cmds %}\n        - {{ cmd }} || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi  # [not win]\n        - {{ cmd }} || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\"  # [win]\n        {% endfor %}\n\nabout:\n  home: http://www.rowetel.com/codec2.html\n  license: LGPL-2.1-or-later\n  license_family: LGPL\n  license_file: COPYING\n  summary: An open source low bit rate speech codec\n  description: |\n    Open source speech codec designed for communications quality speech between 450\n    and 3200 bit/s. The main application is low bandwidth HF/VHF digital radio.\n  dev_url: https://github.com/drowe67/codec2\n\nextra:\n  feedstock-name: codec2\n  recipe-maintainers:\n    - ryanvolz\n",
  "req": {
    "__set__": true,
    "elements": [
      "c_compiler_stub",
      "c_stdlib_stub",
      "cmake",
      "libcodec2",
      "m2w64_c_compiler_stub",
      "m2w64_c_stdlib_stub",
      "ninja"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "m2w64_c_compiler_stub",
        "m2w64_c_stdlib_stub",
        "ninja"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "libcodec2"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "libcodec2"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "m2w64_c_compiler_stub",
        "m2w64_c_stdlib_stub",
        "ninja"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "libcodec2"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "libcodec2"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "url": "https://github.com/drowe67/codec2/archive/refs/tags/1.2.0.tar.gz",
  "version": "1.2.0",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/codec2.json"
  },
  "win_64_meta_yaml": {
    "about": {
      "description": "Open source speech codec designed for communications quality speech between 450\nand 3200 bit/s. The main application is low bandwidth HF/VHF digital radio.\n",
      "dev_url": "https://github.com/drowe67/codec2",
      "home": "http://www.rowetel.com/codec2.html",
      "license": "LGPL-2.1-or-later",
      "license_family": "LGPL",
      "license_file": "COPYING",
      "summary": "An open source low bit rate speech codec"
    },
    "build": {
      "number": "3"
    },
    "extra": {
      "feedstock-name": "codec2",
      "recipe-maintainers": [
        "ryanvolz"
      ]
    },
    "outputs": [
      {
        "build": {
          "run_exports": [
            "libcodec2"
          ]
        },
        "name": "libcodec2",
        "requirements": {
          "build": [
            "m2w64_c_compiler_stub",
            "cmake",
            "ninja"
          ]
        },
        "script": "install_libcodec2.bat",
        "test": {
          "commands": [
            "if not exist %PREFIX%\\\\Library\\\\include\\\\codec2\\\\codec2.h exit 1",
            "if not exist %PREFIX%\\\\Library\\\\include\\\\codec2\\\\version.h exit 1",
            "if not exist %PREFIX%\\\\Library\\\\bin\\\\libcodec2.dll exit 1",
            "if not exist %PREFIX%\\\\Library\\\\lib\\\\libcodec2.dll.a exit 1",
            "if not exist %PREFIX%\\\\Library\\\\lib\\\\libcodec2.lib exit 1"
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "libcodec2"
          ]
        },
        "name": "codec2",
        "requirements": {
          "build": [
            "m2w64_c_compiler_stub",
            "cmake",
            "ninja"
          ],
          "host": [
            "libcodec2"
          ],
          "run": [
            "libcodec2"
          ]
        },
        "script": "install_codec2.bat",
        "test": {
          "commands": [
            "c2dec || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\"",
            "c2enc || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\"",
            "c2sim || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\"",
            "cohpsk_demod || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\"",
            "cohpsk_get_test_bits || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\"",
            "cohpsk_mod || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\"",
            "cohpsk_put_test_bits || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\"",
            "deframer || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\"",
            "fdmdv_demod || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\"",
            "fdmdv_get_test_bits || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\"",
            "fdmdv_mod || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\"",
            "fdmdv_put_test_bits || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\"",
            "framer || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\"",
            "freedv_data_raw_rx || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\"",
            "freedv_data_raw_tx || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\"",
            "freedv_data_rx || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\"",
            "freedv_data_tx || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\"",
            "freedv_mixed_rx || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\"",
            "freedv_mixed_tx || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\"",
            "freedv_rx || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\"",
            "freedv_tx || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\"",
            "fsk_demod || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\"",
            "fsk_get_test_bits || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\"",
            "fsk_mod || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\"",
            "fsk_put_test_bits || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\"",
            "ldpc_dec || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\"",
            "ldpc_enc || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\"",
            "ldpc_noise || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\"",
            "ofdm_get_test_bits || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\"",
            "ofdm_put_test_bits || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\"",
            "vhf_deframe_c2 || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\"",
            "vhf_frame_c2 || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\""
          ]
        }
      }
    ],
    "package": {
      "name": "codec2-split",
      "version": "1.2.0"
    },
    "requirements": {
      "build": [
        "m2w64_c_compiler_stub",
        "m2w64_c_stdlib_stub",
        "cmake",
        "ninja"
      ]
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "0001-Fix-CMake-include-of-GetPrerequisites.patch",
        "0002-Add-optional-installation-of-command-line-programs.patch"
      ],
      "sha256": "cbccae52b2c2ecc5d2757e407da567eb681241ff8dadce39d779a7219dbcf449",
      "url": "https://github.com/drowe67/codec2/archive/refs/tags/1.2.0.tar.gz"
    }
  },
  "win_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "cmake",
        "m2w64_c_compiler_stub",
        "m2w64_c_stdlib_stub",
        "ninja"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "libcodec2"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "libcodec2"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  }
}