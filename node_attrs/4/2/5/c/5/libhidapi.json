{
  "archived": false,
  "branch": "main",
  "conda-forge.yml": {
    "azure": {
      "store_build_artifacts": true
    },
    "bot": {
      "automerge": true
    },
    "build_platform": {
      "linux_aarch64": "linux_64",
      "linux_ppc64le": "linux_64",
      "osx_arm64": "osx_64"
    },
    "conda_build": {
      "error_overlinking": true
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    },
    "test": "native_and_emulated"
  },
  "feedstock_hash": "670f1e6bb8eed5bae539cb57539ca809050733ae",
  "feedstock_hash_ts": 1747680657,
  "feedstock_name": "libhidapi",
  "hash_type": "sha256",
  "linux_64_meta_yaml": {
    "about": {
      "description": "HIDAPI is a multi-platform library which allows an application to interface with USB and Bluetooth HID-Class devices on Windows, Linux, FreeBSD, and macOS.\n\n\n\n    Windows (using hid.dll)\n    Linux/hidraw (using the Kernel's hidraw driver)\n    libusb (using libusb-1.0 - Linux/BSD/other UNIX-like systems)\n    macOS (using IOHidManager)\n\nOn Linux, either the hidraw or the libusb back-end can be used. There are tradeoffs, and the functionality supported is slightly different. Both are built by default. It is up to the application linking to hidapi to choose the backend at link time by linking to either libhidapi-libusb or libhidapi-hidraw.\nNote that you will need to install an udev rule file with your application for unprivileged users to be able to access HID devices with hidapi. Refer to the 69-hid.rules file in the udev directory for an example.\n\n\nThis back-end uses the hidraw interface in the Linux kernel, and supports both USB and Bluetooth HID devices. It requires kernel version at least 2.6.39 to build. In addition, it will only communicate with devices which have hidraw nodes associated with them. Keyboards, mice, and some other devices which are blacklisted from having hidraw nodes will not work. Fortunately, for nearly all the uses of hidraw, this is not a problem.\n\n\nThis back-end uses libusb-1.0 to communicate directly to a USB device. This back-end will of course not work with Bluetooth devices.\n",
      "dev_url": "https://github.com/libusb/hidapi",
      "home": "https://github.com/libusb/hidapi",
      "license": "BSD-3-Clause OR GPL-3.0-only OR LicenseRef-hidapi",
      "license_file": [
        "LICENSE.txt",
        "LICENSE-bsd.txt",
        "LICENSE-gpl3.txt",
        "LICENSE-orig.txt"
      ],
      "summary": "A Simple cross-platform library for communicating with HID devices"
    },
    "build": {
      "number": "0",
      "run_exports": [
        "libhidapi"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "ryanvolz"
      ]
    },
    "package": {
      "name": "libhidapi",
      "version": "0.15.0"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "pkg-config",
        "ninja"
      ],
      "host": [
        "libudev",
        "libusb"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "5d84dec684c27b97b921d2f3b73218cb773cf4ea915caee317ac8fc73cef8136",
      "url": "https://github.com/libusb/hidapi/archive/refs/tags/hidapi-0.15.0.tar.gz"
    },
    "test": {
      "commands": [
        "test -f $PREFIX/include/hidapi/hidapi.h",
        "test -f $PREFIX/include/hidapi/hidapi_libusb.h",
        "test -f $PREFIX/lib/libhidapi-hidraw${SHLIB_EXT}",
        "test -f $PREFIX/lib/libhidapi-libusb${SHLIB_EXT}"
      ]
    }
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "ninja",
        "pkg-config"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "libudev",
        "libusb"
      ]
    },
    "run": {
      "__set__": true,
      "elements": []
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "linux_aarch64_meta_yaml": {
    "about": {
      "description": "HIDAPI is a multi-platform library which allows an application to interface with USB and Bluetooth HID-Class devices on Windows, Linux, FreeBSD, and macOS.\n\n\n\n    Windows (using hid.dll)\n    Linux/hidraw (using the Kernel's hidraw driver)\n    libusb (using libusb-1.0 - Linux/BSD/other UNIX-like systems)\n    macOS (using IOHidManager)\n\nOn Linux, either the hidraw or the libusb back-end can be used. There are tradeoffs, and the functionality supported is slightly different. Both are built by default. It is up to the application linking to hidapi to choose the backend at link time by linking to either libhidapi-libusb or libhidapi-hidraw.\nNote that you will need to install an udev rule file with your application for unprivileged users to be able to access HID devices with hidapi. Refer to the 69-hid.rules file in the udev directory for an example.\n\n\nThis back-end uses the hidraw interface in the Linux kernel, and supports both USB and Bluetooth HID devices. It requires kernel version at least 2.6.39 to build. In addition, it will only communicate with devices which have hidraw nodes associated with them. Keyboards, mice, and some other devices which are blacklisted from having hidraw nodes will not work. Fortunately, for nearly all the uses of hidraw, this is not a problem.\n\n\nThis back-end uses libusb-1.0 to communicate directly to a USB device. This back-end will of course not work with Bluetooth devices.\n",
      "dev_url": "https://github.com/libusb/hidapi",
      "home": "https://github.com/libusb/hidapi",
      "license": "BSD-3-Clause OR GPL-3.0-only OR LicenseRef-hidapi",
      "license_file": [
        "LICENSE.txt",
        "LICENSE-bsd.txt",
        "LICENSE-gpl3.txt",
        "LICENSE-orig.txt"
      ],
      "summary": "A Simple cross-platform library for communicating with HID devices"
    },
    "build": {
      "number": "0",
      "run_exports": [
        "libhidapi"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "ryanvolz"
      ]
    },
    "package": {
      "name": "libhidapi",
      "version": "0.15.0"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "pkg-config",
        "ninja"
      ],
      "host": [
        "libudev",
        "libusb"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "5d84dec684c27b97b921d2f3b73218cb773cf4ea915caee317ac8fc73cef8136",
      "url": "https://github.com/libusb/hidapi/archive/refs/tags/hidapi-0.15.0.tar.gz"
    },
    "test": {
      "commands": [
        "test -f $PREFIX/include/hidapi/hidapi.h",
        "test -f $PREFIX/include/hidapi/hidapi_libusb.h",
        "test -f $PREFIX/lib/libhidapi-hidraw${SHLIB_EXT}",
        "test -f $PREFIX/lib/libhidapi-libusb${SHLIB_EXT}"
      ]
    }
  },
  "linux_aarch64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "ninja",
        "pkg-config"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "libudev",
        "libusb"
      ]
    },
    "run": {
      "__set__": true,
      "elements": []
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "linux_ppc64le_meta_yaml": {
    "about": {
      "description": "HIDAPI is a multi-platform library which allows an application to interface with USB and Bluetooth HID-Class devices on Windows, Linux, FreeBSD, and macOS.\n\n\n\n    Windows (using hid.dll)\n    Linux/hidraw (using the Kernel's hidraw driver)\n    libusb (using libusb-1.0 - Linux/BSD/other UNIX-like systems)\n    macOS (using IOHidManager)\n\nOn Linux, either the hidraw or the libusb back-end can be used. There are tradeoffs, and the functionality supported is slightly different. Both are built by default. It is up to the application linking to hidapi to choose the backend at link time by linking to either libhidapi-libusb or libhidapi-hidraw.\nNote that you will need to install an udev rule file with your application for unprivileged users to be able to access HID devices with hidapi. Refer to the 69-hid.rules file in the udev directory for an example.\n\n\nThis back-end uses the hidraw interface in the Linux kernel, and supports both USB and Bluetooth HID devices. It requires kernel version at least 2.6.39 to build. In addition, it will only communicate with devices which have hidraw nodes associated with them. Keyboards, mice, and some other devices which are blacklisted from having hidraw nodes will not work. Fortunately, for nearly all the uses of hidraw, this is not a problem.\n\n\nThis back-end uses libusb-1.0 to communicate directly to a USB device. This back-end will of course not work with Bluetooth devices.\n",
      "dev_url": "https://github.com/libusb/hidapi",
      "home": "https://github.com/libusb/hidapi",
      "license": "BSD-3-Clause OR GPL-3.0-only OR LicenseRef-hidapi",
      "license_file": [
        "LICENSE.txt",
        "LICENSE-bsd.txt",
        "LICENSE-gpl3.txt",
        "LICENSE-orig.txt"
      ],
      "summary": "A Simple cross-platform library for communicating with HID devices"
    },
    "build": {
      "number": "0",
      "run_exports": [
        "libhidapi"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "ryanvolz"
      ]
    },
    "package": {
      "name": "libhidapi",
      "version": "0.15.0"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "pkg-config",
        "ninja"
      ],
      "host": [
        "libudev",
        "libusb"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "5d84dec684c27b97b921d2f3b73218cb773cf4ea915caee317ac8fc73cef8136",
      "url": "https://github.com/libusb/hidapi/archive/refs/tags/hidapi-0.15.0.tar.gz"
    },
    "test": {
      "commands": [
        "test -f $PREFIX/include/hidapi/hidapi.h",
        "test -f $PREFIX/include/hidapi/hidapi_libusb.h",
        "test -f $PREFIX/lib/libhidapi-hidraw${SHLIB_EXT}",
        "test -f $PREFIX/lib/libhidapi-libusb${SHLIB_EXT}"
      ]
    }
  },
  "linux_ppc64le_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "ninja",
        "pkg-config"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "libudev",
        "libusb"
      ]
    },
    "run": {
      "__set__": true,
      "elements": []
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "meta_yaml": {
    "about": {
      "description": "HIDAPI is a multi-platform library which allows an application to interface with USB and Bluetooth HID-Class devices on Windows, Linux, FreeBSD, and macOS.\n\n\n\n    Windows (using hid.dll)\n    Linux/hidraw (using the Kernel's hidraw driver)\n    libusb (using libusb-1.0 - Linux/BSD/other UNIX-like systems)\n    macOS (using IOHidManager)\n\nOn Linux, either the hidraw or the libusb back-end can be used. There are tradeoffs, and the functionality supported is slightly different. Both are built by default. It is up to the application linking to hidapi to choose the backend at link time by linking to either libhidapi-libusb or libhidapi-hidraw.\nNote that you will need to install an udev rule file with your application for unprivileged users to be able to access HID devices with hidapi. Refer to the 69-hid.rules file in the udev directory for an example.\n\n\nThis back-end uses the hidraw interface in the Linux kernel, and supports both USB and Bluetooth HID devices. It requires kernel version at least 2.6.39 to build. In addition, it will only communicate with devices which have hidraw nodes associated with them. Keyboards, mice, and some other devices which are blacklisted from having hidraw nodes will not work. Fortunately, for nearly all the uses of hidraw, this is not a problem.\n\n\nThis back-end uses libusb-1.0 to communicate directly to a USB device. This back-end will of course not work with Bluetooth devices.\n",
      "dev_url": "https://github.com/libusb/hidapi",
      "home": "https://github.com/libusb/hidapi",
      "license": "BSD-3-Clause OR GPL-3.0-only OR LicenseRef-hidapi",
      "license_file": [
        "LICENSE.txt",
        "LICENSE-bsd.txt",
        "LICENSE-gpl3.txt",
        "LICENSE-orig.txt"
      ],
      "summary": "A Simple cross-platform library for communicating with HID devices"
    },
    "build": {
      "number": "0",
      "run_exports": [
        "libhidapi"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "ryanvolz"
      ]
    },
    "package": {
      "name": "libhidapi",
      "version": "0.15.0"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "pkg-config",
        "ninja"
      ],
      "host": [
        "libudev",
        "libusb"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "5d84dec684c27b97b921d2f3b73218cb773cf4ea915caee317ac8fc73cef8136",
      "url": "https://github.com/libusb/hidapi/archive/refs/tags/hidapi-0.15.0.tar.gz"
    },
    "test": {
      "commands": [
        "test -f $PREFIX/include/hidapi/hidapi.h",
        "test -f $PREFIX/include/hidapi/hidapi_libusb.h",
        "test -f $PREFIX/lib/libhidapi-hidraw${SHLIB_EXT}",
        "test -f $PREFIX/lib/libhidapi-libusb${SHLIB_EXT}",
        "test -f $PREFIX/include/hidapi/hidapi_darwin.h",
        "test -f $PREFIX/lib/libhidapi${SHLIB_EXT}",
        "if not exist %PREFIX%\\\\Library\\\\include\\\\hidapi\\\\hidapi.h exit 1",
        "if not exist %PREFIX%\\\\Library\\\\include\\\\hidapi\\\\hidapi_winapi.h exit 1",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\hidapi.dll exit 1",
        "if not exist %PREFIX%\\\\Library\\\\lib\\\\hidapi.lib exit 1"
      ]
    }
  },
  "name": "libhidapi",
  "osx_64_meta_yaml": {
    "about": {
      "description": "HIDAPI is a multi-platform library which allows an application to interface with USB and Bluetooth HID-Class devices on Windows, Linux, FreeBSD, and macOS.\n\n\n\n    Windows (using hid.dll)\n    Linux/hidraw (using the Kernel's hidraw driver)\n    libusb (using libusb-1.0 - Linux/BSD/other UNIX-like systems)\n    macOS (using IOHidManager)\n\nOn Linux, either the hidraw or the libusb back-end can be used. There are tradeoffs, and the functionality supported is slightly different. Both are built by default. It is up to the application linking to hidapi to choose the backend at link time by linking to either libhidapi-libusb or libhidapi-hidraw.\nNote that you will need to install an udev rule file with your application for unprivileged users to be able to access HID devices with hidapi. Refer to the 69-hid.rules file in the udev directory for an example.\n\n\nThis back-end uses the hidraw interface in the Linux kernel, and supports both USB and Bluetooth HID devices. It requires kernel version at least 2.6.39 to build. In addition, it will only communicate with devices which have hidraw nodes associated with them. Keyboards, mice, and some other devices which are blacklisted from having hidraw nodes will not work. Fortunately, for nearly all the uses of hidraw, this is not a problem.\n\n\nThis back-end uses libusb-1.0 to communicate directly to a USB device. This back-end will of course not work with Bluetooth devices.\n",
      "dev_url": "https://github.com/libusb/hidapi",
      "home": "https://github.com/libusb/hidapi",
      "license": "BSD-3-Clause OR GPL-3.0-only OR LicenseRef-hidapi",
      "license_file": [
        "LICENSE.txt",
        "LICENSE-bsd.txt",
        "LICENSE-gpl3.txt",
        "LICENSE-orig.txt"
      ],
      "summary": "A Simple cross-platform library for communicating with HID devices"
    },
    "build": {
      "number": "0",
      "run_exports": [
        "libhidapi"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "ryanvolz"
      ]
    },
    "package": {
      "name": "libhidapi",
      "version": "0.15.0"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "pkg-config",
        "ninja"
      ],
      "host": []
    },
    "schema_version": 0,
    "source": {
      "sha256": "5d84dec684c27b97b921d2f3b73218cb773cf4ea915caee317ac8fc73cef8136",
      "url": "https://github.com/libusb/hidapi/archive/refs/tags/hidapi-0.15.0.tar.gz"
    },
    "test": {
      "commands": [
        "test -f $PREFIX/include/hidapi/hidapi.h",
        "test -f $PREFIX/include/hidapi/hidapi_darwin.h",
        "test -f $PREFIX/lib/libhidapi${SHLIB_EXT}"
      ]
    }
  },
  "osx_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "ninja",
        "pkg-config"
      ]
    },
    "host": {
      "__set__": true,
      "elements": []
    },
    "run": {
      "__set__": true,
      "elements": []
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "osx_arm64_meta_yaml": {
    "about": {
      "description": "HIDAPI is a multi-platform library which allows an application to interface with USB and Bluetooth HID-Class devices on Windows, Linux, FreeBSD, and macOS.\n\n\n\n    Windows (using hid.dll)\n    Linux/hidraw (using the Kernel's hidraw driver)\n    libusb (using libusb-1.0 - Linux/BSD/other UNIX-like systems)\n    macOS (using IOHidManager)\n\nOn Linux, either the hidraw or the libusb back-end can be used. There are tradeoffs, and the functionality supported is slightly different. Both are built by default. It is up to the application linking to hidapi to choose the backend at link time by linking to either libhidapi-libusb or libhidapi-hidraw.\nNote that you will need to install an udev rule file with your application for unprivileged users to be able to access HID devices with hidapi. Refer to the 69-hid.rules file in the udev directory for an example.\n\n\nThis back-end uses the hidraw interface in the Linux kernel, and supports both USB and Bluetooth HID devices. It requires kernel version at least 2.6.39 to build. In addition, it will only communicate with devices which have hidraw nodes associated with them. Keyboards, mice, and some other devices which are blacklisted from having hidraw nodes will not work. Fortunately, for nearly all the uses of hidraw, this is not a problem.\n\n\nThis back-end uses libusb-1.0 to communicate directly to a USB device. This back-end will of course not work with Bluetooth devices.\n",
      "dev_url": "https://github.com/libusb/hidapi",
      "home": "https://github.com/libusb/hidapi",
      "license": "BSD-3-Clause OR GPL-3.0-only OR LicenseRef-hidapi",
      "license_file": [
        "LICENSE.txt",
        "LICENSE-bsd.txt",
        "LICENSE-gpl3.txt",
        "LICENSE-orig.txt"
      ],
      "summary": "A Simple cross-platform library for communicating with HID devices"
    },
    "build": {
      "number": "0",
      "run_exports": [
        "libhidapi"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "ryanvolz"
      ]
    },
    "package": {
      "name": "libhidapi",
      "version": "0.15.0"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "pkg-config",
        "ninja"
      ],
      "host": []
    },
    "schema_version": 0,
    "source": {
      "sha256": "5d84dec684c27b97b921d2f3b73218cb773cf4ea915caee317ac8fc73cef8136",
      "url": "https://github.com/libusb/hidapi/archive/refs/tags/hidapi-0.15.0.tar.gz"
    },
    "test": {
      "commands": [
        "test -f $PREFIX/include/hidapi/hidapi.h",
        "test -f $PREFIX/include/hidapi/hidapi_darwin.h",
        "test -f $PREFIX/lib/libhidapi${SHLIB_EXT}"
      ]
    }
  },
  "osx_arm64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "ninja",
        "pkg-config"
      ]
    },
    "host": {
      "__set__": true,
      "elements": []
    },
    "run": {
      "__set__": true,
      "elements": []
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "outputs_names": {
    "__set__": true,
    "elements": [
      "libhidapi"
    ]
  },
  "parsing_error": false,
  "platforms": [
    "linux_64",
    "linux_aarch64",
    "linux_ppc64le",
    "osx_64",
    "osx_arm64",
    "win_64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/libhidapi.json"
  },
  "raw_meta_yaml": "{% set version = \"0.15.0\" %}\n\npackage:\n  name: libhidapi\n  version: {{ version }}\n\nsource:\n  url: https://github.com/libusb/hidapi/archive/refs/tags/hidapi-{{ version }}.tar.gz\n  sha256: 5d84dec684c27b97b921d2f3b73218cb773cf4ea915caee317ac8fc73cef8136\n\nbuild:\n  number: 0\n  run_exports:\n    - {{ pin_subpackage('libhidapi', max_pin='x') }}\n\nrequirements:\n  build:\n    - {{ compiler(\"c\") }}\n    - {{ stdlib(\"c\") }}\n    - cmake\n    - pkg-config\n    - ninja\n  host:\n    - libudev  # [linux]\n    - libusb  # [linux]\n\ntest:\n  commands:\n    # check that headers get installed\n    - test -f $PREFIX/include/hidapi/hidapi.h  # [unix]\n    - test -f $PREFIX/include/hidapi/hidapi_libusb.h  # [linux]\n    - test -f $PREFIX/include/hidapi/hidapi_darwin.h  # [osx]\n    - if not exist %PREFIX%\\\\Library\\\\include\\\\hidapi\\\\hidapi.h exit 1  # [win]\n    - if not exist %PREFIX%\\\\Library\\\\include\\\\hidapi\\\\hidapi_winapi.h exit 1  # [win]\n\n    # check that libraries get installed\n    - test -f $PREFIX/lib/libhidapi-hidraw${SHLIB_EXT}  # [linux]\n    - test -f $PREFIX/lib/libhidapi-libusb${SHLIB_EXT}  # [linux]\n    - test -f $PREFIX/lib/libhidapi${SHLIB_EXT}  # [osx]\n    - if not exist %PREFIX%\\\\Library\\\\bin\\\\hidapi.dll exit 1  # [win]\n    - if not exist %PREFIX%\\\\Library\\\\lib\\\\hidapi.lib exit 1  # [win]\n\nabout:\n  home: https://github.com/libusb/hidapi\n  license: BSD-3-Clause OR GPL-3.0-only OR LicenseRef-hidapi\n  license_file:\n    - LICENSE.txt\n    - LICENSE-bsd.txt\n    - LICENSE-gpl3.txt\n    - LICENSE-orig.txt\n  summary: 'A Simple cross-platform library for communicating with HID devices'\n  description: >\n    HIDAPI is a multi-platform library which allows an application to interface with USB and Bluetooth HID-Class devices on Windows, Linux, FreeBSD, and macOS.\n\n    ## HIDAPI has four back-ends:\n\n        Windows (using hid.dll)\n        Linux/hidraw (using the Kernel's hidraw driver)\n        libusb (using libusb-1.0 - Linux/BSD/other UNIX-like systems)\n        macOS (using IOHidManager)\n\n    On Linux, either the hidraw or the libusb back-end can be used. There are tradeoffs, and the functionality supported is slightly different. Both are built by default. It is up to the application linking to hidapi to choose the backend at link time by linking to either libhidapi-libusb or libhidapi-hidraw.\n\n    Note that you will need to install an udev rule file with your application for unprivileged users to be able to access HID devices with hidapi. Refer to the 69-hid.rules file in the udev directory for an example.\n\n    ### Linux/hidraw (linux/hid.c):\n\n    This back-end uses the hidraw interface in the Linux kernel, and supports both USB and Bluetooth HID devices. It requires kernel version at least 2.6.39 to build. In addition, it will only communicate with devices which have hidraw nodes associated with them. Keyboards, mice, and some other devices which are blacklisted\n    from having hidraw nodes will not work. Fortunately, for nearly all the uses of hidraw, this is not a problem.\n\n    ### Linux/FreeBSD/libusb (libusb/hid.c):\n\n    This back-end uses libusb-1.0 to communicate directly to a USB device. This back-end will of course not work with Bluetooth devices.\n  dev_url: https://github.com/libusb/hidapi\n\nextra:\n  recipe-maintainers:\n    - ryanvolz\n",
  "req": {
    "__set__": true,
    "elements": [
      "c_compiler_stub",
      "c_stdlib_stub",
      "cmake",
      "libudev",
      "libusb",
      "ninja",
      "pkg-config"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "ninja",
        "pkg-config"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "libudev",
        "libusb"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "ninja",
        "pkg-config"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "libudev",
        "libusb"
      ]
    },
    "run": {
      "__set__": true,
      "elements": []
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "url": "https://github.com/libusb/hidapi/archive/refs/tags/hidapi-0.15.0.tar.gz",
  "version": "0.15.0",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/libhidapi.json"
  },
  "win_64_meta_yaml": {
    "about": {
      "description": "HIDAPI is a multi-platform library which allows an application to interface with USB and Bluetooth HID-Class devices on Windows, Linux, FreeBSD, and macOS.\n\n\n\n    Windows (using hid.dll)\n    Linux/hidraw (using the Kernel's hidraw driver)\n    libusb (using libusb-1.0 - Linux/BSD/other UNIX-like systems)\n    macOS (using IOHidManager)\n\nOn Linux, either the hidraw or the libusb back-end can be used. There are tradeoffs, and the functionality supported is slightly different. Both are built by default. It is up to the application linking to hidapi to choose the backend at link time by linking to either libhidapi-libusb or libhidapi-hidraw.\nNote that you will need to install an udev rule file with your application for unprivileged users to be able to access HID devices with hidapi. Refer to the 69-hid.rules file in the udev directory for an example.\n\n\nThis back-end uses the hidraw interface in the Linux kernel, and supports both USB and Bluetooth HID devices. It requires kernel version at least 2.6.39 to build. In addition, it will only communicate with devices which have hidraw nodes associated with them. Keyboards, mice, and some other devices which are blacklisted from having hidraw nodes will not work. Fortunately, for nearly all the uses of hidraw, this is not a problem.\n\n\nThis back-end uses libusb-1.0 to communicate directly to a USB device. This back-end will of course not work with Bluetooth devices.\n",
      "dev_url": "https://github.com/libusb/hidapi",
      "home": "https://github.com/libusb/hidapi",
      "license": "BSD-3-Clause OR GPL-3.0-only OR LicenseRef-hidapi",
      "license_file": [
        "LICENSE.txt",
        "LICENSE-bsd.txt",
        "LICENSE-gpl3.txt",
        "LICENSE-orig.txt"
      ],
      "summary": "A Simple cross-platform library for communicating with HID devices"
    },
    "build": {
      "number": "0",
      "run_exports": [
        "libhidapi"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "ryanvolz"
      ]
    },
    "package": {
      "name": "libhidapi",
      "version": "0.15.0"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "pkg-config",
        "ninja"
      ],
      "host": []
    },
    "schema_version": 0,
    "source": {
      "sha256": "5d84dec684c27b97b921d2f3b73218cb773cf4ea915caee317ac8fc73cef8136",
      "url": "https://github.com/libusb/hidapi/archive/refs/tags/hidapi-0.15.0.tar.gz"
    },
    "test": {
      "commands": [
        "if not exist %PREFIX%\\\\Library\\\\include\\\\hidapi\\\\hidapi.h exit 1",
        "if not exist %PREFIX%\\\\Library\\\\include\\\\hidapi\\\\hidapi_winapi.h exit 1",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\hidapi.dll exit 1",
        "if not exist %PREFIX%\\\\Library\\\\lib\\\\hidapi.lib exit 1"
      ]
    }
  },
  "win_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "ninja",
        "pkg-config"
      ]
    },
    "host": {
      "__set__": true,
      "elements": []
    },
    "run": {
      "__set__": true,
      "elements": []
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  }
}