{
  "archived": false,
  "branch": "main",
  "conda-forge.yml": {
    "build_platform": {
      "linux_aarch64": "linux_64",
      "linux_ppc64le": "linux_64",
      "osx_arm64": "osx_64"
    },
    "conda_build": {
      "pkg_format": "2"
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    },
    "test": "native_and_emulated"
  },
  "feedstock_name": "libmed",
  "hash_type": "sha256",
  "linux_64_meta_yaml": {
    "about": {
      "description": "The purpose of the MED module is to provide a standard for storing and recovering computer data associated to numerical meshes and fields, and to facilitate the exchange between codes and solvers.\n",
      "dev_url": "https://git.salome-platform.org/gitweb/?p=modules/med.git;a=summary",
      "doc_url": "http://www.salome-platform.org/",
      "home": "https://www.salome-platform.org/user-section/about/med",
      "license": "LGPL-3.0-only",
      "license_family": "LGPL",
      "license_file": "COPYING",
      "summary": "MED : interoperable format for data interchange between mesh based solvers."
    },
    "build": {
      "number": "19",
      "run_exports": [
        "libmed mpi_mpich_*",
        "libmed nompi_*",
        "libmed mpi_openmpi_*"
      ],
      "string": "mpi_openmpi_h1234567_19"
    },
    "extra": {
      "recipe-maintainers": [
        "Krande",
        "ldallolio",
        "looooo",
        "ldallolio-irt"
      ]
    },
    "package": {
      "name": "libmed",
      "version": "4.1.1"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "fortran_compiler_stub",
        "swig 4.2.1",
        "cmake",
        "make"
      ],
      "host": [
        "python",
        "hdf5",
        "hdf5 * mpi_mpich_*",
        "zlib",
        "mpich",
        "hdf5 * nompi_*",
        "hdf5 * mpi_openmpi_*",
        "openmpi"
      ],
      "run": [
        "python",
        "mpich",
        "hdf5",
        "openmpi"
      ]
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "patches/ignore-hdf5-bounds-check-cmake.patch",
        "patches/ignore-hdf5-bounds-check-source.patch",
        "patches/do_not_modify_windows_path.patch",
        "patches/install-in-runtime-and_archive.patch",
        "patches/do-not-make-symlinks-on-windows.patch",
        "patches/link-privately.patch",
        "patches/py313_support.patch"
      ],
      "sha256": "fe1e80c836150ff27049b291fe2f9a11eda9ef9831311df9e39ba16a63c392a0",
      "url": "https://github.com/Krande/med-copy/archive/refs/tags/4.1.1.tar.gz"
    },
    "test": {
      "commands": [
        "test -f ${PREFIX}/lib/libmed${SHLIB_EXT}",
        "nm ${PREFIX}/lib/libmedC.so | grep MEDlibraryNumVersion",
        "pytest -v tests"
      ],
      "files": [
        "tests"
      ],
      "imports": [
        "med"
      ],
      "requires": [
        "c_compiler_stub",
        "cxx_compiler_stub",
        "pytest"
      ]
    }
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "fortran_compiler_stub",
        "make",
        "swig"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "hdf5",
        "mpich",
        "openmpi",
        "python",
        "zlib"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "hdf5",
        "mpich",
        "openmpi",
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "cxx_compiler_stub",
        "pytest"
      ]
    }
  },
  "linux_aarch64_meta_yaml": {
    "about": {
      "description": "The purpose of the MED module is to provide a standard for storing and recovering computer data associated to numerical meshes and fields, and to facilitate the exchange between codes and solvers.\n",
      "dev_url": "https://git.salome-platform.org/gitweb/?p=modules/med.git;a=summary",
      "doc_url": "http://www.salome-platform.org/",
      "home": "https://www.salome-platform.org/user-section/about/med",
      "license": "LGPL-3.0-only",
      "license_family": "LGPL",
      "license_file": "COPYING",
      "summary": "MED : interoperable format for data interchange between mesh based solvers."
    },
    "build": {
      "number": "19",
      "run_exports": [
        "libmed mpi_mpich_*",
        "libmed nompi_*",
        "libmed mpi_openmpi_*"
      ],
      "string": "mpi_openmpi_h1234567_19"
    },
    "extra": {
      "recipe-maintainers": [
        "Krande",
        "ldallolio",
        "looooo",
        "ldallolio-irt"
      ]
    },
    "package": {
      "name": "libmed",
      "version": "4.1.1"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "fortran_compiler_stub",
        "swig 4.2.1",
        "cmake",
        "make"
      ],
      "host": [
        "python",
        "hdf5",
        "hdf5 * mpi_mpich_*",
        "zlib",
        "mpich",
        "hdf5 * nompi_*",
        "hdf5 * mpi_openmpi_*",
        "openmpi"
      ],
      "run": [
        "python",
        "mpich",
        "hdf5",
        "openmpi"
      ]
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "patches/ignore-hdf5-bounds-check-cmake.patch",
        "patches/ignore-hdf5-bounds-check-source.patch",
        "patches/do_not_modify_windows_path.patch",
        "patches/install-in-runtime-and_archive.patch",
        "patches/do-not-make-symlinks-on-windows.patch",
        "patches/link-privately.patch",
        "patches/py313_support.patch"
      ],
      "sha256": "fe1e80c836150ff27049b291fe2f9a11eda9ef9831311df9e39ba16a63c392a0",
      "url": "https://github.com/Krande/med-copy/archive/refs/tags/4.1.1.tar.gz"
    },
    "test": {
      "commands": [
        "test -f ${PREFIX}/lib/libmed${SHLIB_EXT}",
        "nm ${PREFIX}/lib/libmedC.so | grep MEDlibraryNumVersion",
        "pytest -v tests"
      ],
      "files": [
        "tests"
      ],
      "imports": [
        "med"
      ],
      "requires": [
        "c_compiler_stub",
        "cxx_compiler_stub",
        "pytest"
      ]
    }
  },
  "linux_aarch64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "fortran_compiler_stub",
        "make",
        "swig"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "hdf5",
        "mpich",
        "openmpi",
        "python",
        "zlib"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "hdf5",
        "mpich",
        "openmpi",
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "cxx_compiler_stub",
        "pytest"
      ]
    }
  },
  "linux_ppc64le_meta_yaml": {
    "about": {
      "description": "The purpose of the MED module is to provide a standard for storing and recovering computer data associated to numerical meshes and fields, and to facilitate the exchange between codes and solvers.\n",
      "dev_url": "https://git.salome-platform.org/gitweb/?p=modules/med.git;a=summary",
      "doc_url": "http://www.salome-platform.org/",
      "home": "https://www.salome-platform.org/user-section/about/med",
      "license": "LGPL-3.0-only",
      "license_family": "LGPL",
      "license_file": "COPYING",
      "summary": "MED : interoperable format for data interchange between mesh based solvers."
    },
    "build": {
      "number": "19",
      "run_exports": [
        "libmed mpi_mpich_*",
        "libmed nompi_*",
        "libmed mpi_openmpi_*"
      ],
      "string": "mpi_openmpi_h1234567_19"
    },
    "extra": {
      "recipe-maintainers": [
        "Krande",
        "ldallolio",
        "looooo",
        "ldallolio-irt"
      ]
    },
    "package": {
      "name": "libmed",
      "version": "4.1.1"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "fortran_compiler_stub",
        "swig 4.2.1",
        "cmake",
        "make"
      ],
      "host": [
        "python",
        "hdf5",
        "hdf5 * mpi_mpich_*",
        "zlib",
        "mpich",
        "hdf5 * nompi_*",
        "hdf5 * mpi_openmpi_*",
        "openmpi"
      ],
      "run": [
        "python",
        "mpich",
        "hdf5",
        "openmpi"
      ]
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "patches/ignore-hdf5-bounds-check-cmake.patch",
        "patches/ignore-hdf5-bounds-check-source.patch",
        "patches/do_not_modify_windows_path.patch",
        "patches/install-in-runtime-and_archive.patch",
        "patches/do-not-make-symlinks-on-windows.patch",
        "patches/link-privately.patch",
        "patches/py313_support.patch"
      ],
      "sha256": "fe1e80c836150ff27049b291fe2f9a11eda9ef9831311df9e39ba16a63c392a0",
      "url": "https://github.com/Krande/med-copy/archive/refs/tags/4.1.1.tar.gz"
    },
    "test": {
      "commands": [
        "test -f ${PREFIX}/lib/libmed${SHLIB_EXT}",
        "nm ${PREFIX}/lib/libmedC.so | grep MEDlibraryNumVersion",
        "pytest -v tests"
      ],
      "files": [
        "tests"
      ],
      "imports": [
        "med"
      ],
      "requires": [
        "c_compiler_stub",
        "cxx_compiler_stub",
        "pytest"
      ]
    }
  },
  "linux_ppc64le_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "fortran_compiler_stub",
        "make",
        "swig"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "hdf5",
        "mpich",
        "openmpi",
        "python",
        "zlib"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "hdf5",
        "mpich",
        "openmpi",
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "cxx_compiler_stub",
        "pytest"
      ]
    }
  },
  "meta_yaml": {
    "about": {
      "description": "The purpose of the MED module is to provide a standard for storing and recovering computer data associated to numerical meshes and fields, and to facilitate the exchange between codes and solvers.\n",
      "dev_url": "https://git.salome-platform.org/gitweb/?p=modules/med.git;a=summary",
      "doc_url": "http://www.salome-platform.org/",
      "home": "https://www.salome-platform.org/user-section/about/med",
      "license": "LGPL-3.0-only",
      "license_family": "LGPL",
      "license_file": "COPYING",
      "summary": "MED : interoperable format for data interchange between mesh based solvers."
    },
    "build": {
      "number": "119",
      "run_exports": [
        "libmed mpi_mpich_*",
        "libmed nompi_*",
        "libmed mpi_openmpi_*"
      ],
      "string": "nompi_h1234567_119"
    },
    "extra": {
      "recipe-maintainers": [
        "Krande",
        "ldallolio",
        "looooo",
        "ldallolio-irt"
      ]
    },
    "package": {
      "name": "libmed",
      "version": "4.1.1"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "fortran_compiler_stub",
        "swig 4.2.1",
        "cmake",
        "make",
        "ninja"
      ],
      "host": [
        "python",
        "hdf5",
        "hdf5 * mpi_mpich_*",
        "zlib",
        "mpich",
        "hdf5 * nompi_*",
        "hdf5 * mpi_openmpi_*",
        "openmpi"
      ],
      "run": [
        "python",
        "mpich",
        "hdf5",
        "openmpi"
      ]
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "patches/ignore-hdf5-bounds-check-cmake.patch",
        "patches/ignore-hdf5-bounds-check-source.patch",
        "patches/do_not_modify_windows_path.patch",
        "patches/install-in-runtime-and_archive.patch",
        "patches/do-not-make-symlinks-on-windows.patch",
        "patches/link-privately.patch",
        "patches/py313_support.patch",
        "patches/disable-fortran.patch",
        "patches/cmake-modern-python.patch"
      ],
      "sha256": "fe1e80c836150ff27049b291fe2f9a11eda9ef9831311df9e39ba16a63c392a0",
      "url": "https://github.com/Krande/med-copy/archive/refs/tags/4.1.1.tar.gz"
    },
    "test": {
      "commands": [
        "test -f ${PREFIX}/lib/libmed${SHLIB_EXT}",
        "nm ${PREFIX}/lib/libmedC.so | grep MEDlibraryNumVersion",
        "pytest -v tests"
      ],
      "files": [
        "tests"
      ],
      "imports": [
        "med"
      ],
      "requires": [
        "c_compiler_stub",
        "cxx_compiler_stub",
        "pytest"
      ]
    }
  },
  "name": "libmed",
  "osx_64_meta_yaml": {
    "about": {
      "description": "The purpose of the MED module is to provide a standard for storing and recovering computer data associated to numerical meshes and fields, and to facilitate the exchange between codes and solvers.\n",
      "dev_url": "https://git.salome-platform.org/gitweb/?p=modules/med.git;a=summary",
      "doc_url": "http://www.salome-platform.org/",
      "home": "https://www.salome-platform.org/user-section/about/med",
      "license": "LGPL-3.0-only",
      "license_family": "LGPL",
      "license_file": "COPYING",
      "summary": "MED : interoperable format for data interchange between mesh based solvers."
    },
    "build": {
      "number": "119",
      "run_exports": [
        "libmed nompi_*"
      ],
      "string": "nompi_h1234567_119"
    },
    "extra": {
      "recipe-maintainers": [
        "Krande",
        "ldallolio",
        "looooo",
        "ldallolio-irt"
      ]
    },
    "package": {
      "name": "libmed",
      "version": "4.1.1"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "fortran_compiler_stub",
        "swig 4.2.1",
        "cmake",
        "make"
      ],
      "host": [
        "python",
        "hdf5",
        "hdf5 * nompi_*",
        "zlib"
      ],
      "run": [
        "python",
        "hdf5"
      ]
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "patches/ignore-hdf5-bounds-check-cmake.patch",
        "patches/ignore-hdf5-bounds-check-source.patch",
        "patches/do_not_modify_windows_path.patch",
        "patches/install-in-runtime-and_archive.patch",
        "patches/do-not-make-symlinks-on-windows.patch",
        "patches/link-privately.patch",
        "patches/py313_support.patch"
      ],
      "sha256": "fe1e80c836150ff27049b291fe2f9a11eda9ef9831311df9e39ba16a63c392a0",
      "url": "https://github.com/Krande/med-copy/archive/refs/tags/4.1.1.tar.gz"
    },
    "test": {
      "commands": [
        "test -f ${PREFIX}/lib/libmed${SHLIB_EXT}",
        "pytest -v tests"
      ],
      "files": [
        "tests"
      ],
      "imports": [
        "med"
      ],
      "requires": [
        "c_compiler_stub",
        "cxx_compiler_stub",
        "pytest"
      ]
    }
  },
  "osx_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "fortran_compiler_stub",
        "make",
        "swig"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "hdf5",
        "python",
        "zlib"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "hdf5",
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "cxx_compiler_stub",
        "pytest"
      ]
    }
  },
  "osx_arm64_meta_yaml": {
    "about": {
      "description": "The purpose of the MED module is to provide a standard for storing and recovering computer data associated to numerical meshes and fields, and to facilitate the exchange between codes and solvers.\n",
      "dev_url": "https://git.salome-platform.org/gitweb/?p=modules/med.git;a=summary",
      "doc_url": "http://www.salome-platform.org/",
      "home": "https://www.salome-platform.org/user-section/about/med",
      "license": "LGPL-3.0-only",
      "license_family": "LGPL",
      "license_file": "COPYING",
      "summary": "MED : interoperable format for data interchange between mesh based solvers."
    },
    "build": {
      "number": "119",
      "run_exports": [
        "libmed nompi_*"
      ],
      "string": "nompi_h1234567_119"
    },
    "extra": {
      "recipe-maintainers": [
        "Krande",
        "ldallolio",
        "looooo",
        "ldallolio-irt"
      ]
    },
    "package": {
      "name": "libmed",
      "version": "4.1.1"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "fortran_compiler_stub",
        "swig 4.2.1",
        "cmake",
        "make"
      ],
      "host": [
        "python",
        "hdf5",
        "hdf5 * nompi_*",
        "zlib"
      ],
      "run": [
        "python",
        "hdf5"
      ]
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "patches/ignore-hdf5-bounds-check-cmake.patch",
        "patches/ignore-hdf5-bounds-check-source.patch",
        "patches/do_not_modify_windows_path.patch",
        "patches/install-in-runtime-and_archive.patch",
        "patches/do-not-make-symlinks-on-windows.patch",
        "patches/link-privately.patch",
        "patches/py313_support.patch"
      ],
      "sha256": "fe1e80c836150ff27049b291fe2f9a11eda9ef9831311df9e39ba16a63c392a0",
      "url": "https://github.com/Krande/med-copy/archive/refs/tags/4.1.1.tar.gz"
    },
    "test": {
      "commands": [
        "test -f ${PREFIX}/lib/libmed${SHLIB_EXT}",
        "pytest -v tests"
      ],
      "files": [
        "tests"
      ],
      "imports": [
        "med"
      ],
      "requires": [
        "c_compiler_stub",
        "cxx_compiler_stub",
        "pytest"
      ]
    }
  },
  "osx_arm64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "fortran_compiler_stub",
        "make",
        "swig"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "hdf5",
        "python",
        "zlib"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "hdf5",
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "cxx_compiler_stub",
        "pytest"
      ]
    }
  },
  "outputs_names": {
    "__set__": true,
    "elements": [
      "libmed"
    ]
  },
  "parsing_error": false,
  "platforms": [
    "linux_64",
    "linux_aarch64",
    "linux_ppc64le",
    "osx_64",
    "osx_arm64",
    "win_64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/libmed.json"
  },
  "raw_meta_yaml": "{% set name = \"libmed\" %}\n{% set version = \"4.1.1\" %}\n{% set build = 19 %}\n{% set sha256 = \"fe1e80c836150ff27049b291fe2f9a11eda9ef9831311df9e39ba16a63c392a0\" %}\n\n# ensure mpi is defined (needed for conda-smithy recipe-lint)\n{% set mpi = mpi or 'nompi' %}\n\n{% if mpi == 'nompi' %}\n# prioritize nompi variant via build number\n{% set build = build + 100 %}\n{% endif %}\n\npackage:\n  name: {{ name }}\n  version: {{ version }}\n\nsource:\n # url: https://files.salome-platform.org/Salome/medfile/med-{{ version }}.tar.gz # blacklisting conda forge\n  url: https://github.com/Krande/med-copy/archive/refs/tags/{{ version }}.tar.gz\n  sha256: {{ sha256 }}\n  patches:\n    # Part of this patch is required to add a few system definitions which\n    # should indicate that they are using the 1.10 API not the 1.6 API\n    # https://github.com/HDFGroup/hdf5/issues/3797\n    - patches/ignore-hdf5-bounds-check-cmake.patch\n    - patches/ignore-hdf5-bounds-check-source.patch\n    - patches/disable-fortran.patch  # [win]\n    - patches/do_not_modify_windows_path.patch\n    - patches/install-in-runtime-and_archive.patch\n    # without this patch, OSX finds the system python since it is a newer version\n    # I (hmaarrfk) am about 90% sure it is because SWIG + CMake 3.12 FindPython + OSX\n    # has some bugs... so for OSX (and linux), we just fallback to the standard\n    # build process\n    - patches/cmake-modern-python.patch  # [win]\n    - patches/do-not-make-symlinks-on-windows.patch\n    - patches/link-privately.patch\n    - patches/py313_support.patch\n#    - patches/fix_swig_4_3_support.patch\n\nbuild:\n  number: {{ build }}\n  skip: true  # [(osx or win) and mpi != \"nompi\"]\n  # Per https://conda-forge.org/docs/maintainer/knowledge_base.html#preferring-a-provider-usually-nompi\n  # add build string so packages can depend on\n  # mpi or nompi variants explicitly:\n  # `pkg * mpi_mpich_*` for mpich\n  # `pkg * mpi_*` for any mpi\n  # `pkg * nompi_*` for no mpi\n\n  {% if mpi != 'nompi' %}\n  {% set mpi_prefix = \"mpi_\" + mpi %}\n  {% else %}\n  {% set mpi_prefix = \"nompi\" %}\n  {% endif %}\n  string: \"{{ mpi_prefix }}_h{{ PKG_HASH }}_{{ build }}\"  \n  run_exports:\n    - {{ pin_subpackage(name, 'x.x') }} {{ mpi_prefix }}_*\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ stdlib(\"c\") }}\n    - {{ compiler('cxx') }}\n    - {{ compiler('fortran') }}           # [not win]\n    - swig 4.2.1  # SWIG 4.3 is not ABI compatible. See https://github.com/conda-forge/libmed-feedstock/issues/74\n    - cmake\n    - ninja                               # [win]\n    - make                                # [unix]\n    - python                              # [build_platform != target_platform]\n    - cross-python_{{ target_platform }}  # [build_platform != target_platform]\n  host:\n    - python\n    # Leave one bare \"hdf5\" here with no build number constraints\n    # So that the pinning can take effect\n    # https://github.com/conda-forge/libmed-feedstock/issues/77\n    - hdf5\n    - hdf5 * {{ mpi_prefix }}_*  # [mpi != \"nompi\"]\n    - hdf5 * nompi_*  # [mpi == \"nompi\"]\n    - zlib\n    - {{ mpi }}  # [mpi != \"nompi\"]\n  run:\n    - python\n    - {{ mpi }}  # [mpi != \"nompi\"]\n    - {{ pin_compatible('hdf5', max_pin='x.x') }}\n\ntest:\n  requires:\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n    - pytest\n  files:\n    - tests\n  imports:\n    - med\n  commands:\n    - test -f ${PREFIX}/lib/libmed${SHLIB_EXT}                   # [unix]\n    - nm ${PREFIX}/lib/libmedC.so | grep MEDlibraryNumVersion    # [linux]\n    - pytest -v tests  # [build_platform == target_platform]\n\nabout:\n  home: https://www.salome-platform.org/user-section/about/med\n  license: LGPL-3.0-only\n  license_family: LGPL\n  license_file: COPYING\n  summary: 'MED : interoperable format for data interchange between mesh based solvers.'\n  description: |\n    The purpose of the MED module is to provide a standard for storing and recovering computer data associated to numerical meshes and fields, and to facilitate the exchange between codes and solvers.\n  doc_url: http://www.salome-platform.org/\n  dev_url: https://git.salome-platform.org/gitweb/?p=modules/med.git;a=summary\n\nextra:\n  recipe-maintainers:\n    - Krande\n    - ldallolio\n    - looooo\n    - ldallolio-irt\n",
  "req": {
    "__set__": true,
    "elements": [
      "c_compiler_stub",
      "c_stdlib_stub",
      "cmake",
      "cxx_compiler_stub",
      "fortran_compiler_stub",
      "hdf5",
      "make",
      "mpich",
      "ninja",
      "openmpi",
      "python",
      "swig",
      "zlib"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "fortran_compiler_stub",
        "make",
        "ninja",
        "swig"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "fortran_compiler_stub",
        "hdf5",
        "mpich",
        "openmpi",
        "python",
        "zlib"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "fortran_compiler_stub",
        "hdf5",
        "mpich",
        "openmpi",
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "cxx_compiler_stub",
        "pytest"
      ]
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "fortran_compiler_stub",
        "make",
        "ninja",
        "swig 4.2.1"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "hdf5",
        "hdf5 * mpi_mpich_*",
        "hdf5 * mpi_openmpi_*",
        "hdf5 * nompi_*",
        "mpich",
        "openmpi",
        "python",
        "zlib"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "hdf5",
        "mpich",
        "openmpi",
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "cxx_compiler_stub",
        "pytest"
      ]
    }
  },
  "url": "https://github.com/Krande/med-copy/archive/refs/tags/4.1.1.tar.gz",
  "version": "4.1.1",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/libmed.json"
  },
  "win_64_meta_yaml": {
    "about": {
      "description": "The purpose of the MED module is to provide a standard for storing and recovering computer data associated to numerical meshes and fields, and to facilitate the exchange between codes and solvers.\n",
      "dev_url": "https://git.salome-platform.org/gitweb/?p=modules/med.git;a=summary",
      "doc_url": "http://www.salome-platform.org/",
      "home": "https://www.salome-platform.org/user-section/about/med",
      "license": "LGPL-3.0-only",
      "license_family": "LGPL",
      "license_file": "COPYING",
      "summary": "MED : interoperable format for data interchange between mesh based solvers."
    },
    "build": {
      "number": "119",
      "run_exports": [
        "libmed nompi_*"
      ],
      "string": "nompi_h1234567_119"
    },
    "extra": {
      "recipe-maintainers": [
        "Krande",
        "ldallolio",
        "looooo",
        "ldallolio-irt"
      ]
    },
    "package": {
      "name": "libmed",
      "version": "4.1.1"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "swig 4.2.1",
        "cmake",
        "ninja"
      ],
      "host": [
        "python",
        "hdf5",
        "hdf5 * nompi_*",
        "zlib"
      ],
      "run": [
        "python",
        "hdf5"
      ]
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "patches/ignore-hdf5-bounds-check-cmake.patch",
        "patches/ignore-hdf5-bounds-check-source.patch",
        "patches/disable-fortran.patch",
        "patches/do_not_modify_windows_path.patch",
        "patches/install-in-runtime-and_archive.patch",
        "patches/cmake-modern-python.patch",
        "patches/do-not-make-symlinks-on-windows.patch",
        "patches/link-privately.patch",
        "patches/py313_support.patch"
      ],
      "sha256": "fe1e80c836150ff27049b291fe2f9a11eda9ef9831311df9e39ba16a63c392a0",
      "url": "https://github.com/Krande/med-copy/archive/refs/tags/4.1.1.tar.gz"
    },
    "test": {
      "commands": [
        "pytest -v tests"
      ],
      "files": [
        "tests"
      ],
      "imports": [
        "med"
      ],
      "requires": [
        "c_compiler_stub",
        "cxx_compiler_stub",
        "pytest"
      ]
    }
  },
  "win_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "ninja",
        "swig"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "hdf5",
        "python",
        "zlib"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "hdf5",
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "cxx_compiler_stub",
        "pytest"
      ]
    }
  }
}