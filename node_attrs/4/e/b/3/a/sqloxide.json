{
  "archived": false,
  "branch": "main",
  "conda-forge.yml": {
    "conda_build": {
      "pkg_format": "2"
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    }
  },
  "feedstock_hash": "0cd330a71883bb187139a70d1e2395ff376aab48",
  "feedstock_hash_ts": 1730848626,
  "feedstock_name": "sqloxide",
  "hash_type": "sha256",
  "linux_64_meta_yaml": {
    "about": {
      "description": "The original goal of this project was to have a very fast, efficient, and accurate\nSQL parser I could use for building data lineage graphs across large code bases\n(think hundreds of auto-generated .sql files). Most existing sql parsing approaches\nfor python are either very slow or not accurate (especially in regards to deeply\nnested queries, sub-selects and/or table aliases). Looking to the rust community\nfor support, I found the excellent sqlparser-rs crate which is quite easy to wrap\nin python code.\n",
      "home": "https://github.com/wseaton/sqloxide",
      "license": "MIT",
      "license_family": "MIT",
      "license_file": "LICENSE",
      "summary": "Python bindings for sqlparser-rs"
    },
    "build": {
      "number": "1",
      "script": "PYTHON -m pip install . -vv"
    },
    "extra": {
      "recipe-maintainers": [
        "xmnlab"
      ]
    },
    "package": {
      "name": "sqloxide",
      "version": "0.1.18"
    },
    "requirements": {
      "build": [
        "rust_compiler_stub",
        "c_compiler_stub"
      ],
      "host": [
        "python",
        "pip",
        "poetry-core >=1.0.0",
        "setuptools >=41.0.0",
        "wheel",
        "setuptools-rust >=0.10.2"
      ],
      "run": [
        "python"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "7b7fe7ffa1de10652d42323911c0683442ad114a23877859876eb44bcddabdf6",
      "url": "https://github.com/wseaton/sqloxide/archive/refs/tags/v0.1.18.tar.gz"
    },
    "test": {
      "commands": [
        "pip check"
      ],
      "imports": [
        "sqloxide"
      ],
      "requires": [
        "pip"
      ]
    }
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "rust_compiler_stub"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "pip",
        "poetry-core",
        "python",
        "setuptools",
        "setuptools-rust",
        "wheel"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "pip"
      ]
    }
  },
  "meta_yaml": {
    "about": {
      "description": "The original goal of this project was to have a very fast, efficient, and accurate\nSQL parser I could use for building data lineage graphs across large code bases\n(think hundreds of auto-generated .sql files). Most existing sql parsing approaches\nfor python are either very slow or not accurate (especially in regards to deeply\nnested queries, sub-selects and/or table aliases). Looking to the rust community\nfor support, I found the excellent sqlparser-rs crate which is quite easy to wrap\nin python code.\n",
      "home": "https://github.com/wseaton/sqloxide",
      "license": "MIT",
      "license_family": "MIT",
      "license_file": "LICENSE",
      "summary": "Python bindings for sqlparser-rs"
    },
    "build": {
      "number": "1",
      "script": "PYTHON -m pip install . -vv"
    },
    "extra": {
      "recipe-maintainers": [
        "xmnlab"
      ]
    },
    "package": {
      "name": "sqloxide",
      "version": "0.1.18"
    },
    "requirements": {
      "build": [
        "rust_compiler_stub",
        "c_compiler_stub"
      ],
      "host": [
        "python",
        "pip",
        "poetry-core >=1.0.0",
        "setuptools >=41.0.0",
        "wheel",
        "setuptools-rust >=0.10.2"
      ],
      "run": [
        "python"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "7b7fe7ffa1de10652d42323911c0683442ad114a23877859876eb44bcddabdf6",
      "url": "https://github.com/wseaton/sqloxide/archive/refs/tags/v0.1.18.tar.gz"
    },
    "test": {
      "commands": [
        "pip check"
      ],
      "imports": [
        "sqloxide"
      ],
      "requires": [
        "pip"
      ]
    }
  },
  "name": "sqloxide",
  "osx_64_meta_yaml": {
    "about": {
      "description": "The original goal of this project was to have a very fast, efficient, and accurate\nSQL parser I could use for building data lineage graphs across large code bases\n(think hundreds of auto-generated .sql files). Most existing sql parsing approaches\nfor python are either very slow or not accurate (especially in regards to deeply\nnested queries, sub-selects and/or table aliases). Looking to the rust community\nfor support, I found the excellent sqlparser-rs crate which is quite easy to wrap\nin python code.\n",
      "home": "https://github.com/wseaton/sqloxide",
      "license": "MIT",
      "license_family": "MIT",
      "license_file": "LICENSE",
      "summary": "Python bindings for sqlparser-rs"
    },
    "build": {
      "number": "1",
      "script": "PYTHON -m pip install . -vv"
    },
    "extra": {
      "recipe-maintainers": [
        "xmnlab"
      ]
    },
    "package": {
      "name": "sqloxide",
      "version": "0.1.18"
    },
    "requirements": {
      "build": [
        "rust_compiler_stub",
        "c_compiler_stub"
      ],
      "host": [
        "python",
        "pip",
        "poetry-core >=1.0.0",
        "setuptools >=41.0.0",
        "wheel",
        "setuptools-rust >=0.10.2"
      ],
      "run": [
        "python"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "7b7fe7ffa1de10652d42323911c0683442ad114a23877859876eb44bcddabdf6",
      "url": "https://github.com/wseaton/sqloxide/archive/refs/tags/v0.1.18.tar.gz"
    },
    "test": {
      "commands": [
        "pip check"
      ],
      "imports": [
        "sqloxide"
      ],
      "requires": [
        "pip"
      ]
    }
  },
  "osx_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "rust_compiler_stub"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "pip",
        "poetry-core",
        "python",
        "setuptools",
        "setuptools-rust",
        "wheel"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "pip"
      ]
    }
  },
  "outputs_names": {
    "__set__": true,
    "elements": [
      "sqloxide"
    ]
  },
  "parsing_error": false,
  "platforms": [
    "linux_64",
    "osx_64",
    "win_64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/sqloxide.json"
  },
  "raw_meta_yaml": "{% set name = \"sqloxide\" %}\n{% set version = \"0.1.18\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://github.com/wseaton/{{ name }}/archive/refs/tags/v{{ version }}.tar.gz\n  sha256: 7b7fe7ffa1de10652d42323911c0683442ad114a23877859876eb44bcddabdf6\n\nbuild:\n  script: {{ PYTHON }} -m pip install . -vv\n  number: 1\n\nrequirements:\n  build:\n    - {{ compiler('rust') }}\n    - {{ compiler('c') }}\n  host:\n    - python\n    - pip\n    - poetry-core >=1.0.0\n    - setuptools >=41.0.0\n    - wheel\n    - setuptools-rust >=0.10.2\n  run:\n    - python\n\ntest:\n  imports:\n    - sqloxide\n  requires:\n    - pip\n  commands:\n    - pip check\n\nabout:\n  home: https://github.com/wseaton/{{ name }}\n  summary: Python bindings for sqlparser-rs\n  description: |\n    The original goal of this project was to have a very fast, efficient, and accurate \n    SQL parser I could use for building data lineage graphs across large code bases \n    (think hundreds of auto-generated .sql files). Most existing sql parsing approaches \n    for python are either very slow or not accurate (especially in regards to deeply \n    nested queries, sub-selects and/or table aliases). Looking to the rust community \n    for support, I found the excellent sqlparser-rs crate which is quite easy to wrap \n    in python code.\n  license: MIT\n  license_family: MIT\n  license_file: LICENSE\n\nextra:\n  recipe-maintainers:\n    - xmnlab\n",
  "req": {
    "__set__": true,
    "elements": [
      "c_compiler_stub",
      "pip",
      "poetry-core",
      "python",
      "rust_compiler_stub",
      "setuptools",
      "setuptools-rust",
      "wheel"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "rust_compiler_stub"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "pip",
        "poetry-core",
        "python",
        "setuptools",
        "setuptools-rust",
        "wheel"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "pip"
      ]
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "rust_compiler_stub"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "pip",
        "poetry-core >=1.0.0",
        "python",
        "setuptools >=41.0.0",
        "setuptools-rust >=0.10.2",
        "wheel"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "pip"
      ]
    }
  },
  "url": "https://github.com/wseaton/sqloxide/archive/refs/tags/v0.1.18.tar.gz",
  "version": "0.1.18",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/sqloxide.json"
  },
  "win_64_meta_yaml": {
    "about": {
      "description": "The original goal of this project was to have a very fast, efficient, and accurate\nSQL parser I could use for building data lineage graphs across large code bases\n(think hundreds of auto-generated .sql files). Most existing sql parsing approaches\nfor python are either very slow or not accurate (especially in regards to deeply\nnested queries, sub-selects and/or table aliases). Looking to the rust community\nfor support, I found the excellent sqlparser-rs crate which is quite easy to wrap\nin python code.\n",
      "home": "https://github.com/wseaton/sqloxide",
      "license": "MIT",
      "license_family": "MIT",
      "license_file": "LICENSE",
      "summary": "Python bindings for sqlparser-rs"
    },
    "build": {
      "number": "1",
      "script": "PYTHON -m pip install . -vv"
    },
    "extra": {
      "recipe-maintainers": [
        "xmnlab"
      ]
    },
    "package": {
      "name": "sqloxide",
      "version": "0.1.18"
    },
    "requirements": {
      "build": [
        "rust_compiler_stub",
        "c_compiler_stub"
      ],
      "host": [
        "python",
        "pip",
        "poetry-core >=1.0.0",
        "setuptools >=41.0.0",
        "wheel",
        "setuptools-rust >=0.10.2"
      ],
      "run": [
        "python"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "7b7fe7ffa1de10652d42323911c0683442ad114a23877859876eb44bcddabdf6",
      "url": "https://github.com/wseaton/sqloxide/archive/refs/tags/v0.1.18.tar.gz"
    },
    "test": {
      "commands": [
        "pip check"
      ],
      "imports": [
        "sqloxide"
      ],
      "requires": [
        "pip"
      ]
    }
  },
  "win_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "rust_compiler_stub"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "pip",
        "poetry-core",
        "python",
        "setuptools",
        "setuptools-rust",
        "wheel"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "pip"
      ]
    }
  }
}