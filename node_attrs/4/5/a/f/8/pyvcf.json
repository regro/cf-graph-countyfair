{
  "archived": false,
  "branch": "main",
  "conda-forge.yml": {
    "conda_build": {
      "pkg_format": "2"
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    },
    "provider": {
      "linux_aarch64": "default",
      "linux_ppc64le": "default"
    }
  },
  "feedstock_hash": "1338b3be6e4707c7de2a9415c47c3e5d9f36843e",
  "feedstock_hash_ts": 1730883999,
  "feedstock_name": "pyvcf",
  "hash_type": "sha256",
  "linux_64_meta_yaml": {
    "about": {
      "description": "The intent of this module is to mimic the csv module in\nthe Python stdlib, as opposed to more flexible serialization\nformats like JSON or YAML. vcf will attempt to parse the\ncontent of each record based on the data types specified in\nthe meta-information lines -- specifically the \\##INFO and \\##FORMAT\nlines. If these lines are missing or incomplete, it will check\nagainst the reserved types mentioned in the spec. Failing\nthat, it will just return strings.\n",
      "dev_url": "https://github.com/jamescasbon/PyVCF",
      "doc_url": "http://pyvcf.readthedocs.io",
      "home": "https://github.com/jamescasbon/PyVCF",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE",
      "summary": "A Variant Call Format (VCF) v4.0 and v4.1 parser for Python."
    },
    "build": {
      "number": "1003",
      "script": "PYTHON -m pip install . --no-deps -vv"
    },
    "extra": {
      "recipe-maintainers": [
        "acaprez",
        "bgruening",
        "corburn",
        "kyleabeauchamp",
        "pvanheus",
        "PertuyF",
        "sodre"
      ]
    },
    "package": {
      "name": "pyvcf",
      "version": "0.6.8"
    },
    "requirements": {
      "host": [
        "python",
        "pip",
        "setuptools <58"
      ],
      "run": [
        "python"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "e9d872513d179d229ab61da47a33f42726e9613784d1cb2bac3f8e2642f6f9d9",
      "url": "https://pypi.io/packages/source/P/PyVCF/PyVCF-0.6.8.tar.gz"
    },
    "test": {
      "imports": [
        "vcf"
      ]
    }
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": []
    },
    "host": {
      "__set__": true,
      "elements": [
        "pip",
        "python",
        "setuptools"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "linux_aarch64_meta_yaml": {
    "about": {
      "description": "The intent of this module is to mimic the csv module in\nthe Python stdlib, as opposed to more flexible serialization\nformats like JSON or YAML. vcf will attempt to parse the\ncontent of each record based on the data types specified in\nthe meta-information lines -- specifically the \\##INFO and \\##FORMAT\nlines. If these lines are missing or incomplete, it will check\nagainst the reserved types mentioned in the spec. Failing\nthat, it will just return strings.\n",
      "dev_url": "https://github.com/jamescasbon/PyVCF",
      "doc_url": "http://pyvcf.readthedocs.io",
      "home": "https://github.com/jamescasbon/PyVCF",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE",
      "summary": "A Variant Call Format (VCF) v4.0 and v4.1 parser for Python."
    },
    "build": {
      "number": "1003",
      "script": "PYTHON -m pip install . --no-deps -vv"
    },
    "extra": {
      "recipe-maintainers": [
        "acaprez",
        "bgruening",
        "corburn",
        "kyleabeauchamp",
        "pvanheus",
        "PertuyF",
        "sodre"
      ]
    },
    "package": {
      "name": "pyvcf",
      "version": "0.6.8"
    },
    "requirements": {
      "host": [
        "python",
        "pip",
        "setuptools <58"
      ],
      "run": [
        "python"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "e9d872513d179d229ab61da47a33f42726e9613784d1cb2bac3f8e2642f6f9d9",
      "url": "https://pypi.io/packages/source/P/PyVCF/PyVCF-0.6.8.tar.gz"
    },
    "test": {
      "imports": [
        "vcf"
      ]
    }
  },
  "linux_aarch64_requirements": {
    "build": {
      "__set__": true,
      "elements": []
    },
    "host": {
      "__set__": true,
      "elements": [
        "pip",
        "python",
        "setuptools"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "linux_ppc64le_meta_yaml": {
    "about": {
      "description": "The intent of this module is to mimic the csv module in\nthe Python stdlib, as opposed to more flexible serialization\nformats like JSON or YAML. vcf will attempt to parse the\ncontent of each record based on the data types specified in\nthe meta-information lines -- specifically the \\##INFO and \\##FORMAT\nlines. If these lines are missing or incomplete, it will check\nagainst the reserved types mentioned in the spec. Failing\nthat, it will just return strings.\n",
      "dev_url": "https://github.com/jamescasbon/PyVCF",
      "doc_url": "http://pyvcf.readthedocs.io",
      "home": "https://github.com/jamescasbon/PyVCF",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE",
      "summary": "A Variant Call Format (VCF) v4.0 and v4.1 parser for Python."
    },
    "build": {
      "number": "1003",
      "script": "PYTHON -m pip install . --no-deps -vv"
    },
    "extra": {
      "recipe-maintainers": [
        "acaprez",
        "bgruening",
        "corburn",
        "kyleabeauchamp",
        "pvanheus",
        "PertuyF",
        "sodre"
      ]
    },
    "package": {
      "name": "pyvcf",
      "version": "0.6.8"
    },
    "requirements": {
      "host": [
        "python",
        "pip",
        "setuptools <58"
      ],
      "run": [
        "python"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "e9d872513d179d229ab61da47a33f42726e9613784d1cb2bac3f8e2642f6f9d9",
      "url": "https://pypi.io/packages/source/P/PyVCF/PyVCF-0.6.8.tar.gz"
    },
    "test": {
      "imports": [
        "vcf"
      ]
    }
  },
  "linux_ppc64le_requirements": {
    "build": {
      "__set__": true,
      "elements": []
    },
    "host": {
      "__set__": true,
      "elements": [
        "pip",
        "python",
        "setuptools"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "meta_yaml": {
    "about": {
      "description": "The intent of this module is to mimic the csv module in\nthe Python stdlib, as opposed to more flexible serialization\nformats like JSON or YAML. vcf will attempt to parse the\ncontent of each record based on the data types specified in\nthe meta-information lines -- specifically the \\##INFO and \\##FORMAT\nlines. If these lines are missing or incomplete, it will check\nagainst the reserved types mentioned in the spec. Failing\nthat, it will just return strings.\n",
      "dev_url": "https://github.com/jamescasbon/PyVCF",
      "doc_url": "http://pyvcf.readthedocs.io",
      "home": "https://github.com/jamescasbon/PyVCF",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE",
      "summary": "A Variant Call Format (VCF) v4.0 and v4.1 parser for Python."
    },
    "build": {
      "number": "1003",
      "script": "PYTHON -m pip install . --no-deps -vv"
    },
    "extra": {
      "recipe-maintainers": [
        "acaprez",
        "bgruening",
        "corburn",
        "kyleabeauchamp",
        "pvanheus",
        "PertuyF",
        "sodre"
      ]
    },
    "package": {
      "name": "pyvcf",
      "version": "0.6.8"
    },
    "requirements": {
      "host": [
        "python",
        "pip",
        "setuptools <58"
      ],
      "run": [
        "python"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "e9d872513d179d229ab61da47a33f42726e9613784d1cb2bac3f8e2642f6f9d9",
      "url": "https://pypi.io/packages/source/P/PyVCF/PyVCF-0.6.8.tar.gz"
    },
    "test": {
      "imports": [
        "vcf"
      ]
    }
  },
  "name": "pyvcf",
  "osx_64_meta_yaml": {
    "about": {
      "description": "The intent of this module is to mimic the csv module in\nthe Python stdlib, as opposed to more flexible serialization\nformats like JSON or YAML. vcf will attempt to parse the\ncontent of each record based on the data types specified in\nthe meta-information lines -- specifically the \\##INFO and \\##FORMAT\nlines. If these lines are missing or incomplete, it will check\nagainst the reserved types mentioned in the spec. Failing\nthat, it will just return strings.\n",
      "dev_url": "https://github.com/jamescasbon/PyVCF",
      "doc_url": "http://pyvcf.readthedocs.io",
      "home": "https://github.com/jamescasbon/PyVCF",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE",
      "summary": "A Variant Call Format (VCF) v4.0 and v4.1 parser for Python."
    },
    "build": {
      "number": "1003",
      "script": "PYTHON -m pip install . --no-deps -vv"
    },
    "extra": {
      "recipe-maintainers": [
        "acaprez",
        "bgruening",
        "corburn",
        "kyleabeauchamp",
        "pvanheus",
        "PertuyF",
        "sodre"
      ]
    },
    "package": {
      "name": "pyvcf",
      "version": "0.6.8"
    },
    "requirements": {
      "host": [
        "python",
        "pip",
        "setuptools <58"
      ],
      "run": [
        "python"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "e9d872513d179d229ab61da47a33f42726e9613784d1cb2bac3f8e2642f6f9d9",
      "url": "https://pypi.io/packages/source/P/PyVCF/PyVCF-0.6.8.tar.gz"
    },
    "test": {
      "imports": [
        "vcf"
      ]
    }
  },
  "osx_64_requirements": {
    "build": {
      "__set__": true,
      "elements": []
    },
    "host": {
      "__set__": true,
      "elements": [
        "pip",
        "python",
        "setuptools"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "outputs_names": {
    "__set__": true,
    "elements": [
      "pyvcf"
    ]
  },
  "parsing_error": false,
  "platforms": [
    "linux_64",
    "linux_aarch64",
    "linux_ppc64le",
    "osx_64",
    "win_64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/pyvcf.json"
  },
  "raw_meta_yaml": "{% set name = \"PyVCF\" %}\n{% set version = \"0.6.8\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: e9d872513d179d229ab61da47a33f42726e9613784d1cb2bac3f8e2642f6f9d9\n\nbuild:\n  # do not use noarch: setup.py use_2to3=true\n  number: 1003\n  script: {{ PYTHON }} -m pip install . --no-deps -vv\n\nrequirements:\n  host:\n    - python\n    - pip\n    - setuptools <58\n  run:\n    - python\n\ntest:\n  imports:\n    - vcf\n\nabout:\n  home: https://github.com/jamescasbon/PyVCF\n  license: BSD-3-Clause\n  license_family: BSD\n  license_file: LICENSE\n  summary: 'A Variant Call Format (VCF) v4.0 and v4.1 parser for Python.'\n\n  description: |\n    The intent of this module is to mimic the csv module in \n    the Python stdlib, as opposed to more flexible serialization \n    formats like JSON or YAML. vcf will attempt to parse the \n    content of each record based on the data types specified in \n    the meta-information lines -- specifically the \\##INFO and \\##FORMAT \n    lines. If these lines are missing or incomplete, it will check \n    against the reserved types mentioned in the spec. Failing \n    that, it will just return strings.\n  doc_url: http://pyvcf.readthedocs.io\n  dev_url: https://github.com/jamescasbon/PyVCF\n\nextra:\n  recipe-maintainers:\n    - acaprez\n    - bgruening\n    - corburn\n    - kyleabeauchamp\n    - pvanheus\n    - PertuyF\n    - sodre\n",
  "req": {
    "__set__": true,
    "elements": [
      "pip",
      "python",
      "setuptools"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": []
    },
    "host": {
      "__set__": true,
      "elements": [
        "pip",
        "python",
        "setuptools"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": []
    },
    "host": {
      "__set__": true,
      "elements": [
        "pip",
        "python",
        "setuptools <58"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "url": "https://pypi.io/packages/source/P/PyVCF/PyVCF-0.6.8.tar.gz",
  "version": "0.6.8",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/pyvcf.json"
  },
  "win_64_meta_yaml": {
    "about": {
      "description": "The intent of this module is to mimic the csv module in\nthe Python stdlib, as opposed to more flexible serialization\nformats like JSON or YAML. vcf will attempt to parse the\ncontent of each record based on the data types specified in\nthe meta-information lines -- specifically the \\##INFO and \\##FORMAT\nlines. If these lines are missing or incomplete, it will check\nagainst the reserved types mentioned in the spec. Failing\nthat, it will just return strings.\n",
      "dev_url": "https://github.com/jamescasbon/PyVCF",
      "doc_url": "http://pyvcf.readthedocs.io",
      "home": "https://github.com/jamescasbon/PyVCF",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE",
      "summary": "A Variant Call Format (VCF) v4.0 and v4.1 parser for Python."
    },
    "build": {
      "number": "1003",
      "script": "PYTHON -m pip install . --no-deps -vv"
    },
    "extra": {
      "recipe-maintainers": [
        "acaprez",
        "bgruening",
        "corburn",
        "kyleabeauchamp",
        "pvanheus",
        "PertuyF",
        "sodre"
      ]
    },
    "package": {
      "name": "pyvcf",
      "version": "0.6.8"
    },
    "requirements": {
      "host": [
        "python",
        "pip",
        "setuptools <58"
      ],
      "run": [
        "python"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "e9d872513d179d229ab61da47a33f42726e9613784d1cb2bac3f8e2642f6f9d9",
      "url": "https://pypi.io/packages/source/P/PyVCF/PyVCF-0.6.8.tar.gz"
    },
    "test": {
      "imports": [
        "vcf"
      ]
    }
  },
  "win_64_requirements": {
    "build": {
      "__set__": true,
      "elements": []
    },
    "host": {
      "__set__": true,
      "elements": [
        "pip",
        "python",
        "setuptools"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  }
}