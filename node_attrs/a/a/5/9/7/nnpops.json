{
  "archived": false,
  "branch": "main",
  "conda-forge.yml": {
    "azure": {
      "free_disk_space": true
    },
    "build_platform": {
      "osx_arm64": "osx_64"
    },
    "conda_build": {
      "pkg_format": "2"
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    },
    "test": "native_and_emulated"
  },
  "feedstock_name": "nnpops",
  "hash_type": "sha256",
  "linux_64_meta_yaml": {
    "about": {
      "home": "https://github.com/openmm/NNPOps",
      "license": "MIT",
      "license_family": "MIT",
      "license_file": "LICENSE",
      "summary": "High performance implementations of operations used in Neural Network Potentials"
    },
    "build": {
      "missing_dso_whitelist": [
        "*/libcuda.*"
      ],
      "number": "14",
      "rpaths": [
        "lib/",
        "SP_DIR/torch/lib"
      ],
      "string": "cuda126py313h1234567_14"
    },
    "extra": {
      "recipe-maintainers": [
        "raimis",
        "mikemhenry",
        "h-vetinari",
        "RaulPPelaez"
      ]
    },
    "package": {
      "name": "nnpops",
      "version": "0.6"
    },
    "requirements": {
      "build": [
        "cxx_compiler_stub",
        "c_stdlib_stub",
        "make",
        "cmake",
        "cuda_compiler_stub",
        "cuda-version 12.6"
      ],
      "host": [
        "python",
        "pytorch",
        "pytorch =*=cpu*",
        "pytorch =*=cuda*"
      ],
      "run": [
        "python",
        "torchani",
        "cuda-version"
      ],
      "run_constrained": [
        "pytorch =*=cpu*",
        "pytorch =*=cuda*"
      ]
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "patches/cpp17.patch"
      ],
      "sha256": "d7854a3506720aa7536ce64ea9b8d621cad5c024ba4979f2156afcc88b2117a3",
      "url": "https://github.com/openmm/NNPOps/archive/refs/tags/v0.6.tar.gz"
    },
    "test": {
      "commands": "cd ${CONDA_PREFIX}/share/nnpops/tests\nls -al\nset +e\nsummary=\"\"\nexitcode=0\nfor f in Test*.py; do\n  if [[ $f == *Cuda* || $f == *OpenCL* ]]; then\n    continue\n  fi\n  echo \"Running $f...\"\n  pytest -v ./${f}\n  thisexitcode=$?\n  summary+=\"\\n${f}: \"\n  if [[ $thisexitcode == 0 ]]; then summary+=\"OK\"; else summary+=\"FAILED\"; fi\n  ((exitcode+=$thisexitcode))\ndone\necho \"-------\"\necho \"Summary\"\necho \"-------\"\necho -e \"${summary}\"\nexit $exitcode\n",
      "imports": [
        "NNPOps",
        "NNPOps.OptimizedTorchANI"
      ],
      "requires": [
        "mdtraj",
        "pytest",
        "numpy"
      ]
    }
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_stdlib_stub",
        "cmake",
        "cuda-version",
        "cuda_compiler_stub",
        "cxx_compiler_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "python",
        "pytorch"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "cuda-version",
        "python",
        "torchani"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "mdtraj",
        "numpy",
        "pytest"
      ]
    }
  },
  "meta_yaml": {
    "about": {
      "home": "https://github.com/openmm/NNPOps",
      "license": "MIT",
      "license_family": "MIT",
      "license_file": "LICENSE",
      "summary": "High performance implementations of operations used in Neural Network Potentials"
    },
    "build": {
      "missing_dso_whitelist": null,
      "number": "14",
      "rpaths": [
        "lib/",
        "SP_DIR/torch/lib"
      ],
      "string": "cpu_py313h1234567_14"
    },
    "extra": {
      "recipe-maintainers": [
        "raimis",
        "mikemhenry",
        "h-vetinari",
        "RaulPPelaez"
      ]
    },
    "package": {
      "name": "nnpops",
      "version": "0.6"
    },
    "requirements": {
      "build": [
        "cxx_compiler_stub",
        "c_stdlib_stub",
        "make",
        "cmake",
        "cuda_compiler_stub",
        "cuda-version 12.6"
      ],
      "host": [
        "python",
        "pytorch",
        "pytorch =*=cpu*",
        "pytorch =*=cuda*"
      ],
      "run": [
        "python",
        "torchani",
        "cuda-version"
      ],
      "run_constrained": [
        "pytorch =*=cpu*",
        "pytorch =*=cuda*"
      ]
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "patches/cpp17.patch",
        "patches/fix-osx-lib-loading.patch"
      ],
      "sha256": "d7854a3506720aa7536ce64ea9b8d621cad5c024ba4979f2156afcc88b2117a3",
      "url": "https://github.com/openmm/NNPOps/archive/refs/tags/v0.6.tar.gz"
    },
    "test": {
      "commands": "cd ${CONDA_PREFIX}/share/nnpops/tests\nls -al\nset +e\nsummary=\"\"\nexitcode=0\nfor f in Test*.py; do\n  if [[ $f == *Cuda* || $f == *OpenCL* ]]; then\n    continue\n  fi\n  echo \"Running $f...\"\n  pytest -v ./${f}\n  thisexitcode=$?\n  summary+=\"\\n${f}: \"\n  if [[ $thisexitcode == 0 ]]; then summary+=\"OK\"; else summary+=\"FAILED\"; fi\n  ((exitcode+=$thisexitcode))\ndone\necho \"-------\"\necho \"Summary\"\necho \"-------\"\necho -e \"${summary}\"\nexit $exitcode\n",
      "imports": [
        "NNPOps",
        "NNPOps.OptimizedTorchANI"
      ],
      "requires": [
        "mdtraj",
        "pytest",
        "numpy"
      ]
    }
  },
  "name": "nnpops",
  "osx_64_meta_yaml": {
    "about": {
      "home": "https://github.com/openmm/NNPOps",
      "license": "MIT",
      "license_family": "MIT",
      "license_file": "LICENSE",
      "summary": "High performance implementations of operations used in Neural Network Potentials"
    },
    "build": {
      "missing_dso_whitelist": null,
      "number": "14",
      "rpaths": [
        "lib/",
        "SP_DIR/torch/lib"
      ],
      "string": "cpu_py313h1234567_14"
    },
    "extra": {
      "recipe-maintainers": [
        "raimis",
        "mikemhenry",
        "h-vetinari",
        "RaulPPelaez"
      ]
    },
    "package": {
      "name": "nnpops",
      "version": "0.6"
    },
    "requirements": {
      "build": [
        "cxx_compiler_stub",
        "c_stdlib_stub",
        "make",
        "cmake"
      ],
      "host": [
        "python",
        "pytorch",
        "pytorch =*=cpu*"
      ],
      "run": [
        "python",
        "torchani"
      ],
      "run_constrained": [
        "pytorch =*=cpu*"
      ]
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "patches/fix-osx-lib-loading.patch",
        "patches/cpp17.patch"
      ],
      "sha256": "d7854a3506720aa7536ce64ea9b8d621cad5c024ba4979f2156afcc88b2117a3",
      "url": "https://github.com/openmm/NNPOps/archive/refs/tags/v0.6.tar.gz"
    },
    "test": {
      "commands": "cd ${CONDA_PREFIX}/share/nnpops/tests\nls -al\nset +e\nsummary=\"\"\nexitcode=0\nfor f in Test*.py; do\n  if [[ $f == *Cuda* || $f == *OpenCL* ]]; then\n    continue\n  fi\n  echo \"Running $f...\"\n  pytest -v ./${f}\n  thisexitcode=$?\n  summary+=\"\\n${f}: \"\n  if [[ $thisexitcode == 0 ]]; then summary+=\"OK\"; else summary+=\"FAILED\"; fi\n  ((exitcode+=$thisexitcode))\ndone\necho \"-------\"\necho \"Summary\"\necho \"-------\"\necho -e \"${summary}\"\nexit $exitcode\n",
      "imports": [
        "NNPOps",
        "NNPOps.OptimizedTorchANI"
      ],
      "requires": [
        "mdtraj",
        "pytest",
        "numpy"
      ]
    }
  },
  "osx_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "python",
        "pytorch"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "python",
        "torchani"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "mdtraj",
        "numpy",
        "pytest"
      ]
    }
  },
  "osx_arm64_meta_yaml": {
    "about": {
      "home": "https://github.com/openmm/NNPOps",
      "license": "MIT",
      "license_family": "MIT",
      "license_file": "LICENSE",
      "summary": "High performance implementations of operations used in Neural Network Potentials"
    },
    "build": {
      "missing_dso_whitelist": null,
      "number": "14",
      "rpaths": [
        "lib/",
        "SP_DIR/torch/lib"
      ],
      "string": "cpu_py313h1234567_14"
    },
    "extra": {
      "recipe-maintainers": [
        "raimis",
        "mikemhenry",
        "h-vetinari",
        "RaulPPelaez"
      ]
    },
    "package": {
      "name": "nnpops",
      "version": "0.6"
    },
    "requirements": {
      "build": [
        "cxx_compiler_stub",
        "c_stdlib_stub",
        "make",
        "cmake"
      ],
      "host": [
        "python",
        "pytorch",
        "pytorch =*=cpu*"
      ],
      "run": [
        "python",
        "torchani"
      ],
      "run_constrained": [
        "pytorch =*=cpu*"
      ]
    },
    "schema_version": 0,
    "source": {
      "patches": [
        "patches/fix-osx-lib-loading.patch",
        "patches/cpp17.patch"
      ],
      "sha256": "d7854a3506720aa7536ce64ea9b8d621cad5c024ba4979f2156afcc88b2117a3",
      "url": "https://github.com/openmm/NNPOps/archive/refs/tags/v0.6.tar.gz"
    },
    "test": {
      "commands": "cd ${CONDA_PREFIX}/share/nnpops/tests\nls -al\nset +e\nsummary=\"\"\nexitcode=0\nfor f in Test*.py; do\n  if [[ $f == *Cuda* || $f == *OpenCL* ]]; then\n    continue\n  fi\n  echo \"Running $f...\"\n  pytest -v ./${f}\n  thisexitcode=$?\n  summary+=\"\\n${f}: \"\n  if [[ $thisexitcode == 0 ]]; then summary+=\"OK\"; else summary+=\"FAILED\"; fi\n  ((exitcode+=$thisexitcode))\ndone\necho \"-------\"\necho \"Summary\"\necho \"-------\"\necho -e \"${summary}\"\nexit $exitcode\n",
      "imports": [
        "NNPOps",
        "NNPOps.OptimizedTorchANI"
      ],
      "requires": [
        "mdtraj",
        "pytest",
        "numpy"
      ]
    }
  },
  "osx_arm64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "python",
        "pytorch"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "python",
        "torchani"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "mdtraj",
        "numpy",
        "pytest"
      ]
    }
  },
  "outputs_names": {
    "__set__": true,
    "elements": [
      "nnpops"
    ]
  },
  "parsing_error": false,
  "platforms": [
    "linux_64",
    "osx_64",
    "osx_arm64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/nnpops.json"
  },
  "raw_meta_yaml": "{% set name = \"nnpops\" %}\n{% set version = \"0.6\" %}\n# see github.com/conda-forge/conda-forge.github.io/issues/1059 for naming discussion\n{% set torch_proc_type = \"cuda\" if cuda_compiler_version != \"None\" else \"cpu\" %}\n\n{% if cuda_compiler_version in (None, \"None\", True, False) %}\n{% set cuda_major = 0 %}\n{% else %}\n{% set cuda_major = environ.get(\"cuda_compiler_version\", \"11.8\").split(\".\")[0] | int %}\n{% endif %}\n\npackage:\n  name: {{ name }}\n  version: {{ version }}\n\nsource:\n  url: https://github.com/openmm/NNPOps/archive/refs/tags/v{{ version }}.tar.gz\n  sha256: d7854a3506720aa7536ce64ea9b8d621cad5c024ba4979f2156afcc88b2117a3\n  patches:\n      - patches/fix-osx-lib-loading.patch  # [osx]\n      - patches/cpp17.patch\nbuild:\n  skip: true  # [win]\n  # pytorch in conda-forge does not support CUDA 11.8 as of v2.5\n  skip: true  # [cuda_compiler_version == \"11.8\"]\n  number: 14\n  rpaths:\n    - lib/\n    - {{ SP_DIR }}/torch/lib\n  missing_dso_whitelist:\n    - '*/libcuda.*'  # [linux64]\n  string: cuda{{ cuda_compiler_version | replace('.', '') }}py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version != \"None\"]\n  string: cpu_py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version == \"None\"]\n\nrequirements:\n  build:\n    - python                                 # [build_platform != target_platform]\n    - cross-python_{{ target_platform }}     # [build_platform != target_platform]\n    - {{ compiler('cxx') }}\n    - {{ stdlib(\"c\") }}\n    - {{ compiler('cuda') }}  # [cuda_compiler_version != 'None']\n    - cuda-version {{ cuda_compiler_version }}  # [cuda_compiler_version not in (undefined, 'None')]\n    {% if cuda_major >= 12 %}\n    - cuda-cudart-dev\n    # No cuda-driver-dev in windows\n    - cuda-driver-dev  # [linux]\n    - libcufft-dev\n    - libcurand-dev\n    - libcublas-dev\n    - cuda-nvrtc-dev\n    - cuda-nvtx-dev\n    - cuda-profiler-api\n    - cuda-nvrtc-dev\n    - libcusparse-dev\n    - libcusolver-dev\n    {% endif %}\n    - make\n    - cmake\n  host:\n    - python\n    - pytorch\n    - pytorch =*={{ torch_proc_type }}*\n  run:\n    - python\n    - torchani\n    - cuda-version  # [cuda_compiler_version not in (undefined, 'None')]\n  run_constrained:\n    # additional run constraint to the one from the (version-only) run_export;\n    # constraining the CPU builds to CPU pytorch isn't 100% necessary, but cleaner\n    - pytorch =*={{ torch_proc_type }}*\n\ntest:\n  requires:\n    - mdtraj\n    - pytest\n    - numpy\n  imports:\n    - NNPOps\n    - NNPOps.OptimizedTorchANI\n  commands: |\n    cd ${CONDA_PREFIX}/share/{{ name }}/tests\n    ls -al\n    set +e\n    summary=\"\"\n    exitcode=0\n    for f in Test*.py; do\n      if [[ $f == *Cuda* || $f == *OpenCL* ]]; then\n        continue\n      fi\n      echo \"Running $f...\"\n      pytest -v ./${f}\n      thisexitcode=$?\n      summary+=\"\\n${f}: \"\n      if [[ $thisexitcode == 0 ]]; then summary+=\"OK\"; else summary+=\"FAILED\"; fi\n      ((exitcode+=$thisexitcode))\n    done\n    echo \"-------\"\n    echo \"Summary\"\n    echo \"-------\"\n    echo -e \"${summary}\"\n    exit $exitcode\n\nabout:\n  home: https://github.com/openmm/NNPOps\n  license: MIT\n  license_family: MIT\n  license_file: LICENSE\n  summary: High performance implementations of operations used in Neural Network Potentials\n\nextra:\n  recipe-maintainers:\n    - raimis\n    - mikemhenry\n    - h-vetinari\n    - RaulPPelaez\n",
  "req": {
    "__set__": true,
    "elements": [
      "c_stdlib_stub",
      "cmake",
      "cuda-version",
      "cuda_compiler_stub",
      "cxx_compiler_stub",
      "make",
      "python",
      "pytorch",
      "torchani"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_stdlib_stub",
        "cmake",
        "cuda-version",
        "cuda_compiler_stub",
        "cxx_compiler_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "c_stdlib_stub",
        "cuda_compiler_stub",
        "cxx_compiler_stub",
        "python",
        "pytorch"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "c_stdlib_stub",
        "cuda-version",
        "cuda_compiler_stub",
        "cxx_compiler_stub",
        "python",
        "torchani"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "mdtraj",
        "numpy",
        "pytest"
      ]
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_stdlib_stub",
        "cmake",
        "cuda-version 12.6",
        "cuda_compiler_stub",
        "cxx_compiler_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "python",
        "pytorch",
        "pytorch =*=cpu*",
        "pytorch =*=cuda*"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "cuda-version",
        "python",
        "torchani"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "mdtraj",
        "numpy",
        "pytest"
      ]
    }
  },
  "url": "https://github.com/openmm/NNPOps/archive/refs/tags/v0.6.tar.gz",
  "version": "0.6",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/nnpops.json"
  }
}