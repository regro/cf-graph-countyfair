{
  "archived": false,
  "branch": "main",
  "conda-forge.yml": {
    "conda_build": {
      "pkg_format": "2"
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    },
    "provider": {
      "win": "azure"
    }
  },
  "feedstock_hash": "38e5fbb84e195f5f623a1a41ee97866e1840bd51",
  "feedstock_hash_ts": 1730871081,
  "feedstock_name": "dftatom",
  "hash_type": "sha256",
  "linux_64_meta_yaml": {
    "about": {
      "description": "This library implements accurate and efficient radial Schrödinger and Dirac shooting-method solvers.\nThey work with any grid and any numerical potential. In addition, it also implements a radial\nPoisson solver and density functional theory self-consistency cycle.\n",
      "doc_url": "https://github.com/certik/dftatom/",
      "home": "https://github.com/certik/dftatom",
      "license": "MIT",
      "license_family": "MIT",
      "license_file": "License",
      "summary": "Routines for Radial Integration of Dirac, Schrödinger, and Poisson Equations"
    },
    "build": {
      "number": "3"
    },
    "extra": {
      "recipe-maintainers": [
        "certik"
      ]
    },
    "package": {
      "name": "dftatom",
      "version": "1.0.4"
    },
    "requirements": {
      "build": [
        "fortran_compiler_stub",
        "cxx_compiler_stub",
        "cmake",
        "make"
      ],
      "host": [],
      "run": []
    },
    "schema_version": 0,
    "source": {
      "sha256": "b788aaaa1d2958c31bd7ada8a6c8ab9df951c7569f6786fd109fdf10d84f3478",
      "url": "https://github.com/certik/dftatom/archive/v1.0.4.tar.gz"
    },
    "test": {
      "commands": [
        "test -f ${PREFIX}/lib/libdftatom.so",
        "test -f ${PREFIX}/include/dftatom/dftatom.mod"
      ]
    }
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "cmake",
        "cxx_compiler_stub",
        "fortran_compiler_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": []
    },
    "run": {
      "__set__": true,
      "elements": []
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "meta_yaml": {
    "about": {
      "description": "This library implements accurate and efficient radial Schrödinger and Dirac shooting-method solvers.\nThey work with any grid and any numerical potential. In addition, it also implements a radial\nPoisson solver and density functional theory self-consistency cycle.\n",
      "doc_url": "https://github.com/certik/dftatom/",
      "home": "https://github.com/certik/dftatom",
      "license": "MIT",
      "license_family": "MIT",
      "license_file": "License",
      "summary": "Routines for Radial Integration of Dirac, Schrödinger, and Poisson Equations"
    },
    "build": {
      "number": "3"
    },
    "extra": {
      "recipe-maintainers": [
        "certik"
      ]
    },
    "package": {
      "name": "dftatom",
      "version": "1.0.4"
    },
    "requirements": {
      "build": [
        "fortran_compiler_stub",
        "cxx_compiler_stub",
        "cmake",
        "make"
      ],
      "host": [],
      "run": []
    },
    "schema_version": 0,
    "source": {
      "sha256": "b788aaaa1d2958c31bd7ada8a6c8ab9df951c7569f6786fd109fdf10d84f3478",
      "url": "https://github.com/certik/dftatom/archive/v1.0.4.tar.gz"
    },
    "test": {
      "commands": [
        "test -f ${PREFIX}/lib/libdftatom.so",
        "test -f ${PREFIX}/include/dftatom/dftatom.mod",
        "test -f ${PREFIX}/lib/libdftatom.dylib",
        "if exist %LIBRARY_PREFIX%\\lib\\dftatom.lib (exit 0) else (exit 1)",
        "if exist %LIBRARY_PREFIX%\\include\\dftatom\\dftatom.mod (exit 0) else (exit 1)"
      ]
    }
  },
  "name": "dftatom",
  "osx_64_meta_yaml": {
    "about": {
      "description": "This library implements accurate and efficient radial Schrödinger and Dirac shooting-method solvers.\nThey work with any grid and any numerical potential. In addition, it also implements a radial\nPoisson solver and density functional theory self-consistency cycle.\n",
      "doc_url": "https://github.com/certik/dftatom/",
      "home": "https://github.com/certik/dftatom",
      "license": "MIT",
      "license_family": "MIT",
      "license_file": "License",
      "summary": "Routines for Radial Integration of Dirac, Schrödinger, and Poisson Equations"
    },
    "build": {
      "number": "3"
    },
    "extra": {
      "recipe-maintainers": [
        "certik"
      ]
    },
    "package": {
      "name": "dftatom",
      "version": "1.0.4"
    },
    "requirements": {
      "build": [
        "fortran_compiler_stub",
        "cxx_compiler_stub",
        "cmake",
        "make"
      ],
      "host": [],
      "run": []
    },
    "schema_version": 0,
    "source": {
      "sha256": "b788aaaa1d2958c31bd7ada8a6c8ab9df951c7569f6786fd109fdf10d84f3478",
      "url": "https://github.com/certik/dftatom/archive/v1.0.4.tar.gz"
    },
    "test": {
      "commands": [
        "test -f ${PREFIX}/lib/libdftatom.dylib",
        "test -f ${PREFIX}/include/dftatom/dftatom.mod"
      ]
    }
  },
  "osx_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "cmake",
        "cxx_compiler_stub",
        "fortran_compiler_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": []
    },
    "run": {
      "__set__": true,
      "elements": []
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "outputs_names": {
    "__set__": true,
    "elements": [
      "dftatom"
    ]
  },
  "parsing_error": false,
  "platforms": [
    "linux_64",
    "osx_64",
    "win_64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/dftatom.json"
  },
  "raw_meta_yaml": "{% set name = \"dftatom\" %}\n{% set version = \"1.0.4\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://github.com/certik/dftatom/archive/v{{ version }}.tar.gz\n  sha256: b788aaaa1d2958c31bd7ada8a6c8ab9df951c7569f6786fd109fdf10d84f3478\n\nbuild:\n  number: 3\n  skip: True   # [win and vc<14]\n\nrequirements:\n  build:\n    - {{ compiler('fortran') }}\n    - {{ compiler('cxx') }}\n    - cmake\n    - make\n  host:\n  run:\n\ntest:\n  commands:\n    - test -f ${PREFIX}/lib/libdftatom.so  # [linux]\n    - test -f ${PREFIX}/lib/libdftatom.dylib  # [osx]\n    - if exist %LIBRARY_PREFIX%\\lib\\dftatom.lib (exit 0) else (exit 1)  # [win]\n    - test -f ${PREFIX}/include/dftatom/dftatom.mod  # [not win]\n    - if exist %LIBRARY_PREFIX%\\include\\dftatom\\dftatom.mod (exit 0) else (exit 1)  # [win]\n\n\n\nabout:\n  home: https://github.com/certik/dftatom\n  license: MIT\n  license_family: MIT\n  license_file: License\n  summary: 'Routines for Radial Integration of Dirac, Schrödinger, and Poisson Equations'\n  description: |\n    This library implements accurate and efficient radial Schrödinger and Dirac shooting-method solvers. \n    They work with any grid and any numerical potential. In addition, it also implements a radial \n    Poisson solver and density functional theory self-consistency cycle.\n  doc_url: https://github.com/certik/dftatom/\n\nextra:\n  recipe-maintainers:\n    - certik\n",
  "req": {
    "__set__": true,
    "elements": [
      "cmake",
      "cxx_compiler_stub",
      "fortran_compiler_stub",
      "make"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "cmake",
        "cxx_compiler_stub",
        "fortran_compiler_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "cxx_compiler_stub",
        "fortran_compiler_stub"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "cxx_compiler_stub",
        "fortran_compiler_stub"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "cmake",
        "cxx_compiler_stub",
        "fortran_compiler_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": []
    },
    "run": {
      "__set__": true,
      "elements": []
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "url": "https://github.com/certik/dftatom/archive/v1.0.4.tar.gz",
  "version": "1.0.4",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/dftatom.json"
  },
  "win_64_meta_yaml": {
    "about": {
      "description": "This library implements accurate and efficient radial Schrödinger and Dirac shooting-method solvers.\nThey work with any grid and any numerical potential. In addition, it also implements a radial\nPoisson solver and density functional theory self-consistency cycle.\n",
      "doc_url": "https://github.com/certik/dftatom/",
      "home": "https://github.com/certik/dftatom",
      "license": "MIT",
      "license_family": "MIT",
      "license_file": "License",
      "summary": "Routines for Radial Integration of Dirac, Schrödinger, and Poisson Equations"
    },
    "build": {
      "number": "3"
    },
    "extra": {
      "recipe-maintainers": [
        "certik"
      ]
    },
    "package": {
      "name": "dftatom",
      "version": "1.0.4"
    },
    "requirements": {
      "build": [
        "fortran_compiler_stub",
        "cxx_compiler_stub",
        "cmake",
        "make"
      ],
      "host": [],
      "run": []
    },
    "schema_version": 0,
    "source": {
      "sha256": "b788aaaa1d2958c31bd7ada8a6c8ab9df951c7569f6786fd109fdf10d84f3478",
      "url": "https://github.com/certik/dftatom/archive/v1.0.4.tar.gz"
    },
    "test": {
      "commands": [
        "if exist %LIBRARY_PREFIX%\\lib\\dftatom.lib (exit 0) else (exit 1)",
        "if exist %LIBRARY_PREFIX%\\include\\dftatom\\dftatom.mod (exit 0) else (exit 1)"
      ]
    }
  },
  "win_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "cmake",
        "cxx_compiler_stub",
        "fortran_compiler_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": []
    },
    "run": {
      "__set__": true,
      "elements": []
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  }
}