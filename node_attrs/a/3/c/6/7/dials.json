{
  "archived": false,
  "branch": "main",
  "conda-forge.yml": {
    "azure": {
      "settings_win": {
        "variables": {
          "SET_PAGEFILE": "True"
        }
      }
    },
    "build_platform": {
      "osx_arm64": "osx_64"
    },
    "conda_build": {
      "pkg_format": "2"
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    },
    "test": "native_and_emulated"
  },
  "feedstock_hash": "3d4b787582f931210986956c47a05fc291219d06",
  "feedstock_hash_ts": 1747340932,
  "feedstock_name": "dials",
  "hash_type": "sha256",
  "linux_64_meta_yaml": {
    "about": {
      "description": "The DIALS project is a collaborative endeavour to develop new diffraction\nintegration software to meet the data analysis requirements presented by recent\nadvances in high performance pixel array detectors, new beamlines capable of\ndelivering micron and sub-micron focus and new light sources such as XFELs.\n",
      "dev_url": "https://github.com/dials/dials",
      "doc_url": "https://dials.github.io/documentation/index.html",
      "home": "https://github.com/dials/dials",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "dials/LICENSE",
      "summary": "Diffraction Integration for Advanced Light Sources"
    },
    "build": {
      "entry_points": [
        "cluster.dials.exec = dials.command_line.cluster_exec:run",
        "dev.dials.napari_rlv = dials.command_line.napari_rlv:run",
        "dev.dials.show_extensions = dials.command_line.show_extensions:run",
        "dev.dials.simple_integrate = dials.command_line.simple_integrate:run",
        "dials.align_crystal = dials.command_line.align_crystal:run",
        "dials.anvil_correction = dials.command_line.anvil_correction:run",
        "dials.apply_mask = dials.command_line.apply_mask:run",
        "dials.assign_experiment_identifiers = dials.command_line.assign_experiment_identifiers:run",
        "dials.augment_spots = dials.command_line.augment_spots:run",
        "dials.background = dials.command_line.background:run",
        "dials.check_indexing_symmetry = dials.command_line.check_indexing_symmetry:run",
        "dials.cluster_unit_cell = dials.command_line.cluster_unit_cell:run",
        "dials.combine_experiments = dials.command_line.combine_experiments:run",
        "dials.compare_orientation_matrices = dials.command_line.compare_orientation_matrices:run",
        "dials.complete_full_sphere = dials.command_line.complete_full_sphere:run",
        "dials.compute_delta_cchalf = dials.command_line.compute_delta_cchalf:run",
        "dials.convert_to_cbf = dials.command_line.convert_to_cbf:run",
        "dials.correlation_matrix = dials.command_line.correlation_matrix:run",
        "dials.cosym = dials.command_line.cosym:run",
        "dials.create_profile_model = dials.command_line.create_profile_model:run",
        "dials.damage_analysis = dials.command_line.damage_analysis:run",
        "dials.detect_blanks = dials.command_line.detect_blanks:run",
        "dials.estimate_gain = dials.command_line.estimate_gain:run",
        "dials.estimate_resolution = dials.command_line.estimate_resolution:run",
        "dials.export = dials.command_line.export:run",
        "dials.export_best = dials.command_line.export_best:run",
        "dials.export_bitmaps = dials.command_line.export_bitmaps:run",
        "dials.filter_reflections = dials.command_line.filter_reflections:run",
        "dials.find_bad_pixels = dials.command_line.find_bad_pixels:run",
        "dials.find_hot_pixels = dials.command_line.find_hot_pixels:run",
        "dials.find_rotation_axis = dials.command_line.find_rotation_axis:run",
        "dials.find_spots = dials.command_line.find_spots:run",
        "dials.find_spots_client = dials.command_line.find_spots_client:run",
        "dials.find_spots_server = dials.command_line.find_spots_server:run",
        "dials.frame_orientations = dials.command_line.frame_orientations:run",
        "dials.generate_distortion_maps = dials.command_line.generate_distortion_maps:run",
        "dials.generate_mask = dials.command_line.generate_mask:run",
        "dials.geometry_viewer = dials.command_line.geometry_viewer:run",
        "dials.goniometer_calibration = dials.command_line.goniometer_calibration:run",
        "dials.image_viewer = dials.command_line.image_viewer:run",
        "dials.import = dials.command_line.dials_import:run",
        "dials.import_xds = dials.command_line.import_xds:run",
        "dials.index = dials.command_line.index:run",
        "dials.indexed_as_integrated = dials.command_line.indexed_as_integrated:run",
        "dials.integrate = dials.command_line.integrate:run",
        "dials.merge = dials.command_line.merge:run",
        "dials.merge_cbf = dials.command_line.merge_cbf:run",
        "dials.merge_reflection_lists = dials.command_line.merge_reflection_lists:run",
        "dials.missing_reflections = dials.command_line.missing_reflections:run",
        "dials.model_background = dials.command_line.model_background:run",
        "dials.modify_geometry = dials.command_line.modify_geometry:run",
        "dials.plot_Fo_vs_Fc = dials.command_line.plot_Fo_vs_Fc:run",
        "dials.plot_reflections = dials.command_line.plot_reflections:run",
        "dials.plot_scan_varying_model = dials.command_line.plot_scan_varying_model:run",
        "dials.plugins = dials.command_line.plugins:run",
        "dials.powder_calibrate = dials.command_line.powder_calibrate:run",
        "dials.predict = dials.command_line.predict:run",
        "dials.rbs = dials.command_line.refine_bravais_settings:run",
        "dials.reciprocal_lattice_viewer = dials.command_line.reciprocal_lattice_viewer:run",
        "dials.reference_profile_viewer = dials.command_line.reference_profile_viewer:run",
        "dials.refine = dials.command_line.refine:run",
        "dials.refine_bravais_settings = dials.command_line.refine_bravais_settings:run",
        "dials.refine_error_model = dials.command_line.refine_error_model:run",
        "dials.reflection_viewer = dials.command_line.reflection_viewer:run",
        "dials.reindex = dials.command_line.reindex:run",
        "dials.report = dials.command_line.report:run",
        "dials.rl_png = dials.command_line.rl_png:run",
        "dials.rlv = dials.command_line.reciprocal_lattice_viewer:run",
        "dials.rs_mapper = dials.command_line.rs_mapper:run",
        "dials.scale = dials.command_line.scale:run",
        "dials.search_beam_position = dials.command_line.search_beam_position:run",
        "dials.sequence_to_stills = dials.command_line.sequence_to_stills:run",
        "dials.shadow_plot = dials.command_line.shadow_plot:run",
        "dials.show = dials.command_line.show:run",
        "dials.slice_sequence = dials.command_line.slice_sequence:run",
        "dials.sort_reflections = dials.command_line.sort_reflections:run",
        "dials.split_experiments = dials.command_line.split_experiments:run",
        "dials.split_still_data = dials.command_line.split_still_data:run",
        "dials.spot_counts_per_image = dials.command_line.spot_counts_per_image:run",
        "dials.spot_resolution_shells = dials.command_line.spot_resolution_shells:run",
        "dials.ssx_index = dials.command_line.ssx_index:run",
        "dials.ssx_integrate = dials.command_line.ssx_integrate:run",
        "dials.stereographic_projection = dials.command_line.stereographic_projection:run",
        "dials.stills_process = dials.command_line.stills_process:run",
        "dials.symmetry = dials.command_line.symmetry:run",
        "dials.two_theta_offset = dials.command_line.two_theta_offset:run",
        "dials.two_theta_refine = dials.command_line.two_theta_refine:run",
        "dials.unit_cell_histogram = dials.command_line.unit_cell_histogram:run",
        "dials.version = dials.command_line.version:run"
      ],
      "number": "0",
      "osx_is_app": true
    },
    "extra": {
      "recipe-maintainers": [
        "jbeilstenedmands",
        "ndevenish"
      ]
    },
    "package": {
      "name": "dials",
      "version": "3.24.1"
    },
    "requirements": {
      "build": [
        "cxx_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "ninja"
      ],
      "host": [
        "cctbx-base",
        "dxtbx =3.24",
        "libboost-devel",
        "libboost-python-devel",
        "msgpack-cxx",
        "pip",
        "python",
        "setuptools"
      ],
      "run": [
        "cctbx-base",
        "dxtbx",
        "ffbidx",
        "gemmi >=0.7",
        "h5py",
        "jinja2",
        "matplotlib-base",
        "numpy",
        "ordered-set",
        "pandas",
        "procrunner",
        "pycbf",
        "pyopengl",
        "python",
        "scikit-learn",
        "scipy",
        "tabulate",
        "tqdm",
        "wxpython >=4.2.2"
      ]
    },
    "schema_version": 0,
    "source": {
      "folder": "dials",
      "patches": [
        "0001-Skip-model_background-test.patch",
        "0002-Skip-rs_mapper-tests-on-windows.patch",
        "0003-Force-rs_mapper-tests-to-be-single-threaded.patch"
      ],
      "sha256": "03ec2eed33596687c4bf1a5483997bc28abd50d29a37f1b3a124c253cff73343",
      "url": "https://github.com/dials/dials/archive/refs/tags/v3.24.1.tar.gz"
    },
    "test": {
      "commands": [
        "dials.data get image_examples --verify",
        "pytest $SRC_DIR/dials/tests -n auto",
        "pip check"
      ],
      "imports": [
        "dials"
      ],
      "requires": [
        "dials-data",
        "pip",
        "pytest",
        "pytest-forked",
        "pytest-mock",
        "pytest-xdist"
      ],
      "source_files": [
        "dials/tests",
        "dials/conftest.py"
      ]
    }
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "ninja"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "cctbx-base",
        "dxtbx",
        "libboost-devel",
        "libboost-python-devel",
        "msgpack-cxx",
        "pip",
        "python",
        "setuptools"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "cctbx-base",
        "dxtbx",
        "ffbidx",
        "gemmi",
        "h5py",
        "jinja2",
        "matplotlib-base",
        "numpy",
        "ordered-set",
        "pandas",
        "procrunner",
        "pycbf",
        "pyopengl",
        "python",
        "scikit-learn",
        "scipy",
        "tabulate",
        "tqdm",
        "wxpython"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "dials-data",
        "pip",
        "pytest",
        "pytest-forked",
        "pytest-mock",
        "pytest-xdist"
      ]
    }
  },
  "meta_yaml": {
    "about": {
      "description": "The DIALS project is a collaborative endeavour to develop new diffraction\nintegration software to meet the data analysis requirements presented by recent\nadvances in high performance pixel array detectors, new beamlines capable of\ndelivering micron and sub-micron focus and new light sources such as XFELs.\n",
      "dev_url": "https://github.com/dials/dials",
      "doc_url": "https://dials.github.io/documentation/index.html",
      "home": "https://github.com/dials/dials",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "dials/LICENSE",
      "summary": "Diffraction Integration for Advanced Light Sources"
    },
    "build": {
      "entry_points": [
        "cluster.dials.exec = dials.command_line.cluster_exec:run",
        "dev.dials.napari_rlv = dials.command_line.napari_rlv:run",
        "dev.dials.show_extensions = dials.command_line.show_extensions:run",
        "dev.dials.simple_integrate = dials.command_line.simple_integrate:run",
        "dials.align_crystal = dials.command_line.align_crystal:run",
        "dials.anvil_correction = dials.command_line.anvil_correction:run",
        "dials.apply_mask = dials.command_line.apply_mask:run",
        "dials.assign_experiment_identifiers = dials.command_line.assign_experiment_identifiers:run",
        "dials.augment_spots = dials.command_line.augment_spots:run",
        "dials.background = dials.command_line.background:run",
        "dials.check_indexing_symmetry = dials.command_line.check_indexing_symmetry:run",
        "dials.cluster_unit_cell = dials.command_line.cluster_unit_cell:run",
        "dials.combine_experiments = dials.command_line.combine_experiments:run",
        "dials.compare_orientation_matrices = dials.command_line.compare_orientation_matrices:run",
        "dials.complete_full_sphere = dials.command_line.complete_full_sphere:run",
        "dials.compute_delta_cchalf = dials.command_line.compute_delta_cchalf:run",
        "dials.convert_to_cbf = dials.command_line.convert_to_cbf:run",
        "dials.correlation_matrix = dials.command_line.correlation_matrix:run",
        "dials.cosym = dials.command_line.cosym:run",
        "dials.create_profile_model = dials.command_line.create_profile_model:run",
        "dials.damage_analysis = dials.command_line.damage_analysis:run",
        "dials.detect_blanks = dials.command_line.detect_blanks:run",
        "dials.estimate_gain = dials.command_line.estimate_gain:run",
        "dials.estimate_resolution = dials.command_line.estimate_resolution:run",
        "dials.export = dials.command_line.export:run",
        "dials.export_best = dials.command_line.export_best:run",
        "dials.export_bitmaps = dials.command_line.export_bitmaps:run",
        "dials.filter_reflections = dials.command_line.filter_reflections:run",
        "dials.find_bad_pixels = dials.command_line.find_bad_pixels:run",
        "dials.find_hot_pixels = dials.command_line.find_hot_pixels:run",
        "dials.find_rotation_axis = dials.command_line.find_rotation_axis:run",
        "dials.find_spots = dials.command_line.find_spots:run",
        "dials.find_spots_client = dials.command_line.find_spots_client:run",
        "dials.find_spots_server = dials.command_line.find_spots_server:run",
        "dials.frame_orientations = dials.command_line.frame_orientations:run",
        "dials.generate_distortion_maps = dials.command_line.generate_distortion_maps:run",
        "dials.generate_mask = dials.command_line.generate_mask:run",
        "dials.geometry_viewer = dials.command_line.geometry_viewer:run",
        "dials.goniometer_calibration = dials.command_line.goniometer_calibration:run",
        "dials.image_viewer = dials.command_line.image_viewer:run",
        "dials.import = dials.command_line.dials_import:run",
        "dials.import_xds = dials.command_line.import_xds:run",
        "dials.index = dials.command_line.index:run",
        "dials.indexed_as_integrated = dials.command_line.indexed_as_integrated:run",
        "dials.integrate = dials.command_line.integrate:run",
        "dials.merge = dials.command_line.merge:run",
        "dials.merge_cbf = dials.command_line.merge_cbf:run",
        "dials.merge_reflection_lists = dials.command_line.merge_reflection_lists:run",
        "dials.missing_reflections = dials.command_line.missing_reflections:run",
        "dials.model_background = dials.command_line.model_background:run",
        "dials.modify_geometry = dials.command_line.modify_geometry:run",
        "dials.plot_Fo_vs_Fc = dials.command_line.plot_Fo_vs_Fc:run",
        "dials.plot_reflections = dials.command_line.plot_reflections:run",
        "dials.plot_scan_varying_model = dials.command_line.plot_scan_varying_model:run",
        "dials.plugins = dials.command_line.plugins:run",
        "dials.powder_calibrate = dials.command_line.powder_calibrate:run",
        "dials.predict = dials.command_line.predict:run",
        "dials.rbs = dials.command_line.refine_bravais_settings:run",
        "dials.reciprocal_lattice_viewer = dials.command_line.reciprocal_lattice_viewer:run",
        "dials.reference_profile_viewer = dials.command_line.reference_profile_viewer:run",
        "dials.refine = dials.command_line.refine:run",
        "dials.refine_bravais_settings = dials.command_line.refine_bravais_settings:run",
        "dials.refine_error_model = dials.command_line.refine_error_model:run",
        "dials.reflection_viewer = dials.command_line.reflection_viewer:run",
        "dials.reindex = dials.command_line.reindex:run",
        "dials.report = dials.command_line.report:run",
        "dials.rl_png = dials.command_line.rl_png:run",
        "dials.rlv = dials.command_line.reciprocal_lattice_viewer:run",
        "dials.rs_mapper = dials.command_line.rs_mapper:run",
        "dials.scale = dials.command_line.scale:run",
        "dials.search_beam_position = dials.command_line.search_beam_position:run",
        "dials.sequence_to_stills = dials.command_line.sequence_to_stills:run",
        "dials.shadow_plot = dials.command_line.shadow_plot:run",
        "dials.show = dials.command_line.show:run",
        "dials.slice_sequence = dials.command_line.slice_sequence:run",
        "dials.sort_reflections = dials.command_line.sort_reflections:run",
        "dials.split_experiments = dials.command_line.split_experiments:run",
        "dials.split_still_data = dials.command_line.split_still_data:run",
        "dials.spot_counts_per_image = dials.command_line.spot_counts_per_image:run",
        "dials.spot_resolution_shells = dials.command_line.spot_resolution_shells:run",
        "dials.ssx_index = dials.command_line.ssx_index:run",
        "dials.ssx_integrate = dials.command_line.ssx_integrate:run",
        "dials.stereographic_projection = dials.command_line.stereographic_projection:run",
        "dials.stills_process = dials.command_line.stills_process:run",
        "dials.symmetry = dials.command_line.symmetry:run",
        "dials.two_theta_offset = dials.command_line.two_theta_offset:run",
        "dials.two_theta_refine = dials.command_line.two_theta_refine:run",
        "dials.unit_cell_histogram = dials.command_line.unit_cell_histogram:run",
        "dials.version = dials.command_line.version:run"
      ],
      "number": "0",
      "osx_is_app": true
    },
    "extra": {
      "recipe-maintainers": [
        "jbeilstenedmands",
        "ndevenish"
      ]
    },
    "package": {
      "name": "dials",
      "version": "3.24.1"
    },
    "requirements": {
      "build": [
        "cxx_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "ninja"
      ],
      "host": [
        "cctbx-base",
        "dxtbx =3.24",
        "libboost-devel",
        "libboost-python-devel",
        "msgpack-cxx",
        "pip",
        "python",
        "setuptools"
      ],
      "run": [
        "cctbx-base",
        "dxtbx",
        "ffbidx",
        "gemmi >=0.7",
        "h5py",
        "jinja2",
        "matplotlib-base",
        "numpy",
        "ordered-set",
        "pandas",
        "procrunner",
        "pycbf",
        "pyopengl",
        "python",
        "scikit-learn",
        "scipy",
        "tabulate",
        "tqdm",
        "wxpython >=4.2.2"
      ]
    },
    "schema_version": 0,
    "source": {
      "folder": "dials",
      "patches": [
        "0001-Skip-model_background-test.patch",
        "0002-Skip-rs_mapper-tests-on-windows.patch",
        "0003-Force-rs_mapper-tests-to-be-single-threaded.patch"
      ],
      "sha256": "03ec2eed33596687c4bf1a5483997bc28abd50d29a37f1b3a124c253cff73343",
      "url": "https://github.com/dials/dials/archive/refs/tags/v3.24.1.tar.gz"
    },
    "test": {
      "commands": [
        "dials.data get image_examples --verify",
        "pytest $SRC_DIR/dials/tests -n auto",
        "pip check",
        "pytest %SRC_DIR%/dials/tests --regression -n auto"
      ],
      "imports": [
        "dials"
      ],
      "requires": [
        "dials-data",
        "pip",
        "pytest",
        "pytest-forked",
        "pytest-mock",
        "pytest-xdist"
      ],
      "source_files": [
        "dials/tests",
        "dials/conftest.py"
      ]
    }
  },
  "name": "dials",
  "osx_64_meta_yaml": {
    "about": {
      "description": "The DIALS project is a collaborative endeavour to develop new diffraction\nintegration software to meet the data analysis requirements presented by recent\nadvances in high performance pixel array detectors, new beamlines capable of\ndelivering micron and sub-micron focus and new light sources such as XFELs.\n",
      "dev_url": "https://github.com/dials/dials",
      "doc_url": "https://dials.github.io/documentation/index.html",
      "home": "https://github.com/dials/dials",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "dials/LICENSE",
      "summary": "Diffraction Integration for Advanced Light Sources"
    },
    "build": {
      "entry_points": [
        "cluster.dials.exec = dials.command_line.cluster_exec:run",
        "dev.dials.napari_rlv = dials.command_line.napari_rlv:run",
        "dev.dials.show_extensions = dials.command_line.show_extensions:run",
        "dev.dials.simple_integrate = dials.command_line.simple_integrate:run",
        "dials.align_crystal = dials.command_line.align_crystal:run",
        "dials.anvil_correction = dials.command_line.anvil_correction:run",
        "dials.apply_mask = dials.command_line.apply_mask:run",
        "dials.assign_experiment_identifiers = dials.command_line.assign_experiment_identifiers:run",
        "dials.augment_spots = dials.command_line.augment_spots:run",
        "dials.background = dials.command_line.background:run",
        "dials.check_indexing_symmetry = dials.command_line.check_indexing_symmetry:run",
        "dials.cluster_unit_cell = dials.command_line.cluster_unit_cell:run",
        "dials.combine_experiments = dials.command_line.combine_experiments:run",
        "dials.compare_orientation_matrices = dials.command_line.compare_orientation_matrices:run",
        "dials.complete_full_sphere = dials.command_line.complete_full_sphere:run",
        "dials.compute_delta_cchalf = dials.command_line.compute_delta_cchalf:run",
        "dials.convert_to_cbf = dials.command_line.convert_to_cbf:run",
        "dials.correlation_matrix = dials.command_line.correlation_matrix:run",
        "dials.cosym = dials.command_line.cosym:run",
        "dials.create_profile_model = dials.command_line.create_profile_model:run",
        "dials.damage_analysis = dials.command_line.damage_analysis:run",
        "dials.detect_blanks = dials.command_line.detect_blanks:run",
        "dials.estimate_gain = dials.command_line.estimate_gain:run",
        "dials.estimate_resolution = dials.command_line.estimate_resolution:run",
        "dials.export = dials.command_line.export:run",
        "dials.export_best = dials.command_line.export_best:run",
        "dials.export_bitmaps = dials.command_line.export_bitmaps:run",
        "dials.filter_reflections = dials.command_line.filter_reflections:run",
        "dials.find_bad_pixels = dials.command_line.find_bad_pixels:run",
        "dials.find_hot_pixels = dials.command_line.find_hot_pixels:run",
        "dials.find_rotation_axis = dials.command_line.find_rotation_axis:run",
        "dials.find_spots = dials.command_line.find_spots:run",
        "dials.find_spots_client = dials.command_line.find_spots_client:run",
        "dials.find_spots_server = dials.command_line.find_spots_server:run",
        "dials.frame_orientations = dials.command_line.frame_orientations:run",
        "dials.generate_distortion_maps = dials.command_line.generate_distortion_maps:run",
        "dials.generate_mask = dials.command_line.generate_mask:run",
        "dials.geometry_viewer = dials.command_line.geometry_viewer:run",
        "dials.goniometer_calibration = dials.command_line.goniometer_calibration:run",
        "dials.image_viewer = dials.command_line.image_viewer:run",
        "dials.import = dials.command_line.dials_import:run",
        "dials.import_xds = dials.command_line.import_xds:run",
        "dials.index = dials.command_line.index:run",
        "dials.indexed_as_integrated = dials.command_line.indexed_as_integrated:run",
        "dials.integrate = dials.command_line.integrate:run",
        "dials.merge = dials.command_line.merge:run",
        "dials.merge_cbf = dials.command_line.merge_cbf:run",
        "dials.merge_reflection_lists = dials.command_line.merge_reflection_lists:run",
        "dials.missing_reflections = dials.command_line.missing_reflections:run",
        "dials.model_background = dials.command_line.model_background:run",
        "dials.modify_geometry = dials.command_line.modify_geometry:run",
        "dials.plot_Fo_vs_Fc = dials.command_line.plot_Fo_vs_Fc:run",
        "dials.plot_reflections = dials.command_line.plot_reflections:run",
        "dials.plot_scan_varying_model = dials.command_line.plot_scan_varying_model:run",
        "dials.plugins = dials.command_line.plugins:run",
        "dials.powder_calibrate = dials.command_line.powder_calibrate:run",
        "dials.predict = dials.command_line.predict:run",
        "dials.rbs = dials.command_line.refine_bravais_settings:run",
        "dials.reciprocal_lattice_viewer = dials.command_line.reciprocal_lattice_viewer:run",
        "dials.reference_profile_viewer = dials.command_line.reference_profile_viewer:run",
        "dials.refine = dials.command_line.refine:run",
        "dials.refine_bravais_settings = dials.command_line.refine_bravais_settings:run",
        "dials.refine_error_model = dials.command_line.refine_error_model:run",
        "dials.reflection_viewer = dials.command_line.reflection_viewer:run",
        "dials.reindex = dials.command_line.reindex:run",
        "dials.report = dials.command_line.report:run",
        "dials.rl_png = dials.command_line.rl_png:run",
        "dials.rlv = dials.command_line.reciprocal_lattice_viewer:run",
        "dials.rs_mapper = dials.command_line.rs_mapper:run",
        "dials.scale = dials.command_line.scale:run",
        "dials.search_beam_position = dials.command_line.search_beam_position:run",
        "dials.sequence_to_stills = dials.command_line.sequence_to_stills:run",
        "dials.shadow_plot = dials.command_line.shadow_plot:run",
        "dials.show = dials.command_line.show:run",
        "dials.slice_sequence = dials.command_line.slice_sequence:run",
        "dials.sort_reflections = dials.command_line.sort_reflections:run",
        "dials.split_experiments = dials.command_line.split_experiments:run",
        "dials.split_still_data = dials.command_line.split_still_data:run",
        "dials.spot_counts_per_image = dials.command_line.spot_counts_per_image:run",
        "dials.spot_resolution_shells = dials.command_line.spot_resolution_shells:run",
        "dials.ssx_index = dials.command_line.ssx_index:run",
        "dials.ssx_integrate = dials.command_line.ssx_integrate:run",
        "dials.stereographic_projection = dials.command_line.stereographic_projection:run",
        "dials.stills_process = dials.command_line.stills_process:run",
        "dials.symmetry = dials.command_line.symmetry:run",
        "dials.two_theta_offset = dials.command_line.two_theta_offset:run",
        "dials.two_theta_refine = dials.command_line.two_theta_refine:run",
        "dials.unit_cell_histogram = dials.command_line.unit_cell_histogram:run",
        "dials.version = dials.command_line.version:run"
      ],
      "number": "0",
      "osx_is_app": true
    },
    "extra": {
      "recipe-maintainers": [
        "jbeilstenedmands",
        "ndevenish"
      ]
    },
    "package": {
      "name": "dials",
      "version": "3.24.1"
    },
    "requirements": {
      "build": [
        "cxx_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "ninja"
      ],
      "host": [
        "cctbx-base",
        "dxtbx =3.24",
        "libboost-devel",
        "libboost-python-devel",
        "msgpack-cxx",
        "pip",
        "python",
        "setuptools"
      ],
      "run": [
        "cctbx-base",
        "dxtbx",
        "gemmi >=0.7",
        "h5py",
        "jinja2",
        "matplotlib-base",
        "numpy",
        "ordered-set",
        "pandas",
        "procrunner",
        "pycbf",
        "pyopengl",
        "python",
        "scikit-learn",
        "scipy",
        "tabulate",
        "tqdm",
        "wxpython >=4.2.2"
      ]
    },
    "schema_version": 0,
    "source": {
      "folder": "dials",
      "patches": [
        "0001-Skip-model_background-test.patch",
        "0002-Skip-rs_mapper-tests-on-windows.patch",
        "0003-Force-rs_mapper-tests-to-be-single-threaded.patch"
      ],
      "sha256": "03ec2eed33596687c4bf1a5483997bc28abd50d29a37f1b3a124c253cff73343",
      "url": "https://github.com/dials/dials/archive/refs/tags/v3.24.1.tar.gz"
    },
    "test": {
      "commands": [
        "dials.data get image_examples --verify",
        "pytest $SRC_DIR/dials/tests -n auto",
        "pip check"
      ],
      "imports": [
        "dials"
      ],
      "requires": [
        "dials-data",
        "pip",
        "pytest",
        "pytest-forked",
        "pytest-mock",
        "pytest-xdist"
      ],
      "source_files": [
        "dials/tests",
        "dials/conftest.py"
      ]
    }
  },
  "osx_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "ninja"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "cctbx-base",
        "dxtbx",
        "libboost-devel",
        "libboost-python-devel",
        "msgpack-cxx",
        "pip",
        "python",
        "setuptools"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "cctbx-base",
        "dxtbx",
        "gemmi",
        "h5py",
        "jinja2",
        "matplotlib-base",
        "numpy",
        "ordered-set",
        "pandas",
        "procrunner",
        "pycbf",
        "pyopengl",
        "python",
        "scikit-learn",
        "scipy",
        "tabulate",
        "tqdm",
        "wxpython"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "dials-data",
        "pip",
        "pytest",
        "pytest-forked",
        "pytest-mock",
        "pytest-xdist"
      ]
    }
  },
  "osx_arm64_meta_yaml": {
    "about": {
      "description": "The DIALS project is a collaborative endeavour to develop new diffraction\nintegration software to meet the data analysis requirements presented by recent\nadvances in high performance pixel array detectors, new beamlines capable of\ndelivering micron and sub-micron focus and new light sources such as XFELs.\n",
      "dev_url": "https://github.com/dials/dials",
      "doc_url": "https://dials.github.io/documentation/index.html",
      "home": "https://github.com/dials/dials",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "dials/LICENSE",
      "summary": "Diffraction Integration for Advanced Light Sources"
    },
    "build": {
      "entry_points": [
        "cluster.dials.exec = dials.command_line.cluster_exec:run",
        "dev.dials.napari_rlv = dials.command_line.napari_rlv:run",
        "dev.dials.show_extensions = dials.command_line.show_extensions:run",
        "dev.dials.simple_integrate = dials.command_line.simple_integrate:run",
        "dials.align_crystal = dials.command_line.align_crystal:run",
        "dials.anvil_correction = dials.command_line.anvil_correction:run",
        "dials.apply_mask = dials.command_line.apply_mask:run",
        "dials.assign_experiment_identifiers = dials.command_line.assign_experiment_identifiers:run",
        "dials.augment_spots = dials.command_line.augment_spots:run",
        "dials.background = dials.command_line.background:run",
        "dials.check_indexing_symmetry = dials.command_line.check_indexing_symmetry:run",
        "dials.cluster_unit_cell = dials.command_line.cluster_unit_cell:run",
        "dials.combine_experiments = dials.command_line.combine_experiments:run",
        "dials.compare_orientation_matrices = dials.command_line.compare_orientation_matrices:run",
        "dials.complete_full_sphere = dials.command_line.complete_full_sphere:run",
        "dials.compute_delta_cchalf = dials.command_line.compute_delta_cchalf:run",
        "dials.convert_to_cbf = dials.command_line.convert_to_cbf:run",
        "dials.correlation_matrix = dials.command_line.correlation_matrix:run",
        "dials.cosym = dials.command_line.cosym:run",
        "dials.create_profile_model = dials.command_line.create_profile_model:run",
        "dials.damage_analysis = dials.command_line.damage_analysis:run",
        "dials.detect_blanks = dials.command_line.detect_blanks:run",
        "dials.estimate_gain = dials.command_line.estimate_gain:run",
        "dials.estimate_resolution = dials.command_line.estimate_resolution:run",
        "dials.export = dials.command_line.export:run",
        "dials.export_best = dials.command_line.export_best:run",
        "dials.export_bitmaps = dials.command_line.export_bitmaps:run",
        "dials.filter_reflections = dials.command_line.filter_reflections:run",
        "dials.find_bad_pixels = dials.command_line.find_bad_pixels:run",
        "dials.find_hot_pixels = dials.command_line.find_hot_pixels:run",
        "dials.find_rotation_axis = dials.command_line.find_rotation_axis:run",
        "dials.find_spots = dials.command_line.find_spots:run",
        "dials.find_spots_client = dials.command_line.find_spots_client:run",
        "dials.find_spots_server = dials.command_line.find_spots_server:run",
        "dials.frame_orientations = dials.command_line.frame_orientations:run",
        "dials.generate_distortion_maps = dials.command_line.generate_distortion_maps:run",
        "dials.generate_mask = dials.command_line.generate_mask:run",
        "dials.geometry_viewer = dials.command_line.geometry_viewer:run",
        "dials.goniometer_calibration = dials.command_line.goniometer_calibration:run",
        "dials.image_viewer = dials.command_line.image_viewer:run",
        "dials.import = dials.command_line.dials_import:run",
        "dials.import_xds = dials.command_line.import_xds:run",
        "dials.index = dials.command_line.index:run",
        "dials.indexed_as_integrated = dials.command_line.indexed_as_integrated:run",
        "dials.integrate = dials.command_line.integrate:run",
        "dials.merge = dials.command_line.merge:run",
        "dials.merge_cbf = dials.command_line.merge_cbf:run",
        "dials.merge_reflection_lists = dials.command_line.merge_reflection_lists:run",
        "dials.missing_reflections = dials.command_line.missing_reflections:run",
        "dials.model_background = dials.command_line.model_background:run",
        "dials.modify_geometry = dials.command_line.modify_geometry:run",
        "dials.plot_Fo_vs_Fc = dials.command_line.plot_Fo_vs_Fc:run",
        "dials.plot_reflections = dials.command_line.plot_reflections:run",
        "dials.plot_scan_varying_model = dials.command_line.plot_scan_varying_model:run",
        "dials.plugins = dials.command_line.plugins:run",
        "dials.powder_calibrate = dials.command_line.powder_calibrate:run",
        "dials.predict = dials.command_line.predict:run",
        "dials.rbs = dials.command_line.refine_bravais_settings:run",
        "dials.reciprocal_lattice_viewer = dials.command_line.reciprocal_lattice_viewer:run",
        "dials.reference_profile_viewer = dials.command_line.reference_profile_viewer:run",
        "dials.refine = dials.command_line.refine:run",
        "dials.refine_bravais_settings = dials.command_line.refine_bravais_settings:run",
        "dials.refine_error_model = dials.command_line.refine_error_model:run",
        "dials.reflection_viewer = dials.command_line.reflection_viewer:run",
        "dials.reindex = dials.command_line.reindex:run",
        "dials.report = dials.command_line.report:run",
        "dials.rl_png = dials.command_line.rl_png:run",
        "dials.rlv = dials.command_line.reciprocal_lattice_viewer:run",
        "dials.rs_mapper = dials.command_line.rs_mapper:run",
        "dials.scale = dials.command_line.scale:run",
        "dials.search_beam_position = dials.command_line.search_beam_position:run",
        "dials.sequence_to_stills = dials.command_line.sequence_to_stills:run",
        "dials.shadow_plot = dials.command_line.shadow_plot:run",
        "dials.show = dials.command_line.show:run",
        "dials.slice_sequence = dials.command_line.slice_sequence:run",
        "dials.sort_reflections = dials.command_line.sort_reflections:run",
        "dials.split_experiments = dials.command_line.split_experiments:run",
        "dials.split_still_data = dials.command_line.split_still_data:run",
        "dials.spot_counts_per_image = dials.command_line.spot_counts_per_image:run",
        "dials.spot_resolution_shells = dials.command_line.spot_resolution_shells:run",
        "dials.ssx_index = dials.command_line.ssx_index:run",
        "dials.ssx_integrate = dials.command_line.ssx_integrate:run",
        "dials.stereographic_projection = dials.command_line.stereographic_projection:run",
        "dials.stills_process = dials.command_line.stills_process:run",
        "dials.symmetry = dials.command_line.symmetry:run",
        "dials.two_theta_offset = dials.command_line.two_theta_offset:run",
        "dials.two_theta_refine = dials.command_line.two_theta_refine:run",
        "dials.unit_cell_histogram = dials.command_line.unit_cell_histogram:run",
        "dials.version = dials.command_line.version:run"
      ],
      "number": "0",
      "osx_is_app": true
    },
    "extra": {
      "recipe-maintainers": [
        "jbeilstenedmands",
        "ndevenish"
      ]
    },
    "package": {
      "name": "dials",
      "version": "3.24.1"
    },
    "requirements": {
      "build": [
        "cxx_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "ninja"
      ],
      "host": [
        "cctbx-base",
        "dxtbx =3.24",
        "libboost-devel",
        "libboost-python-devel",
        "msgpack-cxx",
        "pip",
        "python",
        "setuptools"
      ],
      "run": [
        "cctbx-base",
        "dxtbx",
        "gemmi >=0.7",
        "h5py",
        "jinja2",
        "matplotlib-base",
        "numpy",
        "ordered-set",
        "pandas",
        "procrunner",
        "pycbf",
        "pyopengl",
        "python",
        "scikit-learn",
        "scipy",
        "tabulate",
        "tqdm",
        "wxpython >=4.2.2"
      ]
    },
    "schema_version": 0,
    "source": {
      "folder": "dials",
      "patches": [
        "0001-Skip-model_background-test.patch",
        "0002-Skip-rs_mapper-tests-on-windows.patch",
        "0003-Force-rs_mapper-tests-to-be-single-threaded.patch"
      ],
      "sha256": "03ec2eed33596687c4bf1a5483997bc28abd50d29a37f1b3a124c253cff73343",
      "url": "https://github.com/dials/dials/archive/refs/tags/v3.24.1.tar.gz"
    },
    "test": {
      "commands": [
        "dials.data get image_examples --verify",
        "pytest $SRC_DIR/dials/tests -n auto",
        "pip check"
      ],
      "imports": [
        "dials"
      ],
      "requires": [
        "dials-data",
        "pip",
        "pytest",
        "pytest-forked",
        "pytest-mock",
        "pytest-xdist"
      ],
      "source_files": [
        "dials/tests",
        "dials/conftest.py"
      ]
    }
  },
  "osx_arm64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "ninja"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "cctbx-base",
        "dxtbx",
        "libboost-devel",
        "libboost-python-devel",
        "msgpack-cxx",
        "pip",
        "python",
        "setuptools"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "cctbx-base",
        "dxtbx",
        "gemmi",
        "h5py",
        "jinja2",
        "matplotlib-base",
        "numpy",
        "ordered-set",
        "pandas",
        "procrunner",
        "pycbf",
        "pyopengl",
        "python",
        "scikit-learn",
        "scipy",
        "tabulate",
        "tqdm",
        "wxpython"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "dials-data",
        "pip",
        "pytest",
        "pytest-forked",
        "pytest-mock",
        "pytest-xdist"
      ]
    }
  },
  "outputs_names": {
    "__set__": true,
    "elements": [
      "dials"
    ]
  },
  "parsing_error": false,
  "platforms": [
    "linux_64",
    "osx_64",
    "osx_arm64",
    "win_64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/dials.json"
  },
  "raw_meta_yaml": "{% set name = \"dials\" %}\n{% set version = \"3.24.1\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://github.com/dials/dials/archive/refs/tags/v{{ version }}.tar.gz\n  sha256: 03ec2eed33596687c4bf1a5483997bc28abd50d29a37f1b3a124c253cff73343\n  folder: dials\n  patches:\n    - 0001-Skip-model_background-test.patch\n    - 0002-Skip-rs_mapper-tests-on-windows.patch\n    - 0003-Force-rs_mapper-tests-to-be-single-threaded.patch\n\nbuild:\n  number: 0\n  skip: true  # [py<310]\n  osx_is_app: true\n  entry_points:\n    - cluster.dials.exec = dials.command_line.cluster_exec:run\n    - dev.dials.napari_rlv = dials.command_line.napari_rlv:run\n    - dev.dials.show_extensions = dials.command_line.show_extensions:run\n    - dev.dials.simple_integrate = dials.command_line.simple_integrate:run\n    - dials.align_crystal = dials.command_line.align_crystal:run\n    - dials.anvil_correction = dials.command_line.anvil_correction:run\n    - dials.apply_mask = dials.command_line.apply_mask:run\n    - dials.assign_experiment_identifiers = dials.command_line.assign_experiment_identifiers:run\n    - dials.augment_spots = dials.command_line.augment_spots:run\n    - dials.background = dials.command_line.background:run\n    - dials.check_indexing_symmetry = dials.command_line.check_indexing_symmetry:run\n    - dials.cluster_unit_cell = dials.command_line.cluster_unit_cell:run\n    - dials.combine_experiments = dials.command_line.combine_experiments:run\n    - dials.compare_orientation_matrices = dials.command_line.compare_orientation_matrices:run\n    - dials.complete_full_sphere = dials.command_line.complete_full_sphere:run\n    - dials.compute_delta_cchalf = dials.command_line.compute_delta_cchalf:run\n    - dials.convert_to_cbf = dials.command_line.convert_to_cbf:run\n    - dials.correlation_matrix = dials.command_line.correlation_matrix:run\n    - dials.cosym = dials.command_line.cosym:run\n    - dials.create_profile_model = dials.command_line.create_profile_model:run\n    - dials.damage_analysis = dials.command_line.damage_analysis:run\n    - dials.detect_blanks = dials.command_line.detect_blanks:run\n    - dials.estimate_gain = dials.command_line.estimate_gain:run\n    - dials.estimate_resolution = dials.command_line.estimate_resolution:run\n    - dials.export = dials.command_line.export:run\n    - dials.export_best = dials.command_line.export_best:run\n    - dials.export_bitmaps = dials.command_line.export_bitmaps:run\n    - dials.filter_reflections = dials.command_line.filter_reflections:run\n    - dials.find_bad_pixels = dials.command_line.find_bad_pixels:run\n    - dials.find_hot_pixels = dials.command_line.find_hot_pixels:run\n    - dials.find_rotation_axis = dials.command_line.find_rotation_axis:run\n    - dials.find_spots = dials.command_line.find_spots:run\n    - dials.find_spots_client = dials.command_line.find_spots_client:run\n    - dials.find_spots_server = dials.command_line.find_spots_server:run\n    - dials.frame_orientations = dials.command_line.frame_orientations:run\n    - dials.generate_distortion_maps = dials.command_line.generate_distortion_maps:run\n    - dials.generate_mask = dials.command_line.generate_mask:run\n    - dials.geometry_viewer = dials.command_line.geometry_viewer:run\n    - dials.goniometer_calibration = dials.command_line.goniometer_calibration:run\n    - dials.image_viewer = dials.command_line.image_viewer:run\n    - dials.import = dials.command_line.dials_import:run\n    - dials.import_xds = dials.command_line.import_xds:run\n    - dials.index = dials.command_line.index:run\n    - dials.indexed_as_integrated = dials.command_line.indexed_as_integrated:run\n    - dials.integrate = dials.command_line.integrate:run\n    - dials.merge = dials.command_line.merge:run\n    - dials.merge_cbf = dials.command_line.merge_cbf:run\n    - dials.merge_reflection_lists = dials.command_line.merge_reflection_lists:run\n    - dials.missing_reflections = dials.command_line.missing_reflections:run\n    - dials.model_background = dials.command_line.model_background:run\n    - dials.modify_geometry = dials.command_line.modify_geometry:run\n    - dials.plot_Fo_vs_Fc = dials.command_line.plot_Fo_vs_Fc:run\n    - dials.plot_reflections = dials.command_line.plot_reflections:run\n    - dials.plot_scan_varying_model = dials.command_line.plot_scan_varying_model:run\n    - dials.plugins = dials.command_line.plugins:run\n    - dials.powder_calibrate = dials.command_line.powder_calibrate:run\n    - dials.predict = dials.command_line.predict:run\n    - dials.rbs = dials.command_line.refine_bravais_settings:run\n    - dials.reciprocal_lattice_viewer = dials.command_line.reciprocal_lattice_viewer:run\n    - dials.reference_profile_viewer = dials.command_line.reference_profile_viewer:run\n    - dials.refine = dials.command_line.refine:run\n    - dials.refine_bravais_settings = dials.command_line.refine_bravais_settings:run\n    - dials.refine_error_model = dials.command_line.refine_error_model:run\n    - dials.reflection_viewer = dials.command_line.reflection_viewer:run\n    - dials.reindex = dials.command_line.reindex:run\n    - dials.report = dials.command_line.report:run\n    - dials.rl_png = dials.command_line.rl_png:run\n    - dials.rlv = dials.command_line.reciprocal_lattice_viewer:run\n    - dials.rs_mapper = dials.command_line.rs_mapper:run\n    - dials.scale = dials.command_line.scale:run\n    - dials.search_beam_position = dials.command_line.search_beam_position:run\n    - dials.sequence_to_stills = dials.command_line.sequence_to_stills:run\n    - dials.shadow_plot = dials.command_line.shadow_plot:run\n    - dials.show = dials.command_line.show:run\n    - dials.slice_sequence = dials.command_line.slice_sequence:run\n    - dials.sort_reflections = dials.command_line.sort_reflections:run\n    - dials.split_experiments = dials.command_line.split_experiments:run\n    - dials.split_still_data = dials.command_line.split_still_data:run\n    - dials.spot_counts_per_image = dials.command_line.spot_counts_per_image:run\n    - dials.spot_resolution_shells = dials.command_line.spot_resolution_shells:run\n    - dials.ssx_index = dials.command_line.ssx_index:run\n    - dials.ssx_integrate = dials.command_line.ssx_integrate:run\n    - dials.stereographic_projection = dials.command_line.stereographic_projection:run\n    - dials.stills_process = dials.command_line.stills_process:run\n    - dials.symmetry = dials.command_line.symmetry:run\n    - dials.two_theta_offset = dials.command_line.two_theta_offset:run\n    - dials.two_theta_refine = dials.command_line.two_theta_refine:run\n    - dials.unit_cell_histogram = dials.command_line.unit_cell_histogram:run\n    - dials.version = dials.command_line.version:run\n\n{% set version_parts = version.split('.') %}\n{% set version_xy = version_parts[0] ~ '.' ~ version_parts[1] %}\n\nrequirements:\n  build:\n    - python                                 # [build_platform != target_platform]\n    - cross-python_{{ target_platform }}     # [build_platform != target_platform]\n    - {{ compiler('cxx') }}\n    - {{ stdlib(\"c\") }}\n    - cmake\n    - ninja\n  host:\n    - cctbx-base\n    - dxtbx ={{ version_xy }}\n    - libboost-devel\n    - libboost-python-devel\n    - msgpack-cxx\n    - pip\n    - python\n    - setuptools\n  run:\n    - {{ pin_compatible('cctbx-base') }}\n    - {{ pin_compatible('dxtbx', max_pin='x.x', lower_bound=version_xy) }}\n    - ffbidx  # [linux]\n    - gemmi >=0.7\n    - h5py\n    - jinja2\n    - matplotlib-base\n    - numpy\n    - ordered-set\n    - pandas\n    - procrunner\n    - pycbf\n    - pyopengl\n    - python\n    - scikit-learn\n    - scipy\n    - tabulate\n    - tqdm\n    - wxpython >=4.2.2\n\ntest:\n  source_files:\n    - dials/tests\n    - dials/conftest.py\n  requires:\n    - dials-data\n    - pip\n    - pytest\n    - pytest-forked\n    - pytest-mock\n    - pytest-xdist\n  imports:\n    - dials\n  commands:\n    - dials.data get image_examples --verify\n    - pytest $SRC_DIR/dials/tests -n auto  # [not win]\n    - pytest %SRC_DIR%/dials/tests --regression -n auto  # [win]\n    - pip check\n\nabout:\n  home: https://github.com/dials/dials\n  license: BSD-3-Clause\n  license_family: BSD\n  license_file: dials/LICENSE\n  summary: Diffraction Integration for Advanced Light Sources\n  description: |\n    The DIALS project is a collaborative endeavour to develop new diffraction\n    integration software to meet the data analysis requirements presented by recent\n    advances in high performance pixel array detectors, new beamlines capable of\n    delivering micron and sub-micron focus and new light sources such as XFELs.\n  doc_url: https://dials.github.io/documentation/index.html\n  dev_url: https://github.com/dials/dials\n\nextra:\n  recipe-maintainers:\n    - jbeilstenedmands\n    - ndevenish\n",
  "req": {
    "__set__": true,
    "elements": [
      "c_stdlib_stub",
      "cctbx-base",
      "cmake",
      "cxx_compiler_stub",
      "dxtbx",
      "ffbidx",
      "gemmi",
      "h5py",
      "jinja2",
      "libboost-devel",
      "libboost-python-devel",
      "matplotlib-base",
      "msgpack-cxx",
      "ninja",
      "numpy",
      "ordered-set",
      "pandas",
      "pip",
      "procrunner",
      "pycbf",
      "pyopengl",
      "python",
      "scikit-learn",
      "scipy",
      "setuptools",
      "tabulate",
      "tqdm",
      "wxpython"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "ninja"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "c_stdlib_stub",
        "cctbx-base",
        "cxx_compiler_stub",
        "dxtbx",
        "libboost-devel",
        "libboost-python-devel",
        "msgpack-cxx",
        "pip",
        "python",
        "setuptools"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "c_stdlib_stub",
        "cctbx-base",
        "cxx_compiler_stub",
        "dxtbx",
        "ffbidx",
        "gemmi",
        "h5py",
        "jinja2",
        "matplotlib-base",
        "numpy",
        "ordered-set",
        "pandas",
        "procrunner",
        "pycbf",
        "pyopengl",
        "python",
        "scikit-learn",
        "scipy",
        "tabulate",
        "tqdm",
        "wxpython"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "dials-data",
        "pip",
        "pytest",
        "pytest-forked",
        "pytest-mock",
        "pytest-xdist"
      ]
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "ninja"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "cctbx-base",
        "dxtbx =3.24",
        "libboost-devel",
        "libboost-python-devel",
        "msgpack-cxx",
        "pip",
        "python",
        "setuptools"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "cctbx-base",
        "dxtbx",
        "ffbidx",
        "gemmi >=0.7",
        "h5py",
        "jinja2",
        "matplotlib-base",
        "numpy",
        "ordered-set",
        "pandas",
        "procrunner",
        "pycbf",
        "pyopengl",
        "python",
        "scikit-learn",
        "scipy",
        "tabulate",
        "tqdm",
        "wxpython >=4.2.2"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "dials-data",
        "pip",
        "pytest",
        "pytest-forked",
        "pytest-mock",
        "pytest-xdist"
      ]
    }
  },
  "url": "https://github.com/dials/dials/archive/refs/tags/v3.24.1.tar.gz",
  "version": "3.24.1",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/dials.json"
  },
  "win_64_meta_yaml": {
    "about": {
      "description": "The DIALS project is a collaborative endeavour to develop new diffraction\nintegration software to meet the data analysis requirements presented by recent\nadvances in high performance pixel array detectors, new beamlines capable of\ndelivering micron and sub-micron focus and new light sources such as XFELs.\n",
      "dev_url": "https://github.com/dials/dials",
      "doc_url": "https://dials.github.io/documentation/index.html",
      "home": "https://github.com/dials/dials",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "dials/LICENSE",
      "summary": "Diffraction Integration for Advanced Light Sources"
    },
    "build": {
      "entry_points": [
        "cluster.dials.exec = dials.command_line.cluster_exec:run",
        "dev.dials.napari_rlv = dials.command_line.napari_rlv:run",
        "dev.dials.show_extensions = dials.command_line.show_extensions:run",
        "dev.dials.simple_integrate = dials.command_line.simple_integrate:run",
        "dials.align_crystal = dials.command_line.align_crystal:run",
        "dials.anvil_correction = dials.command_line.anvil_correction:run",
        "dials.apply_mask = dials.command_line.apply_mask:run",
        "dials.assign_experiment_identifiers = dials.command_line.assign_experiment_identifiers:run",
        "dials.augment_spots = dials.command_line.augment_spots:run",
        "dials.background = dials.command_line.background:run",
        "dials.check_indexing_symmetry = dials.command_line.check_indexing_symmetry:run",
        "dials.cluster_unit_cell = dials.command_line.cluster_unit_cell:run",
        "dials.combine_experiments = dials.command_line.combine_experiments:run",
        "dials.compare_orientation_matrices = dials.command_line.compare_orientation_matrices:run",
        "dials.complete_full_sphere = dials.command_line.complete_full_sphere:run",
        "dials.compute_delta_cchalf = dials.command_line.compute_delta_cchalf:run",
        "dials.convert_to_cbf = dials.command_line.convert_to_cbf:run",
        "dials.correlation_matrix = dials.command_line.correlation_matrix:run",
        "dials.cosym = dials.command_line.cosym:run",
        "dials.create_profile_model = dials.command_line.create_profile_model:run",
        "dials.damage_analysis = dials.command_line.damage_analysis:run",
        "dials.detect_blanks = dials.command_line.detect_blanks:run",
        "dials.estimate_gain = dials.command_line.estimate_gain:run",
        "dials.estimate_resolution = dials.command_line.estimate_resolution:run",
        "dials.export = dials.command_line.export:run",
        "dials.export_best = dials.command_line.export_best:run",
        "dials.export_bitmaps = dials.command_line.export_bitmaps:run",
        "dials.filter_reflections = dials.command_line.filter_reflections:run",
        "dials.find_bad_pixels = dials.command_line.find_bad_pixels:run",
        "dials.find_hot_pixels = dials.command_line.find_hot_pixels:run",
        "dials.find_rotation_axis = dials.command_line.find_rotation_axis:run",
        "dials.find_spots = dials.command_line.find_spots:run",
        "dials.find_spots_client = dials.command_line.find_spots_client:run",
        "dials.find_spots_server = dials.command_line.find_spots_server:run",
        "dials.frame_orientations = dials.command_line.frame_orientations:run",
        "dials.generate_distortion_maps = dials.command_line.generate_distortion_maps:run",
        "dials.generate_mask = dials.command_line.generate_mask:run",
        "dials.geometry_viewer = dials.command_line.geometry_viewer:run",
        "dials.goniometer_calibration = dials.command_line.goniometer_calibration:run",
        "dials.image_viewer = dials.command_line.image_viewer:run",
        "dials.import = dials.command_line.dials_import:run",
        "dials.import_xds = dials.command_line.import_xds:run",
        "dials.index = dials.command_line.index:run",
        "dials.indexed_as_integrated = dials.command_line.indexed_as_integrated:run",
        "dials.integrate = dials.command_line.integrate:run",
        "dials.merge = dials.command_line.merge:run",
        "dials.merge_cbf = dials.command_line.merge_cbf:run",
        "dials.merge_reflection_lists = dials.command_line.merge_reflection_lists:run",
        "dials.missing_reflections = dials.command_line.missing_reflections:run",
        "dials.model_background = dials.command_line.model_background:run",
        "dials.modify_geometry = dials.command_line.modify_geometry:run",
        "dials.plot_Fo_vs_Fc = dials.command_line.plot_Fo_vs_Fc:run",
        "dials.plot_reflections = dials.command_line.plot_reflections:run",
        "dials.plot_scan_varying_model = dials.command_line.plot_scan_varying_model:run",
        "dials.plugins = dials.command_line.plugins:run",
        "dials.powder_calibrate = dials.command_line.powder_calibrate:run",
        "dials.predict = dials.command_line.predict:run",
        "dials.rbs = dials.command_line.refine_bravais_settings:run",
        "dials.reciprocal_lattice_viewer = dials.command_line.reciprocal_lattice_viewer:run",
        "dials.reference_profile_viewer = dials.command_line.reference_profile_viewer:run",
        "dials.refine = dials.command_line.refine:run",
        "dials.refine_bravais_settings = dials.command_line.refine_bravais_settings:run",
        "dials.refine_error_model = dials.command_line.refine_error_model:run",
        "dials.reflection_viewer = dials.command_line.reflection_viewer:run",
        "dials.reindex = dials.command_line.reindex:run",
        "dials.report = dials.command_line.report:run",
        "dials.rl_png = dials.command_line.rl_png:run",
        "dials.rlv = dials.command_line.reciprocal_lattice_viewer:run",
        "dials.rs_mapper = dials.command_line.rs_mapper:run",
        "dials.scale = dials.command_line.scale:run",
        "dials.search_beam_position = dials.command_line.search_beam_position:run",
        "dials.sequence_to_stills = dials.command_line.sequence_to_stills:run",
        "dials.shadow_plot = dials.command_line.shadow_plot:run",
        "dials.show = dials.command_line.show:run",
        "dials.slice_sequence = dials.command_line.slice_sequence:run",
        "dials.sort_reflections = dials.command_line.sort_reflections:run",
        "dials.split_experiments = dials.command_line.split_experiments:run",
        "dials.split_still_data = dials.command_line.split_still_data:run",
        "dials.spot_counts_per_image = dials.command_line.spot_counts_per_image:run",
        "dials.spot_resolution_shells = dials.command_line.spot_resolution_shells:run",
        "dials.ssx_index = dials.command_line.ssx_index:run",
        "dials.ssx_integrate = dials.command_line.ssx_integrate:run",
        "dials.stereographic_projection = dials.command_line.stereographic_projection:run",
        "dials.stills_process = dials.command_line.stills_process:run",
        "dials.symmetry = dials.command_line.symmetry:run",
        "dials.two_theta_offset = dials.command_line.two_theta_offset:run",
        "dials.two_theta_refine = dials.command_line.two_theta_refine:run",
        "dials.unit_cell_histogram = dials.command_line.unit_cell_histogram:run",
        "dials.version = dials.command_line.version:run"
      ],
      "number": "0",
      "osx_is_app": true
    },
    "extra": {
      "recipe-maintainers": [
        "jbeilstenedmands",
        "ndevenish"
      ]
    },
    "package": {
      "name": "dials",
      "version": "3.24.1"
    },
    "requirements": {
      "build": [
        "cxx_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "ninja"
      ],
      "host": [
        "cctbx-base",
        "dxtbx =3.24",
        "libboost-devel",
        "libboost-python-devel",
        "msgpack-cxx",
        "pip",
        "python",
        "setuptools"
      ],
      "run": [
        "cctbx-base",
        "dxtbx",
        "gemmi >=0.7",
        "h5py",
        "jinja2",
        "matplotlib-base",
        "numpy",
        "ordered-set",
        "pandas",
        "procrunner",
        "pycbf",
        "pyopengl",
        "python",
        "scikit-learn",
        "scipy",
        "tabulate",
        "tqdm",
        "wxpython >=4.2.2"
      ]
    },
    "schema_version": 0,
    "source": {
      "folder": "dials",
      "patches": [
        "0001-Skip-model_background-test.patch",
        "0002-Skip-rs_mapper-tests-on-windows.patch",
        "0003-Force-rs_mapper-tests-to-be-single-threaded.patch"
      ],
      "sha256": "03ec2eed33596687c4bf1a5483997bc28abd50d29a37f1b3a124c253cff73343",
      "url": "https://github.com/dials/dials/archive/refs/tags/v3.24.1.tar.gz"
    },
    "test": {
      "commands": [
        "dials.data get image_examples --verify",
        "pytest %SRC_DIR%/dials/tests --regression -n auto",
        "pip check"
      ],
      "imports": [
        "dials"
      ],
      "requires": [
        "dials-data",
        "pip",
        "pytest",
        "pytest-forked",
        "pytest-mock",
        "pytest-xdist"
      ],
      "source_files": [
        "dials/tests",
        "dials/conftest.py"
      ]
    }
  },
  "win_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "ninja"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "cctbx-base",
        "dxtbx",
        "libboost-devel",
        "libboost-python-devel",
        "msgpack-cxx",
        "pip",
        "python",
        "setuptools"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "cctbx-base",
        "dxtbx",
        "gemmi",
        "h5py",
        "jinja2",
        "matplotlib-base",
        "numpy",
        "ordered-set",
        "pandas",
        "procrunner",
        "pycbf",
        "pyopengl",
        "python",
        "scikit-learn",
        "scipy",
        "tabulate",
        "tqdm",
        "wxpython"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "dials-data",
        "pip",
        "pytest",
        "pytest-forked",
        "pytest-mock",
        "pytest-xdist"
      ]
    }
  }
}