{
  "archived": false,
  "branch": "main",
  "conda-forge.yml": {
    "bot": {
      "automerge": true
    },
    "build_platform": {
      "linux_aarch64": "linux_64",
      "linux_ppc64le": "linux_64",
      "osx_arm64": "osx_64"
    },
    "conda_build": {
      "pkg_format": "2"
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    },
    "provider": {
      "linux_aarch64": "default",
      "linux_ppc64le": "default",
      "win": "azure"
    },
    "test": "native_and_emulated"
  },
  "feedstock_hash": "2d7d0f117785bcfc09c371a92b07c067eaf81bdb",
  "feedstock_hash_ts": 1756751950,
  "feedstock_name": "greenlet",
  "hash_type": "sha256",
  "linux_64_meta_yaml": {
    "about": {
      "description": "The greenlet package is a spin-off of Stackless, a version of CPython that\nsupports micro-threads called \"tasklets\". Tasklets run pseudo-concurrently\n(typically in a single or a few OS-level threads) and are synchronized with\ndata exchanges on \"channels\".\n\nA \"greenlet\", on the other hand, is a still more primitive notion of\nmicro-thread with no implicit scheduling; coroutines, in other words. This\nis useful when you want to control exactly when your code runs. You can\nbuild custom scheduled micro-threads on top of greenlet; however, it seems\nthat greenlets are useful on their own as a way to make advanced control\nflow structures. For example, we can recreate generators; the difference\nwith Python's own generators is that our generators can call nested\nfunctions and the nested functions can yield values too. Additionally,\nyou don't need a \"yield\" keyword. See the example in\ntests/test_generator.py.\n\nGreenlets are provided as a C extension module for the regular unmodified\ninterpreter.\n\nGreenlets are lightweight coroutines for in-process concurrent programming.\n",
      "dev_url": "https://github.com/python-greenlet/greenlet",
      "doc_url": "https://greenlet.readthedocs.io",
      "home": "https://github.com/python-greenlet/greenlet",
      "license": "MIT",
      "license_family": "MIT",
      "license_file": "LICENSE",
      "summary": "Lightweight in-process concurrent programming"
    },
    "build": {
      "number": "1",
      "script": "PYTHON -m pip install --no-deps --ignore-installed -vvv ."
    },
    "extra": {
      "recipe-maintainers": [
        "curtisalexander",
        "nicoddemus",
        "xhochy"
      ]
    },
    "package": {
      "name": "greenlet",
      "version": "3.2.4"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub"
      ],
      "host": [
        "pip",
        "python",
        "setuptools"
      ],
      "run": [
        "python"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "0dca0d95ff849f9a364385f36ab49f50065d76964944638be9691e1832e9f86d",
      "url": "https://pypi.org/packages/source/g/greenlet/greenlet-3.2.4.tar.gz"
    },
    "test": {
      "commands": [
        "pip check"
      ],
      "imports": [
        "greenlet"
      ],
      "requires": [
        "pip"
      ]
    }
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "pip",
        "python",
        "setuptools"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "pip"
      ]
    }
  },
  "linux_aarch64_meta_yaml": {
    "about": {
      "description": "The greenlet package is a spin-off of Stackless, a version of CPython that\nsupports micro-threads called \"tasklets\". Tasklets run pseudo-concurrently\n(typically in a single or a few OS-level threads) and are synchronized with\ndata exchanges on \"channels\".\n\nA \"greenlet\", on the other hand, is a still more primitive notion of\nmicro-thread with no implicit scheduling; coroutines, in other words. This\nis useful when you want to control exactly when your code runs. You can\nbuild custom scheduled micro-threads on top of greenlet; however, it seems\nthat greenlets are useful on their own as a way to make advanced control\nflow structures. For example, we can recreate generators; the difference\nwith Python's own generators is that our generators can call nested\nfunctions and the nested functions can yield values too. Additionally,\nyou don't need a \"yield\" keyword. See the example in\ntests/test_generator.py.\n\nGreenlets are provided as a C extension module for the regular unmodified\ninterpreter.\n\nGreenlets are lightweight coroutines for in-process concurrent programming.\n",
      "dev_url": "https://github.com/python-greenlet/greenlet",
      "doc_url": "https://greenlet.readthedocs.io",
      "home": "https://github.com/python-greenlet/greenlet",
      "license": "MIT",
      "license_family": "MIT",
      "license_file": "LICENSE",
      "summary": "Lightweight in-process concurrent programming"
    },
    "build": {
      "number": "1",
      "script": "PYTHON -m pip install --no-deps --ignore-installed -vvv ."
    },
    "extra": {
      "recipe-maintainers": [
        "curtisalexander",
        "nicoddemus",
        "xhochy"
      ]
    },
    "package": {
      "name": "greenlet",
      "version": "3.2.4"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub"
      ],
      "host": [
        "pip",
        "python",
        "setuptools"
      ],
      "run": [
        "python"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "0dca0d95ff849f9a364385f36ab49f50065d76964944638be9691e1832e9f86d",
      "url": "https://pypi.org/packages/source/g/greenlet/greenlet-3.2.4.tar.gz"
    },
    "test": {
      "commands": [
        "pip check"
      ],
      "imports": [
        "greenlet"
      ],
      "requires": [
        "pip"
      ]
    }
  },
  "linux_aarch64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "pip",
        "python",
        "setuptools"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "pip"
      ]
    }
  },
  "linux_ppc64le_meta_yaml": {
    "about": {
      "description": "The greenlet package is a spin-off of Stackless, a version of CPython that\nsupports micro-threads called \"tasklets\". Tasklets run pseudo-concurrently\n(typically in a single or a few OS-level threads) and are synchronized with\ndata exchanges on \"channels\".\n\nA \"greenlet\", on the other hand, is a still more primitive notion of\nmicro-thread with no implicit scheduling; coroutines, in other words. This\nis useful when you want to control exactly when your code runs. You can\nbuild custom scheduled micro-threads on top of greenlet; however, it seems\nthat greenlets are useful on their own as a way to make advanced control\nflow structures. For example, we can recreate generators; the difference\nwith Python's own generators is that our generators can call nested\nfunctions and the nested functions can yield values too. Additionally,\nyou don't need a \"yield\" keyword. See the example in\ntests/test_generator.py.\n\nGreenlets are provided as a C extension module for the regular unmodified\ninterpreter.\n\nGreenlets are lightweight coroutines for in-process concurrent programming.\n",
      "dev_url": "https://github.com/python-greenlet/greenlet",
      "doc_url": "https://greenlet.readthedocs.io",
      "home": "https://github.com/python-greenlet/greenlet",
      "license": "MIT",
      "license_family": "MIT",
      "license_file": "LICENSE",
      "summary": "Lightweight in-process concurrent programming"
    },
    "build": {
      "number": "1",
      "script": "PYTHON -m pip install --no-deps --ignore-installed -vvv ."
    },
    "extra": {
      "recipe-maintainers": [
        "curtisalexander",
        "nicoddemus",
        "xhochy"
      ]
    },
    "package": {
      "name": "greenlet",
      "version": "3.2.4"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub"
      ],
      "host": [
        "pip",
        "python",
        "setuptools"
      ],
      "run": [
        "python"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "0dca0d95ff849f9a364385f36ab49f50065d76964944638be9691e1832e9f86d",
      "url": "https://pypi.org/packages/source/g/greenlet/greenlet-3.2.4.tar.gz"
    },
    "test": {
      "commands": [
        "pip check"
      ],
      "imports": [
        "greenlet"
      ],
      "requires": [
        "pip"
      ]
    }
  },
  "linux_ppc64le_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "pip",
        "python",
        "setuptools"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "pip"
      ]
    }
  },
  "meta_yaml": {
    "about": {
      "description": "The greenlet package is a spin-off of Stackless, a version of CPython that\nsupports micro-threads called \"tasklets\". Tasklets run pseudo-concurrently\n(typically in a single or a few OS-level threads) and are synchronized with\ndata exchanges on \"channels\".\n\nA \"greenlet\", on the other hand, is a still more primitive notion of\nmicro-thread with no implicit scheduling; coroutines, in other words. This\nis useful when you want to control exactly when your code runs. You can\nbuild custom scheduled micro-threads on top of greenlet; however, it seems\nthat greenlets are useful on their own as a way to make advanced control\nflow structures. For example, we can recreate generators; the difference\nwith Python's own generators is that our generators can call nested\nfunctions and the nested functions can yield values too. Additionally,\nyou don't need a \"yield\" keyword. See the example in\ntests/test_generator.py.\n\nGreenlets are provided as a C extension module for the regular unmodified\ninterpreter.\n\nGreenlets are lightweight coroutines for in-process concurrent programming.\n",
      "dev_url": "https://github.com/python-greenlet/greenlet",
      "doc_url": "https://greenlet.readthedocs.io",
      "home": "https://github.com/python-greenlet/greenlet",
      "license": "MIT",
      "license_family": "MIT",
      "license_file": "LICENSE",
      "summary": "Lightweight in-process concurrent programming"
    },
    "build": {
      "number": "1",
      "script": "PYTHON -m pip install --no-deps --ignore-installed -vvv ."
    },
    "extra": {
      "recipe-maintainers": [
        "curtisalexander",
        "nicoddemus",
        "xhochy"
      ]
    },
    "package": {
      "name": "greenlet",
      "version": "3.2.4"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub"
      ],
      "host": [
        "pip",
        "python",
        "setuptools"
      ],
      "run": [
        "python"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "0dca0d95ff849f9a364385f36ab49f50065d76964944638be9691e1832e9f86d",
      "url": "https://pypi.org/packages/source/g/greenlet/greenlet-3.2.4.tar.gz"
    },
    "test": {
      "commands": [
        "pip check"
      ],
      "imports": [
        "greenlet"
      ],
      "requires": [
        "pip"
      ]
    }
  },
  "name": "greenlet",
  "osx_64_meta_yaml": {
    "about": {
      "description": "The greenlet package is a spin-off of Stackless, a version of CPython that\nsupports micro-threads called \"tasklets\". Tasklets run pseudo-concurrently\n(typically in a single or a few OS-level threads) and are synchronized with\ndata exchanges on \"channels\".\n\nA \"greenlet\", on the other hand, is a still more primitive notion of\nmicro-thread with no implicit scheduling; coroutines, in other words. This\nis useful when you want to control exactly when your code runs. You can\nbuild custom scheduled micro-threads on top of greenlet; however, it seems\nthat greenlets are useful on their own as a way to make advanced control\nflow structures. For example, we can recreate generators; the difference\nwith Python's own generators is that our generators can call nested\nfunctions and the nested functions can yield values too. Additionally,\nyou don't need a \"yield\" keyword. See the example in\ntests/test_generator.py.\n\nGreenlets are provided as a C extension module for the regular unmodified\ninterpreter.\n\nGreenlets are lightweight coroutines for in-process concurrent programming.\n",
      "dev_url": "https://github.com/python-greenlet/greenlet",
      "doc_url": "https://greenlet.readthedocs.io",
      "home": "https://github.com/python-greenlet/greenlet",
      "license": "MIT",
      "license_family": "MIT",
      "license_file": "LICENSE",
      "summary": "Lightweight in-process concurrent programming"
    },
    "build": {
      "number": "1",
      "script": "PYTHON -m pip install --no-deps --ignore-installed -vvv ."
    },
    "extra": {
      "recipe-maintainers": [
        "curtisalexander",
        "nicoddemus",
        "xhochy"
      ]
    },
    "package": {
      "name": "greenlet",
      "version": "3.2.4"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub"
      ],
      "host": [
        "pip",
        "python",
        "setuptools"
      ],
      "run": [
        "python"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "0dca0d95ff849f9a364385f36ab49f50065d76964944638be9691e1832e9f86d",
      "url": "https://pypi.org/packages/source/g/greenlet/greenlet-3.2.4.tar.gz"
    },
    "test": {
      "commands": [
        "pip check"
      ],
      "imports": [
        "greenlet"
      ],
      "requires": [
        "pip"
      ]
    }
  },
  "osx_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "pip",
        "python",
        "setuptools"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "pip"
      ]
    }
  },
  "osx_arm64_meta_yaml": {
    "about": {
      "description": "The greenlet package is a spin-off of Stackless, a version of CPython that\nsupports micro-threads called \"tasklets\". Tasklets run pseudo-concurrently\n(typically in a single or a few OS-level threads) and are synchronized with\ndata exchanges on \"channels\".\n\nA \"greenlet\", on the other hand, is a still more primitive notion of\nmicro-thread with no implicit scheduling; coroutines, in other words. This\nis useful when you want to control exactly when your code runs. You can\nbuild custom scheduled micro-threads on top of greenlet; however, it seems\nthat greenlets are useful on their own as a way to make advanced control\nflow structures. For example, we can recreate generators; the difference\nwith Python's own generators is that our generators can call nested\nfunctions and the nested functions can yield values too. Additionally,\nyou don't need a \"yield\" keyword. See the example in\ntests/test_generator.py.\n\nGreenlets are provided as a C extension module for the regular unmodified\ninterpreter.\n\nGreenlets are lightweight coroutines for in-process concurrent programming.\n",
      "dev_url": "https://github.com/python-greenlet/greenlet",
      "doc_url": "https://greenlet.readthedocs.io",
      "home": "https://github.com/python-greenlet/greenlet",
      "license": "MIT",
      "license_family": "MIT",
      "license_file": "LICENSE",
      "summary": "Lightweight in-process concurrent programming"
    },
    "build": {
      "number": "1",
      "script": "PYTHON -m pip install --no-deps --ignore-installed -vvv ."
    },
    "extra": {
      "recipe-maintainers": [
        "curtisalexander",
        "nicoddemus",
        "xhochy"
      ]
    },
    "package": {
      "name": "greenlet",
      "version": "3.2.4"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub"
      ],
      "host": [
        "pip",
        "python",
        "setuptools"
      ],
      "run": [
        "python"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "0dca0d95ff849f9a364385f36ab49f50065d76964944638be9691e1832e9f86d",
      "url": "https://pypi.org/packages/source/g/greenlet/greenlet-3.2.4.tar.gz"
    },
    "test": {
      "commands": [
        "pip check"
      ],
      "imports": [
        "greenlet"
      ],
      "requires": [
        "pip"
      ]
    }
  },
  "osx_arm64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "pip",
        "python",
        "setuptools"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "pip"
      ]
    }
  },
  "outputs_names": {
    "__set__": true,
    "elements": [
      "greenlet"
    ]
  },
  "parsing_error": false,
  "platforms": [
    "linux_64",
    "linux_aarch64",
    "linux_ppc64le",
    "osx_64",
    "osx_arm64",
    "win_64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/greenlet.json"
  },
  "raw_meta_yaml": "{% set name = \"greenlet\" %}\n{% set version = \"3.2.4\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.org/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: 0dca0d95ff849f9a364385f36ab49f50065d76964944638be9691e1832e9f86d\n\nbuild:\n  number: 1\n  script: {{ PYTHON }} -m pip install --no-deps --ignore-installed -vvv .\n\nrequirements:\n  build:\n    - python                                 # [build_platform != target_platform]\n    - cross-python_{{ target_platform }}     # [build_platform != target_platform]\n    - {{ compiler(\"c\") }}\n    - {{ stdlib(\"c\") }}\n    - {{ compiler(\"cxx\") }}\n  host:\n    - pip\n    - python\n    - setuptools\n  run:\n    - python\n\ntest:\n  requires:\n    - pip\n  commands:\n    - pip check\n  imports:\n    - greenlet\n\nabout:\n  home: https://github.com/python-greenlet/greenlet\n  license: MIT\n  license_family: MIT\n  license_file: LICENSE\n  summary: Lightweight in-process concurrent programming\n\n  description: |\n    The greenlet package is a spin-off of Stackless, a version of CPython that\n    supports micro-threads called \"tasklets\". Tasklets run pseudo-concurrently\n    (typically in a single or a few OS-level threads) and are synchronized with\n    data exchanges on \"channels\".\n\n    A \"greenlet\", on the other hand, is a still more primitive notion of\n    micro-thread with no implicit scheduling; coroutines, in other words. This\n    is useful when you want to control exactly when your code runs. You can\n    build custom scheduled micro-threads on top of greenlet; however, it seems\n    that greenlets are useful on their own as a way to make advanced control\n    flow structures. For example, we can recreate generators; the difference\n    with Python's own generators is that our generators can call nested\n    functions and the nested functions can yield values too. Additionally,\n    you don't need a \"yield\" keyword. See the example in\n    tests/test_generator.py.\n\n    Greenlets are provided as a C extension module for the regular unmodified\n    interpreter.\n\n    Greenlets are lightweight coroutines for in-process concurrent programming.\n  doc_url: https://greenlet.readthedocs.io\n  dev_url: https://github.com/python-greenlet/greenlet\n\nextra:\n  recipe-maintainers:\n    - curtisalexander\n    - nicoddemus\n    - xhochy\n",
  "req": {
    "__set__": true,
    "elements": [
      "c_compiler_stub",
      "c_stdlib_stub",
      "cxx_compiler_stub",
      "pip",
      "python",
      "setuptools"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "pip",
        "python",
        "setuptools"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "pip"
      ]
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "pip",
        "python",
        "setuptools"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "pip"
      ]
    }
  },
  "url": "https://pypi.org/packages/source/g/greenlet/greenlet-3.2.4.tar.gz",
  "version": "3.2.4",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/greenlet.json"
  },
  "win_64_meta_yaml": {
    "about": {
      "description": "The greenlet package is a spin-off of Stackless, a version of CPython that\nsupports micro-threads called \"tasklets\". Tasklets run pseudo-concurrently\n(typically in a single or a few OS-level threads) and are synchronized with\ndata exchanges on \"channels\".\n\nA \"greenlet\", on the other hand, is a still more primitive notion of\nmicro-thread with no implicit scheduling; coroutines, in other words. This\nis useful when you want to control exactly when your code runs. You can\nbuild custom scheduled micro-threads on top of greenlet; however, it seems\nthat greenlets are useful on their own as a way to make advanced control\nflow structures. For example, we can recreate generators; the difference\nwith Python's own generators is that our generators can call nested\nfunctions and the nested functions can yield values too. Additionally,\nyou don't need a \"yield\" keyword. See the example in\ntests/test_generator.py.\n\nGreenlets are provided as a C extension module for the regular unmodified\ninterpreter.\n\nGreenlets are lightweight coroutines for in-process concurrent programming.\n",
      "dev_url": "https://github.com/python-greenlet/greenlet",
      "doc_url": "https://greenlet.readthedocs.io",
      "home": "https://github.com/python-greenlet/greenlet",
      "license": "MIT",
      "license_family": "MIT",
      "license_file": "LICENSE",
      "summary": "Lightweight in-process concurrent programming"
    },
    "build": {
      "number": "1",
      "script": "PYTHON -m pip install --no-deps --ignore-installed -vvv ."
    },
    "extra": {
      "recipe-maintainers": [
        "curtisalexander",
        "nicoddemus",
        "xhochy"
      ]
    },
    "package": {
      "name": "greenlet",
      "version": "3.2.4"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub"
      ],
      "host": [
        "pip",
        "python",
        "setuptools"
      ],
      "run": [
        "python"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "0dca0d95ff849f9a364385f36ab49f50065d76964944638be9691e1832e9f86d",
      "url": "https://pypi.org/packages/source/g/greenlet/greenlet-3.2.4.tar.gz"
    },
    "test": {
      "commands": [
        "pip check"
      ],
      "imports": [
        "greenlet"
      ],
      "requires": [
        "pip"
      ]
    }
  },
  "win_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "pip",
        "python",
        "setuptools"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "pip"
      ]
    }
  }
}