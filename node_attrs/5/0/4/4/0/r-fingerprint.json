{
  "archived": false,
  "branch": "main",
  "conda-forge.yml": {
    "bot": {
      "automerge": true
    },
    "conda_build": {
      "pkg_format": "2"
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    },
    "provider": {
      "win": "azure"
    }
  },
  "feedstock_name": "r-fingerprint",
  "hash_type": "sha256",
  "linux_64_meta_yaml": {
    "about": {
      "home": "https://CRAN.R-project.org/package=fingerprint",
      "license": "GPL",
      "license_family": "GPL",
      "license_file": [
        "/lib/R/share/licenses/GPL-3"
      ],
      "summary": "Functions to manipulate binary fingerprints of arbitrary length. A fingerprint is represented by an object of S4 class 'fingerprint' which is internally represented a vector of integers, such that each element represents the position in the fingerprint that is set to 1. The bitwise logical functions in R are overridden so that they can be used directly with 'fingerprint' objects. A number of distance metrics are also available (many contributed by Michael Fadock). Fingerprints  can be converted to Euclidean vectors (i.e., points on the unit hypersphere) and can also be folded using OR.  Arbitrary fingerprint formats can be handled via line handlers. Currently handlers are provided for CDK, MOE and BCI fingerprint data."
    },
    "build": {
      "number": "1007",
      "rpaths": [
        "lib/R/lib/",
        "lib/"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "conda-forge/r",
        "MathiasHaudgaard",
        "FrodePedersen",
        "ArneKr"
      ]
    },
    "package": {
      "name": "r-fingerprint",
      "version": "3.5.7"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "make"
      ],
      "host": [
        "r-base"
      ],
      "run": [
        "r-base"
      ]
    },
    "schema_version": 0,
    "source": {
      "fn": "fingerprint_3.5.7.tar.gz",
      "sha256": "2ca25567efb297e095d010010c4aaa91149dacf8084fa3e20d4367d9fce44c12",
      "url": [
        "https://cran.r-project.org/src/contrib/fingerprint_3.5.7.tar.gz",
        "https://cran.r-project.org/src/contrib/Archive/fingerprint/fingerprint_3.5.7.tar.gz"
      ]
    },
    "test": {
      "commands": [
        "$R -e \"library('fingerprint')\""
      ]
    }
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "r-base"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "r-base"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "meta_yaml": {
    "about": {
      "home": "https://CRAN.R-project.org/package=fingerprint",
      "license": "GPL",
      "license_family": "GPL",
      "license_file": [
        "/lib/R/share/licenses/GPL-3"
      ],
      "summary": "Functions to manipulate binary fingerprints of arbitrary length. A fingerprint is represented by an object of S4 class 'fingerprint' which is internally represented a vector of integers, such that each element represents the position in the fingerprint that is set to 1. The bitwise logical functions in R are overridden so that they can be used directly with 'fingerprint' objects. A number of distance metrics are also available (many contributed by Michael Fadock). Fingerprints  can be converted to Euclidean vectors (i.e., points on the unit hypersphere) and can also be folded using OR.  Arbitrary fingerprint formats can be handled via line handlers. Currently handlers are provided for CDK, MOE and BCI fingerprint data."
    },
    "build": {
      "number": "1007",
      "rpaths": [
        "lib/R/lib/",
        "lib/"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "conda-forge/r",
        "MathiasHaudgaard",
        "FrodePedersen",
        "ArneKr"
      ]
    },
    "package": {
      "name": "r-fingerprint",
      "version": "3.5.7"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "make",
        "m2w64_c_compiler_stub",
        "m2w64_c_stdlib_stub",
        "filesystem",
        "sed",
        "coreutils",
        "zip"
      ],
      "host": [
        "r-base"
      ],
      "run": [
        "r-base"
      ]
    },
    "schema_version": 0,
    "source": {
      "fn": "fingerprint_3.5.7.tar.gz",
      "sha256": "2ca25567efb297e095d010010c4aaa91149dacf8084fa3e20d4367d9fce44c12",
      "url": [
        "https://cran.r-project.org/src/contrib/fingerprint_3.5.7.tar.gz",
        "https://cran.r-project.org/src/contrib/Archive/fingerprint/fingerprint_3.5.7.tar.gz"
      ]
    },
    "test": {
      "commands": [
        "$R -e \"library('fingerprint')\"",
        "\"%R%\" -e \"library('fingerprint')\""
      ]
    }
  },
  "name": "r-fingerprint",
  "osx_64_meta_yaml": {
    "about": {
      "home": "https://CRAN.R-project.org/package=fingerprint",
      "license": "GPL",
      "license_family": "GPL",
      "license_file": [
        "/lib/R/share/licenses/GPL-3"
      ],
      "summary": "Functions to manipulate binary fingerprints of arbitrary length. A fingerprint is represented by an object of S4 class 'fingerprint' which is internally represented a vector of integers, such that each element represents the position in the fingerprint that is set to 1. The bitwise logical functions in R are overridden so that they can be used directly with 'fingerprint' objects. A number of distance metrics are also available (many contributed by Michael Fadock). Fingerprints  can be converted to Euclidean vectors (i.e., points on the unit hypersphere) and can also be folded using OR.  Arbitrary fingerprint formats can be handled via line handlers. Currently handlers are provided for CDK, MOE and BCI fingerprint data."
    },
    "build": {
      "number": "1007",
      "rpaths": [
        "lib/R/lib/",
        "lib/"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "conda-forge/r",
        "MathiasHaudgaard",
        "FrodePedersen",
        "ArneKr"
      ]
    },
    "package": {
      "name": "r-fingerprint",
      "version": "3.5.7"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "make"
      ],
      "host": [
        "r-base"
      ],
      "run": [
        "r-base"
      ]
    },
    "schema_version": 0,
    "source": {
      "fn": "fingerprint_3.5.7.tar.gz",
      "sha256": "2ca25567efb297e095d010010c4aaa91149dacf8084fa3e20d4367d9fce44c12",
      "url": [
        "https://cran.r-project.org/src/contrib/fingerprint_3.5.7.tar.gz",
        "https://cran.r-project.org/src/contrib/Archive/fingerprint/fingerprint_3.5.7.tar.gz"
      ]
    },
    "test": {
      "commands": [
        "$R -e \"library('fingerprint')\""
      ]
    }
  },
  "osx_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "r-base"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "r-base"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "outputs_names": {
    "__set__": true,
    "elements": [
      "r-fingerprint"
    ]
  },
  "parsing_error": false,
  "platforms": [
    "linux_64",
    "osx_64",
    "win_64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/r-fingerprint.json"
  },
  "raw_meta_yaml": "{% set version = \"3.5.7\" %}\n{% set posix = 'm2-' if win else '' %}\n\npackage:\n  name: r-fingerprint\n  version: {{ version|replace(\"-\", \"_\") }}\n\nsource:\n  fn: fingerprint_{{ version }}.tar.gz\n  url:\n    - {{ cran_mirror }}/src/contrib/fingerprint_{{ version }}.tar.gz\n    - {{ cran_mirror }}/src/contrib/Archive/fingerprint/fingerprint_{{ version }}.tar.gz\n  sha256: 2ca25567efb297e095d010010c4aaa91149dacf8084fa3e20d4367d9fce44c12\n\nbuild:\n  number: 1007\n  skip: true  # [win32]\n  rpaths:\n    - lib/R/lib/\n    - lib/\n\nrequirements:\n  build:\n    - {{ compiler('c') }}        # [not win]\n    - {{ stdlib(\"c\") }}          # [not win]\n    - {{ compiler('m2w64_c') }}        # [win]\n    - {{ stdlib(\"m2w64_c\") }}          # [win]\n    - {{ posix }}filesystem        # [win]\n    - {{ posix }}make\n    - {{ posix }}sed               # [win]\n    - {{ posix }}coreutils         # [win]\n    - {{ posix }}zip               # [win]\n  host:\n    - r-base\n  run:\n    - r-base\n\ntest:\n  commands:\n    - $R -e \"library('fingerprint')\"           # [not win]\n    - \"\\\"%R%\\\" -e \\\"library('fingerprint')\\\"\"  # [win]\n\nabout:\n  home: https://CRAN.R-project.org/package=fingerprint\n  license: GPL\n  summary: Functions to manipulate binary fingerprints of arbitrary length. A fingerprint is represented by an object of S4 class 'fingerprint' which is internally represented a vector of integers, such that each element represents the position in the fingerprint that is set to 1. The bitwise logical functions in R are overridden\n    so that they can be used directly with 'fingerprint' objects. A number of distance metrics are also available (many contributed by Michael Fadock). Fingerprints  can be converted to Euclidean vectors (i.e., points on the unit hypersphere) and can also be folded using OR.  Arbitrary fingerprint formats can be handled\n    via line handlers. Currently handlers are provided for CDK, MOE and BCI fingerprint data.\n  license_family: GPL\n\n  license_file:\n    - {{ environ[\"PREFIX\"] }}/lib/R/share/licenses/GPL-3\nextra:\n  recipe-maintainers:\n    - conda-forge/r\n    - MathiasHaudgaard\n    - FrodePedersen\n    - ArneKr\n",
  "req": {
    "__set__": true,
    "elements": [
      "c_compiler_stub",
      "c_stdlib_stub",
      "coreutils",
      "filesystem",
      "m2w64_c_compiler_stub",
      "m2w64_c_stdlib_stub",
      "make",
      "r-base",
      "sed",
      "zip"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "coreutils",
        "filesystem",
        "m2w64_c_compiler_stub",
        "m2w64_c_stdlib_stub",
        "make",
        "sed",
        "zip"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "r-base"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "r-base"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "coreutils",
        "filesystem",
        "m2w64_c_compiler_stub",
        "m2w64_c_stdlib_stub",
        "make",
        "sed",
        "zip"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "r-base"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "r-base"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "url": [
    "https://cran.r-project.org/src/contrib/fingerprint_3.5.7.tar.gz",
    "https://cran.r-project.org/src/contrib/Archive/fingerprint/fingerprint_3.5.7.tar.gz",
    "https://cran.r-project.org/src/contrib/fingerprint_3.5.7.tar.gz",
    "https://cran.r-project.org/src/contrib/Archive/fingerprint/fingerprint_3.5.7.tar.gz",
    "https://cran.r-project.org/src/contrib/fingerprint_3.5.7.tar.gz",
    "https://cran.r-project.org/src/contrib/Archive/fingerprint/fingerprint_3.5.7.tar.gz"
  ],
  "version": "3.5.7",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/r-fingerprint.json"
  },
  "win_64_meta_yaml": {
    "about": {
      "home": "https://CRAN.R-project.org/package=fingerprint",
      "license": "GPL",
      "license_family": "GPL",
      "license_file": [
        "/lib/R/share/licenses/GPL-3"
      ],
      "summary": "Functions to manipulate binary fingerprints of arbitrary length. A fingerprint is represented by an object of S4 class 'fingerprint' which is internally represented a vector of integers, such that each element represents the position in the fingerprint that is set to 1. The bitwise logical functions in R are overridden so that they can be used directly with 'fingerprint' objects. A number of distance metrics are also available (many contributed by Michael Fadock). Fingerprints  can be converted to Euclidean vectors (i.e., points on the unit hypersphere) and can also be folded using OR.  Arbitrary fingerprint formats can be handled via line handlers. Currently handlers are provided for CDK, MOE and BCI fingerprint data."
    },
    "build": {
      "number": "1007",
      "rpaths": [
        "lib/R/lib/",
        "lib/"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "conda-forge/r",
        "MathiasHaudgaard",
        "FrodePedersen",
        "ArneKr"
      ]
    },
    "package": {
      "name": "r-fingerprint",
      "version": "3.5.7"
    },
    "requirements": {
      "build": [
        "m2w64_c_compiler_stub",
        "m2w64_c_stdlib_stub",
        "filesystem",
        "make",
        "sed",
        "coreutils",
        "zip"
      ],
      "host": [
        "r-base"
      ],
      "run": [
        "r-base"
      ]
    },
    "schema_version": 0,
    "source": {
      "fn": "fingerprint_3.5.7.tar.gz",
      "sha256": "2ca25567efb297e095d010010c4aaa91149dacf8084fa3e20d4367d9fce44c12",
      "url": [
        "https://cran.r-project.org/src/contrib/fingerprint_3.5.7.tar.gz",
        "https://cran.r-project.org/src/contrib/Archive/fingerprint/fingerprint_3.5.7.tar.gz"
      ]
    },
    "test": {
      "commands": [
        "\"%R%\" -e \"library('fingerprint')\""
      ]
    }
  },
  "win_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "coreutils",
        "filesystem",
        "m2w64_c_compiler_stub",
        "m2w64_c_stdlib_stub",
        "make",
        "sed",
        "zip"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "r-base"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "r-base"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  }
}