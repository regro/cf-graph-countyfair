{
  "archived": false,
  "branch": "main",
  "conda-forge.yml": {
    "bot": {
      "inspection": "update-grayskull"
    },
    "conda_build": {
      "pkg_format": "2"
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    }
  },
  "feedstock_name": "requests-oauthlib",
  "hash_type": "sha256",
  "linux_64_meta_yaml": {
    "about": {
      "description": "Requests-OAuthlib\n=========================================================\n\nThis project provides first-class OAuth library support for [Requests](http://python-requests.org).\n\nThe OAuth 1 workflow\n--------------------\n\nOAuth 1 can seem overly complicated and it sure has its quirks. Luckily,\nrequests_oauthlib hides most of these and let you focus at the task at hand.\n\nAccessing protected resources using requests_oauthlib is as simple as:\n\n    >>> from requests_oauthlib import OAuth1Session\n    >>> twitter = OAuth1Session('client_key',\n                                client_secret='client_secret',\n                                resource_owner_key='resource_owner_key',\n                                resource_owner_secret='resource_owner_secret')\n    >>> url = 'https://api.twitter.com/1/account/settings.json'\n    >>> r = twitter.get(url)\n\nBefore accessing resources you will need to obtain a few credentials from your\nprovider (e.g. Twitter) and authorization from the user for whom you wish to\nretrieve resources for. You can read all about this in the full\n[OAuth 1 workflow guide on RTD](https://requests-oauthlib.readthedocs.io/en/latest/oauth1_workflow.html)\n\nThe OAuth 2 workflow\n--------------------\n\nOAuth 2 is generally simpler than OAuth 1 but comes in more flavours. The most\ncommon being the Authorization Code Grant, also known as the WebApplication\nflow.\n\nFetching a protected resource after obtaining an access token can be extremely\nsimple. However, before accessing resources you will need to obtain a few\ncredentials from your provider (e.g. Google) and authorization from the user\nfor whom you wish to retrieve resources for. You can read all about this in the\nfull [OAuth 2 workflow guide on RTD](https://requests-oauthlib.readthedocs.io/en/latest/oauth2_workflow.html).\n",
      "dev_url": "https://github.com/requests/requests-oauthlib",
      "doc_url": "https://github.com/requests/requests-oauthlib",
      "home": "https://github.com/requests/requests-oauthlib",
      "license": "ISC",
      "license_file": "LICENSE",
      "summary": "OAuthlib authentication support for Requests."
    },
    "build": {
      "noarch": "python",
      "number": "1",
      "script": "PYTHON -m pip install . --no-deps -vv"
    },
    "extra": {
      "recipe-maintainers": [
        "pmlandwehr",
        "xylar"
      ]
    },
    "package": {
      "name": "requests-oauthlib",
      "version": "2.0.0"
    },
    "requirements": {
      "host": [
        "python 3.9",
        "pip"
      ],
      "run": [
        "python >=3.9",
        "oauthlib >=3.0.0",
        "requests >=2.0.0"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "b3dffaebd884d8cd778494369603a9e7b58d29111bf6b41bdc2dcd87203af4e9",
      "url": "https://pypi.org/packages/source/r/requests-oauthlib/requests-oauthlib-2.0.0.tar.gz"
    },
    "test": {
      "imports": [
        "requests_oauthlib",
        "requests_oauthlib.oauth1_auth",
        "requests_oauthlib.oauth1_session",
        "requests_oauthlib.oauth2_auth",
        "requests_oauthlib.oauth2_session",
        "requests_oauthlib.compliance_fixes"
      ],
      "requires": [
        "python 3.9"
      ]
    }
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": []
    },
    "host": {
      "__set__": true,
      "elements": [
        "pip",
        "python"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "oauthlib",
        "python",
        "requests"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "python"
      ]
    }
  },
  "meta_yaml": {
    "about": {
      "description": "Requests-OAuthlib\n=========================================================\n\nThis project provides first-class OAuth library support for [Requests](http://python-requests.org).\n\nThe OAuth 1 workflow\n--------------------\n\nOAuth 1 can seem overly complicated and it sure has its quirks. Luckily,\nrequests_oauthlib hides most of these and let you focus at the task at hand.\n\nAccessing protected resources using requests_oauthlib is as simple as:\n\n    >>> from requests_oauthlib import OAuth1Session\n    >>> twitter = OAuth1Session('client_key',\n                                client_secret='client_secret',\n                                resource_owner_key='resource_owner_key',\n                                resource_owner_secret='resource_owner_secret')\n    >>> url = 'https://api.twitter.com/1/account/settings.json'\n    >>> r = twitter.get(url)\n\nBefore accessing resources you will need to obtain a few credentials from your\nprovider (e.g. Twitter) and authorization from the user for whom you wish to\nretrieve resources for. You can read all about this in the full\n[OAuth 1 workflow guide on RTD](https://requests-oauthlib.readthedocs.io/en/latest/oauth1_workflow.html)\n\nThe OAuth 2 workflow\n--------------------\n\nOAuth 2 is generally simpler than OAuth 1 but comes in more flavours. The most\ncommon being the Authorization Code Grant, also known as the WebApplication\nflow.\n\nFetching a protected resource after obtaining an access token can be extremely\nsimple. However, before accessing resources you will need to obtain a few\ncredentials from your provider (e.g. Google) and authorization from the user\nfor whom you wish to retrieve resources for. You can read all about this in the\nfull [OAuth 2 workflow guide on RTD](https://requests-oauthlib.readthedocs.io/en/latest/oauth2_workflow.html).\n",
      "dev_url": "https://github.com/requests/requests-oauthlib",
      "doc_url": "https://github.com/requests/requests-oauthlib",
      "home": "https://github.com/requests/requests-oauthlib",
      "license": "ISC",
      "license_file": "LICENSE",
      "summary": "OAuthlib authentication support for Requests."
    },
    "build": {
      "noarch": "python",
      "number": "1",
      "script": "PYTHON -m pip install . --no-deps -vv"
    },
    "extra": {
      "recipe-maintainers": [
        "pmlandwehr",
        "xylar"
      ]
    },
    "package": {
      "name": "requests-oauthlib",
      "version": "2.0.0"
    },
    "requirements": {
      "host": [
        "python 3.9",
        "pip"
      ],
      "run": [
        "python >=3.9",
        "oauthlib >=3.0.0",
        "requests >=2.0.0"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "b3dffaebd884d8cd778494369603a9e7b58d29111bf6b41bdc2dcd87203af4e9",
      "url": "https://pypi.org/packages/source/r/requests-oauthlib/requests-oauthlib-2.0.0.tar.gz"
    },
    "test": {
      "imports": [
        "requests_oauthlib",
        "requests_oauthlib.oauth1_auth",
        "requests_oauthlib.oauth1_session",
        "requests_oauthlib.oauth2_auth",
        "requests_oauthlib.oauth2_session",
        "requests_oauthlib.compliance_fixes"
      ],
      "requires": [
        "python 3.9"
      ]
    }
  },
  "name": "requests-oauthlib",
  "outputs_names": {
    "__set__": true,
    "elements": [
      "requests-oauthlib"
    ]
  },
  "parsing_error": false,
  "platforms": [
    "linux_64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/requests-oauthlib.json"
  },
  "raw_meta_yaml": "{% set name = \"requests-oauthlib\" %}\n{% set version = \"2.0.0\" %}\n\npackage:\n  name: {{ name }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.org/packages/source/{{ name[0] }}/{{ name }}/requests-oauthlib-{{ version }}.tar.gz\n  sha256: b3dffaebd884d8cd778494369603a9e7b58d29111bf6b41bdc2dcd87203af4e9\n\nbuild:\n  noarch: python\n  number: 1\n  script: {{ PYTHON }} -m pip install . --no-deps -vv\n\nrequirements:\n  host:\n    - python {{ python_min }}\n    - pip\n\n  run:\n    - python >={{ python_min }}\n    - oauthlib >=3.0.0\n    - requests >=2.0.0\n\ntest:\n  requires:\n    - python {{ python_min }}\n  imports:\n    - requests_oauthlib\n    - requests_oauthlib.oauth1_auth\n    - requests_oauthlib.oauth1_session\n    - requests_oauthlib.oauth2_auth\n    - requests_oauthlib.oauth2_session\n    - requests_oauthlib.compliance_fixes\n\nabout:\n  home: https://github.com/requests/requests-oauthlib\n  license: ISC\n  license_file: LICENSE\n  summary: OAuthlib authentication support for Requests.\n  description: |\n    Requests-OAuthlib\n    =========================================================\n\n    This project provides first-class OAuth library support for [Requests](http://python-requests.org).\n\n    The OAuth 1 workflow\n    --------------------\n\n    OAuth 1 can seem overly complicated and it sure has its quirks. Luckily,\n    requests_oauthlib hides most of these and let you focus at the task at hand.\n\n    Accessing protected resources using requests_oauthlib is as simple as:\n\n        >>> from requests_oauthlib import OAuth1Session\n        >>> twitter = OAuth1Session('client_key',\n                                    client_secret='client_secret',\n                                    resource_owner_key='resource_owner_key',\n                                    resource_owner_secret='resource_owner_secret')\n        >>> url = 'https://api.twitter.com/1/account/settings.json'\n        >>> r = twitter.get(url)\n\n    Before accessing resources you will need to obtain a few credentials from your\n    provider (e.g. Twitter) and authorization from the user for whom you wish to\n    retrieve resources for. You can read all about this in the full\n    [OAuth 1 workflow guide on RTD](https://requests-oauthlib.readthedocs.io/en/latest/oauth1_workflow.html)\n\n    The OAuth 2 workflow\n    --------------------\n\n    OAuth 2 is generally simpler than OAuth 1 but comes in more flavours. The most\n    common being the Authorization Code Grant, also known as the WebApplication\n    flow.\n\n    Fetching a protected resource after obtaining an access token can be extremely\n    simple. However, before accessing resources you will need to obtain a few\n    credentials from your provider (e.g. Google) and authorization from the user\n    for whom you wish to retrieve resources for. You can read all about this in the\n    full [OAuth 2 workflow guide on RTD](https://requests-oauthlib.readthedocs.io/en/latest/oauth2_workflow.html).\n\n  dev_url: https://github.com/requests/requests-oauthlib\n  doc_url: https://github.com/requests/requests-oauthlib\n\nextra:\n  recipe-maintainers:\n    - pmlandwehr\n    - xylar\n",
  "req": {
    "__set__": true,
    "elements": [
      "oauthlib",
      "pip",
      "python",
      "requests"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": []
    },
    "host": {
      "__set__": true,
      "elements": [
        "pip",
        "python"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "oauthlib",
        "python",
        "requests"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "python"
      ]
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": []
    },
    "host": {
      "__set__": true,
      "elements": [
        "pip",
        "python 3.9"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "oauthlib >=3.0.0",
        "python >=3.9",
        "requests >=2.0.0"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "python 3.9"
      ]
    }
  },
  "url": "https://pypi.org/packages/source/r/requests-oauthlib/requests-oauthlib-2.0.0.tar.gz",
  "version": "2.0.0",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/requests-oauthlib.json"
  }
}