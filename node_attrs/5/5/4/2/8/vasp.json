{
  "archived": false,
  "branch": "main",
  "conda-forge.yml": {
    "conda_build": {
      "error_overlinking": true
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    }
  },
  "feedstock_name": "vasp",
  "hash_type": "sha256",
  "linux_64_meta_yaml": {
    "about": {
      "description": "The Vascular Fluid-Structure Interaction Simulation Pipeline (VaSP) is a toolkit for simulating fluid-structure interactions (FSI) in vascular systems. It streamlines the process from pre-processing to post-processing of vascular FSI simulations. Starting with medical image-based surface meshes, VaSP uses extended version of VMTK to generate volumetric FSI meshes. It then runs FSI simulations using turtleFSI. For post-processing, VaSP employs FEniCS and other Python packages to compute hemodynamic indices like wall shear stress and stress/strain. By integrating these tools, VaSP aims to simplify vascular FSI analyses.\n",
      "dev_url": "https://github.com/KVSlab/VaSP",
      "doc_url": "https://kvslab.github.io/VaSP",
      "home": "https://github.com/KVSlab/VaSP",
      "license": "GPL-3.0-or-later",
      "license_family": "GPL3",
      "license_file": "LICENSE",
      "summary": "Vascular Fluid Structure Interaction Pipline"
    },
    "build": {
      "entry_points": [
        "vasp-generate-mesh = vasp.preprocessing.preprocessing:main_meshing",
        "vasp-generate-solid-probe = vasp.preprocessing.generate_solid_probe:main",
        "vasp-predeform-mesh = vasp.postprocessing.predeform_mesh:main",
        "vasp-refine-mesh = vasp.postprocessing.postprocessing_mesh.create_refined_mesh:main",
        "vasp-separate-mesh = vasp.postprocessing.postprocessing_mesh.separate_mesh:main",
        "vasp-log-plotter = vasp.postprocessing.log_plotter:main",
        "vasp-create-hdf5 = vasp.postprocessing.postprocessing_fenics.create_hdf5:main",
        "vasp-create-separate-domain-viz = vasp.postprocessing.postprocessing_fenics.create_separate_domain_visualization:main",
        "vasp-compute-stress = vasp.postprocessing.postprocessing_fenics.compute_stress_strain:main",
        "vasp-compute-hemo = vasp.postprocessing.postprocessing_fenics.compute_hemodynamics:main",
        "vasp-create-spectrograms-chromagrams = vasp.postprocessing.postprocessing_h5py.create_spectrograms_chromagrams:main",
        "vasp-create-spectrum = vasp.postprocessing.postprocessing_h5py.create_spectrum:main",
        "vasp-create-hi-pass-viz = vasp.postprocessing.postprocessing_h5py.create_hi_pass_viz:main"
      ],
      "noarch": "python",
      "number": "0",
      "script": "PYTHON -m pip install . -vv --no-deps --no-build-isolation"
    },
    "extra": {
      "recipe-maintainers": [
        "johannesring",
        "keiyamamo"
      ]
    },
    "package": {
      "name": "vasp",
      "version": "1.1"
    },
    "requirements": {
      "host": [
        "python 3.9",
        "setuptools >=61.0.0",
        "wheel",
        "pip"
      ],
      "run": [
        "python >=3.9",
        "fenics >=2019.1.0",
        "vmtk",
        "morphman",
        "paramiko",
        "meshio",
        "numpy",
        "matplotlib-base",
        "pandas",
        "tqdm",
        "expat ==2.5.0",
        "hdf5 ==1.12.2",
        "mpi4py ==3.1.4",
        "turtlefsi",
        "vampy"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "490fc277fb16d7910b92176a1ee5f92bf317a5ded57095eda06e0d8a38b1c994",
      "url": "https://github.com/KVSlab/VaSP/archive/v1.1.tar.gz"
    },
    "test": {
      "commands": [
        "export OMPI_MCA_plm=isolated",
        "vasp-generate-mesh --help",
        "vasp-generate-solid-probe --help",
        "vasp-predeform-mesh --help",
        "vasp-refine-mesh --help",
        "vasp-separate-mesh --help",
        "vasp-log-plotter --help",
        "vasp-create-hdf5 --help",
        "vasp-create-separate-domain-viz --help",
        "vasp-compute-stress --help",
        "vasp-compute-hemo --help",
        "vasp-create-spectrograms-chromagrams --help",
        "vasp-create-spectrum --help",
        "vasp-create-hi-pass-viz --help",
        "pytest -k test_mesh_model_with_one_inlet_and_two_outlets",
        "pytest -k test_compute_hemodynamics",
        "pytest -k test_plot_all",
        "pytest -k test_cylinder_problem"
      ],
      "imports": [
        "vasp"
      ],
      "requires": [
        "python 3.9",
        "pip",
        "pytest"
      ],
      "source_files": [
        "tests/*",
        "src/*"
      ]
    }
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": []
    },
    "host": {
      "__set__": true,
      "elements": [
        "pip",
        "python",
        "setuptools",
        "wheel"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "expat",
        "fenics",
        "hdf5",
        "matplotlib-base",
        "meshio",
        "morphman",
        "mpi4py",
        "numpy",
        "pandas",
        "paramiko",
        "python",
        "tqdm",
        "turtlefsi",
        "vampy",
        "vmtk"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "pip",
        "pytest",
        "python"
      ]
    }
  },
  "meta_yaml": {
    "about": {
      "description": "The Vascular Fluid-Structure Interaction Simulation Pipeline (VaSP) is a toolkit for simulating fluid-structure interactions (FSI) in vascular systems. It streamlines the process from pre-processing to post-processing of vascular FSI simulations. Starting with medical image-based surface meshes, VaSP uses extended version of VMTK to generate volumetric FSI meshes. It then runs FSI simulations using turtleFSI. For post-processing, VaSP employs FEniCS and other Python packages to compute hemodynamic indices like wall shear stress and stress/strain. By integrating these tools, VaSP aims to simplify vascular FSI analyses.\n",
      "dev_url": "https://github.com/KVSlab/VaSP",
      "doc_url": "https://kvslab.github.io/VaSP",
      "home": "https://github.com/KVSlab/VaSP",
      "license": "GPL-3.0-or-later",
      "license_family": "GPL3",
      "license_file": "LICENSE",
      "summary": "Vascular Fluid Structure Interaction Pipline"
    },
    "build": {
      "entry_points": [
        "vasp-generate-mesh = vasp.preprocessing.preprocessing:main_meshing",
        "vasp-generate-solid-probe = vasp.preprocessing.generate_solid_probe:main",
        "vasp-predeform-mesh = vasp.postprocessing.predeform_mesh:main",
        "vasp-refine-mesh = vasp.postprocessing.postprocessing_mesh.create_refined_mesh:main",
        "vasp-separate-mesh = vasp.postprocessing.postprocessing_mesh.separate_mesh:main",
        "vasp-log-plotter = vasp.postprocessing.log_plotter:main",
        "vasp-create-hdf5 = vasp.postprocessing.postprocessing_fenics.create_hdf5:main",
        "vasp-create-separate-domain-viz = vasp.postprocessing.postprocessing_fenics.create_separate_domain_visualization:main",
        "vasp-compute-stress = vasp.postprocessing.postprocessing_fenics.compute_stress_strain:main",
        "vasp-compute-hemo = vasp.postprocessing.postprocessing_fenics.compute_hemodynamics:main",
        "vasp-create-spectrograms-chromagrams = vasp.postprocessing.postprocessing_h5py.create_spectrograms_chromagrams:main",
        "vasp-create-spectrum = vasp.postprocessing.postprocessing_h5py.create_spectrum:main",
        "vasp-create-hi-pass-viz = vasp.postprocessing.postprocessing_h5py.create_hi_pass_viz:main"
      ],
      "noarch": "python",
      "number": "0",
      "script": "PYTHON -m pip install . -vv --no-deps --no-build-isolation"
    },
    "extra": {
      "recipe-maintainers": [
        "johannesring",
        "keiyamamo"
      ]
    },
    "package": {
      "name": "vasp",
      "version": "1.1"
    },
    "requirements": {
      "host": [
        "python 3.9",
        "setuptools >=61.0.0",
        "wheel",
        "pip"
      ],
      "run": [
        "python >=3.9",
        "fenics >=2019.1.0",
        "vmtk",
        "morphman",
        "paramiko",
        "meshio",
        "numpy",
        "matplotlib-base",
        "pandas",
        "tqdm",
        "expat ==2.5.0",
        "hdf5 ==1.12.2",
        "mpi4py ==3.1.4",
        "turtlefsi",
        "vampy"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "490fc277fb16d7910b92176a1ee5f92bf317a5ded57095eda06e0d8a38b1c994",
      "url": "https://github.com/KVSlab/VaSP/archive/v1.1.tar.gz"
    },
    "test": {
      "commands": [
        "export OMPI_MCA_plm=isolated",
        "vasp-generate-mesh --help",
        "vasp-generate-solid-probe --help",
        "vasp-predeform-mesh --help",
        "vasp-refine-mesh --help",
        "vasp-separate-mesh --help",
        "vasp-log-plotter --help",
        "vasp-create-hdf5 --help",
        "vasp-create-separate-domain-viz --help",
        "vasp-compute-stress --help",
        "vasp-compute-hemo --help",
        "vasp-create-spectrograms-chromagrams --help",
        "vasp-create-spectrum --help",
        "vasp-create-hi-pass-viz --help",
        "pytest -k test_mesh_model_with_one_inlet_and_two_outlets",
        "pytest -k test_compute_hemodynamics",
        "pytest -k test_plot_all",
        "pytest -k test_cylinder_problem"
      ],
      "imports": [
        "vasp"
      ],
      "requires": [
        "python 3.9",
        "pip",
        "pytest"
      ],
      "source_files": [
        "tests/*",
        "src/*"
      ]
    }
  },
  "name": "vasp",
  "outputs_names": {
    "__set__": true,
    "elements": [
      "vasp"
    ]
  },
  "parsing_error": false,
  "platforms": [
    "linux_64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/vasp.json"
  },
  "raw_meta_yaml": "{% set name = \"VaSP\" %}\n{% set version = \"1.1\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://github.com/KVSlab/VaSP/archive/v{{ version }}.tar.gz\n  sha256: 490fc277fb16d7910b92176a1ee5f92bf317a5ded57095eda06e0d8a38b1c994\n\nbuild:\n  entry_points:\n    - vasp-generate-mesh = vasp.preprocessing.preprocessing:main_meshing\n    - vasp-generate-solid-probe = vasp.preprocessing.generate_solid_probe:main\n    - vasp-predeform-mesh = vasp.postprocessing.predeform_mesh:main\n    - vasp-refine-mesh = vasp.postprocessing.postprocessing_mesh.create_refined_mesh:main\n    - vasp-separate-mesh = vasp.postprocessing.postprocessing_mesh.separate_mesh:main\n    - vasp-log-plotter = vasp.postprocessing.log_plotter:main\n    - vasp-create-hdf5 = vasp.postprocessing.postprocessing_fenics.create_hdf5:main\n    - vasp-create-separate-domain-viz = vasp.postprocessing.postprocessing_fenics.create_separate_domain_visualization:main\n    - vasp-compute-stress = vasp.postprocessing.postprocessing_fenics.compute_stress_strain:main\n    - vasp-compute-hemo = vasp.postprocessing.postprocessing_fenics.compute_hemodynamics:main\n    - vasp-create-spectrograms-chromagrams = vasp.postprocessing.postprocessing_h5py.create_spectrograms_chromagrams:main\n    - vasp-create-spectrum = vasp.postprocessing.postprocessing_h5py.create_spectrum:main\n    - vasp-create-hi-pass-viz = vasp.postprocessing.postprocessing_h5py.create_hi_pass_viz:main\n  noarch: python\n  script: {{ PYTHON }} -m pip install . -vv --no-deps --no-build-isolation\n  number: 0\n\nrequirements:\n  host:\n    - python {{ python_min }}\n    - setuptools >=61.0.0\n    - wheel\n    - pip\n  run:\n    - python >={{ python_min }}\n    - fenics >=2019.1.0\n    - vmtk\n    - morphman\n    - paramiko\n    - meshio\n    - numpy\n    - matplotlib-base\n    - pandas\n    - tqdm\n    - expat ==2.5.0\n    - hdf5 ==1.12.2\n    - mpi4py ==3.1.4\n    - turtlefsi\n    - vampy\n\ntest:\n  imports:\n    - vasp\n  source_files:\n    - tests/*\n    - src/*\n  commands:\n    # Temporarily disabled due to upstream pybind11 issue in fenics\n    # See: https://github.com/conda-forge/fenics-feedstock/pull/256\n    # - pip check\n\n    # Avoid OpenMPI errors when running mpi4py in isolated environments\n    - export OMPI_MCA_plm=isolated\n\n    # Check that all CLI entry points are available\n    - vasp-generate-mesh --help\n    - vasp-generate-solid-probe --help\n    - vasp-predeform-mesh --help\n    - vasp-refine-mesh --help\n    - vasp-separate-mesh --help\n    - vasp-log-plotter --help\n    - vasp-create-hdf5 --help\n    - vasp-create-separate-domain-viz --help\n    - vasp-compute-stress --help\n    - vasp-compute-hemo --help\n    - vasp-create-spectrograms-chromagrams --help\n    - vasp-create-spectrum --help\n    - vasp-create-hi-pass-viz --help\n\n    # Only a small subset of fast and representative tests are run here\n    # to reduce test time in conda-forge CI\n    - pytest -k test_mesh_model_with_one_inlet_and_two_outlets\n    - pytest -k test_compute_hemodynamics\n    - pytest -k test_plot_all\n    - pytest -k test_cylinder_problem\n  requires:\n    - python {{ python_min }}\n    - pip\n    - pytest\n\nabout:\n  home: https://github.com/KVSlab/VaSP\n  summary: Vascular Fluid Structure Interaction Pipline\n  description: |\n    The Vascular Fluid-Structure Interaction Simulation Pipeline (VaSP) is a toolkit for simulating fluid-structure interactions (FSI) in vascular systems. It streamlines the process from pre-processing to post-processing of vascular FSI simulations. Starting with medical image-based surface meshes, VaSP uses extended version of VMTK to generate volumetric FSI meshes. It then runs FSI simulations using turtleFSI. For post-processing, VaSP employs FEniCS and other Python packages to compute hemodynamic indices like wall shear stress and stress/strain. By integrating these tools, VaSP aims to simplify vascular FSI analyses.\n  license: GPL-3.0-or-later\n  license_family: GPL3\n  license_file: LICENSE\n  doc_url: https://kvslab.github.io/VaSP\n  dev_url: https://github.com/KVSlab/VaSP\n\nextra:\n  recipe-maintainers:\n    - johannesring\n    - keiyamamo\n",
  "req": {
    "__set__": true,
    "elements": [
      "expat",
      "fenics",
      "hdf5",
      "matplotlib-base",
      "meshio",
      "morphman",
      "mpi4py",
      "numpy",
      "pandas",
      "paramiko",
      "pip",
      "python",
      "setuptools",
      "tqdm",
      "turtlefsi",
      "vampy",
      "vmtk",
      "wheel"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": []
    },
    "host": {
      "__set__": true,
      "elements": [
        "pip",
        "python",
        "setuptools",
        "wheel"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "expat",
        "fenics",
        "hdf5",
        "matplotlib-base",
        "meshio",
        "morphman",
        "mpi4py",
        "numpy",
        "pandas",
        "paramiko",
        "python",
        "tqdm",
        "turtlefsi",
        "vampy",
        "vmtk"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "pip",
        "pytest",
        "python"
      ]
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": []
    },
    "host": {
      "__set__": true,
      "elements": [
        "pip",
        "python 3.9",
        "setuptools >=61.0.0",
        "wheel"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "expat ==2.5.0",
        "fenics >=2019.1.0",
        "hdf5 ==1.12.2",
        "matplotlib-base",
        "meshio",
        "morphman",
        "mpi4py ==3.1.4",
        "numpy",
        "pandas",
        "paramiko",
        "python >=3.9",
        "tqdm",
        "turtlefsi",
        "vampy",
        "vmtk"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "pip",
        "pytest",
        "python 3.9"
      ]
    }
  },
  "url": "https://github.com/KVSlab/VaSP/archive/v1.1.tar.gz",
  "version": "1.1",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/vasp.json"
  }
}