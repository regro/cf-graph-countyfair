{
  "archived": false,
  "branch": "main",
  "conda-forge.yml": {
    "azure": {
      "free_disk_space": true
    },
    "build_platform": {
      "linux_64": "linux_64",
      "linux_aarch64": "linux_64"
    },
    "conda_build": {
      "error_overlinking": true
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    },
    "provider": {
      "linux_64": "default",
      "linux_aarch64": "default"
    }
  },
  "feedstock_name": "holoscan",
  "hash_type": "sha256",
  "linux_64_meta_yaml": {
    "about": {
      "description": "NVIDIA Holoscan is the AI sensor processing platform that combines hardware systems for low-latency sensor and network connectivity, optimized libraries for data processing and AI, and core microservices to run streaming, imaging, and other applications, from embedded to edge to cloud.\nIt can be used to build streaming AI pipelines for a variety of domains, including Medical Devices, High Performance Computing at the Edge, Industrial Inspection and more.\n",
      "doc_url": "https://docs.nvidia.com/cuda/holoscan/",
      "home": "https://docs.nvidia.com/cuda/holoscan/",
      "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
      "license_file": [
        "LICENSE",
        "NOTICE"
      ],
      "license_url": "https://developer.download.nvidia.com/assets/Clara/NVIDIA_Clara_EULA.pdf",
      "summary": "NVIDIA Holoscan is the AI sensor processing platform that combines hardware systems for low-latency sensor and network connectivity, optimized libraries for data processing and AI, and core microservices to run streaming, imaging, and other applications, from embedded to edge to cloud."
    },
    "build": {
      "number": "0"
    },
    "extra": {
      "feedstock-name": "holoscan",
      "recipe-maintainers": [
        "conda-forge/cuda"
      ]
    },
    "outputs": [
      {
        "about": {
          "description": "This is a runtime package only. Developers should install holoscan (python) and/or libholoscan-dev (C++ SDK) to build with Holoscan\n",
          "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
          "license_file": [
            "LICENSE",
            "NOTICE"
          ],
          "license_url": "https://developer.download.nvidia.com/assets/Clara/NVIDIA_Clara_EULA.pdf",
          "summary": "NVIDIA Holoscan runtime library"
        },
        "build": {
          "ignore_run_exports": [
            "cuda-version"
          ],
          "missing_dso_whitelist": [
            "*libcuda.so*",
            "*libgdrapi.so*",
            "*libnvidia-ml.so*",
            "*libnvinfer_plugin.so*",
            "*libnvonnxparser.so*",
            "*libtorchvision.so*",
            "*libv4l2.so*",
            "*libxpmem.so*"
          ],
          "post-link": "post-link"
        },
        "files": [
          "lib/libholoscan*.so.*",
          "lib/gxf_extensions",
          "lib/libgxf*.so",
          "lib/libucxx.so"
        ],
        "name": "libholoscan",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cuda_compiler_stub",
            "c_stdlib_stub"
          ],
          "host": [
            "cuda-version 12.6",
            "cuda-nvrtc-dev",
            "libjpeg-turbo",
            "libnpp-dev",
            "libtorch 2.5.*",
            "libtorch * cuda*",
            "libvulkan-loader",
            "openssl",
            "ucx 1.17.0.*",
            "onnxruntime-cpp  1.18.1.*"
          ],
          "run": [
            "cuda-version",
            "cloudpickle",
            "cuda-cudart",
            "libegl",
            "libjpeg-turbo",
            "libtorch * cuda*",
            "libvulkan-loader"
          ]
        },
        "test": {
          "commands": [
            "test -L $PREFIX/lib/libholoscan_core.so.3",
            "test -L $PREFIX/lib/libholoscan_infer.so.3",
            "test -L $PREFIX/lib/libholoscan_infer_onnx_runtime.so.3",
            "test -L $PREFIX/lib/libholoscan_infer_torch.so.3",
            "test -L $PREFIX/lib/libholoscan_infer_utils.so.3",
            "test -L $PREFIX/lib/libholoscan_logger.so.3",
            "test -L $PREFIX/lib/libholoscan_op_async_ping_rx.so.3",
            "test -L $PREFIX/lib/libholoscan_op_async_ping_tx.so.3",
            "test -L $PREFIX/lib/libholoscan_op_bayer_demosaic.so.3",
            "test -L $PREFIX/lib/libholoscan_op_format_converter.so.3",
            "test -L $PREFIX/lib/libholoscan_op_gxf_codelet.so.3",
            "test -L $PREFIX/lib/libholoscan_op_holoviz.so.3",
            "test -L $PREFIX/lib/libholoscan_op_inference.so.3",
            "test -L $PREFIX/lib/libholoscan_op_inference_processor.so.3",
            "test -L $PREFIX/lib/libholoscan_op_ping_rx.so.3",
            "test -L $PREFIX/lib/libholoscan_op_ping_tensor_rx.so.3",
            "test -L $PREFIX/lib/libholoscan_op_ping_tensor_tx.so.3",
            "test -L $PREFIX/lib/libholoscan_op_ping_tx.so.3",
            "test -L $PREFIX/lib/libholoscan_op_segmentation_postprocessor.so.3",
            "test -L $PREFIX/lib/libholoscan_op_v4l2.so.3",
            "test -L $PREFIX/lib/libholoscan_op_video_stream_recorder.so.3",
            "test -L $PREFIX/lib/libholoscan_op_video_stream_replayer.so.3",
            "test -L $PREFIX/lib/libholoscan_profiler.so.3",
            "test -L $PREFIX/lib/libholoscan_spdlog_logger.so.3",
            "test -L $PREFIX/lib/libholoscan_viz.so.3",
            "test -f $PREFIX/lib/libholoscan_core.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_infer.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_infer_onnx_runtime.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_infer_torch.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_infer_utils.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_logger.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_op_async_ping_rx.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_op_async_ping_tx.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_op_bayer_demosaic.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_op_format_converter.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_op_gxf_codelet.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_op_holoviz.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_op_inference.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_op_inference_processor.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_op_ping_rx.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_op_ping_tensor_rx.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_op_ping_tensor_tx.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_op_ping_tx.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_op_segmentation_postprocessor.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_op_v4l2.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_op_video_stream_recorder.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_op_video_stream_replayer.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_profiler.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_spdlog_logger.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_viz.so.3.5.0",
            "test -f $PREFIX/lib/libgxf_app.so",
            "test -f $PREFIX/lib/libgxf_core.so",
            "test -f $PREFIX/lib/libgxf_cuda.so",
            "test -f $PREFIX/lib/libgxf_logger.so",
            "test -f $PREFIX/lib/libgxf_multimedia.so",
            "test -f $PREFIX/lib/libgxf_rmm.so",
            "test -f $PREFIX/lib/libgxf_sample.so",
            "test -f $PREFIX/lib/libgxf_serialization.so",
            "test -f $PREFIX/lib/libgxf_std.so",
            "test -f $PREFIX/lib/libgxf_ucx.so",
            "test -f $PREFIX/lib/gxf_extensions/libgxf_holoscan_wrapper.so",
            "test -f $PREFIX/lib/gxf_extensions/libgxf_holoscan_wrapper_lib.so",
            "test -f $PREFIX/lib/gxf_extensions/libgxf_ucx_holoscan.so",
            "test -f $PREFIX/lib/gxf_extensions/libgxf_ucx_holoscan_lib.so"
          ]
        }
      },
      {
        "about": {
          "description": "NVIDIA Holoscan python bindings\n",
          "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
          "license_file": [
            "LICENSE",
            "NOTICE"
          ],
          "license_url": "https://developer.download.nvidia.com/assets/Clara/NVIDIA_Clara_EULA.pdf",
          "summary": "NVIDIA Holoscan python bindings"
        },
        "files": [
          "lib/python3.12/site-packages/holoscan"
        ],
        "name": "holoscan",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "c_stdlib_stub"
          ],
          "host": [
            "libholoscan",
            "cuda-version 12.6",
            "python =3.12"
          ],
          "run": [
            "cupy",
            "libholoscan",
            "cuda-cudart"
          ]
        },
        "test": {
          "commands": [
            "test -d $PREFIX/lib/python3.12/site-packages/holoscan",
            "pip check"
          ],
          "imports": [
            "holoscan"
          ],
          "requires": [
            "pip"
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "libholoscan"
          ]
        },
        "files": [
          "bin/convert_gxf_entities_to_images.py",
          "bin/convert_gxf_entities_to_video.py",
          "bin/convert_video_to_gxf_entities.py",
          "bin/ctest_time_comparison.py",
          "bin/download_ngc_data",
          "bin/generate_extension_uuids.py",
          "bin/generate_gxf_manifest.py",
          "bin/graph_surgeon.py",
          "bin/gxe",
          "bin/gxf_entity_codec.py",
          "bin/get_cmake_cuda_archs.py",
          "bin/holoscan",
          "bin/video_validation.py",
          "examples/",
          "include/3rdparty",
          "include/fmt",
          "include/gxf",
          "include/gxf_holoscan_wrapper",
          "include/holoinfer",
          "include/holoscan",
          "include/holoviz",
          "include/magic_enum.hpp",
          "include/rmm",
          "lib/libholoscan*.so",
          "lib/cmake/holoscan",
          "lib/libholo*.a"
        ],
        "name": "libholoscan-dev",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "c_stdlib_stub"
          ],
          "host": [
            "libholoscan",
            "cuda-version 12.6",
            "python =3.12"
          ],
          "run": [
            "libholoscan",
            "cuda-nvcc",
            "cuda-cudart",
            "cuda-cudart-dev",
            "cuda-nvrtc-dev",
            "libnpp-dev",
            "yaml-cpp"
          ]
        },
        "test": {
          "commands": [
            "test -f $PREFIX/bin/convert_gxf_entities_to_images.py",
            "test -f $PREFIX/bin/convert_gxf_entities_to_video.py",
            "test -f $PREFIX/bin/convert_video_to_gxf_entities.py",
            "test -f $PREFIX/bin/ctest_time_comparison.py",
            "test -f $PREFIX/bin/download_ngc_data",
            "test -f $PREFIX/bin/generate_extension_uuids.py",
            "test -f $PREFIX/bin/generate_gxf_manifest.py",
            "test -f $PREFIX/bin/graph_surgeon.py",
            "test -f $PREFIX/bin/gxe",
            "test -f $PREFIX/bin/gxf_entity_codec.py",
            "test -f $PREFIX/bin/get_cmake_cuda_archs.py",
            "test -f $PREFIX/bin/holoscan",
            "test -f $PREFIX/bin/video_validation.py",
            "test -d $PREFIX/lib/cmake/holoscan",
            "test -d $PREFIX/examples",
            "test -d $PREFIX/include/3rdparty",
            "test -d $PREFIX/include/fmt",
            "test -d $PREFIX/include/gxf",
            "test -d $PREFIX/include/gxf_holoscan_wrapper",
            "test -d $PREFIX/include/holoinfer",
            "test -d $PREFIX/include/holoscan",
            "test -d $PREFIX/include/holoviz",
            "test -f $PREFIX/include/magic_enum.hpp",
            "test -d $PREFIX/include/rmm",
            "test -L $PREFIX/lib/libholoscan_core.so",
            "test -L $PREFIX/lib/libholoscan_infer.so",
            "test -L $PREFIX/lib/libholoscan_infer_onnx_runtime.so",
            "test -L $PREFIX/lib/libholoscan_infer_torch.so",
            "test -L $PREFIX/lib/libholoscan_infer_utils.so",
            "test -L $PREFIX/lib/libholoscan_logger.so",
            "test -L $PREFIX/lib/libholoscan_op_async_ping_rx.so",
            "test -L $PREFIX/lib/libholoscan_op_async_ping_tx.so",
            "test -L $PREFIX/lib/libholoscan_op_bayer_demosaic.so",
            "test -L $PREFIX/lib/libholoscan_op_format_converter.so",
            "test -L $PREFIX/lib/libholoscan_op_gxf_codelet.so",
            "test -L $PREFIX/lib/libholoscan_op_holoviz.so",
            "test -L $PREFIX/lib/libholoscan_op_inference.so",
            "test -L $PREFIX/lib/libholoscan_op_inference_processor.so",
            "test -L $PREFIX/lib/libholoscan_op_ping_rx.so",
            "test -L $PREFIX/lib/libholoscan_op_ping_tensor_rx.so",
            "test -L $PREFIX/lib/libholoscan_op_ping_tensor_tx.so",
            "test -L $PREFIX/lib/libholoscan_op_ping_tx.so",
            "test -L $PREFIX/lib/libholoscan_op_segmentation_postprocessor.so",
            "test -L $PREFIX/lib/libholoscan_op_v4l2.so",
            "test -L $PREFIX/lib/libholoscan_op_video_stream_recorder.so",
            "test -L $PREFIX/lib/libholoscan_op_video_stream_replayer.so",
            "test -L $PREFIX/lib/libholoscan_profiler.so",
            "test -L $PREFIX/lib/libholoscan_spdlog_logger.so",
            "test -L $PREFIX/lib/libholoscan_viz.so",
            "test -f $PREFIX/lib/libholoviz_imgui.a",
            "bash compile_examples.sh"
          ],
          "files": [
            "compile_examples.sh"
          ],
          "requires": [
            "cmake",
            "make",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "c_stdlib_stub",
            "cuda-version 12.6",
            "cuda",
            "patch"
          ],
          "source_files": [
            "lib/libyaml-cpp.a"
          ]
        }
      }
    ],
    "package": {
      "name": "holoscan-split",
      "version": "3.5.0.1"
    },
    "requirements": {
      "build": [
        "cf-nvidia-tools 1",
        "python =3.12"
      ],
      "host": [
        "python =3.12"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "2e070a1cf497167f166ec312ab04e6529a27b0c8c7350cd047836ff52b072208",
      "url": "https://developer.download.nvidia.com/compute/holoscan/redist/holoscan/linux-sbsa/holoscan-linux-sbsa-3.5.0.1-archive.tar.xz"
    }
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cf-nvidia-tools",
        "cuda_compiler_stub",
        "cxx_compiler_stub",
        "python"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "cuda-nvrtc-dev",
        "cuda-version",
        "libholoscan",
        "libjpeg-turbo",
        "libnpp-dev",
        "libtorch",
        "libvulkan-loader",
        "onnxruntime-cpp",
        "openssl",
        "python",
        "ucx"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "cloudpickle",
        "cuda-cudart",
        "cuda-cudart-dev",
        "cuda-nvcc",
        "cuda-nvrtc-dev",
        "cuda-version",
        "cupy",
        "libegl",
        "libholoscan",
        "libjpeg-turbo",
        "libnpp-dev",
        "libtorch",
        "libvulkan-loader",
        "yaml-cpp"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cuda",
        "cuda-version",
        "cxx_compiler_stub",
        "make",
        "patch",
        "pip"
      ]
    }
  },
  "linux_aarch64_meta_yaml": {
    "about": {
      "description": "NVIDIA Holoscan is the AI sensor processing platform that combines hardware systems for low-latency sensor and network connectivity, optimized libraries for data processing and AI, and core microservices to run streaming, imaging, and other applications, from embedded to edge to cloud.\nIt can be used to build streaming AI pipelines for a variety of domains, including Medical Devices, High Performance Computing at the Edge, Industrial Inspection and more.\n",
      "doc_url": "https://docs.nvidia.com/cuda/holoscan/",
      "home": "https://docs.nvidia.com/cuda/holoscan/",
      "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
      "license_file": [
        "LICENSE",
        "NOTICE"
      ],
      "license_url": "https://developer.download.nvidia.com/assets/Clara/NVIDIA_Clara_EULA.pdf",
      "summary": "NVIDIA Holoscan is the AI sensor processing platform that combines hardware systems for low-latency sensor and network connectivity, optimized libraries for data processing and AI, and core microservices to run streaming, imaging, and other applications, from embedded to edge to cloud."
    },
    "build": {
      "number": "0"
    },
    "extra": {
      "feedstock-name": "holoscan",
      "recipe-maintainers": [
        "conda-forge/cuda"
      ]
    },
    "outputs": [
      {
        "about": {
          "description": "This is a runtime package only. Developers should install holoscan (python) and/or libholoscan-dev (C++ SDK) to build with Holoscan\n",
          "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
          "license_file": [
            "LICENSE",
            "NOTICE"
          ],
          "license_url": "https://developer.download.nvidia.com/assets/Clara/NVIDIA_Clara_EULA.pdf",
          "summary": "NVIDIA Holoscan runtime library"
        },
        "build": {
          "ignore_run_exports": [
            "cuda-version"
          ],
          "missing_dso_whitelist": [
            "*libcuda.so*",
            "*libgdrapi.so*",
            "*libnvidia-ml.so*",
            "*libnvinfer_plugin.so*",
            "*libnvonnxparser.so*",
            "*libtorchvision.so*",
            "*libv4l2.so*",
            "*libxpmem.so*"
          ],
          "post-link": "post-link"
        },
        "files": [
          "lib/libholoscan*.so.*",
          "lib/gxf_extensions",
          "lib/libgxf*.so",
          "lib/libucxx.so"
        ],
        "name": "libholoscan",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cuda_compiler_stub",
            "c_stdlib_stub",
            "arm-variant * sbsa"
          ],
          "host": [
            "cuda-version 12.6",
            "cuda-nvrtc-dev",
            "libjpeg-turbo",
            "libnpp-dev",
            "libtorch 2.5.*",
            "libtorch * cuda*",
            "libvulkan-loader",
            "openssl",
            "ucx 1.17.0.*",
            "onnxruntime-cpp  1.18.1.*"
          ],
          "run": [
            "arm-variant * sbsa",
            "cuda-version",
            "cloudpickle",
            "cuda-cudart",
            "dbus",
            "libegl",
            "libjpeg-turbo",
            "libtorch * cuda*",
            "libvulkan-loader"
          ]
        },
        "test": {
          "commands": [
            "test -L $PREFIX/lib/libholoscan_core.so.3",
            "test -L $PREFIX/lib/libholoscan_infer.so.3",
            "test -L $PREFIX/lib/libholoscan_infer_onnx_runtime.so.3",
            "test -L $PREFIX/lib/libholoscan_infer_torch.so.3",
            "test -L $PREFIX/lib/libholoscan_infer_utils.so.3",
            "test -L $PREFIX/lib/libholoscan_logger.so.3",
            "test -L $PREFIX/lib/libholoscan_op_async_ping_rx.so.3",
            "test -L $PREFIX/lib/libholoscan_op_async_ping_tx.so.3",
            "test -L $PREFIX/lib/libholoscan_op_bayer_demosaic.so.3",
            "test -L $PREFIX/lib/libholoscan_op_format_converter.so.3",
            "test -L $PREFIX/lib/libholoscan_op_gxf_codelet.so.3",
            "test -L $PREFIX/lib/libholoscan_op_holoviz.so.3",
            "test -L $PREFIX/lib/libholoscan_op_inference.so.3",
            "test -L $PREFIX/lib/libholoscan_op_inference_processor.so.3",
            "test -L $PREFIX/lib/libholoscan_op_ping_rx.so.3",
            "test -L $PREFIX/lib/libholoscan_op_ping_tensor_rx.so.3",
            "test -L $PREFIX/lib/libholoscan_op_ping_tensor_tx.so.3",
            "test -L $PREFIX/lib/libholoscan_op_ping_tx.so.3",
            "test -L $PREFIX/lib/libholoscan_op_segmentation_postprocessor.so.3",
            "test -L $PREFIX/lib/libholoscan_op_v4l2.so.3",
            "test -L $PREFIX/lib/libholoscan_op_video_stream_recorder.so.3",
            "test -L $PREFIX/lib/libholoscan_op_video_stream_replayer.so.3",
            "test -L $PREFIX/lib/libholoscan_profiler.so.3",
            "test -L $PREFIX/lib/libholoscan_spdlog_logger.so.3",
            "test -L $PREFIX/lib/libholoscan_viz.so.3",
            "test -f $PREFIX/lib/libholoscan_core.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_infer.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_infer_onnx_runtime.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_infer_torch.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_infer_utils.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_logger.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_op_async_ping_rx.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_op_async_ping_tx.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_op_bayer_demosaic.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_op_format_converter.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_op_gxf_codelet.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_op_holoviz.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_op_inference.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_op_inference_processor.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_op_ping_rx.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_op_ping_tensor_rx.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_op_ping_tensor_tx.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_op_ping_tx.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_op_segmentation_postprocessor.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_op_v4l2.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_op_video_stream_recorder.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_op_video_stream_replayer.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_profiler.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_spdlog_logger.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_viz.so.3.5.0",
            "test -f $PREFIX/lib/libgxf_app.so",
            "test -f $PREFIX/lib/libgxf_core.so",
            "test -f $PREFIX/lib/libgxf_cuda.so",
            "test -f $PREFIX/lib/libgxf_logger.so",
            "test -f $PREFIX/lib/libgxf_multimedia.so",
            "test -f $PREFIX/lib/libgxf_rmm.so",
            "test -f $PREFIX/lib/libgxf_sample.so",
            "test -f $PREFIX/lib/libgxf_serialization.so",
            "test -f $PREFIX/lib/libgxf_std.so",
            "test -f $PREFIX/lib/libgxf_ucx.so",
            "test -f $PREFIX/lib/gxf_extensions/libgxf_holoscan_wrapper.so",
            "test -f $PREFIX/lib/gxf_extensions/libgxf_holoscan_wrapper_lib.so",
            "test -f $PREFIX/lib/gxf_extensions/libgxf_ucx_holoscan.so",
            "test -f $PREFIX/lib/gxf_extensions/libgxf_ucx_holoscan_lib.so"
          ]
        }
      },
      {
        "about": {
          "description": "NVIDIA Holoscan python bindings\n",
          "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
          "license_file": [
            "LICENSE",
            "NOTICE"
          ],
          "license_url": "https://developer.download.nvidia.com/assets/Clara/NVIDIA_Clara_EULA.pdf",
          "summary": "NVIDIA Holoscan python bindings"
        },
        "files": [
          "lib/python3.12/site-packages/holoscan"
        ],
        "name": "holoscan",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "c_stdlib_stub",
            "arm-variant * sbsa"
          ],
          "host": [
            "libholoscan",
            "cuda-version 12.6",
            "python =3.12"
          ],
          "run": [
            "cupy",
            "arm-variant * sbsa",
            "libholoscan",
            "cuda-cudart"
          ]
        },
        "test": {
          "commands": [
            "test -d $PREFIX/lib/python3.12/site-packages/holoscan",
            "pip check"
          ],
          "imports": [
            "holoscan"
          ],
          "requires": [
            "pip"
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "libholoscan"
          ]
        },
        "files": [
          "bin/convert_gxf_entities_to_images.py",
          "bin/convert_gxf_entities_to_video.py",
          "bin/convert_video_to_gxf_entities.py",
          "bin/ctest_time_comparison.py",
          "bin/download_ngc_data",
          "bin/generate_extension_uuids.py",
          "bin/generate_gxf_manifest.py",
          "bin/graph_surgeon.py",
          "bin/gxe",
          "bin/gxf_entity_codec.py",
          "bin/get_cmake_cuda_archs.py",
          "bin/holoscan",
          "bin/video_validation.py",
          "examples/",
          "include/3rdparty",
          "include/fmt",
          "include/gxf",
          "include/gxf_holoscan_wrapper",
          "include/holoinfer",
          "include/holoscan",
          "include/holoviz",
          "include/magic_enum.hpp",
          "include/rmm",
          "lib/libholoscan*.so",
          "lib/cmake/holoscan",
          "lib/libholo*.a"
        ],
        "name": "libholoscan-dev",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "c_stdlib_stub",
            "arm-variant * sbsa"
          ],
          "host": [
            "libholoscan",
            "cuda-version 12.6",
            "python =3.12"
          ],
          "run": [
            "libholoscan",
            "arm-variant * sbsa",
            "cuda-nvcc",
            "cuda-cudart",
            "cuda-cudart-dev",
            "cuda-nvrtc-dev",
            "libnpp-dev",
            "yaml-cpp"
          ]
        },
        "test": {
          "commands": [
            "test -f $PREFIX/bin/convert_gxf_entities_to_images.py",
            "test -f $PREFIX/bin/convert_gxf_entities_to_video.py",
            "test -f $PREFIX/bin/convert_video_to_gxf_entities.py",
            "test -f $PREFIX/bin/ctest_time_comparison.py",
            "test -f $PREFIX/bin/download_ngc_data",
            "test -f $PREFIX/bin/generate_extension_uuids.py",
            "test -f $PREFIX/bin/generate_gxf_manifest.py",
            "test -f $PREFIX/bin/graph_surgeon.py",
            "test -f $PREFIX/bin/gxe",
            "test -f $PREFIX/bin/gxf_entity_codec.py",
            "test -f $PREFIX/bin/get_cmake_cuda_archs.py",
            "test -f $PREFIX/bin/holoscan",
            "test -f $PREFIX/bin/video_validation.py",
            "test -d $PREFIX/lib/cmake/holoscan",
            "test -d $PREFIX/examples",
            "test -d $PREFIX/include/3rdparty",
            "test -d $PREFIX/include/fmt",
            "test -d $PREFIX/include/gxf",
            "test -d $PREFIX/include/gxf_holoscan_wrapper",
            "test -d $PREFIX/include/holoinfer",
            "test -d $PREFIX/include/holoscan",
            "test -d $PREFIX/include/holoviz",
            "test -f $PREFIX/include/magic_enum.hpp",
            "test -d $PREFIX/include/rmm",
            "test -L $PREFIX/lib/libholoscan_core.so",
            "test -L $PREFIX/lib/libholoscan_infer.so",
            "test -L $PREFIX/lib/libholoscan_infer_onnx_runtime.so",
            "test -L $PREFIX/lib/libholoscan_infer_torch.so",
            "test -L $PREFIX/lib/libholoscan_infer_utils.so",
            "test -L $PREFIX/lib/libholoscan_logger.so",
            "test -L $PREFIX/lib/libholoscan_op_async_ping_rx.so",
            "test -L $PREFIX/lib/libholoscan_op_async_ping_tx.so",
            "test -L $PREFIX/lib/libholoscan_op_bayer_demosaic.so",
            "test -L $PREFIX/lib/libholoscan_op_format_converter.so",
            "test -L $PREFIX/lib/libholoscan_op_gxf_codelet.so",
            "test -L $PREFIX/lib/libholoscan_op_holoviz.so",
            "test -L $PREFIX/lib/libholoscan_op_inference.so",
            "test -L $PREFIX/lib/libholoscan_op_inference_processor.so",
            "test -L $PREFIX/lib/libholoscan_op_ping_rx.so",
            "test -L $PREFIX/lib/libholoscan_op_ping_tensor_rx.so",
            "test -L $PREFIX/lib/libholoscan_op_ping_tensor_tx.so",
            "test -L $PREFIX/lib/libholoscan_op_ping_tx.so",
            "test -L $PREFIX/lib/libholoscan_op_segmentation_postprocessor.so",
            "test -L $PREFIX/lib/libholoscan_op_v4l2.so",
            "test -L $PREFIX/lib/libholoscan_op_video_stream_recorder.so",
            "test -L $PREFIX/lib/libholoscan_op_video_stream_replayer.so",
            "test -L $PREFIX/lib/libholoscan_profiler.so",
            "test -L $PREFIX/lib/libholoscan_spdlog_logger.so",
            "test -L $PREFIX/lib/libholoscan_viz.so",
            "test -f $PREFIX/lib/libholoviz_imgui.a",
            "bash compile_examples.sh"
          ],
          "files": [
            "compile_examples.sh"
          ],
          "requires": [
            "cmake",
            "make",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "c_stdlib_stub",
            "cuda-version 12.6",
            "cuda",
            "patch"
          ],
          "source_files": [
            "lib/libyaml-cpp.a"
          ]
        }
      }
    ],
    "package": {
      "name": "holoscan-split",
      "version": "3.5.0.1"
    },
    "requirements": {
      "build": [
        "cf-nvidia-tools 1",
        "python =3.12"
      ],
      "host": [
        "python =3.12"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "2e070a1cf497167f166ec312ab04e6529a27b0c8c7350cd047836ff52b072208",
      "url": "https://developer.download.nvidia.com/compute/holoscan/redist/holoscan/linux-sbsa/holoscan-linux-sbsa-3.5.0.1-archive.tar.xz"
    }
  },
  "linux_aarch64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "arm-variant",
        "c_compiler_stub",
        "c_stdlib_stub",
        "cf-nvidia-tools",
        "cuda_compiler_stub",
        "cxx_compiler_stub",
        "python"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "cuda-nvrtc-dev",
        "cuda-version",
        "libholoscan",
        "libjpeg-turbo",
        "libnpp-dev",
        "libtorch",
        "libvulkan-loader",
        "onnxruntime-cpp",
        "openssl",
        "python",
        "ucx"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "arm-variant",
        "cloudpickle",
        "cuda-cudart",
        "cuda-cudart-dev",
        "cuda-nvcc",
        "cuda-nvrtc-dev",
        "cuda-version",
        "cupy",
        "dbus",
        "libegl",
        "libholoscan",
        "libjpeg-turbo",
        "libnpp-dev",
        "libtorch",
        "libvulkan-loader",
        "yaml-cpp"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cuda",
        "cuda-version",
        "cxx_compiler_stub",
        "make",
        "patch",
        "pip"
      ]
    }
  },
  "meta_yaml": {
    "about": {
      "description": "NVIDIA Holoscan is the AI sensor processing platform that combines hardware systems for low-latency sensor and network connectivity, optimized libraries for data processing and AI, and core microservices to run streaming, imaging, and other applications, from embedded to edge to cloud.\nIt can be used to build streaming AI pipelines for a variety of domains, including Medical Devices, High Performance Computing at the Edge, Industrial Inspection and more.\n",
      "doc_url": "https://docs.nvidia.com/cuda/holoscan/",
      "home": "https://docs.nvidia.com/cuda/holoscan/",
      "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
      "license_file": [
        "LICENSE",
        "NOTICE"
      ],
      "license_url": "https://developer.download.nvidia.com/assets/Clara/NVIDIA_Clara_EULA.pdf",
      "summary": "NVIDIA Holoscan is the AI sensor processing platform that combines hardware systems for low-latency sensor and network connectivity, optimized libraries for data processing and AI, and core microservices to run streaming, imaging, and other applications, from embedded to edge to cloud."
    },
    "build": {
      "number": "0"
    },
    "extra": {
      "feedstock-name": "holoscan",
      "recipe-maintainers": [
        "conda-forge/cuda"
      ]
    },
    "outputs": [
      {
        "about": {
          "description": "This is a runtime package only. Developers should install holoscan (python) and/or libholoscan-dev (C++ SDK) to build with Holoscan\n",
          "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
          "license_file": [
            "LICENSE",
            "NOTICE"
          ],
          "license_url": "https://developer.download.nvidia.com/assets/Clara/NVIDIA_Clara_EULA.pdf",
          "summary": "NVIDIA Holoscan runtime library"
        },
        "build": {
          "ignore_run_exports": [
            "cuda-version"
          ],
          "missing_dso_whitelist": [
            "*libcuda.so*",
            "*libgdrapi.so*",
            "*libnvidia-ml.so*",
            "*libnvinfer_plugin.so*",
            "*libnvonnxparser.so*",
            "*libtorchvision.so*",
            "*libv4l2.so*",
            "*libxpmem.so*"
          ],
          "post-link": "post-link"
        },
        "files": [
          "lib/libholoscan*.so.*",
          "lib/gxf_extensions",
          "lib/libgxf*.so",
          "lib/libucxx.so"
        ],
        "name": "libholoscan",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cuda_compiler_stub",
            "c_stdlib_stub"
          ],
          "host": [
            "cuda-version 12.6",
            "cuda-nvrtc-dev",
            "libjpeg-turbo",
            "libnpp-dev",
            "libtorch 2.5.*",
            "libtorch * cuda*",
            "libvulkan-loader",
            "openssl",
            "ucx 1.17.0.*",
            "onnxruntime-cpp  1.18.1.*"
          ],
          "run": [
            "cuda-version",
            "cloudpickle",
            "cuda-cudart",
            "libegl",
            "libjpeg-turbo",
            "libtorch * cuda*",
            "libvulkan-loader"
          ]
        },
        "test": {
          "commands": [
            "test -L $PREFIX/lib/libholoscan_core.so.3",
            "test -L $PREFIX/lib/libholoscan_infer.so.3",
            "test -L $PREFIX/lib/libholoscan_infer_onnx_runtime.so.3",
            "test -L $PREFIX/lib/libholoscan_infer_torch.so.3",
            "test -L $PREFIX/lib/libholoscan_infer_utils.so.3",
            "test -L $PREFIX/lib/libholoscan_logger.so.3",
            "test -L $PREFIX/lib/libholoscan_op_async_ping_rx.so.3",
            "test -L $PREFIX/lib/libholoscan_op_async_ping_tx.so.3",
            "test -L $PREFIX/lib/libholoscan_op_bayer_demosaic.so.3",
            "test -L $PREFIX/lib/libholoscan_op_format_converter.so.3",
            "test -L $PREFIX/lib/libholoscan_op_gxf_codelet.so.3",
            "test -L $PREFIX/lib/libholoscan_op_holoviz.so.3",
            "test -L $PREFIX/lib/libholoscan_op_inference.so.3",
            "test -L $PREFIX/lib/libholoscan_op_inference_processor.so.3",
            "test -L $PREFIX/lib/libholoscan_op_ping_rx.so.3",
            "test -L $PREFIX/lib/libholoscan_op_ping_tensor_rx.so.3",
            "test -L $PREFIX/lib/libholoscan_op_ping_tensor_tx.so.3",
            "test -L $PREFIX/lib/libholoscan_op_ping_tx.so.3",
            "test -L $PREFIX/lib/libholoscan_op_segmentation_postprocessor.so.3",
            "test -L $PREFIX/lib/libholoscan_op_v4l2.so.3",
            "test -L $PREFIX/lib/libholoscan_op_video_stream_recorder.so.3",
            "test -L $PREFIX/lib/libholoscan_op_video_stream_replayer.so.3",
            "test -L $PREFIX/lib/libholoscan_profiler.so.3",
            "test -L $PREFIX/lib/libholoscan_spdlog_logger.so.3",
            "test -L $PREFIX/lib/libholoscan_viz.so.3",
            "test -f $PREFIX/lib/libholoscan_core.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_infer.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_infer_onnx_runtime.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_infer_torch.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_infer_utils.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_logger.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_op_async_ping_rx.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_op_async_ping_tx.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_op_bayer_demosaic.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_op_format_converter.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_op_gxf_codelet.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_op_holoviz.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_op_inference.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_op_inference_processor.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_op_ping_rx.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_op_ping_tensor_rx.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_op_ping_tensor_tx.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_op_ping_tx.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_op_segmentation_postprocessor.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_op_v4l2.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_op_video_stream_recorder.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_op_video_stream_replayer.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_profiler.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_spdlog_logger.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_viz.so.3.5.0",
            "test -f $PREFIX/lib/libgxf_app.so",
            "test -f $PREFIX/lib/libgxf_core.so",
            "test -f $PREFIX/lib/libgxf_cuda.so",
            "test -f $PREFIX/lib/libgxf_logger.so",
            "test -f $PREFIX/lib/libgxf_multimedia.so",
            "test -f $PREFIX/lib/libgxf_rmm.so",
            "test -f $PREFIX/lib/libgxf_sample.so",
            "test -f $PREFIX/lib/libgxf_serialization.so",
            "test -f $PREFIX/lib/libgxf_std.so",
            "test -f $PREFIX/lib/libgxf_ucx.so",
            "test -f $PREFIX/lib/gxf_extensions/libgxf_holoscan_wrapper.so",
            "test -f $PREFIX/lib/gxf_extensions/libgxf_holoscan_wrapper_lib.so",
            "test -f $PREFIX/lib/gxf_extensions/libgxf_ucx_holoscan.so",
            "test -f $PREFIX/lib/gxf_extensions/libgxf_ucx_holoscan_lib.so"
          ]
        }
      },
      {
        "about": {
          "description": "NVIDIA Holoscan python bindings\n",
          "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
          "license_file": [
            "LICENSE",
            "NOTICE"
          ],
          "license_url": "https://developer.download.nvidia.com/assets/Clara/NVIDIA_Clara_EULA.pdf",
          "summary": "NVIDIA Holoscan python bindings"
        },
        "files": [
          "lib/python3.12/site-packages/holoscan"
        ],
        "name": "holoscan",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "c_stdlib_stub"
          ],
          "host": [
            "libholoscan",
            "cuda-version 12.6",
            "python =3.12"
          ],
          "run": [
            "cupy",
            "libholoscan",
            "cuda-cudart"
          ]
        },
        "test": {
          "commands": [
            "test -d $PREFIX/lib/python3.12/site-packages/holoscan",
            "pip check"
          ],
          "imports": [
            "holoscan"
          ],
          "requires": [
            "pip"
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "libholoscan"
          ]
        },
        "files": [
          "bin/convert_gxf_entities_to_images.py",
          "bin/convert_gxf_entities_to_video.py",
          "bin/convert_video_to_gxf_entities.py",
          "bin/ctest_time_comparison.py",
          "bin/download_ngc_data",
          "bin/generate_extension_uuids.py",
          "bin/generate_gxf_manifest.py",
          "bin/graph_surgeon.py",
          "bin/gxe",
          "bin/gxf_entity_codec.py",
          "bin/get_cmake_cuda_archs.py",
          "bin/holoscan",
          "bin/video_validation.py",
          "examples/",
          "include/3rdparty",
          "include/fmt",
          "include/gxf",
          "include/gxf_holoscan_wrapper",
          "include/holoinfer",
          "include/holoscan",
          "include/holoviz",
          "include/magic_enum.hpp",
          "include/rmm",
          "lib/libholoscan*.so",
          "lib/cmake/holoscan",
          "lib/libholo*.a"
        ],
        "name": "libholoscan-dev",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "c_stdlib_stub"
          ],
          "host": [
            "libholoscan",
            "cuda-version 12.6",
            "python =3.12"
          ],
          "run": [
            "libholoscan",
            "cuda-nvcc",
            "cuda-cudart",
            "cuda-cudart-dev",
            "cuda-nvrtc-dev",
            "libnpp-dev",
            "yaml-cpp"
          ]
        },
        "test": {
          "commands": [
            "test -f $PREFIX/bin/convert_gxf_entities_to_images.py",
            "test -f $PREFIX/bin/convert_gxf_entities_to_video.py",
            "test -f $PREFIX/bin/convert_video_to_gxf_entities.py",
            "test -f $PREFIX/bin/ctest_time_comparison.py",
            "test -f $PREFIX/bin/download_ngc_data",
            "test -f $PREFIX/bin/generate_extension_uuids.py",
            "test -f $PREFIX/bin/generate_gxf_manifest.py",
            "test -f $PREFIX/bin/graph_surgeon.py",
            "test -f $PREFIX/bin/gxe",
            "test -f $PREFIX/bin/gxf_entity_codec.py",
            "test -f $PREFIX/bin/get_cmake_cuda_archs.py",
            "test -f $PREFIX/bin/holoscan",
            "test -f $PREFIX/bin/video_validation.py",
            "test -d $PREFIX/lib/cmake/holoscan",
            "test -d $PREFIX/examples",
            "test -d $PREFIX/include/3rdparty",
            "test -d $PREFIX/include/fmt",
            "test -d $PREFIX/include/gxf",
            "test -d $PREFIX/include/gxf_holoscan_wrapper",
            "test -d $PREFIX/include/holoinfer",
            "test -d $PREFIX/include/holoscan",
            "test -d $PREFIX/include/holoviz",
            "test -f $PREFIX/include/magic_enum.hpp",
            "test -d $PREFIX/include/rmm",
            "test -L $PREFIX/lib/libholoscan_core.so",
            "test -L $PREFIX/lib/libholoscan_infer.so",
            "test -L $PREFIX/lib/libholoscan_infer_onnx_runtime.so",
            "test -L $PREFIX/lib/libholoscan_infer_torch.so",
            "test -L $PREFIX/lib/libholoscan_infer_utils.so",
            "test -L $PREFIX/lib/libholoscan_logger.so",
            "test -L $PREFIX/lib/libholoscan_op_async_ping_rx.so",
            "test -L $PREFIX/lib/libholoscan_op_async_ping_tx.so",
            "test -L $PREFIX/lib/libholoscan_op_bayer_demosaic.so",
            "test -L $PREFIX/lib/libholoscan_op_format_converter.so",
            "test -L $PREFIX/lib/libholoscan_op_gxf_codelet.so",
            "test -L $PREFIX/lib/libholoscan_op_holoviz.so",
            "test -L $PREFIX/lib/libholoscan_op_inference.so",
            "test -L $PREFIX/lib/libholoscan_op_inference_processor.so",
            "test -L $PREFIX/lib/libholoscan_op_ping_rx.so",
            "test -L $PREFIX/lib/libholoscan_op_ping_tensor_rx.so",
            "test -L $PREFIX/lib/libholoscan_op_ping_tensor_tx.so",
            "test -L $PREFIX/lib/libholoscan_op_ping_tx.so",
            "test -L $PREFIX/lib/libholoscan_op_segmentation_postprocessor.so",
            "test -L $PREFIX/lib/libholoscan_op_v4l2.so",
            "test -L $PREFIX/lib/libholoscan_op_video_stream_recorder.so",
            "test -L $PREFIX/lib/libholoscan_op_video_stream_replayer.so",
            "test -L $PREFIX/lib/libholoscan_profiler.so",
            "test -L $PREFIX/lib/libholoscan_spdlog_logger.so",
            "test -L $PREFIX/lib/libholoscan_viz.so",
            "test -f $PREFIX/lib/libholoviz_imgui.a",
            "bash compile_examples.sh"
          ],
          "files": [
            "compile_examples.sh"
          ],
          "requires": [
            "cmake",
            "make",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "c_stdlib_stub",
            "cuda-version 12.6",
            "cuda",
            "patch"
          ],
          "source_files": [
            "lib/libyaml-cpp.a"
          ]
        }
      },
      {
        "about": {
          "description": "This is a runtime package only. Developers should install holoscan (python) and/or libholoscan-dev (C++ SDK) to build with Holoscan\n",
          "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
          "license_file": [
            "LICENSE",
            "NOTICE"
          ],
          "license_url": "https://developer.download.nvidia.com/assets/Clara/NVIDIA_Clara_EULA.pdf",
          "summary": "NVIDIA Holoscan runtime library"
        },
        "build": {
          "ignore_run_exports": [
            "cuda-version"
          ],
          "missing_dso_whitelist": [
            "*libcuda.so*",
            "*libgdrapi.so*",
            "*libnvidia-ml.so*",
            "*libnvinfer_plugin.so*",
            "*libnvonnxparser.so*",
            "*libtorchvision.so*",
            "*libv4l2.so*",
            "*libxpmem.so*"
          ],
          "post-link": "post-link"
        },
        "files": [
          "lib/libholoscan*.so.*",
          "lib/gxf_extensions",
          "lib/libgxf*.so",
          "lib/libucxx.so"
        ],
        "name": "libholoscan",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "cuda_compiler_stub",
            "c_stdlib_stub",
            "arm-variant * sbsa"
          ],
          "host": [
            "cuda-version 12.6",
            "cuda-nvrtc-dev",
            "libjpeg-turbo",
            "libnpp-dev",
            "libtorch 2.5.*",
            "libtorch * cuda*",
            "libvulkan-loader",
            "openssl",
            "ucx 1.17.0.*",
            "onnxruntime-cpp  1.18.1.*"
          ],
          "run": [
            "arm-variant * sbsa",
            "cuda-version",
            "cloudpickle",
            "cuda-cudart",
            "dbus",
            "libegl",
            "libjpeg-turbo",
            "libtorch * cuda*",
            "libvulkan-loader"
          ]
        },
        "test": {
          "commands": [
            "test -L $PREFIX/lib/libholoscan_core.so.3",
            "test -L $PREFIX/lib/libholoscan_infer.so.3",
            "test -L $PREFIX/lib/libholoscan_infer_onnx_runtime.so.3",
            "test -L $PREFIX/lib/libholoscan_infer_torch.so.3",
            "test -L $PREFIX/lib/libholoscan_infer_utils.so.3",
            "test -L $PREFIX/lib/libholoscan_logger.so.3",
            "test -L $PREFIX/lib/libholoscan_op_async_ping_rx.so.3",
            "test -L $PREFIX/lib/libholoscan_op_async_ping_tx.so.3",
            "test -L $PREFIX/lib/libholoscan_op_bayer_demosaic.so.3",
            "test -L $PREFIX/lib/libholoscan_op_format_converter.so.3",
            "test -L $PREFIX/lib/libholoscan_op_gxf_codelet.so.3",
            "test -L $PREFIX/lib/libholoscan_op_holoviz.so.3",
            "test -L $PREFIX/lib/libholoscan_op_inference.so.3",
            "test -L $PREFIX/lib/libholoscan_op_inference_processor.so.3",
            "test -L $PREFIX/lib/libholoscan_op_ping_rx.so.3",
            "test -L $PREFIX/lib/libholoscan_op_ping_tensor_rx.so.3",
            "test -L $PREFIX/lib/libholoscan_op_ping_tensor_tx.so.3",
            "test -L $PREFIX/lib/libholoscan_op_ping_tx.so.3",
            "test -L $PREFIX/lib/libholoscan_op_segmentation_postprocessor.so.3",
            "test -L $PREFIX/lib/libholoscan_op_v4l2.so.3",
            "test -L $PREFIX/lib/libholoscan_op_video_stream_recorder.so.3",
            "test -L $PREFIX/lib/libholoscan_op_video_stream_replayer.so.3",
            "test -L $PREFIX/lib/libholoscan_profiler.so.3",
            "test -L $PREFIX/lib/libholoscan_spdlog_logger.so.3",
            "test -L $PREFIX/lib/libholoscan_viz.so.3",
            "test -f $PREFIX/lib/libholoscan_core.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_infer.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_infer_onnx_runtime.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_infer_torch.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_infer_utils.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_logger.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_op_async_ping_rx.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_op_async_ping_tx.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_op_bayer_demosaic.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_op_format_converter.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_op_gxf_codelet.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_op_holoviz.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_op_inference.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_op_inference_processor.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_op_ping_rx.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_op_ping_tensor_rx.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_op_ping_tensor_tx.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_op_ping_tx.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_op_segmentation_postprocessor.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_op_v4l2.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_op_video_stream_recorder.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_op_video_stream_replayer.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_profiler.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_spdlog_logger.so.3.5.0",
            "test -f $PREFIX/lib/libholoscan_viz.so.3.5.0",
            "test -f $PREFIX/lib/libgxf_app.so",
            "test -f $PREFIX/lib/libgxf_core.so",
            "test -f $PREFIX/lib/libgxf_cuda.so",
            "test -f $PREFIX/lib/libgxf_logger.so",
            "test -f $PREFIX/lib/libgxf_multimedia.so",
            "test -f $PREFIX/lib/libgxf_rmm.so",
            "test -f $PREFIX/lib/libgxf_sample.so",
            "test -f $PREFIX/lib/libgxf_serialization.so",
            "test -f $PREFIX/lib/libgxf_std.so",
            "test -f $PREFIX/lib/libgxf_ucx.so",
            "test -f $PREFIX/lib/gxf_extensions/libgxf_holoscan_wrapper.so",
            "test -f $PREFIX/lib/gxf_extensions/libgxf_holoscan_wrapper_lib.so",
            "test -f $PREFIX/lib/gxf_extensions/libgxf_ucx_holoscan.so",
            "test -f $PREFIX/lib/gxf_extensions/libgxf_ucx_holoscan_lib.so"
          ]
        }
      },
      {
        "about": {
          "description": "NVIDIA Holoscan python bindings\n",
          "license": "LicenseRef-NVIDIA-End-User-License-Agreement",
          "license_file": [
            "LICENSE",
            "NOTICE"
          ],
          "license_url": "https://developer.download.nvidia.com/assets/Clara/NVIDIA_Clara_EULA.pdf",
          "summary": "NVIDIA Holoscan python bindings"
        },
        "files": [
          "lib/python3.12/site-packages/holoscan"
        ],
        "name": "holoscan",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "c_stdlib_stub",
            "arm-variant * sbsa"
          ],
          "host": [
            "libholoscan",
            "cuda-version 12.6",
            "python =3.12"
          ],
          "run": [
            "cupy",
            "arm-variant * sbsa",
            "libholoscan",
            "cuda-cudart"
          ]
        },
        "test": {
          "commands": [
            "test -d $PREFIX/lib/python3.12/site-packages/holoscan",
            "pip check"
          ],
          "imports": [
            "holoscan"
          ],
          "requires": [
            "pip"
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "libholoscan"
          ]
        },
        "files": [
          "bin/convert_gxf_entities_to_images.py",
          "bin/convert_gxf_entities_to_video.py",
          "bin/convert_video_to_gxf_entities.py",
          "bin/ctest_time_comparison.py",
          "bin/download_ngc_data",
          "bin/generate_extension_uuids.py",
          "bin/generate_gxf_manifest.py",
          "bin/graph_surgeon.py",
          "bin/gxe",
          "bin/gxf_entity_codec.py",
          "bin/get_cmake_cuda_archs.py",
          "bin/holoscan",
          "bin/video_validation.py",
          "examples/",
          "include/3rdparty",
          "include/fmt",
          "include/gxf",
          "include/gxf_holoscan_wrapper",
          "include/holoinfer",
          "include/holoscan",
          "include/holoviz",
          "include/magic_enum.hpp",
          "include/rmm",
          "lib/libholoscan*.so",
          "lib/cmake/holoscan",
          "lib/libholo*.a"
        ],
        "name": "libholoscan-dev",
        "requirements": {
          "build": [
            "c_compiler_stub",
            "cxx_compiler_stub",
            "c_stdlib_stub",
            "arm-variant * sbsa"
          ],
          "host": [
            "libholoscan",
            "cuda-version 12.6",
            "python =3.12"
          ],
          "run": [
            "libholoscan",
            "arm-variant * sbsa",
            "cuda-nvcc",
            "cuda-cudart",
            "cuda-cudart-dev",
            "cuda-nvrtc-dev",
            "libnpp-dev",
            "yaml-cpp"
          ]
        },
        "test": {
          "commands": [
            "test -f $PREFIX/bin/convert_gxf_entities_to_images.py",
            "test -f $PREFIX/bin/convert_gxf_entities_to_video.py",
            "test -f $PREFIX/bin/convert_video_to_gxf_entities.py",
            "test -f $PREFIX/bin/ctest_time_comparison.py",
            "test -f $PREFIX/bin/download_ngc_data",
            "test -f $PREFIX/bin/generate_extension_uuids.py",
            "test -f $PREFIX/bin/generate_gxf_manifest.py",
            "test -f $PREFIX/bin/graph_surgeon.py",
            "test -f $PREFIX/bin/gxe",
            "test -f $PREFIX/bin/gxf_entity_codec.py",
            "test -f $PREFIX/bin/get_cmake_cuda_archs.py",
            "test -f $PREFIX/bin/holoscan",
            "test -f $PREFIX/bin/video_validation.py",
            "test -d $PREFIX/lib/cmake/holoscan",
            "test -d $PREFIX/examples",
            "test -d $PREFIX/include/3rdparty",
            "test -d $PREFIX/include/fmt",
            "test -d $PREFIX/include/gxf",
            "test -d $PREFIX/include/gxf_holoscan_wrapper",
            "test -d $PREFIX/include/holoinfer",
            "test -d $PREFIX/include/holoscan",
            "test -d $PREFIX/include/holoviz",
            "test -f $PREFIX/include/magic_enum.hpp",
            "test -d $PREFIX/include/rmm",
            "test -L $PREFIX/lib/libholoscan_core.so",
            "test -L $PREFIX/lib/libholoscan_infer.so",
            "test -L $PREFIX/lib/libholoscan_infer_onnx_runtime.so",
            "test -L $PREFIX/lib/libholoscan_infer_torch.so",
            "test -L $PREFIX/lib/libholoscan_infer_utils.so",
            "test -L $PREFIX/lib/libholoscan_logger.so",
            "test -L $PREFIX/lib/libholoscan_op_async_ping_rx.so",
            "test -L $PREFIX/lib/libholoscan_op_async_ping_tx.so",
            "test -L $PREFIX/lib/libholoscan_op_bayer_demosaic.so",
            "test -L $PREFIX/lib/libholoscan_op_format_converter.so",
            "test -L $PREFIX/lib/libholoscan_op_gxf_codelet.so",
            "test -L $PREFIX/lib/libholoscan_op_holoviz.so",
            "test -L $PREFIX/lib/libholoscan_op_inference.so",
            "test -L $PREFIX/lib/libholoscan_op_inference_processor.so",
            "test -L $PREFIX/lib/libholoscan_op_ping_rx.so",
            "test -L $PREFIX/lib/libholoscan_op_ping_tensor_rx.so",
            "test -L $PREFIX/lib/libholoscan_op_ping_tensor_tx.so",
            "test -L $PREFIX/lib/libholoscan_op_ping_tx.so",
            "test -L $PREFIX/lib/libholoscan_op_segmentation_postprocessor.so",
            "test -L $PREFIX/lib/libholoscan_op_v4l2.so",
            "test -L $PREFIX/lib/libholoscan_op_video_stream_recorder.so",
            "test -L $PREFIX/lib/libholoscan_op_video_stream_replayer.so",
            "test -L $PREFIX/lib/libholoscan_profiler.so",
            "test -L $PREFIX/lib/libholoscan_spdlog_logger.so",
            "test -L $PREFIX/lib/libholoscan_viz.so",
            "test -f $PREFIX/lib/libholoviz_imgui.a",
            "bash compile_examples.sh"
          ],
          "files": [
            "compile_examples.sh"
          ],
          "requires": [
            "cmake",
            "make",
            "c_compiler_stub",
            "cxx_compiler_stub",
            "c_stdlib_stub",
            "cuda-version 12.6",
            "cuda",
            "patch"
          ],
          "source_files": [
            "lib/libyaml-cpp.a"
          ]
        }
      }
    ],
    "package": {
      "name": "holoscan-split",
      "version": "3.5.0.1"
    },
    "requirements": {
      "build": [
        "cf-nvidia-tools 1",
        "python =3.12"
      ],
      "host": [
        "python =3.12"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "2e070a1cf497167f166ec312ab04e6529a27b0c8c7350cd047836ff52b072208",
      "url": "https://developer.download.nvidia.com/compute/holoscan/redist/holoscan/linux-sbsa/holoscan-linux-sbsa-3.5.0.1-archive.tar.xz"
    }
  },
  "name": "holoscan-split",
  "outputs_names": {
    "__set__": true,
    "elements": [
      "holoscan",
      "libholoscan",
      "libholoscan-dev"
    ]
  },
  "parsing_error": false,
  "platforms": [
    "linux_64",
    "linux_aarch64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/holoscan.json"
  },
  "raw_meta_yaml": "{% set version = \"3.5.0.1\" %}\n{% set abiversion = version.split('.')[0] %}\n{% set libversion = version.split('.')[:3] | join('.') %}\n{% set cuda_version = \"12.6\" %}      # min version holoscan works with\n{% set libtorch_version = \"2.5.*\" %}\n{% set onnx_version = \"1.18.1.*\" %}\n{% set python_version = \"3.12\" %}    # holoscan python libs compiled for python 3.12\n{% set ucx_version = \"1.17.0.*\" %}\n{% set yaml_cpp_version = \"0.7.0.*\" %}\n{% set platform = \"linux-x86_64\" %}  # [linux64]\n{% set platform = \"linux-sbsa\" %}    # [aarch64]\n{% set extension = \"tar.xz\" %}\n\n\n{% set sha256 = \"2d00266f814963f152107a02363121780238842d4068a97c37822891d7c42b98\" %}  # [linux64]\n{% set sha256 = \"2e070a1cf497167f166ec312ab04e6529a27b0c8c7350cd047836ff52b072208\" %}  # [aarch64 and arm_variant_type == \"sbsa\"]\n\npackage:\n  name: holoscan-split\n  version: {{ version }}\n\nsource:\n  url: https://developer.download.nvidia.com/compute/holoscan/redist/holoscan/{{ platform }}/holoscan-{{ platform }}-{{ version }}-archive.{{ extension }}\n  sha256: {{ sha256 }}\n\nbuild:\n  number: 0\n  skip: true  # [not (linux64 or aarch64)]\n  skip: true  # [cuda_compiler_version in (None, \"None\", \"\") or (cuda_compiler_version or \"\").startswith(\"11\")]\n\nrequirements:\n  build:\n    - cf-nvidia-tools 1  # [linux]\n    - python ={{ python_version }}\n  host:\n    - python ={{ python_version }}\n\noutputs:\n  - name: libholoscan\n    build:\n      missing_dso_whitelist:\n        - \"*libcuda.so*\"              # driver\n        - \"*libgdrapi.so*\"            # part of gdrcopy yet not pre-built for conda-forge channel\n        - \"*libnvidia-ml.so*\"         # driver\n        - \"*libnvinfer_plugin.so*\"    # NVIDIA's TensorRT not on conda-forge\n        - \"*libnvonnxparser.so*\"      # NVIDIA's TensorRT not on conda-forge\n        - \"*libtorchvision.so*\"       # not available even in torchvision package\n        - \"*libv4l2.so*\"              # lideo4linux2 lib, not available\n        - \"*libxpmem.so*\"             # XPMEM, Linux Cross-Memory Attach kernel module, not available\n      ignore_run_exports:\n        # we support cuda-version >= 12.6, < 13\n        - cuda-version\n      post-link: post-link\n    files:\n      - lib/libholoscan*.so.*\n      - lib/gxf_extensions\n      - lib/libgxf*.so\n      - lib/libucxx.so\n    requirements:\n      build:\n        - {{ compiler('c') }}\n        - {{ compiler('cxx') }}\n        - {{ compiler('cuda') }}\n        - {{ stdlib(\"c\") }}\n        - arm-variant * {{ arm_variant_type }}  # [aarch64]\n      host:\n        - cuda-version {{ cuda_version }}\n        - cuda-nvrtc-dev\n        - libjpeg-turbo\n        - libnpp-dev\n        - libtorch {{ libtorch_version }}\n        - libtorch * cuda*\n        - libvulkan-loader\n        - openssl\n        - ucx {{ ucx_version }}\n        - onnxruntime-cpp  {{ onnx_version }}\n      run:\n        - arm-variant * {{ arm_variant_type }}  # [aarch64]\n        - {{ pin_compatible(\"cuda-version\", max_pin=\"x\") }}  # [cuda_compiler_version != \"None\"]\n        - cloudpickle\n        - cuda-cudart\n        - dbus              # [aarch64]  # Without this, segfault happens during camera app test in https://github.com/nvidia-holoscan/holoscan-sdk/tree/main/python\n        - libegl\n        - libjpeg-turbo\n        - libtorch * cuda*\n        - libvulkan-loader\n    test:\n      commands:\n        - test -L $PREFIX/lib/libholoscan_core.so.{{ abiversion }}\n        - test -L $PREFIX/lib/libholoscan_infer.so.{{ abiversion }}\n        - test -L $PREFIX/lib/libholoscan_infer_onnx_runtime.so.{{ abiversion }}\n        - test -L $PREFIX/lib/libholoscan_infer_torch.so.{{ abiversion }}\n        - test -L $PREFIX/lib/libholoscan_infer_utils.so.{{ abiversion }}\n        - test -L $PREFIX/lib/libholoscan_logger.so.{{ abiversion }}\n        - test -L $PREFIX/lib/libholoscan_op_async_ping_rx.so.{{ abiversion }}\n        - test -L $PREFIX/lib/libholoscan_op_async_ping_tx.so.{{ abiversion }}\n        - test -L $PREFIX/lib/libholoscan_op_bayer_demosaic.so.{{ abiversion }}\n        - test -L $PREFIX/lib/libholoscan_op_format_converter.so.{{ abiversion }}\n        - test -L $PREFIX/lib/libholoscan_op_gxf_codelet.so.{{ abiversion }}\n        - test -L $PREFIX/lib/libholoscan_op_holoviz.so.{{ abiversion }}\n        - test -L $PREFIX/lib/libholoscan_op_inference.so.{{ abiversion }}\n        - test -L $PREFIX/lib/libholoscan_op_inference_processor.so.{{ abiversion }}\n        - test -L $PREFIX/lib/libholoscan_op_ping_rx.so.{{ abiversion }}\n        - test -L $PREFIX/lib/libholoscan_op_ping_tensor_rx.so.{{ abiversion }}\n        - test -L $PREFIX/lib/libholoscan_op_ping_tensor_tx.so.{{ abiversion }}\n        - test -L $PREFIX/lib/libholoscan_op_ping_tx.so.{{ abiversion }}\n        - test -L $PREFIX/lib/libholoscan_op_segmentation_postprocessor.so.{{ abiversion }}\n        - test -L $PREFIX/lib/libholoscan_op_v4l2.so.{{ abiversion }}\n        - test -L $PREFIX/lib/libholoscan_op_video_stream_recorder.so.{{ abiversion }}\n        - test -L $PREFIX/lib/libholoscan_op_video_stream_replayer.so.{{ abiversion }}\n        - test -L $PREFIX/lib/libholoscan_profiler.so.{{ abiversion }}\n        - test -L $PREFIX/lib/libholoscan_spdlog_logger.so.{{ abiversion }}\n        - test -L $PREFIX/lib/libholoscan_viz.so.{{ abiversion }}\n        - test -f $PREFIX/lib/libholoscan_core.so.{{ libversion }}\n        - test -f $PREFIX/lib/libholoscan_infer.so.{{ libversion }}\n        - test -f $PREFIX/lib/libholoscan_infer_onnx_runtime.so.{{ libversion }}\n        - test -f $PREFIX/lib/libholoscan_infer_torch.so.{{ libversion }}\n        - test -f $PREFIX/lib/libholoscan_infer_utils.so.{{ libversion }}\n        - test -f $PREFIX/lib/libholoscan_logger.so.{{ libversion }}\n        - test -f $PREFIX/lib/libholoscan_op_async_ping_rx.so.{{ libversion }}\n        - test -f $PREFIX/lib/libholoscan_op_async_ping_tx.so.{{ libversion }}\n        - test -f $PREFIX/lib/libholoscan_op_bayer_demosaic.so.{{ libversion }}\n        - test -f $PREFIX/lib/libholoscan_op_format_converter.so.{{ libversion }}\n        - test -f $PREFIX/lib/libholoscan_op_gxf_codelet.so.{{ libversion }}\n        - test -f $PREFIX/lib/libholoscan_op_holoviz.so.{{ libversion }}\n        - test -f $PREFIX/lib/libholoscan_op_inference.so.{{ libversion }}\n        - test -f $PREFIX/lib/libholoscan_op_inference_processor.so.{{ libversion }}\n        - test -f $PREFIX/lib/libholoscan_op_ping_rx.so.{{ libversion }}\n        - test -f $PREFIX/lib/libholoscan_op_ping_tensor_rx.so.{{ libversion }}\n        - test -f $PREFIX/lib/libholoscan_op_ping_tensor_tx.so.{{ libversion }}\n        - test -f $PREFIX/lib/libholoscan_op_ping_tx.so.{{ libversion }}\n        - test -f $PREFIX/lib/libholoscan_op_segmentation_postprocessor.so.{{ libversion }}\n        - test -f $PREFIX/lib/libholoscan_op_v4l2.so.{{ libversion }}\n        - test -f $PREFIX/lib/libholoscan_op_video_stream_recorder.so.{{ libversion }}\n        - test -f $PREFIX/lib/libholoscan_op_video_stream_replayer.so.{{ libversion }}\n        - test -f $PREFIX/lib/libholoscan_profiler.so.{{ libversion }}\n        - test -f $PREFIX/lib/libholoscan_spdlog_logger.so.{{ libversion }}\n        - test -f $PREFIX/lib/libholoscan_viz.so.{{ libversion }}\n        - test -f $PREFIX/lib/libgxf_app.so\n        - test -f $PREFIX/lib/libgxf_core.so\n        - test -f $PREFIX/lib/libgxf_cuda.so\n        - test -f $PREFIX/lib/libgxf_logger.so\n        - test -f $PREFIX/lib/libgxf_multimedia.so\n        - test -f $PREFIX/lib/libgxf_rmm.so\n        - test -f $PREFIX/lib/libgxf_sample.so\n        - test -f $PREFIX/lib/libgxf_serialization.so\n        - test -f $PREFIX/lib/libgxf_std.so\n        - test -f $PREFIX/lib/libgxf_ucx.so\n        - test -f $PREFIX/lib/gxf_extensions/libgxf_holoscan_wrapper.so\n        - test -f $PREFIX/lib/gxf_extensions/libgxf_holoscan_wrapper_lib.so\n        - test -f $PREFIX/lib/gxf_extensions/libgxf_ucx_holoscan.so\n        - test -f $PREFIX/lib/gxf_extensions/libgxf_ucx_holoscan_lib.so\n    about:\n      license: LicenseRef-NVIDIA-End-User-License-Agreement\n      license_file:\n        - LICENSE\n        - NOTICE\n      license_url: https://developer.download.nvidia.com/assets/Clara/NVIDIA_Clara_EULA.pdf\n      summary: NVIDIA Holoscan runtime library\n      description: |\n        This is a runtime package only. Developers should install holoscan (python) and/or libholoscan-dev (C++ SDK) to build with Holoscan\n\n  - name: holoscan\n    files:\n      #- lib/python{{ python_version }}/site-packages/gxf  # Dropped GXP support in holoscan 3.3.0 with GXF 5.5.0. It may be added back in the future.\n      - lib/python{{ python_version }}/site-packages/holoscan\n    requirements:\n      build:\n        - {{ compiler('c') }}\n        - {{ compiler('cxx') }}\n        - {{ stdlib(\"c\") }}\n        - arm-variant * {{ arm_variant_type }}  # [aarch64]\n      host:\n        - {{ pin_subpackage(\"libholoscan\", exact=True) }}\n        - cuda-version {{ cuda_version }}\n        - python ={{ python_version }}\n      run:\n        - cupy\n        - arm-variant * {{ arm_variant_type }}  # [aarch64]\n        - {{ pin_subpackage(\"libholoscan\", exact=True) }}\n        - cuda-cudart\n    test:\n      imports:\n        - holoscan\n        #- gxf  # Dropped GXP support in holoscan 3.3.0 with GXF 5.5.0. It may be added back in the future\n      requires:\n        - pip\n      commands:\n        #- test -d $PREFIX/lib/python{{ python_version }}/site-packages/gxf  # Dropped GXP support in holoscan 3.3.0 with GXF 5.5.0. It may be added back in the future.\n        - test -d $PREFIX/lib/python{{ python_version }}/site-packages/holoscan\n        - pip check\n    about:\n      license: LicenseRef-NVIDIA-End-User-License-Agreement\n      license_file:\n        - LICENSE\n        - NOTICE\n      license_url: https://developer.download.nvidia.com/assets/Clara/NVIDIA_Clara_EULA.pdf\n      summary: NVIDIA Holoscan python bindings\n      description: |\n        NVIDIA Holoscan python bindings\n\n  - name: libholoscan-dev\n    build:\n      run_exports:\n        - {{ pin_subpackage(\"libholoscan\", max_pin=\"x\") }}\n    files:\n      - bin/convert_gxf_entities_to_images.py\n      - bin/convert_gxf_entities_to_video.py\n      - bin/convert_video_to_gxf_entities.py\n      - bin/ctest_time_comparison.py\n      - bin/download_ngc_data\n      - bin/generate_extension_uuids.py\n      - bin/generate_gxf_manifest.py\n      - bin/graph_surgeon.py\n      - bin/gxe\n      - bin/gxf_entity_codec.py\n      - bin/get_cmake_cuda_archs.py\n      - bin/holoscan\n      - bin/video_validation.py\n      - examples/\n      - include/3rdparty\n      - include/fmt\n      - include/gxf\n      - include/gxf_holoscan_wrapper\n      - include/holoinfer\n      - include/holoscan\n      - include/holoviz\n      - include/magic_enum.hpp\n      - include/rmm\n      - lib/libholoscan*.so\n      - lib/cmake/holoscan\n      - lib/libholo*.a\n    requirements:\n      build:\n        - {{ compiler('c') }}\n        - {{ compiler('cxx') }}\n        - {{ stdlib(\"c\") }}\n        - arm-variant * {{ arm_variant_type }}  # [aarch64]\n      host:\n        - {{ pin_subpackage(\"libholoscan\", exact=True) }}\n        - cuda-version {{ cuda_version }}\n        - python ={{ python_version }}\n      run:\n        - {{ pin_subpackage(\"libholoscan\", exact=True) }}\n        - arm-variant * {{ arm_variant_type }}  # [aarch64]\n        - cuda-nvcc         # holoscan wants to explicitly install this as it is needed for holoscan public interface\n        - cuda-cudart\n        - cuda-cudart-dev   # holoscan wants to explicitly install this as it is needed for holoscan public interface\n        - cuda-nvrtc-dev    # holoscan wants to explicitly install this as it is needed for holoscan public interface\n        - libnpp-dev        # holoscan wants to explicitly install this as it is needed for holoscan public interface\n        - yaml-cpp          # holoscan wants to explicitly install this as it is needed for holoscan public interface\n    test:\n      requires:\n        - cmake\n        - make\n        - {{ compiler('c') }}\n        - {{ compiler('cxx') }}\n        - {{ stdlib(\"c\") }}\n        - cuda-version {{ cuda_version }}\n        - cuda   # need entire CTK to compile all examples\n        - patch  # needed by one of the examples\n      files:\n        - compile_examples.sh\n      source_files:\n        - lib/libyaml-cpp.a\n      commands:\n        - test -f $PREFIX/bin/convert_gxf_entities_to_images.py\n        - test -f $PREFIX/bin/convert_gxf_entities_to_video.py\n        - test -f $PREFIX/bin/convert_video_to_gxf_entities.py\n        - test -f $PREFIX/bin/ctest_time_comparison.py\n        - test -f $PREFIX/bin/download_ngc_data\n        - test -f $PREFIX/bin/generate_extension_uuids.py\n        - test -f $PREFIX/bin/generate_gxf_manifest.py\n        - test -f $PREFIX/bin/graph_surgeon.py\n        - test -f $PREFIX/bin/gxe\n        - test -f $PREFIX/bin/gxf_entity_codec.py\n        - test -f $PREFIX/bin/get_cmake_cuda_archs.py\n        - test -f $PREFIX/bin/holoscan\n        - test -f $PREFIX/bin/video_validation.py\n        - test -d $PREFIX/lib/cmake/holoscan\n        - test -d $PREFIX/examples\n        - test -d $PREFIX/include/3rdparty\n        - test -d $PREFIX/include/fmt\n        - test -d $PREFIX/include/gxf\n        - test -d $PREFIX/include/gxf_holoscan_wrapper\n        - test -d $PREFIX/include/holoinfer\n        - test -d $PREFIX/include/holoscan\n        - test -d $PREFIX/include/holoviz\n        - test -f $PREFIX/include/magic_enum.hpp\n        - test -d $PREFIX/include/rmm\n        - test -L $PREFIX/lib/libholoscan_core.so\n        - test -L $PREFIX/lib/libholoscan_infer.so\n        - test -L $PREFIX/lib/libholoscan_infer_onnx_runtime.so\n        - test -L $PREFIX/lib/libholoscan_infer_torch.so\n        - test -L $PREFIX/lib/libholoscan_infer_utils.so\n        - test -L $PREFIX/lib/libholoscan_logger.so\n        - test -L $PREFIX/lib/libholoscan_op_async_ping_rx.so\n        - test -L $PREFIX/lib/libholoscan_op_async_ping_tx.so\n        - test -L $PREFIX/lib/libholoscan_op_bayer_demosaic.so\n        - test -L $PREFIX/lib/libholoscan_op_format_converter.so\n        - test -L $PREFIX/lib/libholoscan_op_gxf_codelet.so\n        - test -L $PREFIX/lib/libholoscan_op_holoviz.so\n        - test -L $PREFIX/lib/libholoscan_op_inference.so\n        - test -L $PREFIX/lib/libholoscan_op_inference_processor.so\n        - test -L $PREFIX/lib/libholoscan_op_ping_rx.so\n        - test -L $PREFIX/lib/libholoscan_op_ping_tensor_rx.so\n        - test -L $PREFIX/lib/libholoscan_op_ping_tensor_tx.so\n        - test -L $PREFIX/lib/libholoscan_op_ping_tx.so\n        - test -L $PREFIX/lib/libholoscan_op_segmentation_postprocessor.so\n        - test -L $PREFIX/lib/libholoscan_op_v4l2.so\n        - test -L $PREFIX/lib/libholoscan_op_video_stream_recorder.so\n        - test -L $PREFIX/lib/libholoscan_op_video_stream_replayer.so\n        - test -L $PREFIX/lib/libholoscan_profiler.so\n        - test -L $PREFIX/lib/libholoscan_spdlog_logger.so\n        - test -L $PREFIX/lib/libholoscan_viz.so\n        - test -f $PREFIX/lib/libholoviz_imgui.a\n        - bash compile_examples.sh\n\nabout:\n  home: https://docs.nvidia.com/cuda/holoscan/\n  license: LicenseRef-NVIDIA-End-User-License-Agreement\n  license_file:\n    - LICENSE\n    - NOTICE\n  license_url: https://developer.download.nvidia.com/assets/Clara/NVIDIA_Clara_EULA.pdf\n  summary: NVIDIA Holoscan is the AI sensor processing platform that combines hardware systems for low-latency sensor and network connectivity, optimized libraries for data processing and AI, and core microservices to run streaming, imaging, and other applications, from embedded to edge to cloud.\n  description: |\n    NVIDIA Holoscan is the AI sensor processing platform that combines hardware systems for low-latency sensor and network connectivity, optimized libraries for data processing and AI, and core microservices to run streaming, imaging, and other applications, from embedded to edge to cloud.\n    It can be used to build streaming AI pipelines for a variety of domains, including Medical Devices, High Performance Computing at the Edge, Industrial Inspection and more.\n  doc_url: https://docs.nvidia.com/cuda/holoscan/\n\nextra:\n  recipe-maintainers:\n    - conda-forge/cuda\n  feedstock-name: holoscan\n",
  "req": {
    "__set__": true,
    "elements": [
      "arm-variant",
      "c_compiler_stub",
      "c_stdlib_stub",
      "cf-nvidia-tools",
      "cloudpickle",
      "cuda-cudart",
      "cuda-cudart-dev",
      "cuda-nvcc",
      "cuda-nvrtc-dev",
      "cuda-version",
      "cuda_compiler_stub",
      "cupy",
      "cxx_compiler_stub",
      "dbus",
      "libegl",
      "libholoscan",
      "libjpeg-turbo",
      "libnpp-dev",
      "libtorch",
      "libvulkan-loader",
      "onnxruntime-cpp",
      "openssl",
      "python",
      "ucx",
      "yaml-cpp"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "arm-variant",
        "c_compiler_stub",
        "c_stdlib_stub",
        "cf-nvidia-tools",
        "cuda_compiler_stub",
        "cxx_compiler_stub",
        "python"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "arm-variant",
        "c_compiler_stub",
        "c_stdlib_stub",
        "cuda-nvrtc-dev",
        "cuda-version",
        "cuda_compiler_stub",
        "cxx_compiler_stub",
        "libholoscan",
        "libjpeg-turbo",
        "libnpp-dev",
        "libtorch",
        "libvulkan-loader",
        "onnxruntime-cpp",
        "openssl",
        "python",
        "ucx"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "arm-variant",
        "c_compiler_stub",
        "c_stdlib_stub",
        "cloudpickle",
        "cuda-cudart",
        "cuda-cudart-dev",
        "cuda-nvcc",
        "cuda-nvrtc-dev",
        "cuda-version",
        "cuda_compiler_stub",
        "cupy",
        "cxx_compiler_stub",
        "dbus",
        "libegl",
        "libholoscan",
        "libjpeg-turbo",
        "libnpp-dev",
        "libtorch",
        "libvulkan-loader",
        "yaml-cpp"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cuda",
        "cuda-version",
        "cxx_compiler_stub",
        "make",
        "patch",
        "pip"
      ]
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "arm-variant * sbsa",
        "c_compiler_stub",
        "c_stdlib_stub",
        "cf-nvidia-tools 1",
        "cuda_compiler_stub",
        "cxx_compiler_stub",
        "python =3.12"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "cuda-nvrtc-dev",
        "cuda-version 12.6",
        "libholoscan",
        "libjpeg-turbo",
        "libnpp-dev",
        "libtorch * cuda*",
        "libtorch 2.5.*",
        "libvulkan-loader",
        "onnxruntime-cpp  1.18.1.*",
        "openssl",
        "python =3.12",
        "ucx 1.17.0.*"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "arm-variant * sbsa",
        "cloudpickle",
        "cuda-cudart",
        "cuda-cudart-dev",
        "cuda-nvcc",
        "cuda-nvrtc-dev",
        "cuda-version",
        "cupy",
        "dbus",
        "libegl",
        "libholoscan",
        "libjpeg-turbo",
        "libnpp-dev",
        "libtorch * cuda*",
        "libvulkan-loader",
        "yaml-cpp"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cuda",
        "cuda-version 12.6",
        "cxx_compiler_stub",
        "make",
        "patch",
        "pip"
      ]
    }
  },
  "url": "https://developer.download.nvidia.com/compute/holoscan/redist/holoscan/linux-sbsa/holoscan-linux-sbsa-3.5.0.1-archive.tar.xz",
  "version": "3.5.0.1",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/holoscan.json"
  }
}