{
  "archived": false,
  "branch": "main",
  "conda-forge.yml": {
    "bot": {
      "automerge": true
    },
    "build_platform": {
      "linux_aarch64": "linux_64",
      "linux_ppc64le": "linux_64",
      "osx_arm64": "osx_64"
    },
    "conda_build": {
      "error_overlinking": true
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    },
    "provider": {
      "linux_aarch64": "default"
    },
    "test": "native_and_emulated"
  },
  "feedstock_name": "adaptivecpp",
  "hash_type": "sha256",
  "linux_64_meta_yaml": {
    "about": {
      "description": "AdaptiveCpp is the independent, community-driven modern platform for\nC++-based heterogeneous programming models targeting CPUs and GPUs from all\nmajor vendors. AdaptiveCpp lets applications adapt themselves to all the\nhardware found in the system. This includes use cases where a single binary\nneeds to be able to target all supported hardware, or utilize hardware from\ndifferent vendors simultaneously.\n",
      "dev_url": "https://github.com/AdaptiveCpp/AdaptiveCpp",
      "home": "https://adaptivecpp.github.io/",
      "license": "BSD-2-Clause",
      "license_file": "LICENSE",
      "summary": "The independent, community-driven platform for heterogeneous programming in C++"
    },
    "build": {
      "ignore_run_exports": [
        "libboost",
        "llvm",
        "llvm-openmp"
      ],
      "missing_dso_whitelist": [
        "*/libcuda.so.1"
      ],
      "number": "0",
      "run_exports": [
        "adaptivecpp"
      ],
      "string": "cuda126_llvm19_h1234567_0"
    },
    "extra": {
      "recipe-maintainers": [
        "jeongseok-meta"
      ]
    },
    "package": {
      "name": "adaptivecpp",
      "version": "25.02.0"
    },
    "requirements": {
      "build": [
        "cxx_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "doxygen",
        "make",
        "ninja",
        "pkgconfig",
        "cuda_compiler_stub"
      ],
      "host": [
        "clangdev",
        "hipcc",
        "libboost-devel",
        "llvmdev 16",
        "llvm-openmp 16",
        "llvm-spirv",
        "libopencl-devel",
        "spirv-tools",
        "llvmdev 17",
        "llvm-openmp 17",
        "llvmdev 18",
        "llvm-openmp 18",
        "llvmdev 19",
        "llvm-openmp 19",
        "cuda-compat",
        "cuda-cudart-dev",
        "cuda-driver-dev",
        "cuda-version 12.6"
      ],
      "run": [
        "hip-runtime-amd",
        "libllvm16",
        "libnuma",
        "llvm 16",
        "libllvm17",
        "llvm 17",
        "libllvm18",
        "llvm 18",
        "libllvm19",
        "llvm 19"
      ]
    },
    "schema_version": 0,
    "source": [
      {
        "patches": [
          "patches/0001-Install-tool-binaries-to-the-same-folder-of-lib.patch",
          "patches/0002-Fall-back-missing-functions.patch"
        ],
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Install-tool-binaries-to-the-same-folder-of-lib.patch",
          "patches/0002-Fall-back-missing-functions.patch"
        ],
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Install-tool-binaries-to-the-same-folder-of-lib.patch",
          "patches/0002-Fall-back-missing-functions.patch"
        ],
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Install-tool-binaries-to-the-same-folder-of-lib.patch",
          "patches/0002-Fall-back-missing-functions.patch"
        ],
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Install-tool-binaries-to-the-same-folder-of-lib.patch",
          "patches/0002-Fall-back-missing-functions.patch"
        ],
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Install-tool-binaries-to-the-same-folder-of-lib.patch",
          "patches/0002-Fall-back-missing-functions.patch"
        ],
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Install-tool-binaries-to-the-same-folder-of-lib.patch",
          "patches/0002-Fall-back-missing-functions.patch"
        ],
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Install-tool-binaries-to-the-same-folder-of-lib.patch",
          "patches/0002-Fall-back-missing-functions.patch"
        ],
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      }
    ],
    "test": {
      "commands": [
        "test -f $PREFIX/include/AdaptiveCpp/sycl/sycl.hpp",
        "test -f $PREFIX/lib/cmake/AdaptiveCpp/adaptivecpp-config.cmake",
        "test -f $PREFIX/lib/libacpp-common${SHLIB_EXT}",
        "test -f $PREFIX/lib/hipSYCL/librt-backend-omp${SHLIB_EXT}",
        "test -f $PREFIX/lib/hipSYCL/librt-backend-ocl${SHLIB_EXT}",
        "test -f $PREFIX/lib/hipSYCL/librt-backend-hip${SHLIB_EXT}",
        "acpp-info",
        "test -f $PREFIX/lib/hipSYCL/librt-backend-cuda${SHLIB_EXT}"
      ],
      "files": [
        "tests/"
      ],
      "requires": [
        "c_compiler_stub",
        "cxx_compiler_stub",
        "clangdev",
        "cmake",
        "ninja"
      ]
    }
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_stdlib_stub",
        "cmake",
        "cuda_compiler_stub",
        "cxx_compiler_stub",
        "doxygen",
        "make",
        "ninja",
        "pkgconfig"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "clangdev",
        "cuda-compat",
        "cuda-cudart-dev",
        "cuda-driver-dev",
        "cuda-version",
        "hipcc",
        "libboost-devel",
        "libopencl-devel",
        "llvm-openmp",
        "llvm-spirv",
        "llvmdev",
        "spirv-tools"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "hip-runtime-amd",
        "libllvm16",
        "libllvm17",
        "libllvm18",
        "libllvm19",
        "libnuma",
        "llvm"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "clangdev",
        "cmake",
        "cxx_compiler_stub",
        "ninja"
      ]
    }
  },
  "linux_aarch64_meta_yaml": {
    "about": {
      "description": "AdaptiveCpp is the independent, community-driven modern platform for\nC++-based heterogeneous programming models targeting CPUs and GPUs from all\nmajor vendors. AdaptiveCpp lets applications adapt themselves to all the\nhardware found in the system. This includes use cases where a single binary\nneeds to be able to target all supported hardware, or utilize hardware from\ndifferent vendors simultaneously.\n",
      "dev_url": "https://github.com/AdaptiveCpp/AdaptiveCpp",
      "home": "https://adaptivecpp.github.io/",
      "license": "BSD-2-Clause",
      "license_file": "LICENSE",
      "summary": "The independent, community-driven platform for heterogeneous programming in C++"
    },
    "build": {
      "ignore_run_exports": [
        "libboost",
        "llvm",
        "llvm-openmp"
      ],
      "missing_dso_whitelist": [
        "*/libcuda.so.1"
      ],
      "number": "0",
      "run_exports": [
        "adaptivecpp"
      ],
      "string": "cuda126_llvm19_h1234567_0"
    },
    "extra": {
      "recipe-maintainers": [
        "jeongseok-meta"
      ]
    },
    "package": {
      "name": "adaptivecpp",
      "version": "25.02.0"
    },
    "requirements": {
      "build": [
        "cxx_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "doxygen",
        "make",
        "ninja",
        "pkgconfig",
        "cuda_compiler_stub"
      ],
      "host": [
        "clangdev",
        "libboost-devel",
        "llvmdev 16",
        "llvm-openmp 16",
        "llvm-spirv",
        "libopencl-devel",
        "spirv-tools",
        "llvmdev 17",
        "llvm-openmp 17",
        "llvmdev 18",
        "llvm-openmp 18",
        "llvmdev 19",
        "llvm-openmp 19",
        "cuda-compat",
        "cuda-cudart-dev",
        "cuda-driver-dev",
        "cuda-version 12.6"
      ],
      "run": [
        "libllvm16",
        "libnuma",
        "llvm 16",
        "libllvm17",
        "llvm 17",
        "libllvm18",
        "llvm 18",
        "libllvm19",
        "llvm 19"
      ]
    },
    "schema_version": 0,
    "source": [
      {
        "patches": [
          "patches/0001-Install-tool-binaries-to-the-same-folder-of-lib.patch",
          "patches/0002-Fall-back-missing-functions.patch"
        ],
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Install-tool-binaries-to-the-same-folder-of-lib.patch",
          "patches/0002-Fall-back-missing-functions.patch"
        ],
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Install-tool-binaries-to-the-same-folder-of-lib.patch",
          "patches/0002-Fall-back-missing-functions.patch"
        ],
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Install-tool-binaries-to-the-same-folder-of-lib.patch",
          "patches/0002-Fall-back-missing-functions.patch"
        ],
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Install-tool-binaries-to-the-same-folder-of-lib.patch",
          "patches/0002-Fall-back-missing-functions.patch"
        ],
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Install-tool-binaries-to-the-same-folder-of-lib.patch",
          "patches/0002-Fall-back-missing-functions.patch"
        ],
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Install-tool-binaries-to-the-same-folder-of-lib.patch",
          "patches/0002-Fall-back-missing-functions.patch"
        ],
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Install-tool-binaries-to-the-same-folder-of-lib.patch",
          "patches/0002-Fall-back-missing-functions.patch"
        ],
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      }
    ],
    "test": {
      "commands": [
        "test -f $PREFIX/include/AdaptiveCpp/sycl/sycl.hpp",
        "test -f $PREFIX/lib/cmake/AdaptiveCpp/adaptivecpp-config.cmake",
        "test -f $PREFIX/lib/libacpp-common${SHLIB_EXT}",
        "test -f $PREFIX/lib/hipSYCL/librt-backend-omp${SHLIB_EXT}",
        "test -f $PREFIX/lib/hipSYCL/librt-backend-ocl${SHLIB_EXT}",
        "acpp-info",
        "test -f $PREFIX/lib/hipSYCL/librt-backend-cuda${SHLIB_EXT}"
      ],
      "files": [
        "tests/"
      ],
      "requires": [
        "c_compiler_stub",
        "cxx_compiler_stub",
        "clangdev",
        "cmake",
        "ninja"
      ]
    }
  },
  "linux_aarch64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_stdlib_stub",
        "cmake",
        "cuda_compiler_stub",
        "cxx_compiler_stub",
        "doxygen",
        "make",
        "ninja",
        "pkgconfig"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "clangdev",
        "cuda-compat",
        "cuda-cudart-dev",
        "cuda-driver-dev",
        "cuda-version",
        "libboost-devel",
        "libopencl-devel",
        "llvm-openmp",
        "llvm-spirv",
        "llvmdev",
        "spirv-tools"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "libllvm16",
        "libllvm17",
        "libllvm18",
        "libllvm19",
        "libnuma",
        "llvm"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "clangdev",
        "cmake",
        "cxx_compiler_stub",
        "ninja"
      ]
    }
  },
  "linux_ppc64le_meta_yaml": {
    "about": {
      "description": "AdaptiveCpp is the independent, community-driven modern platform for\nC++-based heterogeneous programming models targeting CPUs and GPUs from all\nmajor vendors. AdaptiveCpp lets applications adapt themselves to all the\nhardware found in the system. This includes use cases where a single binary\nneeds to be able to target all supported hardware, or utilize hardware from\ndifferent vendors simultaneously.\n",
      "dev_url": "https://github.com/AdaptiveCpp/AdaptiveCpp",
      "home": "https://adaptivecpp.github.io/",
      "license": "BSD-2-Clause",
      "license_file": "LICENSE",
      "summary": "The independent, community-driven platform for heterogeneous programming in C++"
    },
    "build": {
      "ignore_run_exports": [
        "libboost",
        "llvm",
        "llvm-openmp"
      ],
      "missing_dso_whitelist": [
        "*/libcuda.so.1"
      ],
      "number": "0",
      "run_exports": [
        "adaptivecpp"
      ],
      "string": "cpu_llvm19_h1234567_0"
    },
    "extra": {
      "recipe-maintainers": [
        "jeongseok-meta"
      ]
    },
    "package": {
      "name": "adaptivecpp",
      "version": "25.02.0"
    },
    "requirements": {
      "build": [
        "cxx_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "doxygen",
        "make",
        "ninja",
        "pkgconfig",
        "cuda_compiler_stub"
      ],
      "host": [
        "clangdev",
        "libboost-devel",
        "llvmdev 16",
        "llvm-openmp 16",
        "llvm-spirv",
        "libopencl-devel",
        "spirv-tools",
        "cuda-compat",
        "cuda-cudart-dev",
        "cuda-driver-dev",
        "cuda-version 12.4",
        "llvmdev 17",
        "llvm-openmp 17",
        "llvmdev 18",
        "llvm-openmp 18",
        "llvmdev 19",
        "llvm-openmp 19"
      ],
      "run": [
        "libllvm16",
        "libnuma",
        "llvm 16",
        "libllvm17",
        "llvm 17",
        "libllvm18",
        "llvm 18",
        "libllvm19",
        "llvm 19"
      ]
    },
    "schema_version": 0,
    "source": [
      {
        "patches": [
          "patches/0001-Install-tool-binaries-to-the-same-folder-of-lib.patch",
          "patches/0002-Fall-back-missing-functions.patch"
        ],
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Install-tool-binaries-to-the-same-folder-of-lib.patch",
          "patches/0002-Fall-back-missing-functions.patch"
        ],
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Install-tool-binaries-to-the-same-folder-of-lib.patch",
          "patches/0002-Fall-back-missing-functions.patch"
        ],
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Install-tool-binaries-to-the-same-folder-of-lib.patch",
          "patches/0002-Fall-back-missing-functions.patch"
        ],
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Install-tool-binaries-to-the-same-folder-of-lib.patch",
          "patches/0002-Fall-back-missing-functions.patch"
        ],
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Install-tool-binaries-to-the-same-folder-of-lib.patch",
          "patches/0002-Fall-back-missing-functions.patch"
        ],
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Install-tool-binaries-to-the-same-folder-of-lib.patch",
          "patches/0002-Fall-back-missing-functions.patch"
        ],
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Install-tool-binaries-to-the-same-folder-of-lib.patch",
          "patches/0002-Fall-back-missing-functions.patch"
        ],
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      }
    ],
    "test": {
      "commands": [
        "test -f $PREFIX/include/AdaptiveCpp/sycl/sycl.hpp",
        "test -f $PREFIX/lib/cmake/AdaptiveCpp/adaptivecpp-config.cmake",
        "test -f $PREFIX/lib/libacpp-common${SHLIB_EXT}",
        "test -f $PREFIX/lib/hipSYCL/librt-backend-omp${SHLIB_EXT}",
        "test -f $PREFIX/lib/hipSYCL/librt-backend-ocl${SHLIB_EXT}",
        "test -f $PREFIX/lib/hipSYCL/librt-backend-cuda${SHLIB_EXT}",
        "acpp-info"
      ],
      "files": [
        "tests/"
      ],
      "requires": [
        "c_compiler_stub",
        "cxx_compiler_stub",
        "clangdev",
        "cmake",
        "ninja"
      ]
    }
  },
  "linux_ppc64le_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_stdlib_stub",
        "cmake",
        "cuda_compiler_stub",
        "cxx_compiler_stub",
        "doxygen",
        "make",
        "ninja",
        "pkgconfig"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "clangdev",
        "cuda-compat",
        "cuda-cudart-dev",
        "cuda-driver-dev",
        "cuda-version",
        "libboost-devel",
        "libopencl-devel",
        "llvm-openmp",
        "llvm-spirv",
        "llvmdev",
        "spirv-tools"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "libllvm16",
        "libllvm17",
        "libllvm18",
        "libllvm19",
        "libnuma",
        "llvm"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "clangdev",
        "cmake",
        "cxx_compiler_stub",
        "ninja"
      ]
    }
  },
  "meta_yaml": {
    "about": {
      "description": "AdaptiveCpp is the independent, community-driven modern platform for\nC++-based heterogeneous programming models targeting CPUs and GPUs from all\nmajor vendors. AdaptiveCpp lets applications adapt themselves to all the\nhardware found in the system. This includes use cases where a single binary\nneeds to be able to target all supported hardware, or utilize hardware from\ndifferent vendors simultaneously.\n",
      "dev_url": "https://github.com/AdaptiveCpp/AdaptiveCpp",
      "home": "https://adaptivecpp.github.io/",
      "license": "BSD-2-Clause",
      "license_file": "LICENSE",
      "summary": "The independent, community-driven platform for heterogeneous programming in C++"
    },
    "build": {
      "ignore_run_exports": [
        "libboost",
        "llvm",
        "llvm-openmp"
      ],
      "missing_dso_whitelist": [
        "*/nvcuda.dll"
      ],
      "number": "0",
      "run_exports": [
        "adaptivecpp"
      ],
      "string": "cuda126_llvm19_h1234567_0"
    },
    "extra": {
      "recipe-maintainers": [
        "jeongseok-meta"
      ]
    },
    "package": {
      "name": "adaptivecpp",
      "version": "25.02.0"
    },
    "requirements": {
      "build": [
        "cxx_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "doxygen",
        "make",
        "ninja",
        "pkgconfig",
        "cuda_compiler_stub"
      ],
      "host": [
        "clangdev",
        "hipcc",
        "libboost-devel",
        "llvmdev 16",
        "llvm-openmp 16",
        "llvm-spirv",
        "libopencl-devel",
        "spirv-tools",
        "llvmdev 17",
        "llvm-openmp 17",
        "llvmdev 18",
        "llvm-openmp 18",
        "llvmdev 19",
        "llvm-openmp 19",
        "cuda-compat",
        "cuda-cudart-dev",
        "cuda-driver-dev",
        "cuda-version 12.6",
        "cuda-version 12.4"
      ],
      "run": [
        "hip-runtime-amd",
        "libllvm16",
        "libnuma",
        "llvm 16",
        "libllvm17",
        "llvm 17",
        "libllvm18",
        "llvm 18",
        "libllvm19",
        "llvm 19",
        "clangdev",
        "llvm-openmp 16",
        "llvm-openmp 17",
        "llvm-openmp 18",
        "llvm-openmp 19"
      ]
    },
    "schema_version": 0,
    "source": [
      {
        "patches": [
          "patches/0001-Install-tool-binaries-to-the-same-folder-of-lib.patch",
          "patches/0002-Fall-back-missing-functions.patch"
        ],
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Install-tool-binaries-to-the-same-folder-of-lib.patch",
          "patches/0002-Fall-back-missing-functions.patch"
        ],
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Install-tool-binaries-to-the-same-folder-of-lib.patch",
          "patches/0002-Fall-back-missing-functions.patch"
        ],
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Install-tool-binaries-to-the-same-folder-of-lib.patch",
          "patches/0002-Fall-back-missing-functions.patch"
        ],
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Install-tool-binaries-to-the-same-folder-of-lib.patch",
          "patches/0002-Fall-back-missing-functions.patch"
        ],
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Install-tool-binaries-to-the-same-folder-of-lib.patch",
          "patches/0002-Fall-back-missing-functions.patch"
        ],
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Install-tool-binaries-to-the-same-folder-of-lib.patch",
          "patches/0002-Fall-back-missing-functions.patch"
        ],
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Install-tool-binaries-to-the-same-folder-of-lib.patch",
          "patches/0002-Fall-back-missing-functions.patch"
        ],
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Install-tool-binaries-to-the-same-folder-of-lib.patch",
          "patches/0002-Fall-back-missing-functions.patch"
        ],
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Install-tool-binaries-to-the-same-folder-of-lib.patch",
          "patches/0002-Fall-back-missing-functions.patch"
        ],
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Install-tool-binaries-to-the-same-folder-of-lib.patch",
          "patches/0002-Fall-back-missing-functions.patch"
        ],
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Install-tool-binaries-to-the-same-folder-of-lib.patch",
          "patches/0002-Fall-back-missing-functions.patch"
        ],
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Install-tool-binaries-to-the-same-folder-of-lib.patch",
          "patches/0002-Fall-back-missing-functions.patch"
        ],
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Install-tool-binaries-to-the-same-folder-of-lib.patch",
          "patches/0002-Fall-back-missing-functions.patch"
        ],
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Install-tool-binaries-to-the-same-folder-of-lib.patch",
          "patches/0002-Fall-back-missing-functions.patch"
        ],
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Install-tool-binaries-to-the-same-folder-of-lib.patch",
          "patches/0002-Fall-back-missing-functions.patch"
        ],
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Install-tool-binaries-to-the-same-folder-of-lib.patch",
          "patches/0002-Fall-back-missing-functions.patch"
        ],
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Install-tool-binaries-to-the-same-folder-of-lib.patch",
          "patches/0002-Fall-back-missing-functions.patch"
        ],
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Install-tool-binaries-to-the-same-folder-of-lib.patch",
          "patches/0002-Fall-back-missing-functions.patch"
        ],
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Install-tool-binaries-to-the-same-folder-of-lib.patch",
          "patches/0002-Fall-back-missing-functions.patch"
        ],
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Install-tool-binaries-to-the-same-folder-of-lib.patch",
          "patches/0002-Fall-back-missing-functions.patch"
        ],
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Install-tool-binaries-to-the-same-folder-of-lib.patch",
          "patches/0002-Fall-back-missing-functions.patch"
        ],
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Install-tool-binaries-to-the-same-folder-of-lib.patch",
          "patches/0002-Fall-back-missing-functions.patch"
        ],
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": [
          "patches/0001-Install-tool-binaries-to-the-same-folder-of-lib.patch",
          "patches/0002-Fall-back-missing-functions.patch"
        ],
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": null,
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": null,
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": null,
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": null,
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": null,
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": null,
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": null,
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": null,
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": null,
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": null,
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": null,
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": null,
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      }
    ],
    "test": {
      "commands": [
        "test -f $PREFIX/include/AdaptiveCpp/sycl/sycl.hpp",
        "test -f $PREFIX/lib/cmake/AdaptiveCpp/adaptivecpp-config.cmake",
        "test -f $PREFIX/lib/libacpp-common${SHLIB_EXT}",
        "test -f $PREFIX/lib/hipSYCL/librt-backend-omp${SHLIB_EXT}",
        "test -f $PREFIX/lib/hipSYCL/librt-backend-ocl${SHLIB_EXT}",
        "test -f $PREFIX/lib/hipSYCL/librt-backend-hip${SHLIB_EXT}",
        "acpp-info",
        "test -f $PREFIX/lib/hipSYCL/librt-backend-cuda${SHLIB_EXT}",
        "if not exist %PREFIX%\\\\Library\\\\include\\\\AdaptiveCpp\\\\SYCL\\\\sycl.hpp exit 1",
        "if not exist %PREFIX%\\\\Library\\\\lib\\\\cmake\\\\AdaptiveCpp\\\\adaptivecpp-config.cmake exit 1",
        "if not exist %PREFIX%\\\\Library\\\\lib\\\\acpp-common.lib exit 1",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\acpp-common.dll exit 1",
        "if not exist %PREFIX%\\\\Library\\\\lib\\\\hipSYCL\\\\rt-backend-omp.lib exit 1",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\hipSYCL\\\\rt-backend-omp.dll exit 1",
        "acpp-info.exe",
        "if not exist %PREFIX%\\\\Library\\\\lib\\\\hipSYCL\\\\rt-backend-cuda.lib exit 1",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\hipSYCL\\\\rt-backend-cuda.dll exit 1"
      ],
      "files": [
        "tests/"
      ],
      "requires": [
        "c_compiler_stub",
        "cxx_compiler_stub",
        "clangdev",
        "cmake",
        "ninja"
      ]
    }
  },
  "name": "adaptivecpp",
  "osx_arm64_meta_yaml": {
    "about": {
      "description": "AdaptiveCpp is the independent, community-driven modern platform for\nC++-based heterogeneous programming models targeting CPUs and GPUs from all\nmajor vendors. AdaptiveCpp lets applications adapt themselves to all the\nhardware found in the system. This includes use cases where a single binary\nneeds to be able to target all supported hardware, or utilize hardware from\ndifferent vendors simultaneously.\n",
      "dev_url": "https://github.com/AdaptiveCpp/AdaptiveCpp",
      "home": "https://adaptivecpp.github.io/",
      "license": "BSD-2-Clause",
      "license_file": "LICENSE",
      "summary": "The independent, community-driven platform for heterogeneous programming in C++"
    },
    "build": {
      "ignore_run_exports": [
        "libboost",
        "llvm",
        "llvm-openmp"
      ],
      "missing_dso_whitelist": null,
      "number": "0",
      "run_exports": [
        "adaptivecpp"
      ],
      "string": "cpu_llvm19_h1234567_0"
    },
    "extra": {
      "recipe-maintainers": [
        "jeongseok-meta"
      ]
    },
    "package": {
      "name": "adaptivecpp",
      "version": "25.02.0"
    },
    "requirements": {
      "build": [
        "cxx_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "doxygen",
        "ninja"
      ],
      "host": [
        "clangdev",
        "libboost-devel",
        "llvmdev 16",
        "llvm-openmp 16",
        "libopencl-devel",
        "llvmdev 17",
        "llvm-openmp 17",
        "llvmdev 18",
        "llvm-openmp 18",
        "llvmdev 19",
        "llvm-openmp 19"
      ],
      "run": [
        "clangdev",
        "libllvm16",
        "llvm 16",
        "llvm-openmp 16",
        "libllvm17",
        "llvm 17",
        "llvm-openmp 17",
        "libllvm18",
        "llvm 18",
        "llvm-openmp 18",
        "libllvm19",
        "llvm 19",
        "llvm-openmp 19"
      ]
    },
    "schema_version": 0,
    "source": [
      {
        "patches": null,
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": null,
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": null,
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": null,
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      }
    ],
    "test": {
      "commands": [
        "test -f $PREFIX/include/AdaptiveCpp/sycl/sycl.hpp",
        "test -f $PREFIX/lib/cmake/AdaptiveCpp/adaptivecpp-config.cmake",
        "test -f $PREFIX/lib/libacpp-common${SHLIB_EXT}",
        "test -f $PREFIX/lib/hipSYCL/librt-backend-omp${SHLIB_EXT}",
        "acpp-info"
      ],
      "files": [
        "tests/"
      ],
      "requires": [
        "c_compiler_stub",
        "cxx_compiler_stub",
        "clangdev",
        "cmake",
        "ninja"
      ]
    }
  },
  "osx_arm64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "doxygen",
        "ninja"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "clangdev",
        "libboost-devel",
        "libopencl-devel",
        "llvm-openmp",
        "llvmdev"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "clangdev",
        "libllvm16",
        "libllvm17",
        "libllvm18",
        "libllvm19",
        "llvm",
        "llvm-openmp"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "clangdev",
        "cmake",
        "cxx_compiler_stub",
        "ninja"
      ]
    }
  },
  "outputs_names": {
    "__set__": true,
    "elements": [
      "adaptivecpp"
    ]
  },
  "parsing_error": false,
  "platforms": [
    "linux_64",
    "linux_aarch64",
    "linux_ppc64le",
    "osx_arm64",
    "win_64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/adaptivecpp.json"
  },
  "raw_meta_yaml": "{% set name = \"AdaptiveCpp\" %}\n{% set version = \"25.02.0\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  - url: https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v{{ version }}.tar.gz\n    sha256: 8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca\n    patches:\n      - patches/0001-Install-tool-binaries-to-the-same-folder-of-lib.patch  # [linux]\n      - patches/0002-Fall-back-missing-functions.patch  # [linux]\n\nbuild:\n  number: 0\n  run_exports:\n    - {{ pin_subpackage('adaptivecpp', max_pin='x.x') }}\n  ignore_run_exports:\n    - libboost\n    - llvm\n    - llvm-openmp  # [not win]\n  missing_dso_whitelist:\n    # https://conda-forge.org/docs/maintainer/knowledge_base/#nvcudadll-cannot-be-found-on-windows\n    - \"*/nvcuda.dll\"    # [win]\n    - \"*/libcuda.so.1\"  # [linux]\n  skip: true  # [cuda_compiler_version == \"11.8\"]\n  skip: true  # [osx and x86_64]\n  string: cpu_llvm{{ llvm_version }}_h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version == \"None\"]\n  string: cuda{{ cuda_compiler_version | replace('.', '') }}_llvm{{ llvm_version }}_h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version != \"None\"]\n\nrequirements:\n  build:\n    - {{ compiler('cxx') }}\n    - {{ stdlib('c') }}\n    - cmake\n    - doxygen\n    - make       # [linux]\n    - ninja      # [not win]\n    - pkgconfig  # [linux]\n    {% if cuda_compiler_version != \"None\" %}\n    - {{ compiler('cuda') }}\n    - cuda-cudart-dev  # [build_platform != target_platform]\n    {% endif %}\n  host:\n    - clangdev\n    - hipcc        # [linux and x86_64]\n    - libboost-devel\n    - llvmdev {{ llvm_version }}\n    - llvm-openmp {{ llvm_version }}\n    - llvm-spirv   # [linux]\n    - libopencl-devel\n    - spirv-tools  # [linux]\n    {% if cuda_compiler_version != \"None\" %}\n    # cuda-compat is needed for libcuda.so.1\n    - cuda-compat      # [linux]\n    - cuda-cudart-dev\n    - cuda-driver-dev  # [linux]\n    - cuda-version {{ cuda_compiler_version }}\n    {% endif %}\n  run:\n    - clangdev  # [osx]\n    - hip-runtime-amd  # [linux and x86_64]\n    - libllvm{{ llvm_version }}\n    - libnuma  # [linux]\n    - llvm {{ llvm_version }}\n    - llvm-openmp {{ llvm_version }}  # [osx]\n\ntest:\n  commands:\n    - test -f $PREFIX/include/AdaptiveCpp/sycl/sycl.hpp  # [not win]\n    - test -f $PREFIX/lib/cmake/AdaptiveCpp/adaptivecpp-config.cmake  # [not win]\n    - test -f $PREFIX/lib/libacpp-common${SHLIB_EXT}  # [not win]\n    - test -f $PREFIX/lib/hipSYCL/librt-backend-omp${SHLIB_EXT}  # [not win]\n    - test -f $PREFIX/lib/hipSYCL/librt-backend-ocl${SHLIB_EXT}  # [linux]\n    - test -f $PREFIX/lib/hipSYCL/librt-backend-hip${SHLIB_EXT}  # [linux and x86_64]\n    {% if cuda_compiler_version != \"None\" %}\n    - test -f $PREFIX/lib/hipSYCL/librt-backend-cuda${SHLIB_EXT}  # [not win]\n    {% endif %}\n    - acpp-info  # [not win]\n    - if not exist %PREFIX%\\\\Library\\\\include\\\\AdaptiveCpp\\\\SYCL\\\\sycl.hpp exit 1  # [win]\n    - if not exist %PREFIX%\\\\Library\\\\lib\\\\cmake\\\\AdaptiveCpp\\\\adaptivecpp-config.cmake exit 1  # [win]\n    - if not exist %PREFIX%\\\\Library\\\\lib\\\\acpp-common.lib exit 1  # [win]\n    - if not exist %PREFIX%\\\\Library\\\\bin\\\\acpp-common.dll exit 1  # [win]\n    - if not exist %PREFIX%\\\\Library\\\\lib\\\\hipSYCL\\\\rt-backend-omp.lib exit 1  # [win]\n    - if not exist %PREFIX%\\\\Library\\\\bin\\\\hipSYCL\\\\rt-backend-omp.dll exit 1  # [win]\n    {% if cuda_compiler_version != \"None\" %}\n    - if not exist %PREFIX%\\\\Library\\\\lib\\\\hipSYCL\\\\rt-backend-cuda.lib exit 1  # [win]\n    - if not exist %PREFIX%\\\\Library\\\\bin\\\\hipSYCL\\\\rt-backend-cuda.dll exit 1  # [win]\n    {% endif %}\n    - \"acpp-info.exe\"  # [win]\n  requires:\n    - {{ compiler(\"c\") }}\n    - {{ compiler(\"cxx\") }}\n    - clangdev\n    - cmake\n    - ninja  # [unix]\n  files:\n    - tests/\n\nabout:\n  home: https://adaptivecpp.github.io/\n  summary: 'The independent, community-driven platform for heterogeneous programming in C++'\n  description: |\n    AdaptiveCpp is the independent, community-driven modern platform for\n    C++-based heterogeneous programming models targeting CPUs and GPUs from all\n    major vendors. AdaptiveCpp lets applications adapt themselves to all the\n    hardware found in the system. This includes use cases where a single binary\n    needs to be able to target all supported hardware, or utilize hardware from\n    different vendors simultaneously.\n  license: BSD-2-Clause\n  license_file: LICENSE\n  dev_url: https://github.com/AdaptiveCpp/AdaptiveCpp\n\nextra:\n  recipe-maintainers:\n    - jeongseok-meta\n",
  "req": {
    "__set__": true,
    "elements": [
      "c_stdlib_stub",
      "clangdev",
      "cmake",
      "cuda-compat",
      "cuda-cudart-dev",
      "cuda-driver-dev",
      "cuda-version",
      "cuda_compiler_stub",
      "cxx_compiler_stub",
      "doxygen",
      "hip-runtime-amd",
      "hipcc",
      "libboost-devel",
      "libllvm16",
      "libllvm17",
      "libllvm18",
      "libllvm19",
      "libnuma",
      "libopencl-devel",
      "llvm",
      "llvm-openmp",
      "llvm-spirv",
      "llvmdev",
      "make",
      "ninja",
      "pkgconfig",
      "spirv-tools"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_stdlib_stub",
        "cmake",
        "cuda_compiler_stub",
        "cxx_compiler_stub",
        "doxygen",
        "make",
        "ninja",
        "pkgconfig"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "clangdev",
        "cuda-compat",
        "cuda-cudart-dev",
        "cuda-driver-dev",
        "cuda-version",
        "cuda_compiler_stub",
        "cxx_compiler_stub",
        "hipcc",
        "libboost-devel",
        "libopencl-devel",
        "llvm-openmp",
        "llvm-spirv",
        "llvmdev",
        "openmp",
        "spirv-tools"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "clangdev",
        "cuda_compiler_stub",
        "cxx_compiler_stub",
        "hip-runtime-amd",
        "libllvm16",
        "libllvm17",
        "libllvm18",
        "libllvm19",
        "libnuma",
        "llvm",
        "llvm-openmp",
        "openmp"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "clangdev",
        "cmake",
        "cxx_compiler_stub",
        "ninja"
      ]
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_stdlib_stub",
        "cmake",
        "cuda_compiler_stub",
        "cxx_compiler_stub",
        "doxygen",
        "make",
        "ninja",
        "pkgconfig"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "clangdev",
        "cuda-compat",
        "cuda-cudart-dev",
        "cuda-driver-dev",
        "cuda-version 12.4",
        "cuda-version 12.6",
        "hipcc",
        "libboost-devel",
        "libopencl-devel",
        "llvm-openmp 16",
        "llvm-openmp 17",
        "llvm-openmp 18",
        "llvm-openmp 19",
        "llvm-spirv",
        "llvmdev 16",
        "llvmdev 17",
        "llvmdev 18",
        "llvmdev 19",
        "spirv-tools"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "clangdev",
        "hip-runtime-amd",
        "libllvm16",
        "libllvm17",
        "libllvm18",
        "libllvm19",
        "libnuma",
        "llvm 16",
        "llvm 17",
        "llvm 18",
        "llvm 19",
        "llvm-openmp 16",
        "llvm-openmp 17",
        "llvm-openmp 18",
        "llvm-openmp 19"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "clangdev",
        "cmake",
        "cxx_compiler_stub",
        "ninja"
      ]
    }
  },
  "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz",
  "version": "25.02.0",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/adaptivecpp.json"
  },
  "win_64_meta_yaml": {
    "about": {
      "description": "AdaptiveCpp is the independent, community-driven modern platform for\nC++-based heterogeneous programming models targeting CPUs and GPUs from all\nmajor vendors. AdaptiveCpp lets applications adapt themselves to all the\nhardware found in the system. This includes use cases where a single binary\nneeds to be able to target all supported hardware, or utilize hardware from\ndifferent vendors simultaneously.\n",
      "dev_url": "https://github.com/AdaptiveCpp/AdaptiveCpp",
      "home": "https://adaptivecpp.github.io/",
      "license": "BSD-2-Clause",
      "license_file": "LICENSE",
      "summary": "The independent, community-driven platform for heterogeneous programming in C++"
    },
    "build": {
      "ignore_run_exports": [
        "libboost",
        "llvm"
      ],
      "missing_dso_whitelist": [
        "*/nvcuda.dll"
      ],
      "number": "0",
      "run_exports": [
        "adaptivecpp"
      ],
      "string": "cuda126_llvm19_h1234567_0"
    },
    "extra": {
      "recipe-maintainers": [
        "jeongseok-meta"
      ]
    },
    "package": {
      "name": "adaptivecpp",
      "version": "25.02.0"
    },
    "requirements": {
      "build": [
        "cxx_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "doxygen",
        "cuda_compiler_stub"
      ],
      "host": [
        "clangdev",
        "libboost-devel",
        "llvmdev 16",
        "llvm-openmp 16",
        "libopencl-devel",
        "llvmdev 17",
        "llvm-openmp 17",
        "llvmdev 18",
        "llvm-openmp 18",
        "llvmdev 19",
        "llvm-openmp 19",
        "cuda-cudart-dev",
        "cuda-version 12.6"
      ],
      "run": [
        "libllvm16",
        "llvm 16",
        "libllvm17",
        "llvm 17",
        "libllvm18",
        "llvm 18",
        "libllvm19",
        "llvm 19"
      ]
    },
    "schema_version": 0,
    "source": [
      {
        "patches": null,
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": null,
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": null,
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": null,
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": null,
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": null,
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": null,
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      },
      {
        "patches": null,
        "sha256": "8cc8a3be7bb38f88d7fd51597e0ec924b124d4233f64da62a31b9945b55612ca",
        "url": "https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v25.02.0.tar.gz"
      }
    ],
    "test": {
      "commands": [
        "if not exist %PREFIX%\\\\Library\\\\include\\\\AdaptiveCpp\\\\SYCL\\\\sycl.hpp exit 1",
        "if not exist %PREFIX%\\\\Library\\\\lib\\\\cmake\\\\AdaptiveCpp\\\\adaptivecpp-config.cmake exit 1",
        "if not exist %PREFIX%\\\\Library\\\\lib\\\\acpp-common.lib exit 1",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\acpp-common.dll exit 1",
        "if not exist %PREFIX%\\\\Library\\\\lib\\\\hipSYCL\\\\rt-backend-omp.lib exit 1",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\hipSYCL\\\\rt-backend-omp.dll exit 1",
        "acpp-info.exe",
        "if not exist %PREFIX%\\\\Library\\\\lib\\\\hipSYCL\\\\rt-backend-cuda.lib exit 1",
        "if not exist %PREFIX%\\\\Library\\\\bin\\\\hipSYCL\\\\rt-backend-cuda.dll exit 1"
      ],
      "files": [
        "tests/"
      ],
      "requires": [
        "c_compiler_stub",
        "cxx_compiler_stub",
        "clangdev",
        "cmake"
      ]
    }
  },
  "win_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_stdlib_stub",
        "cmake",
        "cuda_compiler_stub",
        "cxx_compiler_stub",
        "doxygen"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "clangdev",
        "cuda-cudart-dev",
        "cuda-version",
        "libboost-devel",
        "libopencl-devel",
        "llvm-openmp",
        "llvmdev"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "libllvm16",
        "libllvm17",
        "libllvm18",
        "libllvm19",
        "llvm"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "clangdev",
        "cmake",
        "cxx_compiler_stub"
      ]
    }
  }
}