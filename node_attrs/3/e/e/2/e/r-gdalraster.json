{
  "archived": false,
  "branch": "main",
  "conda-forge.yml": {
    "build_platform": {
      "linux_aarch64": "linux_64",
      "linux_ppc64le": "linux_64",
      "osx_arm64": "osx_64"
    },
    "conda_build": {
      "error_overlinking": true
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    },
    "provider": {
      "linux_aarch64": "default",
      "linux_ppc64le": "default"
    },
    "test": "native_and_emulated"
  },
  "feedstock_name": "r-gdalraster",
  "hash_type": "sha256",
  "linux_64_meta_yaml": {
    "about": {
      "dev_url": "https://github.com/USDAForestService/gdalraster",
      "doc_url": "https://usdaforestservice.github.io/gdalraster/",
      "home": "https://github.com/USDAForestService/gdalraster",
      "license": "MIT",
      "license_family": "MIT",
      "license_file": [
        "/lib/R/share/licenses/MIT"
      ],
      "summary": "API bindings to the Geospatial Data Abstraction Library ('GDAL', <https://gdal.org>). Implements the 'GDAL' Raster and Vector Data Models. Bindings are implemented with 'Rcpp' modules. Exposed C++ classes and stand-alone functions wrap much of the 'GDAL' API and provide additional functionality. Calling signatures resemble the native C, C++ and Python APIs provided by the 'GDAL' project. Class 'GDALRaster' encapsulates a 'GDALDataset' and its raster band objects. Class 'GDALVector' encapsulates an 'OGRLayer' and the 'GDALDataset' that contains it. Initial bindings are provided to the unified 'gdal' command line interface added in 'GDAL' 3.11. C++ stand-alone functions provide bindings to most 'GDAL' \"traditional\" raster and vector utilities, including 'OGR' facilities for vector geoprocessing, several algorithms, as well as the Geometry API ('GEOS' via 'GDAL' headers), the Spatial Reference Systems API, and methods for coordinate transformation. Bindings to the Virtual Systems Interface ('VSI') API implement standard file system operations abstracted for URLs, cloud storage services, 'Zip'/'GZip'/'7z'/'RAR', in-memory files, as well as regular local file systems. This provides a single interface for operating on file system objects that works the same for any storage backend. A custom raster calculator evaluates a user-defined R expression on a layer or stack of layers, with pixel x/y available as variables in the expression. Raster 'combine()' identifies and counts unique pixel combinations across multiple input layers, with optional raster output of the pixel-level combination IDs. Basic plotting capability is provided for raster and vector display. 'gdalraster' leans toward minimalism and the use of simple, lightweight objects for holding raw data. Currently, only minimal S3 class interfaces have been implemented for selected R objects that contain spatial data. 'gdalraster' may be useful in applications that need scalable, low-level I/O, or prefer a direct 'GDAL' API."
    },
    "build": {
      "missing_dso_whitelist": null,
      "number": "0",
      "rpaths": [
        "lib/R/lib/",
        "lib/"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "conda-forge/r",
        "ctoney"
      ]
    },
    "package": {
      "name": "r-gdalraster",
      "version": "2.2.0"
    },
    "requirements": {
      "build": [
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "autoconf",
        "automake",
        "pkg-config",
        "make"
      ],
      "host": [
        "r-base",
        "r-rcpp >=1.0.7",
        "r-rcppint64",
        "r-bit64",
        "r-nanoarrow",
        "r-wk",
        "r-xml2",
        "libgdal-core"
      ],
      "run": [
        "r-base",
        "r-rcpp >=1.0.7",
        "r-rcppint64",
        "r-bit64",
        "r-nanoarrow",
        "r-wk",
        "r-xml2"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "814d9702954221a1f4ed7dc927fd33ea113e0327be8c996f1ef903eab228a771",
      "url": [
        "https://cran.r-project.org/src/contrib/gdalraster_2.2.0.tar.gz",
        "https://cran.r-project.org/src/contrib/Archive/gdalraster/gdalraster_2.2.0.tar.gz"
      ]
    },
    "test": {
      "commands": [
        "export NOT_CRAN=true",
        "$R -e \"library('gdalraster')\"",
        "$R -e \"testthat::test_file('tests/testthat.R', stop_on_failure=TRUE)\""
      ],
      "requires": [
        "r-testthat",
        "r-codetools",
        "r-gt",
        "libgdal-pg",
        "libgdal-postgisraster"
      ],
      "source_files": [
        "tests/"
      ]
    }
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "autoconf",
        "automake",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "make",
        "pkg-config"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "libgdal-core",
        "r-base",
        "r-bit64",
        "r-nanoarrow",
        "r-rcpp",
        "r-rcppint64",
        "r-wk",
        "r-xml2"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "r-base",
        "r-bit64",
        "r-nanoarrow",
        "r-rcpp",
        "r-rcppint64",
        "r-wk",
        "r-xml2"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "libgdal-pg",
        "libgdal-postgisraster",
        "r-codetools",
        "r-gt",
        "r-testthat"
      ]
    }
  },
  "linux_aarch64_meta_yaml": {
    "about": {
      "dev_url": "https://github.com/USDAForestService/gdalraster",
      "doc_url": "https://usdaforestservice.github.io/gdalraster/",
      "home": "https://github.com/USDAForestService/gdalraster",
      "license": "MIT",
      "license_family": "MIT",
      "license_file": [
        "/lib/R/share/licenses/MIT"
      ],
      "summary": "API bindings to the Geospatial Data Abstraction Library ('GDAL', <https://gdal.org>). Implements the 'GDAL' Raster and Vector Data Models. Bindings are implemented with 'Rcpp' modules. Exposed C++ classes and stand-alone functions wrap much of the 'GDAL' API and provide additional functionality. Calling signatures resemble the native C, C++ and Python APIs provided by the 'GDAL' project. Class 'GDALRaster' encapsulates a 'GDALDataset' and its raster band objects. Class 'GDALVector' encapsulates an 'OGRLayer' and the 'GDALDataset' that contains it. Initial bindings are provided to the unified 'gdal' command line interface added in 'GDAL' 3.11. C++ stand-alone functions provide bindings to most 'GDAL' \"traditional\" raster and vector utilities, including 'OGR' facilities for vector geoprocessing, several algorithms, as well as the Geometry API ('GEOS' via 'GDAL' headers), the Spatial Reference Systems API, and methods for coordinate transformation. Bindings to the Virtual Systems Interface ('VSI') API implement standard file system operations abstracted for URLs, cloud storage services, 'Zip'/'GZip'/'7z'/'RAR', in-memory files, as well as regular local file systems. This provides a single interface for operating on file system objects that works the same for any storage backend. A custom raster calculator evaluates a user-defined R expression on a layer or stack of layers, with pixel x/y available as variables in the expression. Raster 'combine()' identifies and counts unique pixel combinations across multiple input layers, with optional raster output of the pixel-level combination IDs. Basic plotting capability is provided for raster and vector display. 'gdalraster' leans toward minimalism and the use of simple, lightweight objects for holding raw data. Currently, only minimal S3 class interfaces have been implemented for selected R objects that contain spatial data. 'gdalraster' may be useful in applications that need scalable, low-level I/O, or prefer a direct 'GDAL' API."
    },
    "build": {
      "missing_dso_whitelist": null,
      "number": "0",
      "rpaths": [
        "lib/R/lib/",
        "lib/"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "conda-forge/r",
        "ctoney"
      ]
    },
    "package": {
      "name": "r-gdalraster",
      "version": "2.2.0"
    },
    "requirements": {
      "build": [
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "autoconf",
        "automake",
        "pkg-config",
        "make"
      ],
      "host": [
        "r-base",
        "r-rcpp >=1.0.7",
        "r-rcppint64",
        "r-bit64",
        "r-nanoarrow",
        "r-wk",
        "r-xml2",
        "libgdal-core"
      ],
      "run": [
        "r-base",
        "r-rcpp >=1.0.7",
        "r-rcppint64",
        "r-bit64",
        "r-nanoarrow",
        "r-wk",
        "r-xml2"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "814d9702954221a1f4ed7dc927fd33ea113e0327be8c996f1ef903eab228a771",
      "url": [
        "https://cran.r-project.org/src/contrib/gdalraster_2.2.0.tar.gz",
        "https://cran.r-project.org/src/contrib/Archive/gdalraster/gdalraster_2.2.0.tar.gz"
      ]
    },
    "test": {
      "commands": [
        "export NOT_CRAN=true",
        "$R -e \"library('gdalraster')\"",
        "$R -e \"testthat::test_file('tests/testthat.R', stop_on_failure=TRUE)\""
      ],
      "requires": [
        "r-testthat",
        "r-codetools",
        "r-gt",
        "libgdal-pg",
        "libgdal-postgisraster"
      ],
      "source_files": [
        "tests/"
      ]
    }
  },
  "linux_aarch64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "autoconf",
        "automake",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "make",
        "pkg-config"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "libgdal-core",
        "r-base",
        "r-bit64",
        "r-nanoarrow",
        "r-rcpp",
        "r-rcppint64",
        "r-wk",
        "r-xml2"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "r-base",
        "r-bit64",
        "r-nanoarrow",
        "r-rcpp",
        "r-rcppint64",
        "r-wk",
        "r-xml2"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "libgdal-pg",
        "libgdal-postgisraster",
        "r-codetools",
        "r-gt",
        "r-testthat"
      ]
    }
  },
  "linux_ppc64le_meta_yaml": {
    "about": {
      "dev_url": "https://github.com/USDAForestService/gdalraster",
      "doc_url": "https://usdaforestservice.github.io/gdalraster/",
      "home": "https://github.com/USDAForestService/gdalraster",
      "license": "MIT",
      "license_family": "MIT",
      "license_file": [
        "/lib/R/share/licenses/MIT"
      ],
      "summary": "API bindings to the Geospatial Data Abstraction Library ('GDAL', <https://gdal.org>). Implements the 'GDAL' Raster and Vector Data Models. Bindings are implemented with 'Rcpp' modules. Exposed C++ classes and stand-alone functions wrap much of the 'GDAL' API and provide additional functionality. Calling signatures resemble the native C, C++ and Python APIs provided by the 'GDAL' project. Class 'GDALRaster' encapsulates a 'GDALDataset' and its raster band objects. Class 'GDALVector' encapsulates an 'OGRLayer' and the 'GDALDataset' that contains it. Initial bindings are provided to the unified 'gdal' command line interface added in 'GDAL' 3.11. C++ stand-alone functions provide bindings to most 'GDAL' \"traditional\" raster and vector utilities, including 'OGR' facilities for vector geoprocessing, several algorithms, as well as the Geometry API ('GEOS' via 'GDAL' headers), the Spatial Reference Systems API, and methods for coordinate transformation. Bindings to the Virtual Systems Interface ('VSI') API implement standard file system operations abstracted for URLs, cloud storage services, 'Zip'/'GZip'/'7z'/'RAR', in-memory files, as well as regular local file systems. This provides a single interface for operating on file system objects that works the same for any storage backend. A custom raster calculator evaluates a user-defined R expression on a layer or stack of layers, with pixel x/y available as variables in the expression. Raster 'combine()' identifies and counts unique pixel combinations across multiple input layers, with optional raster output of the pixel-level combination IDs. Basic plotting capability is provided for raster and vector display. 'gdalraster' leans toward minimalism and the use of simple, lightweight objects for holding raw data. Currently, only minimal S3 class interfaces have been implemented for selected R objects that contain spatial data. 'gdalraster' may be useful in applications that need scalable, low-level I/O, or prefer a direct 'GDAL' API."
    },
    "build": {
      "missing_dso_whitelist": null,
      "number": "0",
      "rpaths": [
        "lib/R/lib/",
        "lib/"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "conda-forge/r",
        "ctoney"
      ]
    },
    "package": {
      "name": "r-gdalraster",
      "version": "2.2.0"
    },
    "requirements": {
      "build": [
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "autoconf",
        "automake",
        "pkg-config",
        "make"
      ],
      "host": [
        "r-base",
        "r-rcpp >=1.0.7",
        "r-rcppint64",
        "r-bit64",
        "r-nanoarrow",
        "r-wk",
        "r-xml2",
        "libgdal-core"
      ],
      "run": [
        "r-base",
        "r-rcpp >=1.0.7",
        "r-rcppint64",
        "r-bit64",
        "r-nanoarrow",
        "r-wk",
        "r-xml2"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "814d9702954221a1f4ed7dc927fd33ea113e0327be8c996f1ef903eab228a771",
      "url": [
        "https://cran.r-project.org/src/contrib/gdalraster_2.2.0.tar.gz",
        "https://cran.r-project.org/src/contrib/Archive/gdalraster/gdalraster_2.2.0.tar.gz"
      ]
    },
    "test": {
      "commands": [
        "export NOT_CRAN=true",
        "$R -e \"library('gdalraster')\"",
        "$R -e \"testthat::test_file('tests/testthat.R', stop_on_failure=TRUE)\""
      ],
      "requires": [
        "r-testthat",
        "r-codetools",
        "r-gt",
        "libgdal-pg",
        "libgdal-postgisraster"
      ],
      "source_files": [
        "tests/"
      ]
    }
  },
  "linux_ppc64le_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "autoconf",
        "automake",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "make",
        "pkg-config"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "libgdal-core",
        "r-base",
        "r-bit64",
        "r-nanoarrow",
        "r-rcpp",
        "r-rcppint64",
        "r-wk",
        "r-xml2"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "r-base",
        "r-bit64",
        "r-nanoarrow",
        "r-rcpp",
        "r-rcppint64",
        "r-wk",
        "r-xml2"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "libgdal-pg",
        "libgdal-postgisraster",
        "r-codetools",
        "r-gt",
        "r-testthat"
      ]
    }
  },
  "meta_yaml": {
    "about": {
      "dev_url": "https://github.com/USDAForestService/gdalraster",
      "doc_url": "https://usdaforestservice.github.io/gdalraster/",
      "home": "https://github.com/USDAForestService/gdalraster",
      "license": "MIT",
      "license_family": "MIT",
      "license_file": [
        "/lib/R/share/licenses/MIT"
      ],
      "summary": "API bindings to the Geospatial Data Abstraction Library ('GDAL', <https://gdal.org>). Implements the 'GDAL' Raster and Vector Data Models. Bindings are implemented with 'Rcpp' modules. Exposed C++ classes and stand-alone functions wrap much of the 'GDAL' API and provide additional functionality. Calling signatures resemble the native C, C++ and Python APIs provided by the 'GDAL' project. Class 'GDALRaster' encapsulates a 'GDALDataset' and its raster band objects. Class 'GDALVector' encapsulates an 'OGRLayer' and the 'GDALDataset' that contains it. Initial bindings are provided to the unified 'gdal' command line interface added in 'GDAL' 3.11. C++ stand-alone functions provide bindings to most 'GDAL' \"traditional\" raster and vector utilities, including 'OGR' facilities for vector geoprocessing, several algorithms, as well as the Geometry API ('GEOS' via 'GDAL' headers), the Spatial Reference Systems API, and methods for coordinate transformation. Bindings to the Virtual Systems Interface ('VSI') API implement standard file system operations abstracted for URLs, cloud storage services, 'Zip'/'GZip'/'7z'/'RAR', in-memory files, as well as regular local file systems. This provides a single interface for operating on file system objects that works the same for any storage backend. A custom raster calculator evaluates a user-defined R expression on a layer or stack of layers, with pixel x/y available as variables in the expression. Raster 'combine()' identifies and counts unique pixel combinations across multiple input layers, with optional raster output of the pixel-level combination IDs. Basic plotting capability is provided for raster and vector display. 'gdalraster' leans toward minimalism and the use of simple, lightweight objects for holding raw data. Currently, only minimal S3 class interfaces have been implemented for selected R objects that contain spatial data. 'gdalraster' may be useful in applications that need scalable, low-level I/O, or prefer a direct 'GDAL' API."
    },
    "build": {
      "missing_dso_whitelist": null,
      "number": "0",
      "rpaths": [
        "lib/R/lib/",
        "lib/"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "conda-forge/r",
        "ctoney"
      ]
    },
    "package": {
      "name": "r-gdalraster",
      "version": "2.2.0"
    },
    "requirements": {
      "build": [
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "autoconf",
        "automake",
        "pkg-config",
        "make"
      ],
      "host": [
        "r-base",
        "r-rcpp >=1.0.7",
        "r-rcppint64",
        "r-bit64",
        "r-nanoarrow",
        "r-wk",
        "r-xml2",
        "libgdal-core"
      ],
      "run": [
        "r-base",
        "r-rcpp >=1.0.7",
        "r-rcppint64",
        "r-bit64",
        "r-nanoarrow",
        "r-wk",
        "r-xml2"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "814d9702954221a1f4ed7dc927fd33ea113e0327be8c996f1ef903eab228a771",
      "url": [
        "https://cran.r-project.org/src/contrib/gdalraster_2.2.0.tar.gz",
        "https://cran.r-project.org/src/contrib/Archive/gdalraster/gdalraster_2.2.0.tar.gz"
      ]
    },
    "test": {
      "commands": [
        "export NOT_CRAN=true",
        "$R -e \"library('gdalraster')\"",
        "$R -e \"testthat::test_file('tests/testthat.R', stop_on_failure=TRUE)\""
      ],
      "requires": [
        "r-testthat",
        "r-codetools",
        "r-gt",
        "libgdal-pg",
        "libgdal-postgisraster"
      ],
      "source_files": [
        "tests/"
      ]
    }
  },
  "name": "r-gdalraster",
  "osx_64_meta_yaml": {
    "about": {
      "dev_url": "https://github.com/USDAForestService/gdalraster",
      "doc_url": "https://usdaforestservice.github.io/gdalraster/",
      "home": "https://github.com/USDAForestService/gdalraster",
      "license": "MIT",
      "license_family": "MIT",
      "license_file": [
        "/lib/R/share/licenses/MIT"
      ],
      "summary": "API bindings to the Geospatial Data Abstraction Library ('GDAL', <https://gdal.org>). Implements the 'GDAL' Raster and Vector Data Models. Bindings are implemented with 'Rcpp' modules. Exposed C++ classes and stand-alone functions wrap much of the 'GDAL' API and provide additional functionality. Calling signatures resemble the native C, C++ and Python APIs provided by the 'GDAL' project. Class 'GDALRaster' encapsulates a 'GDALDataset' and its raster band objects. Class 'GDALVector' encapsulates an 'OGRLayer' and the 'GDALDataset' that contains it. Initial bindings are provided to the unified 'gdal' command line interface added in 'GDAL' 3.11. C++ stand-alone functions provide bindings to most 'GDAL' \"traditional\" raster and vector utilities, including 'OGR' facilities for vector geoprocessing, several algorithms, as well as the Geometry API ('GEOS' via 'GDAL' headers), the Spatial Reference Systems API, and methods for coordinate transformation. Bindings to the Virtual Systems Interface ('VSI') API implement standard file system operations abstracted for URLs, cloud storage services, 'Zip'/'GZip'/'7z'/'RAR', in-memory files, as well as regular local file systems. This provides a single interface for operating on file system objects that works the same for any storage backend. A custom raster calculator evaluates a user-defined R expression on a layer or stack of layers, with pixel x/y available as variables in the expression. Raster 'combine()' identifies and counts unique pixel combinations across multiple input layers, with optional raster output of the pixel-level combination IDs. Basic plotting capability is provided for raster and vector display. 'gdalraster' leans toward minimalism and the use of simple, lightweight objects for holding raw data. Currently, only minimal S3 class interfaces have been implemented for selected R objects that contain spatial data. 'gdalraster' may be useful in applications that need scalable, low-level I/O, or prefer a direct 'GDAL' API."
    },
    "build": {
      "missing_dso_whitelist": null,
      "number": "0",
      "rpaths": [
        "lib/R/lib/",
        "lib/"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "conda-forge/r",
        "ctoney"
      ]
    },
    "package": {
      "name": "r-gdalraster",
      "version": "2.2.0"
    },
    "requirements": {
      "build": [
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "autoconf",
        "automake",
        "pkg-config",
        "make"
      ],
      "host": [
        "r-base",
        "r-rcpp >=1.0.7",
        "r-rcppint64",
        "r-bit64",
        "r-nanoarrow",
        "r-wk",
        "r-xml2",
        "libgdal-core"
      ],
      "run": [
        "r-base",
        "r-rcpp >=1.0.7",
        "r-rcppint64",
        "r-bit64",
        "r-nanoarrow",
        "r-wk",
        "r-xml2"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "814d9702954221a1f4ed7dc927fd33ea113e0327be8c996f1ef903eab228a771",
      "url": [
        "https://cran.r-project.org/src/contrib/gdalraster_2.2.0.tar.gz",
        "https://cran.r-project.org/src/contrib/Archive/gdalraster/gdalraster_2.2.0.tar.gz"
      ]
    },
    "test": {
      "commands": [
        "export NOT_CRAN=true",
        "$R -e \"library('gdalraster')\"",
        "$R -e \"testthat::test_file('tests/testthat.R', stop_on_failure=TRUE)\""
      ],
      "requires": [
        "r-testthat",
        "r-codetools",
        "r-gt",
        "libgdal-pg",
        "libgdal-postgisraster"
      ],
      "source_files": [
        "tests/"
      ]
    }
  },
  "osx_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "autoconf",
        "automake",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "make",
        "pkg-config"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "libgdal-core",
        "r-base",
        "r-bit64",
        "r-nanoarrow",
        "r-rcpp",
        "r-rcppint64",
        "r-wk",
        "r-xml2"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "r-base",
        "r-bit64",
        "r-nanoarrow",
        "r-rcpp",
        "r-rcppint64",
        "r-wk",
        "r-xml2"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "libgdal-pg",
        "libgdal-postgisraster",
        "r-codetools",
        "r-gt",
        "r-testthat"
      ]
    }
  },
  "osx_arm64_meta_yaml": {
    "about": {
      "dev_url": "https://github.com/USDAForestService/gdalraster",
      "doc_url": "https://usdaforestservice.github.io/gdalraster/",
      "home": "https://github.com/USDAForestService/gdalraster",
      "license": "MIT",
      "license_family": "MIT",
      "license_file": [
        "/lib/R/share/licenses/MIT"
      ],
      "summary": "API bindings to the Geospatial Data Abstraction Library ('GDAL', <https://gdal.org>). Implements the 'GDAL' Raster and Vector Data Models. Bindings are implemented with 'Rcpp' modules. Exposed C++ classes and stand-alone functions wrap much of the 'GDAL' API and provide additional functionality. Calling signatures resemble the native C, C++ and Python APIs provided by the 'GDAL' project. Class 'GDALRaster' encapsulates a 'GDALDataset' and its raster band objects. Class 'GDALVector' encapsulates an 'OGRLayer' and the 'GDALDataset' that contains it. Initial bindings are provided to the unified 'gdal' command line interface added in 'GDAL' 3.11. C++ stand-alone functions provide bindings to most 'GDAL' \"traditional\" raster and vector utilities, including 'OGR' facilities for vector geoprocessing, several algorithms, as well as the Geometry API ('GEOS' via 'GDAL' headers), the Spatial Reference Systems API, and methods for coordinate transformation. Bindings to the Virtual Systems Interface ('VSI') API implement standard file system operations abstracted for URLs, cloud storage services, 'Zip'/'GZip'/'7z'/'RAR', in-memory files, as well as regular local file systems. This provides a single interface for operating on file system objects that works the same for any storage backend. A custom raster calculator evaluates a user-defined R expression on a layer or stack of layers, with pixel x/y available as variables in the expression. Raster 'combine()' identifies and counts unique pixel combinations across multiple input layers, with optional raster output of the pixel-level combination IDs. Basic plotting capability is provided for raster and vector display. 'gdalraster' leans toward minimalism and the use of simple, lightweight objects for holding raw data. Currently, only minimal S3 class interfaces have been implemented for selected R objects that contain spatial data. 'gdalraster' may be useful in applications that need scalable, low-level I/O, or prefer a direct 'GDAL' API."
    },
    "build": {
      "missing_dso_whitelist": null,
      "number": "0",
      "rpaths": [
        "lib/R/lib/",
        "lib/"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "conda-forge/r",
        "ctoney"
      ]
    },
    "package": {
      "name": "r-gdalraster",
      "version": "2.2.0"
    },
    "requirements": {
      "build": [
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "autoconf",
        "automake",
        "pkg-config",
        "make"
      ],
      "host": [
        "r-base",
        "r-rcpp >=1.0.7",
        "r-rcppint64",
        "r-bit64",
        "r-nanoarrow",
        "r-wk",
        "r-xml2",
        "libgdal-core"
      ],
      "run": [
        "r-base",
        "r-rcpp >=1.0.7",
        "r-rcppint64",
        "r-bit64",
        "r-nanoarrow",
        "r-wk",
        "r-xml2"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "814d9702954221a1f4ed7dc927fd33ea113e0327be8c996f1ef903eab228a771",
      "url": [
        "https://cran.r-project.org/src/contrib/gdalraster_2.2.0.tar.gz",
        "https://cran.r-project.org/src/contrib/Archive/gdalraster/gdalraster_2.2.0.tar.gz"
      ]
    },
    "test": {
      "commands": [
        "export NOT_CRAN=true",
        "$R -e \"library('gdalraster')\"",
        "$R -e \"testthat::test_file('tests/testthat.R', stop_on_failure=TRUE)\""
      ],
      "requires": [
        "r-testthat",
        "r-codetools",
        "r-gt",
        "libgdal-pg",
        "libgdal-postgisraster"
      ],
      "source_files": [
        "tests/"
      ]
    }
  },
  "osx_arm64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "autoconf",
        "automake",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "make",
        "pkg-config"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "libgdal-core",
        "r-base",
        "r-bit64",
        "r-nanoarrow",
        "r-rcpp",
        "r-rcppint64",
        "r-wk",
        "r-xml2"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "r-base",
        "r-bit64",
        "r-nanoarrow",
        "r-rcpp",
        "r-rcppint64",
        "r-wk",
        "r-xml2"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "libgdal-pg",
        "libgdal-postgisraster",
        "r-codetools",
        "r-gt",
        "r-testthat"
      ]
    }
  },
  "outputs_names": {
    "__set__": true,
    "elements": [
      "r-gdalraster"
    ]
  },
  "parsing_error": false,
  "platforms": [
    "linux_64",
    "linux_aarch64",
    "linux_ppc64le",
    "osx_64",
    "osx_arm64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/r-gdalraster.json"
  },
  "raw_meta_yaml": "{% set version = \"2.2.0\" %}\n{% set posix = 'm2-' if win else '' %}\n\npackage:\n  name: r-gdalraster\n  version: {{ version|replace(\"-\", \"_\") }}\n\nsource:\n  url:\n    - {{ cran_mirror }}/src/contrib/gdalraster_{{ version }}.tar.gz\n    - {{ cran_mirror }}/src/contrib/Archive/gdalraster/gdalraster_{{ version }}.tar.gz\n  sha256: 814d9702954221a1f4ed7dc927fd33ea113e0327be8c996f1ef903eab228a771\n\nbuild:\n  skip: true  # [win]\n  number: 0\n  rpaths:\n    - lib/R/lib/\n    - lib/\n  missing_dso_whitelist:\n    - '*/R.dll'        # [win]\n    - '*/Rblas.dll'    # [win]\n    - '*/Rlapack.dll'  # [win]\n\nrequirements:\n  build:\n    - cross-r-base {{ r_base }}    # [build_platform != target_platform]\n    - r-rcpp                       # [build_platform != target_platform]\n    - r-rcppint64                  # [build_platform != target_platform]\n    - r-bit64                      # [build_platform != target_platform]\n    - r-nanoarrow                  # [build_platform != target_platform]\n    - r-wk                         # [build_platform != target_platform]\n    - r-xml2                       # [build_platform != target_platform]\n    - {{ stdlib(\"c\") }}\n    - {{ compiler('cxx') }}\n    - {{ posix }}filesystem        # [win]\n    - {{ posix }}sed               # [win]\n    - {{ posix }}grep              # [win]\n    - {{ posix }}autoconf\n    - {{ posix }}automake          # [not win]\n    - {{ posix }}automake-wrapper  # [win]\n    - pkg-config\n    - {{ posix }}make\n    - {{ posix }}coreutils         # [win]\n    - {{ posix }}zip               # [win]\n  host:\n    - r-base\n    - r-rcpp >=1.0.7\n    - r-rcppint64\n    - r-bit64\n    - r-nanoarrow\n    - r-wk\n    - r-xml2\n    - libgdal-core\n  run:\n    - r-base\n    - r-rcpp >=1.0.7\n    - r-rcppint64\n    - r-bit64\n    - r-nanoarrow\n    - r-wk\n    - r-xml2\n\ntest:\n  source_files:\n    - tests/\n  requires:\n    - r-testthat\n    # add \"CRAN recommended\" package codetools since conda-forge test with only r-base\n    # avoids gdalraster raising multiple warnings of form:\n    # code for methods in class Rcpp_... was not checked for suspicious field assignments (recommended package ‘codetools’ not available?)\n    # cf. https://github.com/conda-forge/r-gdalraster-feedstock/pull/1#issuecomment-3138823999\n    - r-codetools\n    - r-gt\n    - libgdal-pg\n    - libgdal-postgisraster\n  commands:\n    - export NOT_CRAN=true  # [not win]\n    - \"set NOT_CRAN=true\"  # [win]\n    - $R -e \"library('gdalraster')\"  # [not win]\n    - $R -e \"testthat::test_file('tests/testthat.R', stop_on_failure=TRUE)\"  # [not win]\n    - \"\\\"%R%\\\" -e \\\"library('gdalraster')\\\"\"  # [win]\n    - \"\\\"%R%\\\" -e \\\"testthat::test_file('tests/testthat.R', stop_on_failure=TRUE)\\\"\"  # [win]\n\nabout:\n  home: https://github.com/USDAForestService/gdalraster\n  license: MIT\n  summary: API bindings to the Geospatial Data Abstraction Library ('GDAL',\n    <https://gdal.org>). Implements the 'GDAL' Raster and Vector Data Models.\n    Bindings are implemented with 'Rcpp' modules. Exposed C++ classes and\n    stand-alone functions wrap much of the 'GDAL' API and provide additional\n    functionality. Calling signatures resemble the native C, C++ and Python APIs\n    provided by the 'GDAL' project. Class 'GDALRaster' encapsulates a\n    'GDALDataset' and its raster band objects. Class 'GDALVector' encapsulates\n    an 'OGRLayer' and the 'GDALDataset' that contains it. Initial bindings are\n    provided to the unified 'gdal' command line interface added in 'GDAL' 3.11.\n    C++ stand-alone functions provide bindings to most 'GDAL' \"traditional\"\n    raster and vector utilities, including 'OGR' facilities for vector\n    geoprocessing, several algorithms, as well as the Geometry API ('GEOS' via\n    'GDAL' headers), the Spatial Reference Systems API, and methods for\n    coordinate transformation. Bindings to the Virtual Systems Interface ('VSI')\n    API implement standard file system operations abstracted for URLs, cloud\n    storage services, 'Zip'/'GZip'/'7z'/'RAR', in-memory files, as well as\n    regular local file systems. This provides a single interface for operating\n    on file system objects that works the same for any storage backend. A custom\n    raster calculator evaluates a user-defined R expression on a layer or stack\n    of layers, with pixel x/y available as variables in the expression. Raster\n    'combine()' identifies and counts unique pixel combinations across multiple\n    input layers, with optional raster output of the pixel-level combination\n    IDs. Basic plotting capability is provided for raster and vector display.\n    'gdalraster' leans toward minimalism and the use of simple, lightweight\n    objects for holding raw data. Currently, only minimal S3 class interfaces\n    have been implemented for selected R objects that contain spatial data.\n    'gdalraster' may be useful in applications that need scalable, low-level\n    I/O, or prefer a direct 'GDAL' API.\n  license_family: MIT\n  license_file:\n    - '{{ environ[\"PREFIX\"] }}/lib/R/share/licenses/MIT'\n  dev_url: https://github.com/USDAForestService/gdalraster\n  doc_url: https://usdaforestservice.github.io/gdalraster/\n\nextra:\n  recipe-maintainers:\n    - conda-forge/r\n    - ctoney\n",
  "req": {
    "__set__": true,
    "elements": [
      "autoconf",
      "automake",
      "c_stdlib_stub",
      "cxx_compiler_stub",
      "libgdal-core",
      "make",
      "pkg-config",
      "r-base",
      "r-bit64",
      "r-nanoarrow",
      "r-rcpp",
      "r-rcppint64",
      "r-wk",
      "r-xml2"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "autoconf",
        "automake",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "make",
        "pkg-config"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "libgdal-core",
        "r-base",
        "r-bit64",
        "r-nanoarrow",
        "r-rcpp",
        "r-rcppint64",
        "r-wk",
        "r-xml2"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "r-base",
        "r-bit64",
        "r-nanoarrow",
        "r-rcpp",
        "r-rcppint64",
        "r-wk",
        "r-xml2"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "libgdal-pg",
        "libgdal-postgisraster",
        "r-codetools",
        "r-gt",
        "r-testthat"
      ]
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "autoconf",
        "automake",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "make",
        "pkg-config"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "libgdal-core",
        "r-base",
        "r-bit64",
        "r-nanoarrow",
        "r-rcpp >=1.0.7",
        "r-rcppint64",
        "r-wk",
        "r-xml2"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "r-base",
        "r-bit64",
        "r-nanoarrow",
        "r-rcpp >=1.0.7",
        "r-rcppint64",
        "r-wk",
        "r-xml2"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "libgdal-pg",
        "libgdal-postgisraster",
        "r-codetools",
        "r-gt",
        "r-testthat"
      ]
    }
  },
  "url": [
    "https://cran.r-project.org/src/contrib/gdalraster_2.2.0.tar.gz",
    "https://cran.r-project.org/src/contrib/Archive/gdalraster/gdalraster_2.2.0.tar.gz",
    "https://cran.r-project.org/src/contrib/gdalraster_2.2.0.tar.gz",
    "https://cran.r-project.org/src/contrib/Archive/gdalraster/gdalraster_2.2.0.tar.gz",
    "https://cran.r-project.org/src/contrib/gdalraster_2.2.0.tar.gz",
    "https://cran.r-project.org/src/contrib/Archive/gdalraster/gdalraster_2.2.0.tar.gz",
    "https://cran.r-project.org/src/contrib/gdalraster_2.2.0.tar.gz",
    "https://cran.r-project.org/src/contrib/Archive/gdalraster/gdalraster_2.2.0.tar.gz",
    "https://cran.r-project.org/src/contrib/gdalraster_2.2.0.tar.gz",
    "https://cran.r-project.org/src/contrib/Archive/gdalraster/gdalraster_2.2.0.tar.gz"
  ],
  "version": "2.2.0",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/r-gdalraster.json"
  }
}