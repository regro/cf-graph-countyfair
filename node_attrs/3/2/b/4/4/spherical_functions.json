{
  "archived": false,
  "branch": "main",
  "conda-forge.yml": {
    "bot": {
      "automerge": true
    },
    "conda_build": {
      "pkg_format": "2"
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    }
  },
  "feedstock_hash": "7d4db9338cbd7a203348b23687176fc96f4be0ba",
  "feedstock_hash_ts": 1757402423,
  "feedstock_name": "spherical_functions",
  "hash_type": "sha256",
  "linux_64_meta_yaml": {
    "about": {
      "description": "Python/numba package for evaluating and transforming Wigner’s 𝔇 matrices, Wigner’s 3-j symbols,\nand spin-weighted (and scalar) spherical harmonics. These functions are evaluated directly in\nterms of quaternions, as well as in the more standard forms of spherical coordinates and Euler\nangles.\n",
      "dev_url": "https://github.com/moble/spherical_functions",
      "home": "http://github.com/moble/spherical_functions",
      "license": "MIT",
      "license_family": "MIT",
      "license_file": "LICENSE",
      "summary": "Python/numba implementation of Wigner D Matrices, spin-weighted spherical harmonics, and associated functions"
    },
    "build": {
      "noarch": "python",
      "number": "0",
      "script": "PYTHON -m pip install . -vv"
    },
    "extra": {
      "recipe-maintainers": [
        "moble"
      ]
    },
    "package": {
      "name": "spherical_functions",
      "version": "2023.0.2"
    },
    "requirements": {
      "host": [
        "python 3.10",
        "pip >=20.0.2",
        "hatchling"
      ],
      "run": [
        "python >=3.10",
        "numpy",
        "scipy",
        "numba",
        "quaternion",
        "spinsfast"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "2e425b10638d73fba0a68d9aa8c95e9002e6ce7ee83c2654840ccfcd1fa2834e",
      "url": "https://pypi.org/packages/source/s/spherical-functions/spherical_functions-2023.0.2.tar.gz"
    },
    "test": {
      "imports": [
        "spherical_functions"
      ],
      "requires": [
        "python 3.10"
      ]
    }
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": []
    },
    "host": {
      "__set__": true,
      "elements": [
        "hatchling",
        "pip",
        "python"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "numba",
        "numpy",
        "python",
        "quaternion",
        "scipy",
        "spinsfast"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "python"
      ]
    }
  },
  "meta_yaml": {
    "about": {
      "description": "Python/numba package for evaluating and transforming Wigner’s 𝔇 matrices, Wigner’s 3-j symbols,\nand spin-weighted (and scalar) spherical harmonics. These functions are evaluated directly in\nterms of quaternions, as well as in the more standard forms of spherical coordinates and Euler\nangles.\n",
      "dev_url": "https://github.com/moble/spherical_functions",
      "home": "http://github.com/moble/spherical_functions",
      "license": "MIT",
      "license_family": "MIT",
      "license_file": "LICENSE",
      "summary": "Python/numba implementation of Wigner D Matrices, spin-weighted spherical harmonics, and associated functions"
    },
    "build": {
      "noarch": "python",
      "number": "0",
      "script": "PYTHON -m pip install . -vv"
    },
    "extra": {
      "recipe-maintainers": [
        "moble"
      ]
    },
    "package": {
      "name": "spherical_functions",
      "version": "2023.0.2"
    },
    "requirements": {
      "host": [
        "python 3.10",
        "pip >=20.0.2",
        "hatchling"
      ],
      "run": [
        "python >=3.10",
        "numpy",
        "scipy",
        "numba",
        "quaternion",
        "spinsfast"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "2e425b10638d73fba0a68d9aa8c95e9002e6ce7ee83c2654840ccfcd1fa2834e",
      "url": "https://pypi.org/packages/source/s/spherical-functions/spherical_functions-2023.0.2.tar.gz"
    },
    "test": {
      "imports": [
        "spherical_functions"
      ],
      "requires": [
        "python 3.10"
      ]
    }
  },
  "name": "spherical_functions",
  "outputs_names": {
    "__set__": true,
    "elements": [
      "spherical_functions"
    ]
  },
  "parsing_error": false,
  "platforms": [
    "linux_64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/spherical_functions.json"
  },
  "raw_meta_yaml": "{% set name = \"spherical_functions\" %}\n{% set pypiname = \"spherical-functions\" %}\n{% set version = \"2023.0.2\" %}\n{% set sha256 = \"2e425b10638d73fba0a68d9aa8c95e9002e6ce7ee83c2654840ccfcd1fa2834e\" %}\n{% set python_min = \"3.10\" %}\n\n# See https://conda-forge.org/docs/maintainer/knowledge_base/#noarch-python for the reason we\n# *can* set `python_min` here and https://github.com/conda-forge/cfep/blob/main/cfep-25.md\n# for what `python_min` actually means.  I have to do this because conda-forge still supports\n# python 3.9, but sxs only supports >=3.10.\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.org/packages/source/{{ pypiname[0] }}/{{ pypiname }}/{{ name }}-{{ version }}.tar.gz\n  sha256: {{ sha256 }}\n\nbuild:\n  noarch: python\n  number: 0\n  script: {{ PYTHON }} -m pip install . -vv\n\nrequirements:\n  host:\n    - python {{ python_min }}\n    - pip >=20.0.2\n    - hatchling\n  run:\n    - python >={{ python_min }}\n    - numpy\n    - scipy\n    - numba\n    - quaternion\n    - spinsfast\n\ntest:\n  requires:\n    - python {{ python_min }}\n  imports:\n    - spherical_functions\n\nabout:\n  home: http://github.com/moble/spherical_functions\n  license: MIT\n  license_family: MIT\n  license_file: LICENSE\n  summary: Python/numba implementation of Wigner D Matrices, spin-weighted spherical harmonics, and associated functions\n  description: |\n    Python/numba package for evaluating and transforming Wigner’s 𝔇 matrices, Wigner’s 3-j symbols,\n    and spin-weighted (and scalar) spherical harmonics. These functions are evaluated directly in\n    terms of quaternions, as well as in the more standard forms of spherical coordinates and Euler\n    angles.\n  dev_url: https://github.com/moble/spherical_functions\n\nextra:\n  recipe-maintainers:\n    - moble\n",
  "req": {
    "__set__": true,
    "elements": [
      "hatchling",
      "numba",
      "numpy",
      "pip",
      "python",
      "quaternion",
      "scipy",
      "spinsfast"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": []
    },
    "host": {
      "__set__": true,
      "elements": [
        "hatchling",
        "pip",
        "python"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "numba",
        "numpy",
        "python",
        "quaternion",
        "scipy",
        "spinsfast"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "python"
      ]
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": []
    },
    "host": {
      "__set__": true,
      "elements": [
        "hatchling",
        "pip >=20.0.2",
        "python 3.10"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "numba",
        "numpy",
        "python >=3.10",
        "quaternion",
        "scipy",
        "spinsfast"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "python 3.10"
      ]
    }
  },
  "url": "https://pypi.org/packages/source/s/spherical-functions/spherical_functions-2023.0.2.tar.gz",
  "version": "2023.0.2",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/spherical_functions.json"
  }
}