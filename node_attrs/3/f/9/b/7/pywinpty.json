{
  "archived": false,
  "branch": "main",
  "conda-forge.yml": {
    "azure": {
      "settings_win": {
        "pool": {
          "vmImage": "windows-2019"
        }
      }
    },
    "conda_build": {
      "pkg_format": "2"
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    }
  },
  "feedstock_name": "pywinpty",
  "hash_type": "sha256",
  "meta_yaml": {
    "about": {
      "description": "PyWinpty allows creating and communicating with Windows processes that\nreceive input and print outputs via console input and output pipes.\nPyWinpty supports both the native ConPTY interface and the previous,\nfallback winpty library.\n",
      "dev_url": "https://github.com/spyder-ide/pywinpty",
      "doc_url": "https://github.com/spyder-ide/pywinpty",
      "home": "https://github.com/spyder-ide/pywinpty",
      "license": "MIT",
      "license_file": "LICENSE.txt",
      "summary": "Pseudoterminals for Windows in Python"
    },
    "build": {
      "number": "1"
    },
    "extra": {
      "recipe-maintainers": [
        "blink1073",
        "ccordoba12",
        "andfoy",
        "ocefpaf"
      ]
    },
    "package": {
      "name": "pywinpty",
      "version": "2.0.15"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "clang",
        "llvm",
        "rust",
        "llvmdev",
        "llvm-tools",
        "libclang",
        "maturin <=0.12.0",
        "toml",
        "pip",
        "winpty"
      ],
      "host": [
        "python",
        "pip",
        "winpty"
      ],
      "run": [
        "python",
        "winpty"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "312cf39153a8736c617d45ce8b6ad6cd2107de121df91c455b10ce6bba7a39b2",
      "url": "https://pypi.org/packages/source/p/pywinpty/pywinpty-2.0.15.tar.gz"
    },
    "test": {
      "imports": [
        "winpty"
      ]
    }
  },
  "name": "pywinpty",
  "outputs_names": {
    "__set__": true,
    "elements": [
      "pywinpty"
    ]
  },
  "parsing_error": false,
  "platforms": [
    "win_64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/pywinpty.json"
  },
  "raw_meta_yaml": "{% set version = \"2.0.15\" %}\n\npackage:\n  name: pywinpty\n  version: {{ version }}\n\nsource:\n  url: https://pypi.org/packages/source/p/pywinpty/pywinpty-{{ version }}.tar.gz\n  sha256: 312cf39153a8736c617d45ce8b6ad6cd2107de121df91c455b10ce6bba7a39b2\n\nbuild:\n  number: 1\n  skip: true  # [not win]\n  skip: true  # [py<37]\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ stdlib(\"c\") }}\n    - {{ compiler('cxx') }}\n    - clang\n    - llvm\n    - rust\n    - llvmdev\n    - llvm-tools\n    - libclang\n    - maturin <=0.12.0\n    - toml\n    - pip\n    - winpty\n  host:\n    - python\n    - pip\n    - winpty\n  run:\n    - python\n    - winpty\n\ntest:\n  imports:\n    - winpty\n\nabout:\n  home: https://github.com/spyder-ide/pywinpty\n  license: MIT\n  license_file: LICENSE.txt\n  summary: Pseudoterminals for Windows in Python\n  description: |\n    PyWinpty allows creating and communicating with Windows processes that\n    receive input and print outputs via console input and output pipes.\n    PyWinpty supports both the native ConPTY interface and the previous,\n    fallback winpty library.\n  doc_url: https://github.com/spyder-ide/pywinpty\n  dev_url: https://github.com/spyder-ide/pywinpty\n\nextra:\n  recipe-maintainers:\n    - blink1073\n    - ccordoba12\n    - andfoy\n    - ocefpaf\n",
  "req": {
    "__set__": true,
    "elements": [
      "c_compiler_stub",
      "c_stdlib_stub",
      "clang",
      "cxx_compiler_stub",
      "libclang",
      "llvm",
      "llvm-tools",
      "llvmdev",
      "maturin",
      "pip",
      "python",
      "rust",
      "toml",
      "winpty"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "clang",
        "cxx_compiler_stub",
        "libclang",
        "llvm",
        "llvm-tools",
        "llvmdev",
        "maturin",
        "pip",
        "rust",
        "toml",
        "winpty"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "pip",
        "python",
        "winpty"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "python",
        "winpty"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "clang",
        "cxx_compiler_stub",
        "libclang",
        "llvm",
        "llvm-tools",
        "llvmdev",
        "maturin <=0.12.0",
        "pip",
        "rust",
        "toml",
        "winpty"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "pip",
        "python",
        "winpty"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "python",
        "winpty"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "url": "https://pypi.org/packages/source/p/pywinpty/pywinpty-2.0.15.tar.gz",
  "version": "2.0.15",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/pywinpty.json"
  },
  "win_64_meta_yaml": {
    "about": {
      "description": "PyWinpty allows creating and communicating with Windows processes that\nreceive input and print outputs via console input and output pipes.\nPyWinpty supports both the native ConPTY interface and the previous,\nfallback winpty library.\n",
      "dev_url": "https://github.com/spyder-ide/pywinpty",
      "doc_url": "https://github.com/spyder-ide/pywinpty",
      "home": "https://github.com/spyder-ide/pywinpty",
      "license": "MIT",
      "license_file": "LICENSE.txt",
      "summary": "Pseudoterminals for Windows in Python"
    },
    "build": {
      "number": "1"
    },
    "extra": {
      "recipe-maintainers": [
        "blink1073",
        "ccordoba12",
        "andfoy",
        "ocefpaf"
      ]
    },
    "package": {
      "name": "pywinpty",
      "version": "2.0.15"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "clang",
        "llvm",
        "rust",
        "llvmdev",
        "llvm-tools",
        "libclang",
        "maturin <=0.12.0",
        "toml",
        "pip",
        "winpty"
      ],
      "host": [
        "python",
        "pip",
        "winpty"
      ],
      "run": [
        "python",
        "winpty"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "312cf39153a8736c617d45ce8b6ad6cd2107de121df91c455b10ce6bba7a39b2",
      "url": "https://pypi.org/packages/source/p/pywinpty/pywinpty-2.0.15.tar.gz"
    },
    "test": {
      "imports": [
        "winpty"
      ]
    }
  },
  "win_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "clang",
        "cxx_compiler_stub",
        "libclang",
        "llvm",
        "llvm-tools",
        "llvmdev",
        "maturin",
        "pip",
        "rust",
        "toml",
        "winpty"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "pip",
        "python",
        "winpty"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "python",
        "winpty"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  }
}