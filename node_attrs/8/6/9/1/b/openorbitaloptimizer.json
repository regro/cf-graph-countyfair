{
  "archived": false,
  "branch": "main",
  "conda-forge.yml": {
    "build_platform": {
      "osx_arm64": "osx_64"
    },
    "conda_build": {
      "error_overlinking": true
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    },
    "test": "native_and_emulated"
  },
  "feedstock_name": "openorbitaloptimizer",
  "hash_type": "sha256",
  "linux_64_meta_yaml": {
    "about": {
      "description": "The OpenOrbitalOptimizer is general and reusable library aimed for orbital optimization problems\nthat arise with various methods in quantum chemistry, ranging from self-consistent field (SCF)\nmethods like Hartree-Fock (HF) and density functional theory (DFT) to more elaborate methods like\nmulticonfigurational self-consistent field theory, orbital-optimized coupled-cluster theory,\ngeneralized valence bond theories, etc. At the moment, the library only does Roothaan-type SCF\nfor HF and DFT calculations, but general algorithms for direct minimization on the Grassmann and\nStiefel manifolds are forthcoming.\n",
      "dev_url": "https://github.com/SusiLehtola/OpenOrbitalOptimizer",
      "home": "https://github.com/SusiLehtola/OpenOrbitalOptimizer",
      "license": "MPL-2.0",
      "license_family": "MOZILLA",
      "license_file": "LICENSE",
      "license_url": "https://opensource.org/licenses/MPL-2.0",
      "summary": "S. Lehtola's general library for orbital optimization problems in quantum chemistry"
    },
    "build": {
      "number": "0"
    },
    "extra": {
      "feedstock-name": "openorbitaloptimizer",
      "recipe-maintainers": [
        "loriab"
      ]
    },
    "outputs": [
      {
        "build": {
          "run_exports": [
            "openorbitaloptimizer"
          ]
        },
        "name": "openorbitaloptimizer",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "cxx_compiler_stub",
            "cmake",
            "ninja"
          ],
          "host": [
            "armadillo"
          ]
        },
        "script": "build-cxx.sh",
        "test": {
          "commands": [
            "test -f $PREFIX/include/openorbitaloptimizer/scfsolver.hpp",
            "test -f $PREFIX/include/openorbitaloptimizer/cg_optimizer.hpp",
            "test -f $PREFIX/share/cmake/OpenOrbitalOptimizer/OpenOrbitalOptimizerConfig.cmake",
            "test -f $PREFIX/share/cmake/OpenOrbitalOptimizer/OpenOrbitalOptimizerTargets.cmake",
            "cd tests",
            "cmake -S. -Bbuild -GNinja -DCMAKE_PREFIX_PATH=\"${PREFIX}\"",
            "cmake --build build",
            "./build/atomtest --Z 8 --xfunc GGA_X_PBE --cfunc GGA_C_PBE --M 3 --sto 0 --basis \"cc-pvdz.json\""
          ],
          "files": [
            "tests/CMakeLists.txt"
          ],
          "requires": [
            "cxx_compiler_stub",
            "cmake",
            "ninja",
            "libxc-c",
            "nlohmann_json",
            "integratorxx",
            "liblapack * *mkl"
          ],
          "source_files": [
            "tests/atomicsolver.hpp",
            "tests/atomtest.cpp",
            "tests/cc-pvdz.json",
            "tests/cmdline.h"
          ]
        }
      }
    ],
    "package": {
      "name": "openorbitaloptimizer-split",
      "version": "0.2.0"
    },
    "schema_version": 0,
    "source": {
      "sha256": "0ef79d0881403c6f0480e269d319e482f1ce32ddc79e49b717468b14ce4d07c0",
      "url": "https://github.com/SusiLehtola/OpenOrbitalOptimizer/archive/v0.2.0.tar.gz"
    }
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "ninja"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "armadillo"
      ]
    },
    "run": {
      "__set__": true,
      "elements": []
    },
    "test": {
      "__set__": true,
      "elements": [
        "cmake",
        "cxx_compiler_stub",
        "integratorxx",
        "liblapack",
        "libxc-c",
        "ninja",
        "nlohmann_json"
      ]
    }
  },
  "meta_yaml": {
    "about": {
      "description": "The OpenOrbitalOptimizer is general and reusable library aimed for orbital optimization problems\nthat arise with various methods in quantum chemistry, ranging from self-consistent field (SCF)\nmethods like Hartree-Fock (HF) and density functional theory (DFT) to more elaborate methods like\nmulticonfigurational self-consistent field theory, orbital-optimized coupled-cluster theory,\ngeneralized valence bond theories, etc. At the moment, the library only does Roothaan-type SCF\nfor HF and DFT calculations, but general algorithms for direct minimization on the Grassmann and\nStiefel manifolds are forthcoming.\n",
      "dev_url": "https://github.com/SusiLehtola/OpenOrbitalOptimizer",
      "home": "https://github.com/SusiLehtola/OpenOrbitalOptimizer",
      "license": "MPL-2.0",
      "license_family": "MOZILLA",
      "license_file": "LICENSE",
      "license_url": "https://opensource.org/licenses/MPL-2.0",
      "summary": "S. Lehtola's general library for orbital optimization problems in quantum chemistry"
    },
    "build": {
      "number": "0"
    },
    "extra": {
      "feedstock-name": "openorbitaloptimizer",
      "recipe-maintainers": [
        "loriab"
      ]
    },
    "outputs": [
      {
        "build": {
          "run_exports": [
            "openorbitaloptimizer"
          ]
        },
        "name": "openorbitaloptimizer",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "cxx_compiler_stub",
            "cmake",
            "ninja"
          ],
          "host": [
            "armadillo"
          ]
        },
        "script": "build-cxx.sh",
        "test": {
          "commands": [
            "test -f $PREFIX/include/openorbitaloptimizer/scfsolver.hpp",
            "test -f $PREFIX/include/openorbitaloptimizer/cg_optimizer.hpp",
            "test -f $PREFIX/share/cmake/OpenOrbitalOptimizer/OpenOrbitalOptimizerConfig.cmake",
            "test -f $PREFIX/share/cmake/OpenOrbitalOptimizer/OpenOrbitalOptimizerTargets.cmake",
            "cd tests",
            "cmake -S. -Bbuild -GNinja -DCMAKE_PREFIX_PATH=\"${PREFIX}\"",
            "cmake --build build",
            "./build/atomtest --Z 8 --xfunc GGA_X_PBE --cfunc GGA_C_PBE --M 3 --sto 0 --basis \"cc-pvdz.json\""
          ],
          "files": [
            "tests/CMakeLists.txt"
          ],
          "requires": [
            "cxx_compiler_stub",
            "cmake",
            "ninja",
            "libxc-c",
            "nlohmann_json",
            "integratorxx",
            "liblapack * *mkl"
          ],
          "source_files": [
            "tests/atomicsolver.hpp",
            "tests/atomtest.cpp",
            "tests/cc-pvdz.json",
            "tests/cmdline.h"
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "openorbitaloptimizer"
          ]
        },
        "name": "openorbitaloptimizer",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "cxx_compiler_stub",
            "cmake",
            "ninja"
          ],
          "host": [
            "armadillo"
          ]
        },
        "script": "build-cxx.sh",
        "test": {
          "commands": [
            "test -f $PREFIX/include/openorbitaloptimizer/scfsolver.hpp",
            "test -f $PREFIX/include/openorbitaloptimizer/cg_optimizer.hpp",
            "test -f $PREFIX/share/cmake/OpenOrbitalOptimizer/OpenOrbitalOptimizerConfig.cmake",
            "test -f $PREFIX/share/cmake/OpenOrbitalOptimizer/OpenOrbitalOptimizerTargets.cmake",
            "cd tests",
            "cmake -S. -Bbuild -GNinja -DCMAKE_PREFIX_PATH=\"${PREFIX}\"",
            "cmake --build build",
            "./build/atomtest --Z 8 --xfunc GGA_X_PBE --cfunc GGA_C_PBE --M 3 --sto 0 --basis \"cc-pvdz.json\""
          ],
          "files": [
            "tests/CMakeLists.txt"
          ],
          "requires": [
            "cxx_compiler_stub",
            "cmake",
            "ninja",
            "libxc-c",
            "nlohmann_json",
            "integratorxx"
          ],
          "source_files": [
            "tests/atomicsolver.hpp",
            "tests/atomtest.cpp",
            "tests/cc-pvdz.json",
            "tests/cmdline.h"
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "openorbitaloptimizer"
          ]
        },
        "name": "openorbitaloptimizer",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "cxx_compiler_stub",
            "cmake",
            "ninja"
          ],
          "host": [
            "armadillo"
          ]
        },
        "script": "build-cxx.sh",
        "test": {
          "commands": [
            "test -f $PREFIX/include/openorbitaloptimizer/scfsolver.hpp",
            "test -f $PREFIX/include/openorbitaloptimizer/cg_optimizer.hpp",
            "test -f $PREFIX/share/cmake/OpenOrbitalOptimizer/OpenOrbitalOptimizerConfig.cmake",
            "test -f $PREFIX/share/cmake/OpenOrbitalOptimizer/OpenOrbitalOptimizerTargets.cmake",
            "cd tests",
            "cmake -S. -Bbuild -GNinja -DCMAKE_PREFIX_PATH=\"${PREFIX}\"",
            "cmake --build build",
            "./build/atomtest --Z 8 --xfunc GGA_X_PBE --cfunc GGA_C_PBE --M 3 --sto 0 --basis \"cc-pvdz.json\""
          ],
          "files": [
            "tests/CMakeLists.txt"
          ],
          "requires": [
            "cxx_compiler_stub",
            "cmake",
            "ninja",
            "libxc-c",
            "nlohmann_json",
            "integratorxx"
          ],
          "source_files": [
            "tests/atomicsolver.hpp",
            "tests/atomtest.cpp",
            "tests/cc-pvdz.json",
            "tests/cmdline.h"
          ]
        }
      },
      {
        "build": {
          "run_exports": [
            "openorbitaloptimizer"
          ]
        },
        "name": "openorbitaloptimizer",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "cxx_compiler_stub",
            "cmake",
            "ninja"
          ],
          "host": [
            "armadillo"
          ]
        },
        "script": "bld-cxx.bat",
        "test": {
          "commands": [
            "if not exist %PREFIX%\\\\Library\\\\include\\\\openorbitaloptimizer\\\\scfsolver.hpp exit 1",
            "if not exist %PREFIX%\\\\Library\\\\include\\\\openorbitaloptimizer\\\\cg_optimizer.hpp exit 1",
            "if not exist %PREFIX%\\\\Library\\\\OpenOrbitalOptimizer\\\\CMake\\\\OpenOrbitalOptimizerConfig.cmake exit 1",
            "if not exist %PREFIX%\\\\Library\\\\OpenOrbitalOptimizer\\\\CMake\\\\OpenOrbitalOptimizerTargets.cmake exit 1",
            "cd tests",
            "set \"LDFLAGS=%LDFLAGS:/link =%\"",
            "echo \"%LDFLAGS%\"",
            "cmake -S. -Bbuild -GNinja -DCMAKE_PREFIX_PATH=\"%LIBRARY_PREFIX%\" -DCMAKE_CXX_COMPILER=clang-cl -DCMAKE_BUILD_TYPE=Release\"",
            "cmake --build build",
            "build\\\\atomtest.exe --Z 8 --xfunc GGA_X_PBE --cfunc GGA_C_PBE --M 3 --sto 0 --basis \"cc-pvdz.json\""
          ],
          "files": [
            "tests/CMakeLists.txt"
          ],
          "requires": [
            "cxx_compiler_stub",
            "cmake",
            "ninja",
            "libxc-c",
            "nlohmann_json",
            "integratorxx",
            "libblas * *netlib",
            "liblapack * *netlib"
          ],
          "source_files": [
            "tests/atomicsolver.hpp",
            "tests/atomtest.cpp",
            "tests/cc-pvdz.json",
            "tests/cmdline.h"
          ]
        }
      }
    ],
    "package": {
      "name": "openorbitaloptimizer-split",
      "version": "0.2.0"
    },
    "schema_version": 0,
    "source": {
      "sha256": "0ef79d0881403c6f0480e269d319e482f1ce32ddc79e49b717468b14ce4d07c0",
      "url": "https://github.com/SusiLehtola/OpenOrbitalOptimizer/archive/v0.2.0.tar.gz"
    }
  },
  "name": "openorbitaloptimizer-split",
  "osx_64_meta_yaml": {
    "about": {
      "description": "The OpenOrbitalOptimizer is general and reusable library aimed for orbital optimization problems\nthat arise with various methods in quantum chemistry, ranging from self-consistent field (SCF)\nmethods like Hartree-Fock (HF) and density functional theory (DFT) to more elaborate methods like\nmulticonfigurational self-consistent field theory, orbital-optimized coupled-cluster theory,\ngeneralized valence bond theories, etc. At the moment, the library only does Roothaan-type SCF\nfor HF and DFT calculations, but general algorithms for direct minimization on the Grassmann and\nStiefel manifolds are forthcoming.\n",
      "dev_url": "https://github.com/SusiLehtola/OpenOrbitalOptimizer",
      "home": "https://github.com/SusiLehtola/OpenOrbitalOptimizer",
      "license": "MPL-2.0",
      "license_family": "MOZILLA",
      "license_file": "LICENSE",
      "license_url": "https://opensource.org/licenses/MPL-2.0",
      "summary": "S. Lehtola's general library for orbital optimization problems in quantum chemistry"
    },
    "build": {
      "number": "0"
    },
    "extra": {
      "feedstock-name": "openorbitaloptimizer",
      "recipe-maintainers": [
        "loriab"
      ]
    },
    "outputs": [
      {
        "build": {
          "run_exports": [
            "openorbitaloptimizer"
          ]
        },
        "name": "openorbitaloptimizer",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "cxx_compiler_stub",
            "cmake",
            "ninja"
          ],
          "host": [
            "armadillo"
          ]
        },
        "script": "build-cxx.sh",
        "test": {
          "commands": [
            "test -f $PREFIX/include/openorbitaloptimizer/scfsolver.hpp",
            "test -f $PREFIX/include/openorbitaloptimizer/cg_optimizer.hpp",
            "test -f $PREFIX/share/cmake/OpenOrbitalOptimizer/OpenOrbitalOptimizerConfig.cmake",
            "test -f $PREFIX/share/cmake/OpenOrbitalOptimizer/OpenOrbitalOptimizerTargets.cmake",
            "cd tests",
            "cmake -S. -Bbuild -GNinja -DCMAKE_PREFIX_PATH=\"${PREFIX}\"",
            "cmake --build build",
            "./build/atomtest --Z 8 --xfunc GGA_X_PBE --cfunc GGA_C_PBE --M 3 --sto 0 --basis \"cc-pvdz.json\""
          ],
          "files": [
            "tests/CMakeLists.txt"
          ],
          "requires": [
            "cxx_compiler_stub",
            "cmake",
            "ninja",
            "libxc-c",
            "nlohmann_json",
            "integratorxx"
          ],
          "source_files": [
            "tests/atomicsolver.hpp",
            "tests/atomtest.cpp",
            "tests/cc-pvdz.json",
            "tests/cmdline.h"
          ]
        }
      }
    ],
    "package": {
      "name": "openorbitaloptimizer-split",
      "version": "0.2.0"
    },
    "schema_version": 0,
    "source": {
      "sha256": "0ef79d0881403c6f0480e269d319e482f1ce32ddc79e49b717468b14ce4d07c0",
      "url": "https://github.com/SusiLehtola/OpenOrbitalOptimizer/archive/v0.2.0.tar.gz"
    }
  },
  "osx_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "ninja"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "armadillo"
      ]
    },
    "run": {
      "__set__": true,
      "elements": []
    },
    "test": {
      "__set__": true,
      "elements": [
        "cmake",
        "cxx_compiler_stub",
        "integratorxx",
        "libxc-c",
        "ninja",
        "nlohmann_json"
      ]
    }
  },
  "osx_arm64_meta_yaml": {
    "about": {
      "description": "The OpenOrbitalOptimizer is general and reusable library aimed for orbital optimization problems\nthat arise with various methods in quantum chemistry, ranging from self-consistent field (SCF)\nmethods like Hartree-Fock (HF) and density functional theory (DFT) to more elaborate methods like\nmulticonfigurational self-consistent field theory, orbital-optimized coupled-cluster theory,\ngeneralized valence bond theories, etc. At the moment, the library only does Roothaan-type SCF\nfor HF and DFT calculations, but general algorithms for direct minimization on the Grassmann and\nStiefel manifolds are forthcoming.\n",
      "dev_url": "https://github.com/SusiLehtola/OpenOrbitalOptimizer",
      "home": "https://github.com/SusiLehtola/OpenOrbitalOptimizer",
      "license": "MPL-2.0",
      "license_family": "MOZILLA",
      "license_file": "LICENSE",
      "license_url": "https://opensource.org/licenses/MPL-2.0",
      "summary": "S. Lehtola's general library for orbital optimization problems in quantum chemistry"
    },
    "build": {
      "number": "0"
    },
    "extra": {
      "feedstock-name": "openorbitaloptimizer",
      "recipe-maintainers": [
        "loriab"
      ]
    },
    "outputs": [
      {
        "build": {
          "run_exports": [
            "openorbitaloptimizer"
          ]
        },
        "name": "openorbitaloptimizer",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "cxx_compiler_stub",
            "cmake",
            "ninja"
          ],
          "host": [
            "armadillo"
          ]
        },
        "script": "build-cxx.sh",
        "test": {
          "commands": [
            "test -f $PREFIX/include/openorbitaloptimizer/scfsolver.hpp",
            "test -f $PREFIX/include/openorbitaloptimizer/cg_optimizer.hpp",
            "test -f $PREFIX/share/cmake/OpenOrbitalOptimizer/OpenOrbitalOptimizerConfig.cmake",
            "test -f $PREFIX/share/cmake/OpenOrbitalOptimizer/OpenOrbitalOptimizerTargets.cmake",
            "cd tests",
            "cmake -S. -Bbuild -GNinja -DCMAKE_PREFIX_PATH=\"${PREFIX}\"",
            "cmake --build build",
            "./build/atomtest --Z 8 --xfunc GGA_X_PBE --cfunc GGA_C_PBE --M 3 --sto 0 --basis \"cc-pvdz.json\""
          ],
          "files": [
            "tests/CMakeLists.txt"
          ],
          "requires": [
            "cxx_compiler_stub",
            "cmake",
            "ninja",
            "libxc-c",
            "nlohmann_json",
            "integratorxx"
          ],
          "source_files": [
            "tests/atomicsolver.hpp",
            "tests/atomtest.cpp",
            "tests/cc-pvdz.json",
            "tests/cmdline.h"
          ]
        }
      }
    ],
    "package": {
      "name": "openorbitaloptimizer-split",
      "version": "0.2.0"
    },
    "schema_version": 0,
    "source": {
      "sha256": "0ef79d0881403c6f0480e269d319e482f1ce32ddc79e49b717468b14ce4d07c0",
      "url": "https://github.com/SusiLehtola/OpenOrbitalOptimizer/archive/v0.2.0.tar.gz"
    }
  },
  "osx_arm64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "ninja"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "armadillo"
      ]
    },
    "run": {
      "__set__": true,
      "elements": []
    },
    "test": {
      "__set__": true,
      "elements": [
        "cmake",
        "cxx_compiler_stub",
        "integratorxx",
        "libxc-c",
        "ninja",
        "nlohmann_json"
      ]
    }
  },
  "outputs_names": {
    "__set__": true,
    "elements": [
      "openorbitaloptimizer"
    ]
  },
  "parsing_error": false,
  "platforms": [
    "linux_64",
    "osx_64",
    "osx_arm64",
    "win_64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/openorbitaloptimizer.json"
  },
  "raw_meta_yaml": "{% set name = \"OpenOrbitalOptimizer\" %}\n{% set version = \"0.2.0\" %}\n\npackage:\n  name: {{ name|lower }}-split\n  version: {{ version }}\n\nsource:\n  url: https://github.com/SusiLehtola/{{ name }}/archive/v{{ version }}.tar.gz\n  sha256: 0ef79d0881403c6f0480e269d319e482f1ce32ddc79e49b717468b14ce4d07c0\n\nbuild:\n  number: 0\n\n# multi-output recipe is weird for single output (not to mention a header-only output), but it is\n#   preparation for a separate python output with compiled extension. (I've done these before --\n#   see ambit, gdma, libefp, libxc, etc.)\noutputs:\n  - name: openorbitaloptimizer\n    script: build-cxx.sh                                                       # [unix]\n    script: bld-cxx.bat                                                        # [win]\n    build:\n      run_exports:\n        - {{ pin_subpackage('openorbitaloptimizer', max_pin='x.x') }}\n    requirements:\n      build:\n        - {{ stdlib(\"c\") }}\n        - {{ compiler('cxx') }}\n        - cmake\n        - ninja\n      host:\n        - armadillo\n    test:\n      files:\n        - tests/CMakeLists.txt\n      source_files:\n        - tests/atomicsolver.hpp\n        - tests/atomtest.cpp\n        - tests/cc-pvdz.json\n        - tests/cmdline.h\n      requires:\n        - {{ compiler('cxx') }}\n        - cmake\n        - ninja\n        - libxc-c\n        - nlohmann_json\n        - integratorxx\n        - liblapack * *mkl                                                     # [linux]\n        - libblas * *netlib                                                    # [win]    # armadillo+win missing blas.lib w/o this\n        - liblapack * *netlib                                                  # [win]\n      commands:\n        # Verify library (skip, as header-only)\n        # Verify accessories\n        - test -f $PREFIX/include/openorbitaloptimizer/scfsolver.hpp           # [unix]\n        - test -f $PREFIX/include/openorbitaloptimizer/cg_optimizer.hpp        # [unix]\n        - test -f $PREFIX/share/cmake/OpenOrbitalOptimizer/OpenOrbitalOptimizerConfig.cmake  # [unix]\n        - test -f $PREFIX/share/cmake/OpenOrbitalOptimizer/OpenOrbitalOptimizerTargets.cmake  # [unix]\n        - if not exist %PREFIX%\\\\Library\\\\include\\\\openorbitaloptimizer\\\\scfsolver.hpp exit 1  # [win]\n        - if not exist %PREFIX%\\\\Library\\\\include\\\\openorbitaloptimizer\\\\cg_optimizer.hpp exit 1  # [win]\n        - if not exist %PREFIX%\\\\Library\\\\OpenOrbitalOptimizer\\\\CMake\\\\OpenOrbitalOptimizerConfig.cmake exit 1  # [win]\n        - if not exist %PREFIX%\\\\Library\\\\OpenOrbitalOptimizer\\\\CMake\\\\OpenOrbitalOptimizerTargets.cmake exit 1  # [win]\n        # Actually test\n        - cd tests\n        - set \"LDFLAGS=%LDFLAGS:/link =%\"                                      # [win]\n        - echo \"%LDFLAGS%\"                                                     # [win]\n        - cmake -S. -Bbuild -GNinja -DCMAKE_PREFIX_PATH=\"${PREFIX}\"            # [unix]\n        - cmake -S. -Bbuild -GNinja -DCMAKE_PREFIX_PATH=\"%LIBRARY_PREFIX%\" -DCMAKE_CXX_COMPILER=clang-cl -DCMAKE_BUILD_TYPE=Release\"  # [win]\n        - cmake --build build\n        - ./build/atomtest --Z 8 --xfunc GGA_X_PBE --cfunc GGA_C_PBE --M 3 --sto 0 --basis \"cc-pvdz.json\"  # [unix]\n        - build\\\\atomtest.exe --Z 8 --xfunc GGA_X_PBE --cfunc GGA_C_PBE --M 3 --sto 0 --basis \"cc-pvdz.json\"  # [win]\n\nabout:\n  home: https://github.com/SusiLehtola/OpenOrbitalOptimizer\n  dev_url: https://github.com/SusiLehtola/OpenOrbitalOptimizer\n  # doc_url:\n  license: MPL-2.0\n  license_url: https://opensource.org/licenses/MPL-2.0\n  license_file: LICENSE\n  license_family: MOZILLA\n  summary: \"S. Lehtola's general library for orbital optimization problems in quantum chemistry\"\n  description: |\n    The OpenOrbitalOptimizer is general and reusable library aimed for orbital optimization problems\n    that arise with various methods in quantum chemistry, ranging from self-consistent field (SCF)\n    methods like Hartree-Fock (HF) and density functional theory (DFT) to more elaborate methods like\n    multiconfigurational self-consistent field theory, orbital-optimized coupled-cluster theory,\n    generalized valence bond theories, etc. At the moment, the library only does Roothaan-type SCF\n    for HF and DFT calculations, but general algorithms for direct minimization on the Grassmann and\n    Stiefel manifolds are forthcoming.\n\nextra:\n  feedstock-name: openorbitaloptimizer\n  recipe-maintainers:\n    - loriab\n    # - susilehtola\n\n# Notes\n\n# * to run ctests in build phase, add these back\n#      build/ignore_run_exports:\n#        - libxc-c\n#        - nlohmann_json\n#        - integratorxx\n#      requirements/host:\n#        - libblas * *netlib                                                    # [win]    # armadillo+win missing blas.lib w/o this\n#        - liblapack * *netlib                                                  # [win]\n#        - libblas * *mkl                                                       # [not win]\n#        - libxc-c                                                                         # testing\n#        - nlohmann_json                                                                   # testing\n#        - integratorxx                                                                    # testing\n",
  "req": {
    "__set__": true,
    "elements": [
      "armadillo",
      "c_stdlib_stub",
      "cmake",
      "cxx_compiler_stub",
      "ninja"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "ninja"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "armadillo",
        "c_stdlib_stub",
        "cxx_compiler_stub"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "c_stdlib_stub",
        "cxx_compiler_stub"
      ]
    },
    "test": {
      "__set__": true,
      "elements": [
        "cmake",
        "cxx_compiler_stub",
        "integratorxx",
        "libblas",
        "liblapack",
        "libxc-c",
        "ninja",
        "nlohmann_json"
      ]
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "ninja"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "armadillo"
      ]
    },
    "run": {
      "__set__": true,
      "elements": []
    },
    "test": {
      "__set__": true,
      "elements": [
        "cmake",
        "cxx_compiler_stub",
        "integratorxx",
        "libblas * *netlib",
        "liblapack * *mkl",
        "liblapack * *netlib",
        "libxc-c",
        "ninja",
        "nlohmann_json"
      ]
    }
  },
  "url": "https://github.com/SusiLehtola/OpenOrbitalOptimizer/archive/v0.2.0.tar.gz",
  "version": "0.2.0",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/openorbitaloptimizer.json"
  },
  "win_64_meta_yaml": {
    "about": {
      "description": "The OpenOrbitalOptimizer is general and reusable library aimed for orbital optimization problems\nthat arise with various methods in quantum chemistry, ranging from self-consistent field (SCF)\nmethods like Hartree-Fock (HF) and density functional theory (DFT) to more elaborate methods like\nmulticonfigurational self-consistent field theory, orbital-optimized coupled-cluster theory,\ngeneralized valence bond theories, etc. At the moment, the library only does Roothaan-type SCF\nfor HF and DFT calculations, but general algorithms for direct minimization on the Grassmann and\nStiefel manifolds are forthcoming.\n",
      "dev_url": "https://github.com/SusiLehtola/OpenOrbitalOptimizer",
      "home": "https://github.com/SusiLehtola/OpenOrbitalOptimizer",
      "license": "MPL-2.0",
      "license_family": "MOZILLA",
      "license_file": "LICENSE",
      "license_url": "https://opensource.org/licenses/MPL-2.0",
      "summary": "S. Lehtola's general library for orbital optimization problems in quantum chemistry"
    },
    "build": {
      "number": "0"
    },
    "extra": {
      "feedstock-name": "openorbitaloptimizer",
      "recipe-maintainers": [
        "loriab"
      ]
    },
    "outputs": [
      {
        "build": {
          "run_exports": [
            "openorbitaloptimizer"
          ]
        },
        "name": "openorbitaloptimizer",
        "requirements": {
          "build": [
            "c_stdlib_stub",
            "cxx_compiler_stub",
            "cmake",
            "ninja"
          ],
          "host": [
            "armadillo"
          ]
        },
        "script": "bld-cxx.bat",
        "test": {
          "commands": [
            "if not exist %PREFIX%\\\\Library\\\\include\\\\openorbitaloptimizer\\\\scfsolver.hpp exit 1",
            "if not exist %PREFIX%\\\\Library\\\\include\\\\openorbitaloptimizer\\\\cg_optimizer.hpp exit 1",
            "if not exist %PREFIX%\\\\Library\\\\OpenOrbitalOptimizer\\\\CMake\\\\OpenOrbitalOptimizerConfig.cmake exit 1",
            "if not exist %PREFIX%\\\\Library\\\\OpenOrbitalOptimizer\\\\CMake\\\\OpenOrbitalOptimizerTargets.cmake exit 1",
            "cd tests",
            "set \"LDFLAGS=%LDFLAGS:/link =%\"",
            "echo \"%LDFLAGS%\"",
            "cmake -S. -Bbuild -GNinja -DCMAKE_PREFIX_PATH=\"%LIBRARY_PREFIX%\" -DCMAKE_CXX_COMPILER=clang-cl -DCMAKE_BUILD_TYPE=Release\"",
            "cmake --build build",
            "build\\\\atomtest.exe --Z 8 --xfunc GGA_X_PBE --cfunc GGA_C_PBE --M 3 --sto 0 --basis \"cc-pvdz.json\""
          ],
          "files": [
            "tests/CMakeLists.txt"
          ],
          "requires": [
            "cxx_compiler_stub",
            "cmake",
            "ninja",
            "libxc-c",
            "nlohmann_json",
            "integratorxx",
            "libblas * *netlib",
            "liblapack * *netlib"
          ],
          "source_files": [
            "tests/atomicsolver.hpp",
            "tests/atomtest.cpp",
            "tests/cc-pvdz.json",
            "tests/cmdline.h"
          ]
        }
      }
    ],
    "package": {
      "name": "openorbitaloptimizer-split",
      "version": "0.2.0"
    },
    "schema_version": 0,
    "source": {
      "sha256": "0ef79d0881403c6f0480e269d319e482f1ce32ddc79e49b717468b14ce4d07c0",
      "url": "https://github.com/SusiLehtola/OpenOrbitalOptimizer/archive/v0.2.0.tar.gz"
    }
  },
  "win_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "ninja"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "armadillo"
      ]
    },
    "run": {
      "__set__": true,
      "elements": []
    },
    "test": {
      "__set__": true,
      "elements": [
        "cmake",
        "cxx_compiler_stub",
        "integratorxx",
        "libblas",
        "liblapack",
        "libxc-c",
        "ninja",
        "nlohmann_json"
      ]
    }
  }
}