{
  "archived": false,
  "branch": "main",
  "conda-forge.yml": {
    "conda_build": {
      "error_overlinking": true
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    }
  },
  "feedstock_name": "r-cpprouting",
  "hash_type": "sha256",
  "linux_64_meta_yaml": {
    "about": {
      "home": "https://github.com/vlarmet/cppRouting",
      "license": "GPL-2.0-or-later",
      "license_family": "GPL2",
      "license_file": [
        "/lib/R/share/licenses/GPL-2"
      ],
      "summary": "Calculation of distances, shortest paths and isochrones on weighted graphs using several variants of Dijkstra algorithm. Proposed algorithms are unidirectional Dijkstra (Dijkstra, E. W. (1959) <doi:10.1007/BF01386390>), bidirectional Dijkstra (Goldberg, Andrew & Fonseca F. Werneck, Renato (2005) <https://archive.siam.org/meetings/alenex05/papers/03agoldberg.pdf>), A* search (P. E. Hart, N. J. Nilsson et B. Raphael (1968) <doi:10.1109/TSSC.1968.300136>), new bidirectional A* (Pijls & Post (2009) <https://repub.eur.nl/pub/16100/ei2009-10.pdf>), Contraction hierarchies (R. Geisberger, P. Sanders, D. Schultes and D. Delling (2008) <doi:10.1007/978-3-540-68552-4_24>), PHAST (D. Delling, A.Goldberg, A. Nowatzyk, R. Werneck (2011) <doi:10.1016/j.jpdc.2012.02.007>). Algorithms for solving the traffic assignment problem are All-or-Nothing assignment, Method of Successive Averages, Frank-Wolfe algorithm (M. Fukushima (1984) <doi:10.1016/0191-2615(84)90029-8>), Conjugate and Bi-Conjugate Frank-Wolfe algorithms (M. Mitradjieva, P. O. Lindberg (2012) <doi:10.1287/trsc.1120.0409>), Algorithm-B (R. B. Dial (2006) <doi:10.1016/j.trb.2006.02.008>)."
    },
    "build": {
      "missing_dso_whitelist": null,
      "number": "2",
      "rpaths": [
        "lib/R/lib/",
        "lib/"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "conda-forge/r",
        "cmkobel"
      ]
    },
    "package": {
      "name": "r-cpprouting",
      "version": "3.1"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "make"
      ],
      "host": [
        "r-base",
        "r-rcpp >=1.0.7",
        "r-rcppparallel",
        "r-rcppprogress",
        "r-data.table"
      ],
      "run": [
        "r-base",
        "r-rcpp >=1.0.7",
        "r-rcppparallel",
        "r-rcppprogress",
        "r-data.table"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "bed3a5545f4e8b2ad849735c499149a5ee668d032ec54eb9ce1e523ec53417d6",
      "url": [
        "https://cran.r-project.org/src/contrib/cppRouting_3.1.tar.gz",
        "https://cran.r-project.org/src/contrib/Archive/cppRouting/cppRouting_3.1.tar.gz"
      ]
    },
    "test": {
      "commands": [
        "$R -e \"library(cppRouting)\"",
        "$R -f test.R"
      ],
      "files": [
        "test.R"
      ]
    }
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "r-base",
        "r-data.table",
        "r-rcpp",
        "r-rcppparallel",
        "r-rcppprogress"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "r-base",
        "r-data.table",
        "r-rcpp",
        "r-rcppparallel",
        "r-rcppprogress"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "meta_yaml": {
    "about": {
      "home": "https://github.com/vlarmet/cppRouting",
      "license": "GPL-2.0-or-later",
      "license_family": "GPL2",
      "license_file": [
        "/lib/R/share/licenses/GPL-2"
      ],
      "summary": "Calculation of distances, shortest paths and isochrones on weighted graphs using several variants of Dijkstra algorithm. Proposed algorithms are unidirectional Dijkstra (Dijkstra, E. W. (1959) <doi:10.1007/BF01386390>), bidirectional Dijkstra (Goldberg, Andrew & Fonseca F. Werneck, Renato (2005) <https://archive.siam.org/meetings/alenex05/papers/03agoldberg.pdf>), A* search (P. E. Hart, N. J. Nilsson et B. Raphael (1968) <doi:10.1109/TSSC.1968.300136>), new bidirectional A* (Pijls & Post (2009) <https://repub.eur.nl/pub/16100/ei2009-10.pdf>), Contraction hierarchies (R. Geisberger, P. Sanders, D. Schultes and D. Delling (2008) <doi:10.1007/978-3-540-68552-4_24>), PHAST (D. Delling, A.Goldberg, A. Nowatzyk, R. Werneck (2011) <doi:10.1016/j.jpdc.2012.02.007>). Algorithms for solving the traffic assignment problem are All-or-Nothing assignment, Method of Successive Averages, Frank-Wolfe algorithm (M. Fukushima (1984) <doi:10.1016/0191-2615(84)90029-8>), Conjugate and Bi-Conjugate Frank-Wolfe algorithms (M. Mitradjieva, P. O. Lindberg (2012) <doi:10.1287/trsc.1120.0409>), Algorithm-B (R. B. Dial (2006) <doi:10.1016/j.trb.2006.02.008>)."
    },
    "build": {
      "missing_dso_whitelist": [
        "*/R.dll",
        "*/Rblas.dll",
        "*/Rlapack.dll",
        "*/tbb.dll",
        "*/RcppParallel.dll"
      ],
      "number": "2",
      "rpaths": [
        "lib/R/lib/",
        "lib/",
        "lib/R/library/RcppParallel/libs/"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "conda-forge/r",
        "cmkobel"
      ]
    },
    "package": {
      "name": "r-cpprouting",
      "version": "3.1"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "make",
        "m2w64_c_compiler_stub",
        "m2w64_cxx_compiler_stub",
        "filesystem",
        "sed",
        "coreutils",
        "zip"
      ],
      "host": [
        "r-base",
        "r-rcpp >=1.0.7",
        "r-rcppparallel",
        "r-rcppprogress",
        "r-data.table"
      ],
      "run": [
        "r-base",
        "r-rcpp >=1.0.7",
        "r-rcppparallel",
        "r-rcppprogress",
        "r-data.table"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "bed3a5545f4e8b2ad849735c499149a5ee668d032ec54eb9ce1e523ec53417d6",
      "url": [
        "https://cran.r-project.org/src/contrib/cppRouting_3.1.tar.gz",
        "https://cran.r-project.org/src/contrib/Archive/cppRouting/cppRouting_3.1.tar.gz"
      ]
    },
    "test": {
      "commands": [
        "$R -e \"library(cppRouting)\"",
        "$R -f test.R",
        "\"%R%\" -e \"library(cppRouting)",
        "\"%R%\" -f test.R"
      ],
      "files": [
        "test.R"
      ]
    }
  },
  "name": "r-cpprouting",
  "osx_64_meta_yaml": {
    "about": {
      "home": "https://github.com/vlarmet/cppRouting",
      "license": "GPL-2.0-or-later",
      "license_family": "GPL2",
      "license_file": [
        "/lib/R/share/licenses/GPL-2"
      ],
      "summary": "Calculation of distances, shortest paths and isochrones on weighted graphs using several variants of Dijkstra algorithm. Proposed algorithms are unidirectional Dijkstra (Dijkstra, E. W. (1959) <doi:10.1007/BF01386390>), bidirectional Dijkstra (Goldberg, Andrew & Fonseca F. Werneck, Renato (2005) <https://archive.siam.org/meetings/alenex05/papers/03agoldberg.pdf>), A* search (P. E. Hart, N. J. Nilsson et B. Raphael (1968) <doi:10.1109/TSSC.1968.300136>), new bidirectional A* (Pijls & Post (2009) <https://repub.eur.nl/pub/16100/ei2009-10.pdf>), Contraction hierarchies (R. Geisberger, P. Sanders, D. Schultes and D. Delling (2008) <doi:10.1007/978-3-540-68552-4_24>), PHAST (D. Delling, A.Goldberg, A. Nowatzyk, R. Werneck (2011) <doi:10.1016/j.jpdc.2012.02.007>). Algorithms for solving the traffic assignment problem are All-or-Nothing assignment, Method of Successive Averages, Frank-Wolfe algorithm (M. Fukushima (1984) <doi:10.1016/0191-2615(84)90029-8>), Conjugate and Bi-Conjugate Frank-Wolfe algorithms (M. Mitradjieva, P. O. Lindberg (2012) <doi:10.1287/trsc.1120.0409>), Algorithm-B (R. B. Dial (2006) <doi:10.1016/j.trb.2006.02.008>)."
    },
    "build": {
      "missing_dso_whitelist": [
        "*/libtbb.dylib"
      ],
      "number": "2",
      "rpaths": [
        "lib/R/lib/",
        "lib/",
        "lib/R/library/RcppParallel/libs/"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "conda-forge/r",
        "cmkobel"
      ]
    },
    "package": {
      "name": "r-cpprouting",
      "version": "3.1"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "make"
      ],
      "host": [
        "r-base",
        "r-rcpp >=1.0.7",
        "r-rcppparallel",
        "r-rcppprogress",
        "r-data.table"
      ],
      "run": [
        "r-base",
        "r-rcpp >=1.0.7",
        "r-rcppparallel",
        "r-rcppprogress",
        "r-data.table"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "bed3a5545f4e8b2ad849735c499149a5ee668d032ec54eb9ce1e523ec53417d6",
      "url": [
        "https://cran.r-project.org/src/contrib/cppRouting_3.1.tar.gz",
        "https://cran.r-project.org/src/contrib/Archive/cppRouting/cppRouting_3.1.tar.gz"
      ]
    },
    "test": {
      "commands": [
        "$R -e \"library(cppRouting)\"",
        "$R -f test.R"
      ],
      "files": [
        "test.R"
      ]
    }
  },
  "osx_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "r-base",
        "r-data.table",
        "r-rcpp",
        "r-rcppparallel",
        "r-rcppprogress"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "r-base",
        "r-data.table",
        "r-rcpp",
        "r-rcppparallel",
        "r-rcppprogress"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "outputs_names": {
    "__set__": true,
    "elements": [
      "r-cpprouting"
    ]
  },
  "parsing_error": false,
  "platforms": [
    "linux_64",
    "osx_64",
    "win_64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/r-cpprouting.json"
  },
  "raw_meta_yaml": "{% set version = '3.1' %}\n{% set posix = 'm2-' if win else '' %}\n\npackage:\n  name: r-cpprouting\n  version: {{ version|replace(\"-\", \"_\") }}\n\nsource:\n  url:\n    - {{ cran_mirror }}/src/contrib/cppRouting_{{ version }}.tar.gz\n    - {{ cran_mirror }}/src/contrib/Archive/cppRouting/cppRouting_{{ version }}.tar.gz\n  sha256: bed3a5545f4e8b2ad849735c499149a5ee668d032ec54eb9ce1e523ec53417d6\n\nbuild:\n  number: 2\n  rpaths:\n    - lib/R/lib/\n    - lib/\n    - lib/R/library/RcppParallel/libs/  # [osx]\n  missing_dso_whitelist:\n    - '*/R.dll'                         # [win]\n    - '*/Rblas.dll'                     # [win]\n    - '*/Rlapack.dll'                   # [win]\n    - '*/tbb.dll'                       # [win]\n    - '*/RcppParallel.dll'              # [win]\n    - '*/libtbb.dylib'                  # [osx]\n\nrequirements:\n  build:\n    - cross-r-base {{ r_base }}        # [build_platform != target_platform]\n    - {{ compiler('c') }}              # [not win]\n    - {{ stdlib(\"c\") }}\n    - {{ compiler('m2w64_c') }}        # [win]\n    - {{ compiler('cxx') }}            # [not win]\n    - {{ compiler('m2w64_cxx') }}      # [win]\n    - {{ posix }}filesystem            # [win]\n    - {{ posix }}make\n    - {{ posix }}sed                   # [win]\n    - {{ posix }}coreutils             # [win]\n    - {{ posix }}zip                   # [win]\n  host:\n    - r-base\n    - r-rcpp >=1.0.7\n    - r-rcppparallel\n    - r-rcppprogress\n    - r-data.table\n  run:\n    - r-base\n    - r-rcpp >=1.0.7\n    - r-rcppparallel\n    - r-rcppprogress\n    - r-data.table\n\ntest:\n  files:\n    - test.R\n  commands:\n    - $R -e \"library(cppRouting)\"         # [not win]\n    - $R -f test.R                        # [not win]\n    - \"\\\"%R%\\\" -e \\\"library(cppRouting)\"  # [win]\n    - \"\\\"%R%\\\" -f test.R\"                 # [win]\n    \n\nabout:\n  home: https://github.com/vlarmet/cppRouting\n  license: GPL-2.0-or-later\n  summary: Calculation of distances, shortest paths and isochrones on weighted graphs using several\n    variants of Dijkstra algorithm. Proposed algorithms are unidirectional Dijkstra\n    (Dijkstra, E. W. (1959) <doi:10.1007/BF01386390>), bidirectional Dijkstra (Goldberg,\n    Andrew & Fonseca F. Werneck, Renato (2005) <https://archive.siam.org/meetings/alenex05/papers/03agoldberg.pdf>),\n    A* search (P. E. Hart, N. J. Nilsson et B. Raphael (1968) <doi:10.1109/TSSC.1968.300136>),\n    new bidirectional A* (Pijls & Post (2009) <https://repub.eur.nl/pub/16100/ei2009-10.pdf>),\n    Contraction hierarchies (R. Geisberger, P. Sanders, D. Schultes and D. Delling (2008)\n    <doi:10.1007/978-3-540-68552-4_24>), PHAST (D. Delling, A.Goldberg, A. Nowatzyk,\n    R. Werneck (2011) <doi:10.1016/j.jpdc.2012.02.007>). Algorithms for solving the\n    traffic assignment problem are All-or-Nothing assignment, Method of Successive Averages,\n    Frank-Wolfe algorithm (M. Fukushima (1984) <doi:10.1016/0191-2615(84)90029-8>),\n    Conjugate and Bi-Conjugate Frank-Wolfe algorithms (M. Mitradjieva, P. O. Lindberg\n    (2012) <doi:10.1287/trsc.1120.0409>), Algorithm-B (R. B. Dial (2006) <doi:10.1016/j.trb.2006.02.008>).\n  license_family: GPL2\n  license_file:\n    - '{{ environ[\"PREFIX\"] }}/lib/R/share/licenses/GPL-2'\n\nextra:\n  recipe-maintainers:\n    - conda-forge/r\n    - cmkobel\n",
  "req": {
    "__set__": true,
    "elements": [
      "c_compiler_stub",
      "c_stdlib_stub",
      "coreutils",
      "cxx_compiler_stub",
      "filesystem",
      "m2w64_c_compiler_stub",
      "m2w64_cxx_compiler_stub",
      "make",
      "r-base",
      "r-data.table",
      "r-rcpp",
      "r-rcppparallel",
      "r-rcppprogress",
      "sed",
      "zip"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "coreutils",
        "cxx_compiler_stub",
        "filesystem",
        "m2w64_c_compiler_stub",
        "m2w64_cxx_compiler_stub",
        "make",
        "sed",
        "zip"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "r-base",
        "r-data.table",
        "r-rcpp",
        "r-rcppparallel",
        "r-rcppprogress"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "r-base",
        "r-data.table",
        "r-rcpp",
        "r-rcppparallel",
        "r-rcppprogress"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "coreutils",
        "cxx_compiler_stub",
        "filesystem",
        "m2w64_c_compiler_stub",
        "m2w64_cxx_compiler_stub",
        "make",
        "sed",
        "zip"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "r-base",
        "r-data.table",
        "r-rcpp >=1.0.7",
        "r-rcppparallel",
        "r-rcppprogress"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "r-base",
        "r-data.table",
        "r-rcpp >=1.0.7",
        "r-rcppparallel",
        "r-rcppprogress"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "url": [
    "https://cran.r-project.org/src/contrib/cppRouting_3.1.tar.gz",
    "https://cran.r-project.org/src/contrib/Archive/cppRouting/cppRouting_3.1.tar.gz",
    "https://cran.r-project.org/src/contrib/cppRouting_3.1.tar.gz",
    "https://cran.r-project.org/src/contrib/Archive/cppRouting/cppRouting_3.1.tar.gz",
    "https://cran.r-project.org/src/contrib/cppRouting_3.1.tar.gz",
    "https://cran.r-project.org/src/contrib/Archive/cppRouting/cppRouting_3.1.tar.gz"
  ],
  "version": "3.1",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/r-cpprouting.json"
  },
  "win_64_meta_yaml": {
    "about": {
      "home": "https://github.com/vlarmet/cppRouting",
      "license": "GPL-2.0-or-later",
      "license_family": "GPL2",
      "license_file": [
        "/lib/R/share/licenses/GPL-2"
      ],
      "summary": "Calculation of distances, shortest paths and isochrones on weighted graphs using several variants of Dijkstra algorithm. Proposed algorithms are unidirectional Dijkstra (Dijkstra, E. W. (1959) <doi:10.1007/BF01386390>), bidirectional Dijkstra (Goldberg, Andrew & Fonseca F. Werneck, Renato (2005) <https://archive.siam.org/meetings/alenex05/papers/03agoldberg.pdf>), A* search (P. E. Hart, N. J. Nilsson et B. Raphael (1968) <doi:10.1109/TSSC.1968.300136>), new bidirectional A* (Pijls & Post (2009) <https://repub.eur.nl/pub/16100/ei2009-10.pdf>), Contraction hierarchies (R. Geisberger, P. Sanders, D. Schultes and D. Delling (2008) <doi:10.1007/978-3-540-68552-4_24>), PHAST (D. Delling, A.Goldberg, A. Nowatzyk, R. Werneck (2011) <doi:10.1016/j.jpdc.2012.02.007>). Algorithms for solving the traffic assignment problem are All-or-Nothing assignment, Method of Successive Averages, Frank-Wolfe algorithm (M. Fukushima (1984) <doi:10.1016/0191-2615(84)90029-8>), Conjugate and Bi-Conjugate Frank-Wolfe algorithms (M. Mitradjieva, P. O. Lindberg (2012) <doi:10.1287/trsc.1120.0409>), Algorithm-B (R. B. Dial (2006) <doi:10.1016/j.trb.2006.02.008>)."
    },
    "build": {
      "missing_dso_whitelist": [
        "*/R.dll",
        "*/Rblas.dll",
        "*/Rlapack.dll",
        "*/tbb.dll",
        "*/RcppParallel.dll"
      ],
      "number": "2",
      "rpaths": [
        "lib/R/lib/",
        "lib/"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "conda-forge/r",
        "cmkobel"
      ]
    },
    "package": {
      "name": "r-cpprouting",
      "version": "3.1"
    },
    "requirements": {
      "build": [
        "c_stdlib_stub",
        "m2w64_c_compiler_stub",
        "m2w64_cxx_compiler_stub",
        "filesystem",
        "make",
        "sed",
        "coreutils",
        "zip"
      ],
      "host": [
        "r-base",
        "r-rcpp >=1.0.7",
        "r-rcppparallel",
        "r-rcppprogress",
        "r-data.table"
      ],
      "run": [
        "r-base",
        "r-rcpp >=1.0.7",
        "r-rcppparallel",
        "r-rcppprogress",
        "r-data.table"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "bed3a5545f4e8b2ad849735c499149a5ee668d032ec54eb9ce1e523ec53417d6",
      "url": [
        "https://cran.r-project.org/src/contrib/cppRouting_3.1.tar.gz",
        "https://cran.r-project.org/src/contrib/Archive/cppRouting/cppRouting_3.1.tar.gz"
      ]
    },
    "test": {
      "commands": [
        "\"%R%\" -e \"library(cppRouting)",
        "\"%R%\" -f test.R"
      ],
      "files": [
        "test.R"
      ]
    }
  },
  "win_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_stdlib_stub",
        "coreutils",
        "filesystem",
        "m2w64_c_compiler_stub",
        "m2w64_cxx_compiler_stub",
        "make",
        "sed",
        "zip"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "r-base",
        "r-data.table",
        "r-rcpp",
        "r-rcppparallel",
        "r-rcppprogress"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "r-base",
        "r-data.table",
        "r-rcpp",
        "r-rcppparallel",
        "r-rcppprogress"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  }
}