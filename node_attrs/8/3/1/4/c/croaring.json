{
  "archived": false,
  "branch": "main",
  "conda-forge.yml": {
    "bot": {
      "automerge": true
    },
    "build_platform": {
      "linux_aarch64": "linux_64",
      "osx_arm64": "osx_64"
    },
    "conda_build": {
      "pkg_format": "2"
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    },
    "test": "native_and_emulated"
  },
  "feedstock_name": "croaring",
  "hash_type": "sha256",
  "linux_64_meta_yaml": {
    "about": {
      "home": "https://github.com/RoaringBitmap/CRoaring",
      "license": "Apache-2.0",
      "license_file": "LICENSE",
      "summary": "Portable Roaring bitmaps in C (and C++) with full support for your favorite compiler (GNU GCC, LLVM's clang, Visual Studio).\nIncluded in the Awesome C list of open source C software.\n"
    },
    "build": {
      "number": "0",
      "run_exports": [
        "croaring"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "bdice",
        "cumbof"
      ]
    },
    "package": {
      "name": "croaring",
      "version": "4.3.11"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "cxx_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "ninja"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "acd3a17e6c95acf3154d60c38c90e927e6c531805bc740a040fa111819af380e",
      "url": "https://github.com/RoaringBitmap/CRoaring/archive/v4.3.11.tar.gz"
    },
    "test": {
      "commands": [
        "test -f $PREFIX/include/roaring/array_util.h",
        "test -f $PREFIX/include/roaring/bitset_util.h",
        "test -f $PREFIX/include/roaring/containers/array.h",
        "test -f $PREFIX/include/roaring/containers/bitset.h",
        "test -f $PREFIX/include/roaring/containers/containers.h",
        "test -f $PREFIX/include/roaring/containers/convert.h",
        "test -f $PREFIX/include/roaring/containers/mixed_andnot.h",
        "test -f $PREFIX/include/roaring/containers/mixed_equal.h",
        "test -f $PREFIX/include/roaring/containers/mixed_intersection.h",
        "test -f $PREFIX/include/roaring/containers/mixed_negation.h",
        "test -f $PREFIX/include/roaring/containers/mixed_subset.h",
        "test -f $PREFIX/include/roaring/containers/mixed_union.h",
        "test -f $PREFIX/include/roaring/containers/mixed_xor.h",
        "test -f $PREFIX/include/roaring/containers/perfparameters.h",
        "test -f $PREFIX/include/roaring/containers/run.h",
        "test -f $PREFIX/include/roaring/misc/configreport.h",
        "test -f $PREFIX/include/roaring/portability.h",
        "test -f $PREFIX/include/roaring/roaring.h",
        "test -f $PREFIX/include/roaring/roaring_array.h",
        "test -f $PREFIX/include/roaring/roaring_types.h",
        "test -f $PREFIX/include/roaring/roaring_version.h",
        "test -f $PREFIX/include/roaring/utilasm.h",
        "test -f $PREFIX/lib/libroaring${SHLIB_EXT}"
      ]
    }
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "ninja"
      ]
    },
    "host": {
      "__set__": true,
      "elements": []
    },
    "run": {
      "__set__": true,
      "elements": []
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "linux_aarch64_meta_yaml": {
    "about": {
      "home": "https://github.com/RoaringBitmap/CRoaring",
      "license": "Apache-2.0",
      "license_file": "LICENSE",
      "summary": "Portable Roaring bitmaps in C (and C++) with full support for your favorite compiler (GNU GCC, LLVM's clang, Visual Studio).\nIncluded in the Awesome C list of open source C software.\n"
    },
    "build": {
      "number": "0",
      "run_exports": [
        "croaring"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "bdice",
        "cumbof"
      ]
    },
    "package": {
      "name": "croaring",
      "version": "4.3.11"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "cxx_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "ninja"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "acd3a17e6c95acf3154d60c38c90e927e6c531805bc740a040fa111819af380e",
      "url": "https://github.com/RoaringBitmap/CRoaring/archive/v4.3.11.tar.gz"
    },
    "test": {
      "commands": [
        "test -f $PREFIX/include/roaring/array_util.h",
        "test -f $PREFIX/include/roaring/bitset_util.h",
        "test -f $PREFIX/include/roaring/containers/array.h",
        "test -f $PREFIX/include/roaring/containers/bitset.h",
        "test -f $PREFIX/include/roaring/containers/containers.h",
        "test -f $PREFIX/include/roaring/containers/convert.h",
        "test -f $PREFIX/include/roaring/containers/mixed_andnot.h",
        "test -f $PREFIX/include/roaring/containers/mixed_equal.h",
        "test -f $PREFIX/include/roaring/containers/mixed_intersection.h",
        "test -f $PREFIX/include/roaring/containers/mixed_negation.h",
        "test -f $PREFIX/include/roaring/containers/mixed_subset.h",
        "test -f $PREFIX/include/roaring/containers/mixed_union.h",
        "test -f $PREFIX/include/roaring/containers/mixed_xor.h",
        "test -f $PREFIX/include/roaring/containers/perfparameters.h",
        "test -f $PREFIX/include/roaring/containers/run.h",
        "test -f $PREFIX/include/roaring/misc/configreport.h",
        "test -f $PREFIX/include/roaring/portability.h",
        "test -f $PREFIX/include/roaring/roaring.h",
        "test -f $PREFIX/include/roaring/roaring_array.h",
        "test -f $PREFIX/include/roaring/roaring_types.h",
        "test -f $PREFIX/include/roaring/roaring_version.h",
        "test -f $PREFIX/include/roaring/utilasm.h",
        "test -f $PREFIX/lib/libroaring${SHLIB_EXT}"
      ]
    }
  },
  "linux_aarch64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "ninja"
      ]
    },
    "host": {
      "__set__": true,
      "elements": []
    },
    "run": {
      "__set__": true,
      "elements": []
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "meta_yaml": {
    "about": {
      "home": "https://github.com/RoaringBitmap/CRoaring",
      "license": "Apache-2.0",
      "license_file": "LICENSE",
      "summary": "Portable Roaring bitmaps in C (and C++) with full support for your favorite compiler (GNU GCC, LLVM's clang, Visual Studio).\nIncluded in the Awesome C list of open source C software.\n"
    },
    "build": {
      "number": "0",
      "run_exports": [
        "croaring"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "bdice",
        "cumbof"
      ]
    },
    "package": {
      "name": "croaring",
      "version": "4.3.11"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "cxx_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "ninja"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "acd3a17e6c95acf3154d60c38c90e927e6c531805bc740a040fa111819af380e",
      "url": "https://github.com/RoaringBitmap/CRoaring/archive/v4.3.11.tar.gz"
    },
    "test": {
      "commands": [
        "test -f $PREFIX/include/roaring/array_util.h",
        "test -f $PREFIX/include/roaring/bitset_util.h",
        "test -f $PREFIX/include/roaring/containers/array.h",
        "test -f $PREFIX/include/roaring/containers/bitset.h",
        "test -f $PREFIX/include/roaring/containers/containers.h",
        "test -f $PREFIX/include/roaring/containers/convert.h",
        "test -f $PREFIX/include/roaring/containers/mixed_andnot.h",
        "test -f $PREFIX/include/roaring/containers/mixed_equal.h",
        "test -f $PREFIX/include/roaring/containers/mixed_intersection.h",
        "test -f $PREFIX/include/roaring/containers/mixed_negation.h",
        "test -f $PREFIX/include/roaring/containers/mixed_subset.h",
        "test -f $PREFIX/include/roaring/containers/mixed_union.h",
        "test -f $PREFIX/include/roaring/containers/mixed_xor.h",
        "test -f $PREFIX/include/roaring/containers/perfparameters.h",
        "test -f $PREFIX/include/roaring/containers/run.h",
        "test -f $PREFIX/include/roaring/misc/configreport.h",
        "test -f $PREFIX/include/roaring/portability.h",
        "test -f $PREFIX/include/roaring/roaring.h",
        "test -f $PREFIX/include/roaring/roaring_array.h",
        "test -f $PREFIX/include/roaring/roaring_types.h",
        "test -f $PREFIX/include/roaring/roaring_version.h",
        "test -f $PREFIX/include/roaring/utilasm.h",
        "test -f $PREFIX/lib/libroaring${SHLIB_EXT}",
        "if not exist %LIBRARY_INC%\\roaring\\array_util.h exit 1",
        "if not exist %LIBRARY_INC%\\roaring\\bitset_util.h exit 1",
        "if not exist %LIBRARY_INC%\\roaring\\containers\\array.h exit 1",
        "if not exist %LIBRARY_INC%\\roaring\\containers\\bitset.h exit 1",
        "if not exist %LIBRARY_INC%\\roaring\\containers\\containers.h exit 1",
        "if not exist %LIBRARY_INC%\\roaring\\containers\\convert.h exit 1",
        "if not exist %LIBRARY_INC%\\roaring\\containers\\mixed_andnot.h exit 1",
        "if not exist %LIBRARY_INC%\\roaring\\containers\\mixed_equal.h exit 1",
        "if not exist %LIBRARY_INC%\\roaring\\containers\\mixed_intersection.h exit 1",
        "if not exist %LIBRARY_INC%\\roaring\\containers\\mixed_negation.h exit 1",
        "if not exist %LIBRARY_INC%\\roaring\\containers\\mixed_subset.h exit 1",
        "if not exist %LIBRARY_INC%\\roaring\\containers\\mixed_union.h exit 1",
        "if not exist %LIBRARY_INC%\\roaring\\containers\\mixed_xor.h exit 1",
        "if not exist %LIBRARY_INC%\\roaring\\containers\\perfparameters.h exit 1",
        "if not exist %LIBRARY_INC%\\roaring\\containers\\run.h exit 1",
        "if not exist %LIBRARY_INC%\\roaring\\misc\\configreport.h exit 1",
        "if not exist %LIBRARY_INC%\\roaring\\portability.h exit 1",
        "if not exist %LIBRARY_INC%\\roaring\\roaring.h exit 1",
        "if not exist %LIBRARY_INC%\\roaring\\roaring_array.h exit 1",
        "if not exist %LIBRARY_INC%\\roaring\\roaring_types.h exit 1",
        "if not exist %LIBRARY_INC%\\roaring\\roaring_version.h exit 1",
        "if not exist %LIBRARY_INC%\\roaring\\utilasm.h exit 1",
        "if not exist %LIBRARY_BIN%\\roaring.dll exit 1",
        "if not exist %LIBRARY_LIB%\\roaring.lib exit 1"
      ]
    }
  },
  "name": "croaring",
  "osx_64_meta_yaml": {
    "about": {
      "home": "https://github.com/RoaringBitmap/CRoaring",
      "license": "Apache-2.0",
      "license_file": "LICENSE",
      "summary": "Portable Roaring bitmaps in C (and C++) with full support for your favorite compiler (GNU GCC, LLVM's clang, Visual Studio).\nIncluded in the Awesome C list of open source C software.\n"
    },
    "build": {
      "number": "0",
      "run_exports": [
        "croaring"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "bdice",
        "cumbof"
      ]
    },
    "package": {
      "name": "croaring",
      "version": "4.3.11"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "cxx_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "ninja"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "acd3a17e6c95acf3154d60c38c90e927e6c531805bc740a040fa111819af380e",
      "url": "https://github.com/RoaringBitmap/CRoaring/archive/v4.3.11.tar.gz"
    },
    "test": {
      "commands": [
        "test -f $PREFIX/include/roaring/array_util.h",
        "test -f $PREFIX/include/roaring/bitset_util.h",
        "test -f $PREFIX/include/roaring/containers/array.h",
        "test -f $PREFIX/include/roaring/containers/bitset.h",
        "test -f $PREFIX/include/roaring/containers/containers.h",
        "test -f $PREFIX/include/roaring/containers/convert.h",
        "test -f $PREFIX/include/roaring/containers/mixed_andnot.h",
        "test -f $PREFIX/include/roaring/containers/mixed_equal.h",
        "test -f $PREFIX/include/roaring/containers/mixed_intersection.h",
        "test -f $PREFIX/include/roaring/containers/mixed_negation.h",
        "test -f $PREFIX/include/roaring/containers/mixed_subset.h",
        "test -f $PREFIX/include/roaring/containers/mixed_union.h",
        "test -f $PREFIX/include/roaring/containers/mixed_xor.h",
        "test -f $PREFIX/include/roaring/containers/perfparameters.h",
        "test -f $PREFIX/include/roaring/containers/run.h",
        "test -f $PREFIX/include/roaring/misc/configreport.h",
        "test -f $PREFIX/include/roaring/portability.h",
        "test -f $PREFIX/include/roaring/roaring.h",
        "test -f $PREFIX/include/roaring/roaring_array.h",
        "test -f $PREFIX/include/roaring/roaring_types.h",
        "test -f $PREFIX/include/roaring/roaring_version.h",
        "test -f $PREFIX/include/roaring/utilasm.h",
        "test -f $PREFIX/lib/libroaring${SHLIB_EXT}"
      ]
    }
  },
  "osx_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "ninja"
      ]
    },
    "host": {
      "__set__": true,
      "elements": []
    },
    "run": {
      "__set__": true,
      "elements": []
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "osx_arm64_meta_yaml": {
    "about": {
      "home": "https://github.com/RoaringBitmap/CRoaring",
      "license": "Apache-2.0",
      "license_file": "LICENSE",
      "summary": "Portable Roaring bitmaps in C (and C++) with full support for your favorite compiler (GNU GCC, LLVM's clang, Visual Studio).\nIncluded in the Awesome C list of open source C software.\n"
    },
    "build": {
      "number": "0",
      "run_exports": [
        "croaring"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "bdice",
        "cumbof"
      ]
    },
    "package": {
      "name": "croaring",
      "version": "4.3.11"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "cxx_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "ninja"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "acd3a17e6c95acf3154d60c38c90e927e6c531805bc740a040fa111819af380e",
      "url": "https://github.com/RoaringBitmap/CRoaring/archive/v4.3.11.tar.gz"
    },
    "test": {
      "commands": [
        "test -f $PREFIX/include/roaring/array_util.h",
        "test -f $PREFIX/include/roaring/bitset_util.h",
        "test -f $PREFIX/include/roaring/containers/array.h",
        "test -f $PREFIX/include/roaring/containers/bitset.h",
        "test -f $PREFIX/include/roaring/containers/containers.h",
        "test -f $PREFIX/include/roaring/containers/convert.h",
        "test -f $PREFIX/include/roaring/containers/mixed_andnot.h",
        "test -f $PREFIX/include/roaring/containers/mixed_equal.h",
        "test -f $PREFIX/include/roaring/containers/mixed_intersection.h",
        "test -f $PREFIX/include/roaring/containers/mixed_negation.h",
        "test -f $PREFIX/include/roaring/containers/mixed_subset.h",
        "test -f $PREFIX/include/roaring/containers/mixed_union.h",
        "test -f $PREFIX/include/roaring/containers/mixed_xor.h",
        "test -f $PREFIX/include/roaring/containers/perfparameters.h",
        "test -f $PREFIX/include/roaring/containers/run.h",
        "test -f $PREFIX/include/roaring/misc/configreport.h",
        "test -f $PREFIX/include/roaring/portability.h",
        "test -f $PREFIX/include/roaring/roaring.h",
        "test -f $PREFIX/include/roaring/roaring_array.h",
        "test -f $PREFIX/include/roaring/roaring_types.h",
        "test -f $PREFIX/include/roaring/roaring_version.h",
        "test -f $PREFIX/include/roaring/utilasm.h",
        "test -f $PREFIX/lib/libroaring${SHLIB_EXT}"
      ]
    }
  },
  "osx_arm64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "ninja"
      ]
    },
    "host": {
      "__set__": true,
      "elements": []
    },
    "run": {
      "__set__": true,
      "elements": []
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "outputs_names": {
    "__set__": true,
    "elements": [
      "croaring"
    ]
  },
  "parsing_error": false,
  "platforms": [
    "linux_64",
    "linux_aarch64",
    "osx_64",
    "osx_arm64",
    "win_64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/croaring.json"
  },
  "raw_meta_yaml": "{% set name = \"CRoaring\" %}\n{% set version = \"4.3.11\" %}\n{% set sha256 = \"acd3a17e6c95acf3154d60c38c90e927e6c531805bc740a040fa111819af380e\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://github.com/RoaringBitmap/CRoaring/archive/v{{ version }}.tar.gz\n  sha256: {{ sha256 }}\n\nbuild:\n  number: 0\n  run_exports:\n    - {{ pin_subpackage('croaring', max_pin='x.x.x') }}\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n    - {{ stdlib('c') }}\n    - cmake\n    - ninja\n\ntest:\n  commands:\n    # headers\n    - test -f $PREFIX/include/roaring/array_util.h                     # [unix]\n    - test -f $PREFIX/include/roaring/bitset_util.h                    # [unix]\n    - test -f $PREFIX/include/roaring/containers/array.h               # [unix]\n    - test -f $PREFIX/include/roaring/containers/bitset.h              # [unix]\n    - test -f $PREFIX/include/roaring/containers/containers.h          # [unix]\n    - test -f $PREFIX/include/roaring/containers/convert.h             # [unix]\n    - test -f $PREFIX/include/roaring/containers/mixed_andnot.h        # [unix]\n    - test -f $PREFIX/include/roaring/containers/mixed_equal.h         # [unix]\n    - test -f $PREFIX/include/roaring/containers/mixed_intersection.h  # [unix]\n    - test -f $PREFIX/include/roaring/containers/mixed_negation.h      # [unix]\n    - test -f $PREFIX/include/roaring/containers/mixed_subset.h        # [unix]\n    - test -f $PREFIX/include/roaring/containers/mixed_union.h         # [unix]\n    - test -f $PREFIX/include/roaring/containers/mixed_xor.h           # [unix]\n    - test -f $PREFIX/include/roaring/containers/perfparameters.h      # [unix]\n    - test -f $PREFIX/include/roaring/containers/run.h                 # [unix]\n    - test -f $PREFIX/include/roaring/misc/configreport.h              # [unix]\n    - test -f $PREFIX/include/roaring/portability.h                    # [unix]\n    - test -f $PREFIX/include/roaring/roaring.h                        # [unix]\n    - test -f $PREFIX/include/roaring/roaring_array.h                  # [unix]\n    - test -f $PREFIX/include/roaring/roaring_types.h                  # [unix]\n    - test -f $PREFIX/include/roaring/roaring_version.h                # [unix]\n    - test -f $PREFIX/include/roaring/utilasm.h                        # [unix]\n    - \"if not exist %LIBRARY_INC%\\\\roaring\\\\array_util.h exit 1\"                      # [win]\n    - \"if not exist %LIBRARY_INC%\\\\roaring\\\\bitset_util.h exit 1\"                     # [win]\n    - \"if not exist %LIBRARY_INC%\\\\roaring\\\\containers\\\\array.h exit 1\"               # [win]\n    - \"if not exist %LIBRARY_INC%\\\\roaring\\\\containers\\\\bitset.h exit 1\"              # [win]\n    - \"if not exist %LIBRARY_INC%\\\\roaring\\\\containers\\\\containers.h exit 1\"          # [win]\n    - \"if not exist %LIBRARY_INC%\\\\roaring\\\\containers\\\\convert.h exit 1\"             # [win]\n    - \"if not exist %LIBRARY_INC%\\\\roaring\\\\containers\\\\mixed_andnot.h exit 1\"        # [win]\n    - \"if not exist %LIBRARY_INC%\\\\roaring\\\\containers\\\\mixed_equal.h exit 1\"         # [win]\n    - \"if not exist %LIBRARY_INC%\\\\roaring\\\\containers\\\\mixed_intersection.h exit 1\"  # [win]\n    - \"if not exist %LIBRARY_INC%\\\\roaring\\\\containers\\\\mixed_negation.h exit 1\"      # [win]\n    - \"if not exist %LIBRARY_INC%\\\\roaring\\\\containers\\\\mixed_subset.h exit 1\"        # [win]\n    - \"if not exist %LIBRARY_INC%\\\\roaring\\\\containers\\\\mixed_union.h exit 1\"         # [win]\n    - \"if not exist %LIBRARY_INC%\\\\roaring\\\\containers\\\\mixed_xor.h exit 1\"           # [win]\n    - \"if not exist %LIBRARY_INC%\\\\roaring\\\\containers\\\\perfparameters.h exit 1\"      # [win]\n    - \"if not exist %LIBRARY_INC%\\\\roaring\\\\containers\\\\run.h exit 1\"                 # [win]\n    - \"if not exist %LIBRARY_INC%\\\\roaring\\\\misc\\\\configreport.h exit 1\"              # [win]\n    - \"if not exist %LIBRARY_INC%\\\\roaring\\\\portability.h exit 1\"                     # [win]\n    - \"if not exist %LIBRARY_INC%\\\\roaring\\\\roaring.h exit 1\"                         # [win]\n    - \"if not exist %LIBRARY_INC%\\\\roaring\\\\roaring_array.h exit 1\"                   # [win]\n    - \"if not exist %LIBRARY_INC%\\\\roaring\\\\roaring_types.h exit 1\"                   # [win]\n    - \"if not exist %LIBRARY_INC%\\\\roaring\\\\roaring_version.h exit 1\"                 # [win]\n    - \"if not exist %LIBRARY_INC%\\\\roaring\\\\utilasm.h exit 1\"                         # [win]\n\n    # shared libraries\n    - test -f $PREFIX/lib/libroaring${SHLIB_EXT}        # [unix]\n    - \"if not exist %LIBRARY_BIN%\\\\roaring.dll exit 1\"  # [win]\n\n    # static libraries\n    - \"if not exist %LIBRARY_LIB%\\\\roaring.lib exit 1\"  # [win]\n\nabout:\n  home: https://github.com/RoaringBitmap/CRoaring\n  license: Apache-2.0\n  license_file: LICENSE\n  summary: |\n    Portable Roaring bitmaps in C (and C++) with full support for your favorite compiler (GNU GCC, LLVM's clang, Visual Studio).\n    Included in the Awesome C list of open source C software.\n\nextra:\n  recipe-maintainers:\n    - bdice\n    - cumbof\n",
  "req": {
    "__set__": true,
    "elements": [
      "c_compiler_stub",
      "c_stdlib_stub",
      "cmake",
      "cxx_compiler_stub",
      "ninja"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "ninja"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "ninja"
      ]
    },
    "host": {
      "__set__": true,
      "elements": []
    },
    "run": {
      "__set__": true,
      "elements": []
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "url": "https://github.com/RoaringBitmap/CRoaring/archive/v4.3.11.tar.gz",
  "version": "4.3.11",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/croaring.json"
  },
  "win_64_meta_yaml": {
    "about": {
      "home": "https://github.com/RoaringBitmap/CRoaring",
      "license": "Apache-2.0",
      "license_file": "LICENSE",
      "summary": "Portable Roaring bitmaps in C (and C++) with full support for your favorite compiler (GNU GCC, LLVM's clang, Visual Studio).\nIncluded in the Awesome C list of open source C software.\n"
    },
    "build": {
      "number": "0",
      "run_exports": [
        "croaring"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "bdice",
        "cumbof"
      ]
    },
    "package": {
      "name": "croaring",
      "version": "4.3.11"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "cxx_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "ninja"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "acd3a17e6c95acf3154d60c38c90e927e6c531805bc740a040fa111819af380e",
      "url": "https://github.com/RoaringBitmap/CRoaring/archive/v4.3.11.tar.gz"
    },
    "test": {
      "commands": [
        "if not exist %LIBRARY_INC%\\roaring\\array_util.h exit 1",
        "if not exist %LIBRARY_INC%\\roaring\\bitset_util.h exit 1",
        "if not exist %LIBRARY_INC%\\roaring\\containers\\array.h exit 1",
        "if not exist %LIBRARY_INC%\\roaring\\containers\\bitset.h exit 1",
        "if not exist %LIBRARY_INC%\\roaring\\containers\\containers.h exit 1",
        "if not exist %LIBRARY_INC%\\roaring\\containers\\convert.h exit 1",
        "if not exist %LIBRARY_INC%\\roaring\\containers\\mixed_andnot.h exit 1",
        "if not exist %LIBRARY_INC%\\roaring\\containers\\mixed_equal.h exit 1",
        "if not exist %LIBRARY_INC%\\roaring\\containers\\mixed_intersection.h exit 1",
        "if not exist %LIBRARY_INC%\\roaring\\containers\\mixed_negation.h exit 1",
        "if not exist %LIBRARY_INC%\\roaring\\containers\\mixed_subset.h exit 1",
        "if not exist %LIBRARY_INC%\\roaring\\containers\\mixed_union.h exit 1",
        "if not exist %LIBRARY_INC%\\roaring\\containers\\mixed_xor.h exit 1",
        "if not exist %LIBRARY_INC%\\roaring\\containers\\perfparameters.h exit 1",
        "if not exist %LIBRARY_INC%\\roaring\\containers\\run.h exit 1",
        "if not exist %LIBRARY_INC%\\roaring\\misc\\configreport.h exit 1",
        "if not exist %LIBRARY_INC%\\roaring\\portability.h exit 1",
        "if not exist %LIBRARY_INC%\\roaring\\roaring.h exit 1",
        "if not exist %LIBRARY_INC%\\roaring\\roaring_array.h exit 1",
        "if not exist %LIBRARY_INC%\\roaring\\roaring_types.h exit 1",
        "if not exist %LIBRARY_INC%\\roaring\\roaring_version.h exit 1",
        "if not exist %LIBRARY_INC%\\roaring\\utilasm.h exit 1",
        "if not exist %LIBRARY_BIN%\\roaring.dll exit 1",
        "if not exist %LIBRARY_LIB%\\roaring.lib exit 1"
      ]
    }
  },
  "win_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cmake",
        "cxx_compiler_stub",
        "ninja"
      ]
    },
    "host": {
      "__set__": true,
      "elements": []
    },
    "run": {
      "__set__": true,
      "elements": []
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  }
}