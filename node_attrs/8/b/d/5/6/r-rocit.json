{
  "archived": false,
  "branch": "main",
  "conda-forge.yml": {
    "bot": {
      "automerge": true
    },
    "conda_build": {
      "pkg_format": "2"
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    }
  },
  "feedstock_hash": "491a4a10ae6ea21919e66e21418c218edda8457c",
  "feedstock_hash_ts": 1758585221,
  "feedstock_name": "r-rocit",
  "hash_type": "sha256",
  "linux_64_meta_yaml": {
    "about": {
      "home": "https://CRAN.R-project.org/package=ROCit",
      "license": "GPL-3.0-only",
      "license_family": "GPL3",
      "license_file": [
        "/lib/R/share/licenses/GPL-3"
      ],
      "summary": "Sensitivity (or recall or true positive rate), false positive rate, specificity, precision (or positive predictive value), negative predictive value, misclassification rate, accuracy, F-score- these are popular metrics for assessing performance of binary classifier for certain threshold. These metrics are calculated at certain threshold values. Receiver operating characteristic (ROC) curve is a common tool for assessing overall diagnostic ability of the binary classifier. Unlike depending on a certain threshold, area under ROC curve (also known as AUC), is a summary statistic about how well a binary classifier performs overall for the classification task. ROCit package provides flexibility to easily evaluate threshold-bound metrics. Also, ROC curve, along with AUC, can be obtained using different methods, such as empirical, binormal and non-parametric. ROCit encompasses a wide variety of methods for constructing confidence interval of ROC curve and AUC. ROCit also features the option of constructing empirical gains table, which is a handy tool for direct marketing. The package offers options for commonly used visualization, such as, ROC curve, KS plot, lift plot. Along with in-built default graphics setting, there are rooms for manual tweak by providing the necessary values as function arguments. ROCit is a powerful tool offering a range of things, yet it is very easy to use."
    },
    "build": {
      "noarch": "generic",
      "number": "2",
      "rpaths": [
        "lib/R/lib/",
        "lib/"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "conda-forge/r"
      ]
    },
    "package": {
      "name": "r-rocit",
      "version": "2.1.2"
    },
    "requirements": {
      "build": [],
      "host": [
        "r-base"
      ],
      "run": [
        "r-base"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "6ec6962d63e354f219a68d6aa27697322ec47573e09bd5d9e2466e4444e4479f",
      "url": [
        "https://cran.r-project.org/src/contrib/ROCit_2.1.2.tar.gz",
        "https://cran.r-project.org/src/contrib/Archive/ROCit/ROCit_2.1.2.tar.gz"
      ]
    },
    "test": {
      "commands": [
        "$R -e \"library('ROCit')\""
      ]
    }
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": []
    },
    "host": {
      "__set__": true,
      "elements": [
        "r-base"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "r-base"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "meta_yaml": {
    "about": {
      "home": "https://CRAN.R-project.org/package=ROCit",
      "license": "GPL-3.0-only",
      "license_family": "GPL3",
      "license_file": [
        "/lib/R/share/licenses/GPL-3"
      ],
      "summary": "Sensitivity (or recall or true positive rate), false positive rate, specificity, precision (or positive predictive value), negative predictive value, misclassification rate, accuracy, F-score- these are popular metrics for assessing performance of binary classifier for certain threshold. These metrics are calculated at certain threshold values. Receiver operating characteristic (ROC) curve is a common tool for assessing overall diagnostic ability of the binary classifier. Unlike depending on a certain threshold, area under ROC curve (also known as AUC), is a summary statistic about how well a binary classifier performs overall for the classification task. ROCit package provides flexibility to easily evaluate threshold-bound metrics. Also, ROC curve, along with AUC, can be obtained using different methods, such as empirical, binormal and non-parametric. ROCit encompasses a wide variety of methods for constructing confidence interval of ROC curve and AUC. ROCit also features the option of constructing empirical gains table, which is a handy tool for direct marketing. The package offers options for commonly used visualization, such as, ROC curve, KS plot, lift plot. Along with in-built default graphics setting, there are rooms for manual tweak by providing the necessary values as function arguments. ROCit is a powerful tool offering a range of things, yet it is very easy to use."
    },
    "build": {
      "noarch": "generic",
      "number": "2",
      "rpaths": [
        "lib/R/lib/",
        "lib/"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "conda-forge/r"
      ]
    },
    "package": {
      "name": "r-rocit",
      "version": "2.1.2"
    },
    "requirements": {
      "build": [],
      "host": [
        "r-base"
      ],
      "run": [
        "r-base"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "6ec6962d63e354f219a68d6aa27697322ec47573e09bd5d9e2466e4444e4479f",
      "url": [
        "https://cran.r-project.org/src/contrib/ROCit_2.1.2.tar.gz",
        "https://cran.r-project.org/src/contrib/Archive/ROCit/ROCit_2.1.2.tar.gz"
      ]
    },
    "test": {
      "commands": [
        "$R -e \"library('ROCit')\""
      ]
    }
  },
  "name": "r-rocit",
  "outputs_names": {
    "__set__": true,
    "elements": [
      "r-rocit"
    ]
  },
  "parsing_error": false,
  "platforms": [
    "linux_64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/r-rocit.json"
  },
  "raw_meta_yaml": "{% set version = \"2.1.2\" %}\n{% set posix = 'm2-' if win else '' %}\n\npackage:\n  name: r-rocit\n  version: {{ version|replace(\"-\", \"_\") }}\n\nsource:\n  url:\n    - {{ cran_mirror }}/src/contrib/ROCit_{{ version }}.tar.gz\n    - {{ cran_mirror }}/src/contrib/Archive/ROCit/ROCit_{{ version }}.tar.gz\n  sha256: 6ec6962d63e354f219a68d6aa27697322ec47573e09bd5d9e2466e4444e4479f\n\nbuild:\n  number: 2\n  noarch: generic\n  rpaths:\n    - lib/R/lib/\n    - lib/\n\nrequirements:\n  build:\n    - {{ posix }}zip               # [win]\n  host:\n    - r-base\n  run:\n    - r-base\n\ntest:\n  commands:\n    - $R -e \"library('ROCit')\"           # [not win]\n    - \"\\\"%R%\\\" -e \\\"library('ROCit')\\\"\"  # [win]\n\nabout:\n  home: https://CRAN.R-project.org/package=ROCit\n  license: GPL-3.0-only\n  summary: Sensitivity (or recall or true positive rate), false positive rate, specificity, precision (or positive predictive value), negative predictive value, misclassification rate, accuracy, F-score- these are popular metrics for assessing performance of binary classifier for certain threshold. These metrics are calculated\n    at certain threshold values. Receiver operating characteristic (ROC) curve is a common tool for assessing overall diagnostic ability of the binary classifier. Unlike depending on a certain threshold, area under ROC curve (also known as AUC), is a summary statistic about how well a binary classifier performs overall for\n    the classification task. ROCit package provides flexibility to easily evaluate threshold-bound metrics. Also, ROC curve, along with AUC, can be obtained using different methods, such as empirical, binormal and non-parametric. ROCit encompasses a wide variety of methods for constructing confidence interval of ROC curve\n    and AUC. ROCit also features the option of constructing empirical gains table, which is a handy tool for direct marketing. The package offers options for commonly used visualization, such as, ROC curve, KS plot, lift plot. Along with in-built default graphics setting, there are rooms for manual tweak by providing the\n    necessary values as function arguments. ROCit is a powerful tool offering a range of things, yet it is very easy to use.\n  license_family: GPL3\n  license_file:\n    - {{ environ[\"PREFIX\"] }}/lib/R/share/licenses/GPL-3\n\nextra:\n  recipe-maintainers:\n    - conda-forge/r\n\n# Package: ROCit\n# Type: Package\n# Title: Performance Assessment of Binary Classifier with Visualization\n# Version: 1.1.1\n# Date: 2019-01-21\n# Authors@R: c(person(\"Md Riaz Ahmed\", \"Khan\", email = \"mdriazahmed.khan@jacks.sdstate.edu\", role = c(\"aut\", \"cre\")), person(\"Thomas\", \"Brandenburger\", email = \"thomas.brandenburger@sdstate.edu\", role = \"aut\" ))\n# Description: Sensitivity (or recall or true positive rate), false positive rate, specificity, precision (or positive predictive value), negative predictive value, misclassification rate, accuracy, F-score- these are popular metrics for assessing performance of binary classifier for certain threshold. These metrics are calculated at certain threshold values. Receiver operating characteristic (ROC) curve is a common tool for assessing overall diagnostic ability of the binary classifier. Unlike depending on a certain threshold, area under ROC curve (also known as AUC), is a summary statistic about how well a binary classifier performs overall for the classification task. ROCit package provides flexibility to easily evaluate threshold-bound metrics. Also, ROC curve, along with AUC, can be obtained using different methods, such as empirical, binormal and non-parametric. ROCit encompasses a wide variety of methods for constructing confidence interval of ROC curve and AUC. ROCit also features the option of constructing empirical gains table, which is a handy tool for direct marketing. The package offers options for commonly used visualization, such as, ROC curve, KS plot, lift plot. Along with in-built default graphics setting, there are rooms for manual tweak by providing the necessary values as function arguments. ROCit is a powerful tool offering a range of things, yet it is very easy to use.\n# Imports: stats, graphics\n# License: GPL-3\n# Encoding: UTF-8\n# LazyData: true\n# RoxygenNote: 6.1.0\n# Suggests: testthat, knitr, rmarkdown\n# VignetteBuilder: knitr\n# NeedsCompilation: no\n# Packaged: 2019-01-21 16:38:04 UTC; Riaz\n# Author: Md Riaz Ahmed Khan [aut, cre], Thomas Brandenburger [aut]\n# Maintainer: Md Riaz Ahmed Khan <mdriazahmed.khan@jacks.sdstate.edu>\n# Repository: CRAN\n# Date/Publication: 2019-01-30 23:23:35 UTC\n",
  "req": {
    "__set__": true,
    "elements": [
      "r-base"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": []
    },
    "host": {
      "__set__": true,
      "elements": [
        "r-base"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "r-base"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": []
    },
    "host": {
      "__set__": true,
      "elements": [
        "r-base"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "r-base"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "url": [
    "https://cran.r-project.org/src/contrib/ROCit_2.1.2.tar.gz",
    "https://cran.r-project.org/src/contrib/Archive/ROCit/ROCit_2.1.2.tar.gz"
  ],
  "version": "2.1.2",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/r-rocit.json"
  }
}