{
  "archived": true,
  "branch": "main",
  "conda-forge.yml": {
    "conda_build": {
      "pkg_format": "2"
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    }
  },
  "feedstock_name": "pytest-smartcov",
  "hash_type": "sha256",
  "linux_64_meta_yaml": {
    "about": {
      "description": "Smart coverage measurement and reporting for py.test test suites.\n\nTest suites are usually structured parallel to (or integrated with) the\nstructure of the code they test. If you ask py.test to run a certain subset\nof your tests, you shouldn't have to also tell coverage which subset of\nyour code it should measure coverage on for that run. With pytest-smartcov,\nyou don't have to.\n",
      "home": "https://github.com/carljm/pytest-smartcov",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE.txt",
      "summary": "Smart coverage measurement for py.test."
    },
    "build": {
      "noarch": "python",
      "number": "0",
      "script": "python -m pip install --no-deps --ignore-installed ."
    },
    "extra": {
      "recipe-maintainers": [
        "bollwyvl",
        "nehaljwani"
      ]
    },
    "package": {
      "name": "pytest-smartcov",
      "version": "0.3"
    },
    "requirements": {
      "build": [
        "pip",
        "python",
        "setuptools"
      ],
      "run": [
        "coverage >=3.6",
        "pytest",
        "python"
      ]
    },
    "source": {
      "fn": "pytest-smartcov-0.3.tar.gz",
      "sha256": "db99c7a1a9717f5386303a528ee6bcbe8cbcb43ce08e239cfc32bd68bb1281a1",
      "url": "https://pypi.io/packages/source/p/pytest-smartcov/pytest-smartcov-0.3.tar.gz"
    },
    "test": {
      "imports": [
        "smartcov"
      ]
    }
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "pip",
        "python",
        "setuptools"
      ]
    },
    "host": {
      "__set__": true,
      "elements": []
    },
    "run": {
      "__set__": true,
      "elements": [
        "coverage",
        "pytest",
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "meta_yaml": {
    "about": {
      "description": "Smart coverage measurement and reporting for py.test test suites.\n\nTest suites are usually structured parallel to (or integrated with) the\nstructure of the code they test. If you ask py.test to run a certain subset\nof your tests, you shouldn't have to also tell coverage which subset of\nyour code it should measure coverage on for that run. With pytest-smartcov,\nyou don't have to.\n",
      "home": "https://github.com/carljm/pytest-smartcov",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE.txt",
      "summary": "Smart coverage measurement for py.test."
    },
    "build": {
      "noarch": "python",
      "number": "0",
      "script": "python -m pip install --no-deps --ignore-installed ."
    },
    "extra": {
      "recipe-maintainers": [
        "bollwyvl",
        "nehaljwani"
      ]
    },
    "package": {
      "name": "pytest-smartcov",
      "version": "0.3"
    },
    "requirements": {
      "build": [
        "pip",
        "python",
        "setuptools"
      ],
      "run": [
        "coverage >=3.6",
        "pytest",
        "python"
      ]
    },
    "source": {
      "fn": "pytest-smartcov-0.3.tar.gz",
      "sha256": "db99c7a1a9717f5386303a528ee6bcbe8cbcb43ce08e239cfc32bd68bb1281a1",
      "url": "https://pypi.io/packages/source/p/pytest-smartcov/pytest-smartcov-0.3.tar.gz"
    },
    "test": {
      "imports": [
        "smartcov"
      ]
    }
  },
  "name": "pytest-smartcov",
  "osx_64_meta_yaml": {
    "about": {
      "description": "Smart coverage measurement and reporting for py.test test suites.\n\nTest suites are usually structured parallel to (or integrated with) the\nstructure of the code they test. If you ask py.test to run a certain subset\nof your tests, you shouldn't have to also tell coverage which subset of\nyour code it should measure coverage on for that run. With pytest-smartcov,\nyou don't have to.\n",
      "home": "https://github.com/carljm/pytest-smartcov",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE.txt",
      "summary": "Smart coverage measurement for py.test."
    },
    "build": {
      "noarch": "python",
      "number": "0",
      "script": "python -m pip install --no-deps --ignore-installed ."
    },
    "extra": {
      "recipe-maintainers": [
        "bollwyvl",
        "nehaljwani"
      ]
    },
    "package": {
      "name": "pytest-smartcov",
      "version": "0.3"
    },
    "requirements": {
      "build": [
        "pip",
        "python",
        "setuptools"
      ],
      "run": [
        "coverage >=3.6",
        "pytest",
        "python"
      ]
    },
    "source": {
      "fn": "pytest-smartcov-0.3.tar.gz",
      "sha256": "db99c7a1a9717f5386303a528ee6bcbe8cbcb43ce08e239cfc32bd68bb1281a1",
      "url": "https://pypi.io/packages/source/p/pytest-smartcov/pytest-smartcov-0.3.tar.gz"
    },
    "test": {
      "imports": [
        "smartcov"
      ]
    }
  },
  "osx_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "pip",
        "python",
        "setuptools"
      ]
    },
    "host": {
      "__set__": true,
      "elements": []
    },
    "run": {
      "__set__": true,
      "elements": [
        "coverage",
        "pytest",
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "outputs_names": {
    "__set__": true,
    "elements": [
      "pytest-smartcov"
    ]
  },
  "parsing_error": false,
  "platforms": [
    "win_64",
    "osx_64",
    "linux_64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/pytest-smartcov.json"
  },
  "raw_meta_yaml": "{% set name = \"pytest-smartcov\" %}\n{% set version = \"0.3\" %}\n{% set sha256 = \"db99c7a1a9717f5386303a528ee6bcbe8cbcb43ce08e239cfc32bd68bb1281a1\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  fn: {{ name }}-{{ version }}.tar.gz\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: {{ sha256 }}\n\nbuild:\n  number: 0\n  noarch: python\n  script: python -m pip install --no-deps --ignore-installed .\n\nrequirements:\n  build:\n    - pip\n    - python\n    - setuptools\n  run:\n    - coverage >=3.6\n    - pytest\n    - python\n\ntest:\n  imports:\n    - smartcov\n\nabout:\n  home: https://github.com/carljm/pytest-smartcov\n  license: BSD-3-Clause\n  license_family: BSD\n  license_file: LICENSE.txt\n  summary: Smart coverage measurement for py.test.\n\n  description: |\n    Smart coverage measurement and reporting for py.test test suites.\n\n    Test suites are usually structured parallel to (or integrated with) the\n    structure of the code they test. If you ask py.test to run a certain subset\n    of your tests, you shouldn't have to also tell coverage which subset of\n    your code it should measure coverage on for that run. With pytest-smartcov,\n    you don't have to.\n\nextra:\n  recipe-maintainers:\n    - bollwyvl\n    - nehaljwani\n",
  "req": {
    "__set__": true,
    "elements": [
      "coverage",
      "pip",
      "pytest",
      "python",
      "setuptools"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "pip",
        "python",
        "setuptools"
      ]
    },
    "host": {
      "__set__": true,
      "elements": []
    },
    "run": {
      "__set__": true,
      "elements": [
        "coverage",
        "pytest",
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "pip",
        "python",
        "setuptools"
      ]
    },
    "host": {
      "__set__": true,
      "elements": []
    },
    "run": {
      "__set__": true,
      "elements": [
        "coverage >=3.6",
        "pytest",
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "url": "https://pypi.io/packages/source/p/pytest-smartcov/pytest-smartcov-0.3.tar.gz",
  "version": "0.3",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/pytest-smartcov.json"
  },
  "win_64_meta_yaml": {
    "about": {
      "description": "Smart coverage measurement and reporting for py.test test suites.\n\nTest suites are usually structured parallel to (or integrated with) the\nstructure of the code they test. If you ask py.test to run a certain subset\nof your tests, you shouldn't have to also tell coverage which subset of\nyour code it should measure coverage on for that run. With pytest-smartcov,\nyou don't have to.\n",
      "home": "https://github.com/carljm/pytest-smartcov",
      "license": "BSD-3-Clause",
      "license_family": "BSD",
      "license_file": "LICENSE.txt",
      "summary": "Smart coverage measurement for py.test."
    },
    "build": {
      "noarch": "python",
      "number": "0",
      "script": "python -m pip install --no-deps --ignore-installed ."
    },
    "extra": {
      "recipe-maintainers": [
        "bollwyvl",
        "nehaljwani"
      ]
    },
    "package": {
      "name": "pytest-smartcov",
      "version": "0.3"
    },
    "requirements": {
      "build": [
        "pip",
        "python",
        "setuptools"
      ],
      "run": [
        "coverage >=3.6",
        "pytest",
        "python"
      ]
    },
    "source": {
      "fn": "pytest-smartcov-0.3.tar.gz",
      "sha256": "db99c7a1a9717f5386303a528ee6bcbe8cbcb43ce08e239cfc32bd68bb1281a1",
      "url": "https://pypi.io/packages/source/p/pytest-smartcov/pytest-smartcov-0.3.tar.gz"
    },
    "test": {
      "imports": [
        "smartcov"
      ]
    }
  },
  "win_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "pip",
        "python",
        "setuptools"
      ]
    },
    "host": {
      "__set__": true,
      "elements": []
    },
    "run": {
      "__set__": true,
      "elements": [
        "coverage",
        "pytest",
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  }
}