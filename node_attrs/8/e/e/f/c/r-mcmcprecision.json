{
  "archived": false,
  "branch": "main",
  "conda-forge.yml": {
    "bot": {
      "automerge": true
    },
    "conda_build": {
      "pkg_format": "2"
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    },
    "provider": {
      "linux_aarch64": "default",
      "linux_ppc64le": "default",
      "win": "azure"
    }
  },
  "feedstock_name": "r-mcmcprecision",
  "hash_type": "sha256",
  "linux_64_meta_yaml": {
    "about": {
      "home": "https://github.com/danheck/MCMCprecision",
      "license": "GPL-3.0-only",
      "license_family": "GPL3",
      "license_file": "/lib/R/share/licenses/GPL-3",
      "summary": "Estimates the precision of transdimensional Markov chain Monte Carlo  (MCMC) output, which is often used for Bayesian analysis of models with different  dimensionality (e.g., model selection). Transdimensional MCMC (e.g., reversible  jump MCMC) relies on sampling a discrete model-indicator variable to estimate  the posterior model probabilities. If only few switches occur between the models,  precision may be low and assessment based on the assumption of independent  samples misleading. Based on the observed transition matrix of the indicator  variable, the method of Heck, Overstall, Gronau, & Wagenmakers (2018,  Statistics & Computing) <doi:10.1007/s11222-018-9828-0> draws posterior samples  of the stationary distribution to (a) assess the uncertainty in the estimated  posterior model probabilities and (b) estimate the effective sample size of  the MCMC output."
    },
    "build": {
      "number": "0",
      "rpaths": [
        "lib/R/lib/",
        "lib/"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "conda-forge/r"
      ]
    },
    "package": {
      "name": "r-mcmcprecision",
      "version": "0.4.2"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "make"
      ],
      "host": [
        "r-base",
        "r-matrix",
        "r-rcpp",
        "r-rcpparmadillo",
        "r-rcppeigen",
        "r-rcppprogress",
        "r-combinat",
        "libblas",
        "liblapack"
      ],
      "run": [
        "r-base",
        "r-matrix",
        "r-rcpp",
        "r-rcpparmadillo",
        "r-rcppeigen",
        "r-rcppprogress",
        "r-combinat"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "fc2109165a7f147e7d2a782774617e328282e10cf2e0a54a2ef1bf064db9fa04",
      "url": [
        "https://cran.r-project.org/src/contrib/MCMCprecision_0.4.2.tar.gz",
        "https://cran.r-project.org/src/contrib/Archive/MCMCprecision/MCMCprecision_0.4.2.tar.gz"
      ]
    },
    "test": {
      "commands": [
        "$R -e \"library('MCMCprecision')\""
      ]
    }
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "libblas",
        "liblapack",
        "r-base",
        "r-combinat",
        "r-matrix",
        "r-rcpp",
        "r-rcpparmadillo",
        "r-rcppeigen",
        "r-rcppprogress"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "r-base",
        "r-combinat",
        "r-matrix",
        "r-rcpp",
        "r-rcpparmadillo",
        "r-rcppeigen",
        "r-rcppprogress"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "linux_aarch64_meta_yaml": {
    "about": {
      "home": "https://github.com/danheck/MCMCprecision",
      "license": "GPL-3.0-only",
      "license_family": "GPL3",
      "license_file": "/lib/R/share/licenses/GPL-3",
      "summary": "Estimates the precision of transdimensional Markov chain Monte Carlo  (MCMC) output, which is often used for Bayesian analysis of models with different  dimensionality (e.g., model selection). Transdimensional MCMC (e.g., reversible  jump MCMC) relies on sampling a discrete model-indicator variable to estimate  the posterior model probabilities. If only few switches occur between the models,  precision may be low and assessment based on the assumption of independent  samples misleading. Based on the observed transition matrix of the indicator  variable, the method of Heck, Overstall, Gronau, & Wagenmakers (2018,  Statistics & Computing) <doi:10.1007/s11222-018-9828-0> draws posterior samples  of the stationary distribution to (a) assess the uncertainty in the estimated  posterior model probabilities and (b) estimate the effective sample size of  the MCMC output."
    },
    "build": {
      "number": "0",
      "rpaths": [
        "lib/R/lib/",
        "lib/"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "conda-forge/r"
      ]
    },
    "package": {
      "name": "r-mcmcprecision",
      "version": "0.4.2"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "make"
      ],
      "host": [
        "r-base",
        "r-matrix",
        "r-rcpp",
        "r-rcpparmadillo",
        "r-rcppeigen",
        "r-rcppprogress",
        "r-combinat",
        "libblas",
        "liblapack"
      ],
      "run": [
        "r-base",
        "r-matrix",
        "r-rcpp",
        "r-rcpparmadillo",
        "r-rcppeigen",
        "r-rcppprogress",
        "r-combinat"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "fc2109165a7f147e7d2a782774617e328282e10cf2e0a54a2ef1bf064db9fa04",
      "url": [
        "https://cran.r-project.org/src/contrib/MCMCprecision_0.4.2.tar.gz",
        "https://cran.r-project.org/src/contrib/Archive/MCMCprecision/MCMCprecision_0.4.2.tar.gz"
      ]
    },
    "test": {
      "commands": [
        "$R -e \"library('MCMCprecision')\""
      ]
    }
  },
  "linux_aarch64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "libblas",
        "liblapack",
        "r-base",
        "r-combinat",
        "r-matrix",
        "r-rcpp",
        "r-rcpparmadillo",
        "r-rcppeigen",
        "r-rcppprogress"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "r-base",
        "r-combinat",
        "r-matrix",
        "r-rcpp",
        "r-rcpparmadillo",
        "r-rcppeigen",
        "r-rcppprogress"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "linux_ppc64le_meta_yaml": {
    "about": {
      "home": "https://github.com/danheck/MCMCprecision",
      "license": "GPL-3.0-only",
      "license_family": "GPL3",
      "license_file": "/lib/R/share/licenses/GPL-3",
      "summary": "Estimates the precision of transdimensional Markov chain Monte Carlo  (MCMC) output, which is often used for Bayesian analysis of models with different  dimensionality (e.g., model selection). Transdimensional MCMC (e.g., reversible  jump MCMC) relies on sampling a discrete model-indicator variable to estimate  the posterior model probabilities. If only few switches occur between the models,  precision may be low and assessment based on the assumption of independent  samples misleading. Based on the observed transition matrix of the indicator  variable, the method of Heck, Overstall, Gronau, & Wagenmakers (2018,  Statistics & Computing) <doi:10.1007/s11222-018-9828-0> draws posterior samples  of the stationary distribution to (a) assess the uncertainty in the estimated  posterior model probabilities and (b) estimate the effective sample size of  the MCMC output."
    },
    "build": {
      "number": "0",
      "rpaths": [
        "lib/R/lib/",
        "lib/"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "conda-forge/r"
      ]
    },
    "package": {
      "name": "r-mcmcprecision",
      "version": "0.4.2"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "make"
      ],
      "host": [
        "r-base",
        "r-matrix",
        "r-rcpp",
        "r-rcpparmadillo",
        "r-rcppeigen",
        "r-rcppprogress",
        "r-combinat",
        "libblas",
        "liblapack"
      ],
      "run": [
        "r-base",
        "r-matrix",
        "r-rcpp",
        "r-rcpparmadillo",
        "r-rcppeigen",
        "r-rcppprogress",
        "r-combinat"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "fc2109165a7f147e7d2a782774617e328282e10cf2e0a54a2ef1bf064db9fa04",
      "url": [
        "https://cran.r-project.org/src/contrib/MCMCprecision_0.4.2.tar.gz",
        "https://cran.r-project.org/src/contrib/Archive/MCMCprecision/MCMCprecision_0.4.2.tar.gz"
      ]
    },
    "test": {
      "commands": [
        "$R -e \"library('MCMCprecision')\""
      ]
    }
  },
  "linux_ppc64le_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "libblas",
        "liblapack",
        "r-base",
        "r-combinat",
        "r-matrix",
        "r-rcpp",
        "r-rcpparmadillo",
        "r-rcppeigen",
        "r-rcppprogress"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "r-base",
        "r-combinat",
        "r-matrix",
        "r-rcpp",
        "r-rcpparmadillo",
        "r-rcppeigen",
        "r-rcppprogress"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "meta_yaml": {
    "about": {
      "home": "https://github.com/danheck/MCMCprecision",
      "license": "GPL-3.0-only",
      "license_family": "GPL3",
      "license_file": "/lib/R/share/licenses/GPL-3",
      "summary": "Estimates the precision of transdimensional Markov chain Monte Carlo  (MCMC) output, which is often used for Bayesian analysis of models with different  dimensionality (e.g., model selection). Transdimensional MCMC (e.g., reversible  jump MCMC) relies on sampling a discrete model-indicator variable to estimate  the posterior model probabilities. If only few switches occur between the models,  precision may be low and assessment based on the assumption of independent  samples misleading. Based on the observed transition matrix of the indicator  variable, the method of Heck, Overstall, Gronau, & Wagenmakers (2018,  Statistics & Computing) <doi:10.1007/s11222-018-9828-0> draws posterior samples  of the stationary distribution to (a) assess the uncertainty in the estimated  posterior model probabilities and (b) estimate the effective sample size of  the MCMC output."
    },
    "build": {
      "number": "0",
      "rpaths": [
        "lib/R/lib/",
        "lib/"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "conda-forge/r"
      ]
    },
    "package": {
      "name": "r-mcmcprecision",
      "version": "0.4.2"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "make",
        "m2w64_c_compiler_stub",
        "m2w64_c_stdlib_stub",
        "m2w64_cxx_compiler_stub",
        "filesystem",
        "sed",
        "coreutils",
        "zip"
      ],
      "host": [
        "r-base",
        "r-matrix",
        "r-rcpp",
        "r-rcpparmadillo",
        "r-rcppeigen",
        "r-rcppprogress",
        "r-combinat",
        "libblas",
        "liblapack"
      ],
      "run": [
        "r-base",
        "r-matrix",
        "r-rcpp",
        "r-rcpparmadillo",
        "r-rcppeigen",
        "r-rcppprogress",
        "r-combinat"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "fc2109165a7f147e7d2a782774617e328282e10cf2e0a54a2ef1bf064db9fa04",
      "url": [
        "https://cran.r-project.org/src/contrib/MCMCprecision_0.4.2.tar.gz",
        "https://cran.r-project.org/src/contrib/Archive/MCMCprecision/MCMCprecision_0.4.2.tar.gz"
      ]
    },
    "test": {
      "commands": [
        "$R -e \"library('MCMCprecision')\"",
        "\"%R%\" -e \"library('MCMCprecision')\""
      ]
    }
  },
  "name": "r-mcmcprecision",
  "osx_64_meta_yaml": {
    "about": {
      "home": "https://github.com/danheck/MCMCprecision",
      "license": "GPL-3.0-only",
      "license_family": "GPL3",
      "license_file": "/lib/R/share/licenses/GPL-3",
      "summary": "Estimates the precision of transdimensional Markov chain Monte Carlo  (MCMC) output, which is often used for Bayesian analysis of models with different  dimensionality (e.g., model selection). Transdimensional MCMC (e.g., reversible  jump MCMC) relies on sampling a discrete model-indicator variable to estimate  the posterior model probabilities. If only few switches occur between the models,  precision may be low and assessment based on the assumption of independent  samples misleading. Based on the observed transition matrix of the indicator  variable, the method of Heck, Overstall, Gronau, & Wagenmakers (2018,  Statistics & Computing) <doi:10.1007/s11222-018-9828-0> draws posterior samples  of the stationary distribution to (a) assess the uncertainty in the estimated  posterior model probabilities and (b) estimate the effective sample size of  the MCMC output."
    },
    "build": {
      "number": "0",
      "rpaths": [
        "lib/R/lib/",
        "lib/"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "conda-forge/r"
      ]
    },
    "package": {
      "name": "r-mcmcprecision",
      "version": "0.4.2"
    },
    "requirements": {
      "build": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "make"
      ],
      "host": [
        "r-base",
        "r-matrix",
        "r-rcpp",
        "r-rcpparmadillo",
        "r-rcppeigen",
        "r-rcppprogress",
        "r-combinat",
        "libblas",
        "liblapack"
      ],
      "run": [
        "r-base",
        "r-matrix",
        "r-rcpp",
        "r-rcpparmadillo",
        "r-rcppeigen",
        "r-rcppprogress",
        "r-combinat"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "fc2109165a7f147e7d2a782774617e328282e10cf2e0a54a2ef1bf064db9fa04",
      "url": [
        "https://cran.r-project.org/src/contrib/MCMCprecision_0.4.2.tar.gz",
        "https://cran.r-project.org/src/contrib/Archive/MCMCprecision/MCMCprecision_0.4.2.tar.gz"
      ]
    },
    "test": {
      "commands": [
        "$R -e \"library('MCMCprecision')\""
      ]
    }
  },
  "osx_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "make"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "libblas",
        "liblapack",
        "r-base",
        "r-combinat",
        "r-matrix",
        "r-rcpp",
        "r-rcpparmadillo",
        "r-rcppeigen",
        "r-rcppprogress"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "r-base",
        "r-combinat",
        "r-matrix",
        "r-rcpp",
        "r-rcpparmadillo",
        "r-rcppeigen",
        "r-rcppprogress"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "outputs_names": {
    "__set__": true,
    "elements": [
      "r-mcmcprecision"
    ]
  },
  "parsing_error": false,
  "platforms": [
    "linux_64",
    "linux_aarch64",
    "linux_ppc64le",
    "osx_64",
    "win_64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/r-mcmcprecision.json"
  },
  "raw_meta_yaml": "{% set version = \"0.4.2\" %}\n{% set posix = 'm2-' if win else '' %}\n\npackage:\n  name: r-mcmcprecision\n  version: {{ version|replace(\"-\", \"_\") }}\n\nsource:\n  url:\n    - {{ cran_mirror }}/src/contrib/MCMCprecision_{{ version }}.tar.gz\n    - {{ cran_mirror }}/src/contrib/Archive/MCMCprecision/MCMCprecision_{{ version }}.tar.gz\n  sha256: fc2109165a7f147e7d2a782774617e328282e10cf2e0a54a2ef1bf064db9fa04\n\nbuild:\n  number: 0\n  rpaths:\n    - lib/R/lib/\n    - lib/\n\nrequirements:\n  build:\n    - {{ compiler('c') }}              # [not win]\n    - {{ stdlib(\"c\") }}                # [not win]\n    - {{ compiler('m2w64_c') }}        # [win]\n    - {{ stdlib(\"m2w64_c\") }}          # [win]\n    - {{ compiler('cxx') }}            # [not win]\n    - {{ compiler('m2w64_cxx') }}      # [win]\n    - {{ posix }}filesystem        # [win]\n    - {{ posix }}make\n    - {{ posix }}sed               # [win]\n    - {{ posix }}coreutils         # [win]\n    - {{ posix }}zip               # [win]\n  host:\n    - r-base\n    - r-matrix\n    - r-rcpp\n    - r-rcpparmadillo\n    - r-rcppeigen\n    - r-rcppprogress\n    - r-combinat\n    - libblas\n    - liblapack\n  run:\n    - r-base\n    - r-matrix\n    - r-rcpp\n    - r-rcpparmadillo\n    - r-rcppeigen\n    - r-rcppprogress\n    - r-combinat\n\ntest:\n  commands:\n    - $R -e \"library('MCMCprecision')\"           # [not win]\n    - \"\\\"%R%\\\" -e \\\"library('MCMCprecision')\\\"\"  # [win]\n\nabout:\n  home: https://github.com/danheck/MCMCprecision\n  license: GPL-3.0-only\n  summary: Estimates the precision of transdimensional Markov chain Monte Carlo  (MCMC) output, which is often used for Bayesian analysis of models with different  dimensionality (e.g., model selection). Transdimensional MCMC (e.g., reversible  jump MCMC) relies on sampling a discrete model-indicator variable to estimate  the\n    posterior model probabilities. If only few switches occur between the models,  precision may be low and assessment based on the assumption of independent  samples misleading. Based on the observed transition matrix of the indicator  variable, the method of Heck, Overstall, Gronau, & Wagenmakers (2018,  Statistics & Computing)\n    <doi:10.1007/s11222-018-9828-0> draws posterior samples  of the stationary distribution to (a) assess the uncertainty in the estimated  posterior model probabilities and (b) estimate the effective sample size of  the MCMC output.\n  license_family: GPL3\n  license_file: '{{ environ[\"PREFIX\"] }}/lib/R/share/licenses/GPL-3'\n\nextra:\n  recipe-maintainers:\n    - conda-forge/r\n\n# Package: MCMCprecision\n# Type: Package\n# Title: Precision of Discrete Parameters in Transdimensional MCMC\n# Version: 0.3.9\n# Date: 2018-08-10\n# Authors@R: c(person(\"Daniel W.\",\"Heck\", email=\"heck@uni-mannheim.de\",role=c(\"aut\",\"cre\")))\n# Author: Daniel W. Heck [aut, cre]\n# Maintainer: Daniel W. Heck <heck@uni-mannheim.de>\n# Description: Estimates the precision of transdimensional Markov chain Monte Carlo  (MCMC) output, which is often used for Bayesian analysis of models with different  dimensionality (e.g., model selection). Transdimensional MCMC (e.g., reversible  jump MCMC) relies on sampling a discrete model-indicator variable to estimate  the posterior model probabilities. If only few switches occur between the models,  precision may be low and assessment based on the assumption of independent  samples misleading. Based on the observed transition matrix of the indicator  variable, the method of Heck, Overstall, Gronau, & Wagenmakers (2018,  Statistics & Computing) <doi:10.1007/s11222-018-9828-0> draws posterior samples  of the stationary distribution to (a) assess the uncertainty in the estimated  posterior model probabilities and (b) estimate the effective sample size of  the MCMC output.\n# License: GPL-3\n# Encoding: UTF-8\n# LazyData: true\n# Depends: R (>= 3.0.0)\n# Imports: Rcpp, parallel, utils, stats, Matrix, combinat\n# Suggests: testthat, R.rsp\n# LinkingTo: Rcpp, RcppArmadillo, RcppProgress, RcppEigen\n# RoxygenNote: 6.1.0\n# URL: https://github.com/danheck/MCMCprecision\n# VignetteBuilder: R.rsp\n# NeedsCompilation: yes\n# Packaged: 2018-08-10 13:21:41 UTC; Daniel\n# Repository: CRAN\n# Date/Publication: 2018-08-10 13:40:03 UTC\n",
  "req": {
    "__set__": true,
    "elements": [
      "c_compiler_stub",
      "c_stdlib_stub",
      "coreutils",
      "cxx_compiler_stub",
      "filesystem",
      "libblas",
      "liblapack",
      "m2w64_c_compiler_stub",
      "m2w64_c_stdlib_stub",
      "m2w64_cxx_compiler_stub",
      "make",
      "r-base",
      "r-combinat",
      "r-matrix",
      "r-rcpp",
      "r-rcpparmadillo",
      "r-rcppeigen",
      "r-rcppprogress",
      "sed",
      "zip"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "coreutils",
        "cxx_compiler_stub",
        "filesystem",
        "m2w64_c_compiler_stub",
        "m2w64_c_stdlib_stub",
        "m2w64_cxx_compiler_stub",
        "make",
        "sed",
        "zip"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "libblas",
        "liblapack",
        "r-base",
        "r-combinat",
        "r-matrix",
        "r-rcpp",
        "r-rcpparmadillo",
        "r-rcppeigen",
        "r-rcppprogress"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "cxx_compiler_stub",
        "r-base",
        "r-combinat",
        "r-matrix",
        "r-rcpp",
        "r-rcpparmadillo",
        "r-rcppeigen",
        "r-rcppprogress"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "c_compiler_stub",
        "c_stdlib_stub",
        "coreutils",
        "cxx_compiler_stub",
        "filesystem",
        "m2w64_c_compiler_stub",
        "m2w64_c_stdlib_stub",
        "m2w64_cxx_compiler_stub",
        "make",
        "sed",
        "zip"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "libblas",
        "liblapack",
        "r-base",
        "r-combinat",
        "r-matrix",
        "r-rcpp",
        "r-rcpparmadillo",
        "r-rcppeigen",
        "r-rcppprogress"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "r-base",
        "r-combinat",
        "r-matrix",
        "r-rcpp",
        "r-rcpparmadillo",
        "r-rcppeigen",
        "r-rcppprogress"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "url": [
    "https://cran.r-project.org/src/contrib/MCMCprecision_0.4.2.tar.gz",
    "https://cran.r-project.org/src/contrib/Archive/MCMCprecision/MCMCprecision_0.4.2.tar.gz",
    "https://cran.r-project.org/src/contrib/MCMCprecision_0.4.2.tar.gz",
    "https://cran.r-project.org/src/contrib/Archive/MCMCprecision/MCMCprecision_0.4.2.tar.gz",
    "https://cran.r-project.org/src/contrib/MCMCprecision_0.4.2.tar.gz",
    "https://cran.r-project.org/src/contrib/Archive/MCMCprecision/MCMCprecision_0.4.2.tar.gz",
    "https://cran.r-project.org/src/contrib/MCMCprecision_0.4.2.tar.gz",
    "https://cran.r-project.org/src/contrib/Archive/MCMCprecision/MCMCprecision_0.4.2.tar.gz",
    "https://cran.r-project.org/src/contrib/MCMCprecision_0.4.2.tar.gz",
    "https://cran.r-project.org/src/contrib/Archive/MCMCprecision/MCMCprecision_0.4.2.tar.gz"
  ],
  "version": "0.4.2",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/r-mcmcprecision.json"
  },
  "win_64_meta_yaml": {
    "about": {
      "home": "https://github.com/danheck/MCMCprecision",
      "license": "GPL-3.0-only",
      "license_family": "GPL3",
      "license_file": "/lib/R/share/licenses/GPL-3",
      "summary": "Estimates the precision of transdimensional Markov chain Monte Carlo  (MCMC) output, which is often used for Bayesian analysis of models with different  dimensionality (e.g., model selection). Transdimensional MCMC (e.g., reversible  jump MCMC) relies on sampling a discrete model-indicator variable to estimate  the posterior model probabilities. If only few switches occur between the models,  precision may be low and assessment based on the assumption of independent  samples misleading. Based on the observed transition matrix of the indicator  variable, the method of Heck, Overstall, Gronau, & Wagenmakers (2018,  Statistics & Computing) <doi:10.1007/s11222-018-9828-0> draws posterior samples  of the stationary distribution to (a) assess the uncertainty in the estimated  posterior model probabilities and (b) estimate the effective sample size of  the MCMC output."
    },
    "build": {
      "number": "0",
      "rpaths": [
        "lib/R/lib/",
        "lib/"
      ]
    },
    "extra": {
      "recipe-maintainers": [
        "conda-forge/r"
      ]
    },
    "package": {
      "name": "r-mcmcprecision",
      "version": "0.4.2"
    },
    "requirements": {
      "build": [
        "m2w64_c_compiler_stub",
        "m2w64_c_stdlib_stub",
        "m2w64_cxx_compiler_stub",
        "filesystem",
        "make",
        "sed",
        "coreutils",
        "zip"
      ],
      "host": [
        "r-base",
        "r-matrix",
        "r-rcpp",
        "r-rcpparmadillo",
        "r-rcppeigen",
        "r-rcppprogress",
        "r-combinat",
        "libblas",
        "liblapack"
      ],
      "run": [
        "r-base",
        "r-matrix",
        "r-rcpp",
        "r-rcpparmadillo",
        "r-rcppeigen",
        "r-rcppprogress",
        "r-combinat"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "fc2109165a7f147e7d2a782774617e328282e10cf2e0a54a2ef1bf064db9fa04",
      "url": [
        "https://cran.r-project.org/src/contrib/MCMCprecision_0.4.2.tar.gz",
        "https://cran.r-project.org/src/contrib/Archive/MCMCprecision/MCMCprecision_0.4.2.tar.gz"
      ]
    },
    "test": {
      "commands": [
        "\"%R%\" -e \"library('MCMCprecision')\""
      ]
    }
  },
  "win_64_requirements": {
    "build": {
      "__set__": true,
      "elements": [
        "coreutils",
        "filesystem",
        "m2w64_c_compiler_stub",
        "m2w64_c_stdlib_stub",
        "m2w64_cxx_compiler_stub",
        "make",
        "sed",
        "zip"
      ]
    },
    "host": {
      "__set__": true,
      "elements": [
        "libblas",
        "liblapack",
        "r-base",
        "r-combinat",
        "r-matrix",
        "r-rcpp",
        "r-rcpparmadillo",
        "r-rcppeigen",
        "r-rcppprogress"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "r-base",
        "r-combinat",
        "r-matrix",
        "r-rcpp",
        "r-rcpparmadillo",
        "r-rcppeigen",
        "r-rcppprogress"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  }
}