{
  "archived": false,
  "branch": "main",
  "conda-forge.yml": {
    "conda_build": {
      "pkg_format": "2"
    },
    "conda_forge_output_validation": true,
    "github": {
      "branch_name": "main",
      "tooling_branch_name": "main"
    }
  },
  "feedstock_hash": "0a5444276422b4f470e79a0ae97e44c29b44f6ed",
  "feedstock_hash_ts": 1730893069,
  "feedstock_name": "eventemitter",
  "hash_type": "sha256",
  "linux_64_meta_yaml": {
    "about": {
      "description": "EventEmitter, The EventEmitter class can be used directly or as a mix-in to provide the ability to publish and subscribe to events.\nListener functions can be defined using def or async def. All listeners are executed in a deferred way. The coro that calls emit must yield for the event to propagate.\nEventIterable, If the callback-style model of listening for events is undesirable, an async iterable is provided to offer a second model for handling events.\nThe EventIterable implements the async iterable interface and can be used in conjunction with any of the tools in aitertools.\n",
      "dev_url": "https://github.com/asyncdef/eventemitter",
      "doc_url": "https://pypi.org/project/eventemitter/#description",
      "home": "https://github.com/asyncdef/eventemitter",
      "license": "Apache-2.0",
      "license_family": "Apache",
      "license_file": "LICENSE",
      "summary": "Tools for working with async events."
    },
    "build": {
      "noarch": "python",
      "number": "0",
      "script": "PYTHON -m pip install . -vv"
    },
    "extra": {
      "recipe-maintainers": [
        "wiphoo"
      ]
    },
    "package": {
      "name": "eventemitter",
      "version": "0.2.0"
    },
    "requirements": {
      "host": [
        "python",
        "pip"
      ],
      "run": [
        "python"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "0147a0d6fc8b03641997b337b8c755e89608bd0784335a4fec50bde1e31f8d6f",
      "url": "https://pypi.io/packages/source/e/eventemitter/eventemitter-0.2.0.tar.gz"
    },
    "test": {
      "imports": [
        "eventemitter"
      ]
    }
  },
  "linux_64_requirements": {
    "build": {
      "__set__": true,
      "elements": []
    },
    "host": {
      "__set__": true,
      "elements": [
        "pip",
        "python"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "meta_yaml": {
    "about": {
      "description": "EventEmitter, The EventEmitter class can be used directly or as a mix-in to provide the ability to publish and subscribe to events.\nListener functions can be defined using def or async def. All listeners are executed in a deferred way. The coro that calls emit must yield for the event to propagate.\nEventIterable, If the callback-style model of listening for events is undesirable, an async iterable is provided to offer a second model for handling events.\nThe EventIterable implements the async iterable interface and can be used in conjunction with any of the tools in aitertools.\n",
      "dev_url": "https://github.com/asyncdef/eventemitter",
      "doc_url": "https://pypi.org/project/eventemitter/#description",
      "home": "https://github.com/asyncdef/eventemitter",
      "license": "Apache-2.0",
      "license_family": "Apache",
      "license_file": "LICENSE",
      "summary": "Tools for working with async events."
    },
    "build": {
      "noarch": "python",
      "number": "0",
      "script": "PYTHON -m pip install . -vv"
    },
    "extra": {
      "recipe-maintainers": [
        "wiphoo"
      ]
    },
    "package": {
      "name": "eventemitter",
      "version": "0.2.0"
    },
    "requirements": {
      "host": [
        "python",
        "pip"
      ],
      "run": [
        "python"
      ]
    },
    "schema_version": 0,
    "source": {
      "sha256": "0147a0d6fc8b03641997b337b8c755e89608bd0784335a4fec50bde1e31f8d6f",
      "url": "https://pypi.io/packages/source/e/eventemitter/eventemitter-0.2.0.tar.gz"
    },
    "test": {
      "imports": [
        "eventemitter"
      ]
    }
  },
  "name": "eventemitter",
  "outputs_names": {
    "__set__": true,
    "elements": [
      "eventemitter"
    ]
  },
  "parsing_error": false,
  "platforms": [
    "linux_64"
  ],
  "pr_info": {
    "__lazy_json__": "pr_info/eventemitter.json"
  },
  "raw_meta_yaml": "{% set name = \"eventemitter\" %}\n{% set version = \"0.2.0\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: 0147a0d6fc8b03641997b337b8c755e89608bd0784335a4fec50bde1e31f8d6f\n\nbuild:\n  noarch: python\n  number: 0\n  script: \"{{ PYTHON }} -m pip install . -vv\"\n\nrequirements:\n  host:\n    - python\n    - pip\n  run:\n    - python\n\ntest:\n  imports:\n    - eventemitter\n\nabout:\n  home: https://github.com/asyncdef/eventemitter\n  license: Apache-2.0\n  license_family: Apache\n  license_file: LICENSE\n  summary: 'Tools for working with async events.'\n  \n  description: |\n    EventEmitter, The EventEmitter class can be used directly or as a mix-in to provide the ability to publish and subscribe to events.\n    Listener functions can be defined using def or async def. All listeners are executed in a deferred way. The coro that calls emit must yield for the event to propagate.\n    EventIterable, If the callback-style model of listening for events is undesirable, an async iterable is provided to offer a second model for handling events.\n    The EventIterable implements the async iterable interface and can be used in conjunction with any of the tools in aitertools.\n  doc_url: https://pypi.org/project/eventemitter/#description\n  dev_url: https://github.com/asyncdef/eventemitter\n\nextra:\n  recipe-maintainers:\n    - wiphoo\n",
  "req": {
    "__set__": true,
    "elements": [
      "pip",
      "python"
    ]
  },
  "requirements": {
    "build": {
      "__set__": true,
      "elements": []
    },
    "host": {
      "__set__": true,
      "elements": [
        "pip",
        "python"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "strong_exports": false,
  "total_requirements": {
    "build": {
      "__set__": true,
      "elements": []
    },
    "host": {
      "__set__": true,
      "elements": [
        "pip",
        "python"
      ]
    },
    "run": {
      "__set__": true,
      "elements": [
        "python"
      ]
    },
    "test": {
      "__set__": true,
      "elements": []
    }
  },
  "url": "https://pypi.io/packages/source/e/eventemitter/eventemitter-0.2.0.tar.gz",
  "version": "0.2.0",
  "version_pr_info": {
    "__lazy_json__": "version_pr_info/eventemitter.json"
  }
}