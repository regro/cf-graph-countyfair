{
  "test.test_Analysis": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Analysis.test_image_reconstruction": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Analysis.test_kinematics_api": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Analysis.test_lens_profile": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Analysis.test_light2mass": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Analysis.test_light_profile": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Analysis.test_multi_patch_reconstruction": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Analysis.test_td_cosmography": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Conf": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Conf.test_config_loader": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Cosmo": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Cosmo.test_background": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Cosmo.test_cosmo_interp": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Cosmo.test_cosmo_solver": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Cosmo.test_kde_likelihood": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Cosmo.test_lcdm": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Cosmo.test_lens_cosmo": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Cosmo.test_micro_lensing": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Cosmo.test_nfw_param": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_DSM": {
    "__set__": true,
    "elements": [
      "fine"
    ]
  },
  "test.test_Data": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Data.test_coord_transforms": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Data.test_image_noise": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Data.test_imaging_data": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Data.test_imaging_data_with_interferometric_changes": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Data.test_kinematic_data_2D": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Data.test_psf": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_FMUPointToFieldFunction": {
    "__set__": true,
    "elements": [
      "otfmi"
    ]
  },
  "test.test_GalKin": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_GalKin.test_analytic_kinematics": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_GalKin.test_anisotropy": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_GalKin.test_aperture": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_GalKin.test_aperture_types": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_GalKin.test_cosmo": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_GalKin.test_galkin": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_GalKin.test_galkin_model": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_GalKin.test_galkin_multiobservation": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_GalKin.test_galkin_shells": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_GalKin.test_gom": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_GalKin.test_light_profile": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_GalKin.test_multi_gauss_expansion": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_GalKin.test_numeric_kinematics": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_GalKin.test_psf": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_GalKin.test_velocity_util": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_ImSim": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_ImSim.test_MultiBand": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_ImSim.test_MultiBand.test_joint_linear": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_ImSim.test_MultiBand.test_multi_linear": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_ImSim.test_MultiBand.test_single_band_multi_model": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_ImSim.test_Numerics": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_ImSim.test_Numerics.test_adaptive_numerics": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_ImSim.test_Numerics.test_convolution": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_ImSim.test_Numerics.test_grid": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_ImSim.test_Numerics.test_numerics": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_ImSim.test_Numerics.test_partial_image": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_ImSim.test_Numerics.test_pixel_convolution": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_ImSim.test_Numerics.test_point_source_rendering": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_ImSim.test_de_lens": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_ImSim.test_differential_extinction": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_ImSim.test_image2soure_mapping": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_ImSim.test_image_linear_solve": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_ImSim.test_image_linear_solve_with_interferometric_changes": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_ImSim.test_image_model": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_ImSim.test_image_model_pixelbased": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_ImSim.test_image_model_with_interferometric_changes": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_ImSim.test_multi_plane_organizer": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_ImSim.test_tracer_model": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_LightConeSim": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_LightConeSim.test_light_cone": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_LineOfSight": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_LineOfSight.test_single_plane_los": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_MultiPlane": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_MultiPlane.test_multi_plane": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Optimizer": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Optimizer.test_fast_rayshooting": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Optimizer.test_optimizer": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Optimizer.test_param_classes": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_arc_perturbations": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_base_profile": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_blank_plane": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_chameleon": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_cnfw": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_cnfw_ellipse": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_const_mag": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_constant_shift": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_convergence": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_coreBurkert": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_cored_density": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_cored_density_2": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_cored_density_exp": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_cored_profile_mst": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_cored_steep_ellipsoid": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_curved_arc_const": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_curved_arc_sis_mst": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_curved_arc_spp": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_curved_arc_spt": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_curved_arc_tan_diff": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_dipole": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_elliptical_density_slice": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_epl": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_epl_boxydisky": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_epl_numba": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_flexion": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_flexionfg": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_gauss_decomposition": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_gaussian": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_gaussian_ellipse_kappa": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_gaussian_ellipse_potential": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_gnfw": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_hernquist": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_hernquist_ellipse_cse": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_hessian": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_interpol": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_multi_gaussian_kappa": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_multipole": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_nfw": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_nfw_core_truncated": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_nfw_ellipse": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_nfw_ellipse_cse": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_nfw_mass_concentration": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_nfw_mass_concentration_ellipse": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_nfw_vir_trunc": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_nie": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_nie_potential": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_numerical_deflections": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_p_jaffe": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_p_jaffe_ellipse": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_pemd": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_point_mass": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_pseudo_double_powerlaw": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_radial_interpolation": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_sersic_lens": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_sersic_utils": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_shapelet_pot_cartesian": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_shapelet_pot_polar": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_shear": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_sie": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_sis": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_sis_truncate": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_spemd": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_spep": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_splcore": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_spp": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_synthesis": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_tnfw": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_tnfw_ellipse": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Profiles.test_uldm": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Solver": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Solver.test_lens_equation_solver": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Solver.test_solver": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Solver.test_solver2": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Solver.test_solver4": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Util": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_Util.test_epl_util": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_arc_distortions": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_convergence_integrals": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_lens_model": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_lens_model_extensions": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_lens_param": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_numeric_lens_differentials": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_profile_integrals": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LensModel.test_single_plane": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LightModel": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LightModel.test_Profiles": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LightModel.test_Profiles.test_chameleon": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LightModel.test_Profiles.test_ellipsoid": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LightModel.test_Profiles.test_gaussian": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LightModel.test_Profiles.test_interpolation": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LightModel.test_Profiles.test_linear": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LightModel.test_Profiles.test_moffat": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LightModel.test_Profiles.test_nie": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LightModel.test_Profiles.test_power_law": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LightModel.test_Profiles.test_profile_base": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LightModel.test_Profiles.test_sersic": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LightModel.test_Profiles.test_shapelets": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LightModel.test_Profiles.test_shapelets_ellipse": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LightModel.test_Profiles.test_shapelets_polar": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LightModel.test_Profiles.test_starlets": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LightModel.test_Profiles.test_uniform": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LightModel.test_light3d": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LightModel.test_light_model": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LightModel.test_light_param": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_LightModel.test_linear_basis": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_MRTS": {
    "__set__": true,
    "elements": [
      "pyspike"
    ]
  },
  "test.test_MyAMI_crosscheck": {
    "__set__": true,
    "elements": [
      "pymyami"
    ]
  },
  "test.test_Plots": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Plots.test_chain_plot": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Plots.test_lens_plot": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Plots.test_model_plot": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Plots.test_multi_patch_plot": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Plots.test_plot_quasar_images": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Plots.test_plot_util": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Plots.test_tracer_plot": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_PointSource": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_PointSource.test_Types": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_PointSource.test_Types.test_lensed_position": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_PointSource.test_Types.test_ps_base": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_PointSource.test_Types.test_source_position": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_PointSource.test_Types.test_unlensed": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_PointSource.test_point_source": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_PointSource.test_point_source_cached": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_PointSource.test_point_source_param": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_QPinvest": {
    "__set__": true,
    "elements": [
      "fine"
    ]
  },
  "test.test_Sampling": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Sampling.test_Likelihoods": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Sampling.test_Likelihoods.test_flux_ratio_likelihood": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Sampling.test_Likelihoods.test_image_likelihood": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Sampling.test_Likelihoods.test_kinematic_2D_likelihood": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Sampling.test_Likelihoods.test_kinematic_NN_call": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Sampling.test_Likelihoods.test_position_likelihood": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Sampling.test_Likelihoods.test_prior_likelihood": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Sampling.test_Likelihoods.test_time_delay_likelihood": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Sampling.test_Pool": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Sampling.test_Pool.test_pool": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Sampling.test_Samplers": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Sampling.test_Samplers.conftest": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Sampling.test_Samplers.test_base_nested_sampler": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Sampling.test_Samplers.test_cobaya_sampler": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Sampling.test_Samplers.test_dynesty_sampler": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Sampling.test_Samplers.test_multinest_sampler": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Sampling.test_Samplers.test_nautilus": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Sampling.test_Samplers.test_nautilus_sampler": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Sampling.test_Samplers.test_polychord_sampler": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Sampling.test_Samplers.test_pso": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Sampling.test_likelihood": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Sampling.test_param_groups": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Sampling.test_parameters": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Sampling.test_sampler": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Sampling.test_special_param": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_SimulationAPI": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_SimulationAPI.test_ObservationConfig": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_SimulationAPI.test_ObservationConfig.test_DES": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_SimulationAPI.test_ObservationConfig.test_Euclid": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_SimulationAPI.test_ObservationConfig.test_HST": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_SimulationAPI.test_ObservationConfig.test_JWST": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_SimulationAPI.test_ObservationConfig.test_LSST": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_SimulationAPI.test_ObservationConfig.test_Roman": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_SimulationAPI.test_ObservationConfig.test_ZTF": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_SimulationAPI.test_data_api": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_SimulationAPI.test_model_api": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_SimulationAPI.test_observation_api": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_SimulationAPI.test_observation_constructor": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_SimulationAPI.test_point_source_variability": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_SimulationAPI.test_sim_api": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_TSAmultiStage": {
    "__set__": true,
    "elements": [
      "fine"
    ]
  },
  "test.test_Util": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Util.simulation_util": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Util.test_analysis_util": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Util.test_class_creator": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Util.test_coolest": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Util.test_correlation": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Util.test_data_util": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Util.test_derivative_util": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Util.test_image_util": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Util.test_kernel_util": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Util.test_kin_sampling_util": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Util.test_magnification_finite_util": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Util.test_mask_util": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Util.test_multi_gauss_expansion": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Util.test_package_util": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Util.test_param_util": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Util.test_prob_density": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Util.test_sampling_util": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Util.test_simulation_util": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Util.test_util": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Workflow": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Workflow.test_alignment_matching": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Workflow.test_fitting_sequence": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Workflow.test_flux_calibration": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Workflow.test_multiband_update_manager": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Workflow.test_psf_fitting": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Workflow.test_tracer_model_fit": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_Workflow.test_update_manager": {
    "__set__": true,
    "elements": [
      "lenstronomy"
    ]
  },
  "test.test_active_set": {
    "__set__": true,
    "elements": [
      "cyanure"
    ]
  },
  "test.test_adaptive_stepsize_controller": {
    "__set__": true,
    "elements": [
      "diffrax"
    ]
  },
  "test.test_add_custom_field_setting_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_add_data": {
    "__set__": true,
    "elements": [
      "pyugrid"
    ]
  },
  "test.test_add_followers_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_add_members_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_adjoint": {
    "__set__": true,
    "elements": [
      "diffrax"
    ]
  },
  "test.test_advanced": {
    "__set__": true,
    "elements": [
      "pyshacl"
    ]
  },
  "test.test_ai": {
    "__set__": true,
    "elements": [
      "museotoolbox"
    ]
  },
  "test.test_alias": {
    "__set__": true,
    "elements": [
      "neomodel"
    ]
  },
  "test.test_align": {
    "__set__": true,
    "elements": [
      "pdb2sql"
    ]
  },
  "test.test_all_of_project_response_owner": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_all_of_project_template_base_owner": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_all_of_project_template_response_owner": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_all_of_story_response_new_date_value": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_all_of_story_response_old_date_value": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_all_of_task_template_response_created_by": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_all_of_task_template_response_project": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_all_of_task_template_response_template": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_all_of_user_task_list_base_owner": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_all_of_user_task_list_base_workspace": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_all_of_user_task_list_compact_owner": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_all_of_user_task_list_compact_workspace": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_all_of_user_task_list_request_owner": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_all_of_user_task_list_request_workspace": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_all_of_user_task_list_response_owner": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_all_of_user_task_list_response_workspace": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_all_of_workspace_membership_response_user_task_list_owner": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_all_of_workspace_membership_response_user_task_list_workspace": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_almostorthogonal": {
    "__set__": true,
    "elements": [
      "geotorch"
    ]
  },
  "test.test_analysis": {
    "__set__": true,
    "elements": [
      "px4tools"
    ]
  },
  "test.test_anchors": {
    "__set__": true,
    "elements": [
      "pytest-check-links"
    ]
  },
  "test.test_angle": {
    "__set__": true,
    "elements": [
      "svgelements"
    ]
  },
  "test.test_antialias": {
    "__set__": true,
    "elements": [
      "abtem"
    ]
  },
  "test.test_aoi": {
    "__set__": true,
    "elements": [
      "pyproj"
    ]
  },
  "test.test_api": {
    "__set__": true,
    "elements": [
      "gempy",
      "jedi",
      "marcel"
    ]
  },
  "test.test_api.import_tree_for_usages": {
    "__set__": true,
    "elements": [
      "jedi"
    ]
  },
  "test.test_api.import_tree_for_usages.a": {
    "__set__": true,
    "elements": [
      "jedi"
    ]
  },
  "test.test_api.import_tree_for_usages.b": {
    "__set__": true,
    "elements": [
      "jedi"
    ]
  },
  "test.test_api.simple_import": {
    "__set__": true,
    "elements": [
      "jedi"
    ]
  },
  "test.test_api.simple_import.module": {
    "__set__": true,
    "elements": [
      "jedi"
    ]
  },
  "test.test_api.simple_import.module2": {
    "__set__": true,
    "elements": [
      "jedi"
    ]
  },
  "test.test_api.test_analysis": {
    "__set__": true,
    "elements": [
      "jedi"
    ]
  },
  "test.test_api.test_api": {
    "__set__": true,
    "elements": [
      "jedi"
    ]
  },
  "test.test_api.test_api_classes_follow_definition": {
    "__set__": true,
    "elements": [
      "jedi"
    ]
  },
  "test.test_api.test_backends": {
    "__set__": true,
    "elements": [
      "gempy"
    ]
  },
  "test.test_api.test_call_signatures": {
    "__set__": true,
    "elements": [
      "jedi"
    ]
  },
  "test.test_api.test_classes": {
    "__set__": true,
    "elements": [
      "jedi"
    ]
  },
  "test.test_api.test_completion": {
    "__set__": true,
    "elements": [
      "jedi"
    ]
  },
  "test.test_api.test_defined_names": {
    "__set__": true,
    "elements": [
      "jedi"
    ]
  },
  "test.test_api.test_fault_api": {
    "__set__": true,
    "elements": [
      "gempy"
    ]
  },
  "test.test_api.test_full_name": {
    "__set__": true,
    "elements": [
      "jedi"
    ]
  },
  "test.test_api.test_gempy_legacy_comp": {
    "__set__": true,
    "elements": [
      "gempy"
    ]
  },
  "test.test_api.test_initialization_and_compute_api": {
    "__set__": true,
    "elements": [
      "gempy"
    ]
  },
  "test.test_api.test_interpreter": {
    "__set__": true,
    "elements": [
      "jedi"
    ]
  },
  "test.test_api.test_model_construction_granular": {
    "__set__": true,
    "elements": [
      "gempy"
    ]
  },
  "test.test_api.test_modify_input_data": {
    "__set__": true,
    "elements": [
      "gempy"
    ]
  },
  "test.test_api.test_show_input_data": {
    "__set__": true,
    "elements": [
      "gempy"
    ]
  },
  "test.test_api.test_unicode": {
    "__set__": true,
    "elements": [
      "jedi"
    ]
  },
  "test.test_api.test_usages": {
    "__set__": true,
    "elements": [
      "jedi"
    ]
  },
  "test.test_api2": {
    "__set__": true,
    "elements": [
      "marcel"
    ]
  },
  "test.test_api_code_source": {
    "__set__": true,
    "elements": [
      "kfp-server-api"
    ]
  },
  "test.test_api_cron_schedule": {
    "__set__": true,
    "elements": [
      "kfp-server-api"
    ]
  },
  "test.test_api_exception": {
    "__set__": true,
    "elements": [
      "ibm-cloud-sdk-core"
    ]
  },
  "test.test_api_experiment": {
    "__set__": true,
    "elements": [
      "kfp-server-api"
    ]
  },
  "test.test_api_get_template_response": {
    "__set__": true,
    "elements": [
      "kfp-server-api"
    ]
  },
  "test.test_api_job": {
    "__set__": true,
    "elements": [
      "kfp-server-api"
    ]
  },
  "test.test_api_list_experiments_response": {
    "__set__": true,
    "elements": [
      "kfp-server-api"
    ]
  },
  "test.test_api_list_jobs_response": {
    "__set__": true,
    "elements": [
      "kfp-server-api"
    ]
  },
  "test.test_api_list_pipeline_versions_response": {
    "__set__": true,
    "elements": [
      "kfp-server-api"
    ]
  },
  "test.test_api_list_pipelines_response": {
    "__set__": true,
    "elements": [
      "kfp-server-api"
    ]
  },
  "test.test_api_list_runs_response": {
    "__set__": true,
    "elements": [
      "kfp-server-api"
    ]
  },
  "test.test_api_parameter": {
    "__set__": true,
    "elements": [
      "kfp-server-api"
    ]
  },
  "test.test_api_periodic_schedule": {
    "__set__": true,
    "elements": [
      "kfp-server-api"
    ]
  },
  "test.test_api_pipeline": {
    "__set__": true,
    "elements": [
      "kfp-server-api"
    ]
  },
  "test.test_api_pipeline_runtime": {
    "__set__": true,
    "elements": [
      "kfp-server-api"
    ]
  },
  "test.test_api_pipeline_spec": {
    "__set__": true,
    "elements": [
      "kfp-server-api"
    ]
  },
  "test.test_api_pipeline_version": {
    "__set__": true,
    "elements": [
      "kfp-server-api"
    ]
  },
  "test.test_api_read_artifact_response": {
    "__set__": true,
    "elements": [
      "kfp-server-api"
    ]
  },
  "test.test_api_relationship": {
    "__set__": true,
    "elements": [
      "kfp-server-api"
    ]
  },
  "test.test_api_report_run_metrics_request": {
    "__set__": true,
    "elements": [
      "kfp-server-api"
    ]
  },
  "test.test_api_report_run_metrics_response": {
    "__set__": true,
    "elements": [
      "kfp-server-api"
    ]
  },
  "test.test_api_resource_key": {
    "__set__": true,
    "elements": [
      "kfp-server-api"
    ]
  },
  "test.test_api_resource_reference": {
    "__set__": true,
    "elements": [
      "kfp-server-api"
    ]
  },
  "test.test_api_resource_type": {
    "__set__": true,
    "elements": [
      "kfp-server-api"
    ]
  },
  "test.test_api_run": {
    "__set__": true,
    "elements": [
      "kfp-server-api"
    ]
  },
  "test.test_api_run_detail": {
    "__set__": true,
    "elements": [
      "kfp-server-api"
    ]
  },
  "test.test_api_run_metric": {
    "__set__": true,
    "elements": [
      "kfp-server-api"
    ]
  },
  "test.test_api_status": {
    "__set__": true,
    "elements": [
      "kfp-server-api"
    ]
  },
  "test.test_api_trigger": {
    "__set__": true,
    "elements": [
      "kfp-server-api"
    ]
  },
  "test.test_api_url": {
    "__set__": true,
    "elements": [
      "kfp-server-api"
    ]
  },
  "test.test_app_hooks": {
    "__set__": true,
    "elements": [
      "forest"
    ]
  },
  "test.test_approximate": {
    "__set__": true,
    "elements": [
      "svgelements"
    ]
  },
  "test.test_approximation": {
    "__set__": true,
    "elements": [
      "pymyami"
    ]
  },
  "test.test_arc_length": {
    "__set__": true,
    "elements": [
      "svgelements"
    ]
  },
  "test.test_arclength": {
    "__set__": true,
    "elements": [
      "beziers"
    ]
  },
  "test.test_argparse": {
    "__set__": true,
    "elements": [
      "forest"
    ]
  },
  "test.test_arithmetic": {
    "__set__": true,
    "elements": [
      "crypten"
    ]
  },
  "test.test_artifact": {
    "__set__": true,
    "elements": [
      "mms-python-client"
    ]
  },
  "test.test_artifact_api": {
    "__set__": true,
    "elements": [
      "mms-python-client"
    ]
  },
  "test.test_artifacts": {
    "__set__": true,
    "elements": [
      "mms-python-client"
    ]
  },
  "test.test_asana_named_resource": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_asana_named_resource_array": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_asana_resource": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_attachment_base": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_attachment_compact": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_attachment_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_attachment_response": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_attachment_response_array": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_attachment_response_data": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_attachment_response_parent": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_attachment_response_parent_created_by": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_attachments_api": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_audit": {
    "__set__": true,
    "elements": [
      "pip-audit"
    ]
  },
  "test.test_audit_log_api_api": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_audit_log_event": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_audit_log_event_actor": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_audit_log_event_array": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_audit_log_event_context": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_audit_log_event_details": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_audit_log_event_resource": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_authenticator": {
    "__set__": true,
    "elements": [
      "ibm-cloud-sdk-core"
    ]
  },
  "test.test_auto_thresh": {
    "__set__": true,
    "elements": [
      "pyspike"
    ]
  },
  "test.test_autograd": {
    "__set__": true,
    "elements": [
      "crypten"
    ]
  },
  "test.test_automatic_segmentation": {
    "__set__": true,
    "elements": [
      "micro_sam"
    ]
  },
  "test.test_auxillary_checks": {
    "__set__": true,
    "elements": [
      "ioos_qartod"
    ]
  },
  "test.test_awips221": {
    "__set__": true,
    "elements": [
      "pyproj"
    ]
  },
  "test.test_balanceLimit": {
    "__set__": true,
    "elements": [
      "fine"
    ]
  },
  "test.test_base": {
    "__set__": true,
    "elements": [
      "marcel"
    ]
  },
  "test.test_baseOT": {
    "__set__": true,
    "elements": [
      "crypten"
    ]
  },
  "test.test_base_elements": {
    "__set__": true,
    "elements": [
      "mistletoe-ebp"
    ]
  },
  "test.test_base_service": {
    "__set__": true,
    "elements": [
      "ibm-cloud-sdk-core"
    ]
  },
  "test.test_basic": {
    "__set__": true,
    "elements": [
      "hole-filling-liepa"
    ]
  },
  "test.test_basic_authenticator": {
    "__set__": true,
    "elements": [
      "ibm-cloud-sdk-core"
    ]
  },
  "test.test_batch": {
    "__set__": true,
    "elements": [
      "neomodel"
    ]
  },
  "test.test_batch_api_api": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_batch_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_batch_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_batch_request_action": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_batch_request_actions": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_batch_request_options": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_batch_response": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_batch_response_array": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_bbox": {
    "__set__": true,
    "elements": [
      "svgelements"
    ]
  },
  "test.test_bearer_authenticator": {
    "__set__": true,
    "elements": [
      "ibm-cloud-sdk-core"
    ]
  },
  "test.test_benchmark": {
    "__set__": true,
    "elements": [
      "crypten"
    ]
  },
  "test.test_benchmarks": {
    "__set__": true,
    "elements": [
      "asv"
    ]
  },
  "test.test_bending": {
    "__set__": true,
    "elements": [
      "polyfempy"
    ]
  },
  "test.test_binary": {
    "__set__": true,
    "elements": [
      "crypten"
    ]
  },
  "test.test_bindings": {
    "__set__": true,
    "elements": [
      "hole-filling-liepa"
    ]
  },
  "test.test_block_token": {
    "__set__": true,
    "elements": [
      "mistletoe-ebp"
    ]
  },
  "test.test_booleanshapeoperations": {
    "__set__": true,
    "elements": [
      "beziers"
    ]
  },
  "test.test_bounded_while_loop": {
    "__set__": true,
    "elements": [
      "diffrax"
    ]
  },
  "test.test_bounds": {
    "__set__": true,
    "elements": [
      "beziers"
    ]
  },
  "test.test_brownian": {
    "__set__": true,
    "elements": [
      "diffrax"
    ]
  },
  "test.test_bugs": {
    "__set__": true,
    "elements": [
      "findiff"
    ]
  },
  "test.test_cache": {
    "__set__": true,
    "elements": [
      "abtem",
      "pip-audit",
      "pytest-check-links"
    ]
  },
  "test.test_cardinality": {
    "__set__": true,
    "elements": [
      "neomodel"
    ]
  },
  "test.test_cell_partitions": {
    "__set__": true,
    "elements": [
      "meshplex"
    ]
  },
  "test.test_charts": {
    "__set__": true,
    "elements": [
      "museotoolbox"
    ]
  },
  "test.test_check": {
    "__set__": true,
    "elements": [
      "asv"
    ]
  },
  "test.test_check_links": {
    "__set__": true,
    "elements": [
      "pytest-check-links"
    ]
  },
  "test.test_classification": {
    "__set__": true,
    "elements": [
      "sklearn-json"
    ]
  },
  "test.test_cli": {
    "__set__": true,
    "elements": [
      "forest",
      "mistletoe-ebp",
      "pip-audit",
      "pyproj",
      "pytest-check-links",
      "radiant-mlhub",
      "sat-search",
      "simple_slurm",
      "smac"
    ]
  },
  "test.test_cli.random_configuration_chooser_impl": {
    "__set__": true,
    "elements": [
      "smac"
    ]
  },
  "test.test_cli.test_deterministic_smac": {
    "__set__": true,
    "elements": [
      "smac"
    ]
  },
  "test.test_cli.test_restore_state": {
    "__set__": true,
    "elements": [
      "smac"
    ]
  },
  "test.test_client": {
    "__set__": true,
    "elements": [
      "python-hdfs",
      "radiant-mlhub",
      "wsproto"
    ]
  },
  "test.test_clippath": {
    "__set__": true,
    "elements": [
      "svgelements"
    ]
  },
  "test.test_clistyle": {
    "__set__": true,
    "elements": [
      "mycli"
    ]
  },
  "test.test_cmdline": {
    "__set__": true,
    "elements": [
      "pyinstrument",
      "pyshacl"
    ]
  },
  "test.test_coefs": {
    "__set__": true,
    "elements": [
      "findiff"
    ]
  },
  "test.test_color": {
    "__set__": true,
    "elements": [
      "svgelements"
    ]
  },
  "test.test_color_spec": {
    "__set__": true,
    "elements": [
      "forest"
    ]
  },
  "test.test_colors": {
    "__set__": true,
    "elements": [
      "forest"
    ]
  },
  "test.test_commit": {
    "__set__": true,
    "elements": [
      "mms-python-client"
    ]
  },
  "test.test_commits": {
    "__set__": true,
    "elements": [
      "mms-python-client"
    ]
  },
  "test.test_commodityConversionFactors": {
    "__set__": true,
    "elements": [
      "fine"
    ]
  },
  "test.test_commodityConversionFactorsTimeSeries": {
    "__set__": true,
    "elements": [
      "fine"
    ]
  },
  "test.test_commodityCostTimeSeries": {
    "__set__": true,
    "elements": [
      "fine"
    ]
  },
  "test.test_common": {
    "__set__": true,
    "elements": [
      "crypten"
    ]
  },
  "test.test_communicator": {
    "__set__": true,
    "elements": [
      "crypten"
    ]
  },
  "test.test_community_bugs": {
    "__set__": true,
    "elements": [
      "gempy"
    ]
  },
  "test.test_community_bugs.test_community_bugs": {
    "__set__": true,
    "elements": [
      "gempy"
    ]
  },
  "test.test_compare": {
    "__set__": true,
    "elements": [
      "asv"
    ]
  },
  "test.test_completion_engine": {
    "__set__": true,
    "elements": [
      "mycli"
    ]
  },
  "test.test_completion_refresher": {
    "__set__": true,
    "elements": [
      "mycli"
    ]
  },
  "test.test_components_modal": {
    "__set__": true,
    "elements": [
      "forest"
    ]
  },
  "test.test_components_tiles": {
    "__set__": true,
    "elements": [
      "forest"
    ]
  },
  "test.test_conf": {
    "__set__": true,
    "elements": [
      "asv"
    ]
  },
  "test.test_config": {
    "__set__": true,
    "elements": [
      "forest",
      "muspinsim",
      "mycli",
      "pykube",
      "python-hdfs",
      "seml"
    ]
  },
  "test.test_configspace": {
    "__set__": true,
    "elements": [
      "smac"
    ]
  },
  "test.test_configspace.test_configspace": {
    "__set__": true,
    "elements": [
      "smac"
    ]
  },
  "test.test_connection": {
    "__set__": true,
    "elements": [
      "wsproto"
    ]
  },
  "test.test_console": {
    "__set__": true,
    "elements": [
      "asv"
    ]
  },
  "test.test_constants": {
    "__set__": true,
    "elements": [
      "muspinsim"
    ]
  },
  "test.test_container_authenticator": {
    "__set__": true,
    "elements": [
      "ibm-cloud-sdk-core"
    ]
  },
  "test.test_container_token_manager": {
    "__set__": true,
    "elements": [
      "ibm-cloud-sdk-core"
    ]
  },
  "test.test_context": {
    "__set__": true,
    "elements": [
      "crypten"
    ]
  },
  "test.test_continuous": {
    "__set__": true,
    "elements": [
      "asv"
    ]
  },
  "test.test_contrib": {
    "__set__": true,
    "elements": [
      "mistletoe-ebp",
      "neomodel"
    ]
  },
  "test.test_contrib.test_github_wiki": {
    "__set__": true,
    "elements": [
      "mistletoe-ebp"
    ]
  },
  "test.test_contrib.test_jira_renderer": {
    "__set__": true,
    "elements": [
      "mistletoe-ebp"
    ]
  },
  "test.test_contrib.test_mathjax": {
    "__set__": true,
    "elements": [
      "mistletoe-ebp"
    ]
  },
  "test.test_contrib.test_scheme": {
    "__set__": true,
    "elements": [
      "mistletoe-ebp"
    ]
  },
  "test.test_contrib.test_semi_structured": {
    "__set__": true,
    "elements": [
      "neomodel"
    ]
  },
  "test.test_contrib.test_toc_renderer": {
    "__set__": true,
    "elements": [
      "mistletoe-ebp"
    ]
  },
  "test.test_control_volumes": {
    "__set__": true,
    "elements": [
      "meshplex"
    ]
  },
  "test.test_conversionPartLoad": {
    "__set__": true,
    "elements": [
      "fine"
    ]
  },
  "test.test_conversiondynamic": {
    "__set__": true,
    "elements": [
      "fine"
    ]
  },
  "test.test_convert_request": {
    "__set__": true,
    "elements": [
      "mms-python-client"
    ]
  },
  "test.test_convert_response": {
    "__set__": true,
    "elements": [
      "mms-python-client"
    ]
  },
  "test.test_copy": {
    "__set__": true,
    "elements": [
      "svgelements"
    ]
  },
  "test.test_copyright_license": {
    "__set__": true,
    "elements": [
      "colcon-cmake"
    ]
  },
  "test.test_core": {
    "__set__": true,
    "elements": [
      "awssert",
      "gempy",
      "simple_slurm"
    ]
  },
  "test.test_core.test_color_generator": {
    "__set__": true,
    "elements": [
      "gempy"
    ]
  },
  "test.test_core.test_installation": {
    "__set__": true,
    "elements": [
      "gempy"
    ]
  },
  "test.test_core.test_transfoms": {
    "__set__": true,
    "elements": [
      "gempy"
    ]
  },
  "test.test_corners": {
    "__set__": true,
    "elements": [
      "beziers"
    ]
  },
  "test.test_cp4d_authenticator": {
    "__set__": true,
    "elements": [
      "ibm-cloud-sdk-core"
    ]
  },
  "test.test_cp4d_token_manager": {
    "__set__": true,
    "elements": [
      "ibm-cloud-sdk-core"
    ]
  },
  "test.test_create_facets": {
    "__set__": true,
    "elements": [
      "meshplex"
    ]
  },
  "test.test_create_membership_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_create_time_tracking_entry_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_cross_validation": {
    "__set__": true,
    "elements": [
      "botorch",
      "museotoolbox"
    ]
  },
  "test.test_crypten": {
    "__set__": true,
    "elements": [
      "crypten"
    ]
  },
  "test.test_css": {
    "__set__": true,
    "elements": [
      "svgelements"
    ]
  },
  "test.test_ctf": {
    "__set__": true,
    "elements": [
      "abtem"
    ]
  },
  "test.test_cubic": {
    "__set__": true,
    "elements": [
      "beziers"
    ]
  },
  "test.test_cubic_bezier": {
    "__set__": true,
    "elements": [
      "svgelements"
    ]
  },
  "test.test_cuda": {
    "__set__": true,
    "elements": [
      "botorch",
      "crypten"
    ]
  },
  "test.test_curvefit": {
    "__set__": true,
    "elements": [
      "beziers"
    ]
  },
  "test.test_custom_field_base": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_custom_field_base_date_value": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_custom_field_base_enum_options": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_custom_field_base_enum_value": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_custom_field_compact": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_custom_field_gid_enum_options_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_custom_field_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_custom_field_response": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_custom_field_response_array": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_custom_field_response_created_by": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_custom_field_response_data": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_custom_field_response_people_value": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_custom_field_setting_base": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_custom_field_setting_compact": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_custom_field_setting_response": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_custom_field_setting_response_array": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_custom_field_setting_response_custom_field": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_custom_field_setting_response_data": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_custom_field_setting_response_parent": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_custom_field_setting_response_project": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_custom_field_settings_api": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_custom_fields_api": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_custom_fields_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_custom_fields_custom_field_gid_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_cypher": {
    "__set__": true,
    "elements": [
      "neomodel"
    ]
  },
  "test.test_dash_validate": {
    "__set__": true,
    "elements": [
      "pyshacl"
    ]
  },
  "test.test_data": {
    "__set__": true,
    "elements": [
      "cwinpy",
      "forest"
    ]
  },
  "test.test_database": {
    "__set__": true,
    "elements": [
      "pyproj"
    ]
  },
  "test.test_datadir": {
    "__set__": true,
    "elements": [
      "pyproj"
    ]
  },
  "test.test_dataset": {
    "__set__": true,
    "elements": [
      "pyugrid"
    ]
  },
  "test.test_datashader": {
    "__set__": true,
    "elements": [
      "forest"
    ]
  },
  "test.test_date_variable_compact": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_date_variable_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_datum": {
    "__set__": true,
    "elements": [
      "pyproj"
    ]
  },
  "test.test_datum_shift": {
    "__set__": true,
    "elements": [
      "pyproj"
    ]
  },
  "test.test_db_control": {
    "__set__": true,
    "elements": [
      "forest"
    ]
  },
  "test.test_db_current": {
    "__set__": true,
    "elements": [
      "forest"
    ]
  },
  "test.test_db_database": {
    "__set__": true,
    "elements": [
      "forest"
    ]
  },
  "test.test_db_future": {
    "__set__": true,
    "elements": [
      "forest"
    ]
  },
  "test.test_db_health": {
    "__set__": true,
    "elements": [
      "forest"
    ]
  },
  "test.test_db_locate": {
    "__set__": true,
    "elements": [
      "forest"
    ]
  },
  "test.test_db_main": {
    "__set__": true,
    "elements": [
      "forest"
    ]
  },
  "test.test_db_util": {
    "__set__": true,
    "elements": [
      "forest"
    ]
  },
  "test.test_dbspecial": {
    "__set__": true,
    "elements": [
      "mycli"
    ]
  },
  "test.test_debug": {
    "__set__": true,
    "elements": [
      "crypten"
    ]
  },
  "test.test_descriptive_elements": {
    "__set__": true,
    "elements": [
      "svgelements"
    ]
  },
  "test.test_detailed_response": {
    "__set__": true,
    "elements": [
      "ibm-cloud-sdk-core"
    ]
  },
  "test.test_detect": {
    "__set__": true,
    "elements": [
      "abtem"
    ]
  },
  "test.test_detest": {
    "__set__": true,
    "elements": [
      "diffrax"
    ]
  },
  "test.test_deviation": {
    "__set__": true,
    "elements": [
      "otfmi"
    ]
  },
  "test.test_dft": {
    "__set__": true,
    "elements": [
      "abtem"
    ]
  },
  "test.test_diff": {
    "__set__": true,
    "elements": [
      "findiff"
    ]
  },
  "test.test_differential_ops": {
    "__set__": true,
    "elements": [
      "galgebra"
    ]
  },
  "test.test_dimension": {
    "__set__": true,
    "elements": [
      "forest"
    ]
  },
  "test.test_directionality": {
    "__set__": true,
    "elements": [
      "pyspike"
    ]
  },
  "test.test_disk": {
    "__set__": true,
    "elements": [
      "forest"
    ]
  },
  "test.test_distance": {
    "__set__": true,
    "elements": [
      "beziers",
      "geopy",
      "pyspike"
    ]
  },
  "test.test_distributions": {
    "__set__": true,
    "elements": [
      "crypten"
    ]
  },
  "test.test_doctest_wrapper": {
    "__set__": true,
    "elements": [
      "pyproj"
    ]
  },
  "test.test_documents": {
    "__set__": true,
    "elements": [
      "mms-python-client"
    ]
  },
  "test.test_drivers": {
    "__set__": true,
    "elements": [
      "forest"
    ]
  },
  "test.test_drivers_eida50": {
    "__set__": true,
    "elements": [
      "forest"
    ]
  },
  "test.test_drivers_gpm": {
    "__set__": true,
    "elements": [
      "forest"
    ]
  },
  "test.test_drivers_intake_loader": {
    "__set__": true,
    "elements": [
      "forest"
    ]
  },
  "test.test_drivers_name": {
    "__set__": true,
    "elements": [
      "forest"
    ]
  },
  "test.test_drivers_nearcast": {
    "__set__": true,
    "elements": [
      "forest"
    ]
  },
  "test.test_drivers_saf": {
    "__set__": true,
    "elements": [
      "forest"
    ]
  },
  "test.test_drivers_unified_model": {
    "__set__": true,
    "elements": [
      "forest"
    ]
  },
  "test.test_dxchange": {
    "__set__": true,
    "elements": [
      "dxchange"
    ]
  },
  "test.test_dxchange.test_exchange": {
    "__set__": true,
    "elements": [
      "dxchange"
    ]
  },
  "test.test_dxchange.test_reader": {
    "__set__": true,
    "elements": [
      "dxchange"
    ]
  },
  "test.test_dxchange.test_writer": {
    "__set__": true,
    "elements": [
      "dxchange"
    ]
  },
  "test.test_dynamodb": {
    "__set__": true,
    "elements": [
      "awssert"
    ]
  },
  "test.test_earth_networks": {
    "__set__": true,
    "elements": [
      "forest"
    ]
  },
  "test.test_edgars": {
    "__set__": true,
    "elements": [
      "gars_field"
    ]
  },
  "test.test_eels": {
    "__set__": true,
    "elements": [
      "abtem"
    ]
  },
  "test.test_eida50": {
    "__set__": true,
    "elements": [
      "forest"
    ]
  },
  "test.test_element": {
    "__set__": true,
    "elements": [
      "mms-python-client",
      "svgelements"
    ]
  },
  "test.test_element_api": {
    "__set__": true,
    "elements": [
      "mms-python-client"
    ]
  },
  "test.test_elements": {
    "__set__": true,
    "elements": [
      "mms-python-client"
    ]
  },
  "test.test_empty": {
    "__set__": true,
    "elements": [
      "pyspike"
    ]
  },
  "test.test_empty_response": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_empty_response_data": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_encode": {
    "__set__": true,
    "elements": [
      "forest"
    ]
  },
  "test.test_end_to_end": {
    "__set__": true,
    "elements": [
      "botorch"
    ]
  },
  "test.test_energy": {
    "__set__": true,
    "elements": [
      "abtem"
    ]
  },
  "test.test_enum_option": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_enum_option_base": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_enum_option_data": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_enum_option_insert_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_enum_option_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_enum_options_enum_option_gid_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_enum_options_insert_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_env": {
    "__set__": true,
    "elements": [
      "pysr"
    ]
  },
  "test.test_environment": {
    "__set__": true,
    "elements": [
      "asv"
    ]
  },
  "test.test_environment_bench": {
    "__set__": true,
    "elements": [
      "asv"
    ]
  },
  "test.test_epid": {
    "__set__": true,
    "elements": [
      "otfmi"
    ]
  },
  "test.test_epm": {
    "__set__": true,
    "elements": [
      "smac"
    ]
  },
  "test.test_epm.test_base_epm": {
    "__set__": true,
    "elements": [
      "smac"
    ]
  },
  "test.test_epm.test_gp": {
    "__set__": true,
    "elements": [
      "smac"
    ]
  },
  "test.test_epm.test_gp_mcmc": {
    "__set__": true,
    "elements": [
      "smac"
    ]
  },
  "test.test_epm.test_gp_priors": {
    "__set__": true,
    "elements": [
      "smac"
    ]
  },
  "test.test_epm.test_rf_with_instances": {
    "__set__": true,
    "elements": [
      "smac"
    ]
  },
  "test.test_epm.test_uncorrelated_mo_rf_with_instances": {
    "__set__": true,
    "elements": [
      "smac"
    ]
  },
  "test.test_epm.test_util_funcs": {
    "__set__": true,
    "elements": [
      "smac"
    ]
  },
  "test.test_error": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_error_response": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_error_response_errors": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_estimator": {
    "__set__": true,
    "elements": [
      "cyanure"
    ]
  },
  "test.test_evaluate": {
    "__set__": true,
    "elements": [
      "jedi"
    ]
  },
  "test.test_evaluate.init_extension_module.__init__": {
    "__set__": true,
    "elements": [
      "jedi"
    ]
  },
  "test.test_evaluate.namespace_package.ns1.pkg": {
    "__set__": true,
    "elements": [
      "jedi"
    ]
  },
  "test.test_evaluate.namespace_package.ns1.pkg.ns1_file": {
    "__set__": true,
    "elements": [
      "jedi"
    ]
  },
  "test.test_evaluate.namespace_package.ns1.pkg.ns1_folder": {
    "__set__": true,
    "elements": [
      "jedi"
    ]
  },
  "test.test_evaluate.namespace_package.ns2.pkg.ns2_folder": {
    "__set__": true,
    "elements": [
      "jedi"
    ]
  },
  "test.test_evaluate.namespace_package.ns2.pkg.ns2_folder.nested": {
    "__set__": true,
    "elements": [
      "jedi"
    ]
  },
  "test.test_evaluate.nested_namespaces": {
    "__set__": true,
    "elements": [
      "jedi"
    ]
  },
  "test.test_evaluate.nested_namespaces.namespace": {
    "__set__": true,
    "elements": [
      "jedi"
    ]
  },
  "test.test_evaluate.nested_namespaces.namespace.pkg": {
    "__set__": true,
    "elements": [
      "jedi"
    ]
  },
  "test.test_evaluate.not_in_sys_path": {
    "__set__": true,
    "elements": [
      "jedi"
    ]
  },
  "test.test_evaluate.not_in_sys_path.not_in_sys_path": {
    "__set__": true,
    "elements": [
      "jedi"
    ]
  },
  "test.test_evaluate.not_in_sys_path.not_in_sys_path_package": {
    "__set__": true,
    "elements": [
      "jedi"
    ]
  },
  "test.test_evaluate.not_in_sys_path.not_in_sys_path_package.module": {
    "__set__": true,
    "elements": [
      "jedi"
    ]
  },
  "test.test_evaluate.not_in_sys_path.pkg": {
    "__set__": true,
    "elements": [
      "jedi"
    ]
  },
  "test.test_evaluate.not_in_sys_path.pkg.module": {
    "__set__": true,
    "elements": [
      "jedi"
    ]
  },
  "test.test_evaluate.test_absolute_import": {
    "__set__": true,
    "elements": [
      "jedi"
    ]
  },
  "test.test_evaluate.test_annotations": {
    "__set__": true,
    "elements": [
      "jedi"
    ]
  },
  "test.test_evaluate.test_buildout_detection": {
    "__set__": true,
    "elements": [
      "jedi"
    ]
  },
  "test.test_evaluate.test_compiled": {
    "__set__": true,
    "elements": [
      "jedi"
    ]
  },
  "test.test_evaluate.test_context": {
    "__set__": true,
    "elements": [
      "jedi"
    ]
  },
  "test.test_evaluate.test_docstring": {
    "__set__": true,
    "elements": [
      "jedi"
    ]
  },
  "test.test_evaluate.test_extension": {
    "__set__": true,
    "elements": [
      "jedi"
    ]
  },
  "test.test_evaluate.test_helpers": {
    "__set__": true,
    "elements": [
      "jedi"
    ]
  },
  "test.test_evaluate.test_implicit_namespace_package": {
    "__set__": true,
    "elements": [
      "jedi"
    ]
  },
  "test.test_evaluate.test_imports": {
    "__set__": true,
    "elements": [
      "jedi"
    ]
  },
  "test.test_evaluate.test_literals": {
    "__set__": true,
    "elements": [
      "jedi"
    ]
  },
  "test.test_evaluate.test_mixed": {
    "__set__": true,
    "elements": [
      "jedi"
    ]
  },
  "test.test_evaluate.test_namespace_package": {
    "__set__": true,
    "elements": [
      "jedi"
    ]
  },
  "test.test_evaluate.test_precedence": {
    "__set__": true,
    "elements": [
      "jedi"
    ]
  },
  "test.test_evaluate.test_pyc": {
    "__set__": true,
    "elements": [
      "jedi"
    ]
  },
  "test.test_evaluate.test_representation": {
    "__set__": true,
    "elements": [
      "jedi"
    ]
  },
  "test.test_evaluate.test_stdlib": {
    "__set__": true,
    "elements": [
      "jedi"
    ]
  },
  "test.test_evaluate.test_sys_path": {
    "__set__": true,
    "elements": [
      "jedi"
    ]
  },
  "test.test_event": {
    "__set__": true,
    "elements": [
      "abtem",
      "diffrax"
    ]
  },
  "test.test_event_response": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_event_response_array": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_event_response_change": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_event_response_parent": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_event_response_resource": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_event_response_user": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_events": {
    "__set__": true,
    "elements": [
      "wsproto"
    ]
  },
  "test.test_events_api": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_examples": {
    "__set__": true,
    "elements": [
      "python-hdfs"
    ]
  },
  "test.test_exception_logging": {
    "__set__": true,
    "elements": [
      "pyproj"
    ]
  },
  "test.test_exceptions": {
    "__set__": true,
    "elements": [
      "neomodel"
    ]
  },
  "test.test_experiment": {
    "__set__": true,
    "elements": [
      "muspinsim"
    ]
  },
  "test.test_experiment_service_api": {
    "__set__": true,
    "elements": [
      "kfp-server-api"
    ]
  },
  "test.test_experiment_storage_state": {
    "__set__": true,
    "elements": [
      "kfp-server-api"
    ]
  },
  "test.test_export": {
    "__set__": true,
    "elements": [
      "abtem",
      "otfmi"
    ]
  },
  "test.test_ext_avro": {
    "__set__": true,
    "elements": [
      "python-hdfs"
    ]
  },
  "test.test_ext_dataframe": {
    "__set__": true,
    "elements": [
      "python-hdfs"
    ]
  },
  "test.test_ext_kerberos": {
    "__set__": true,
    "elements": [
      "python-hdfs"
    ]
  },
  "test.test_extensions": {
    "__set__": true,
    "elements": [
      "wsproto"
    ]
  },
  "test.test_extra": {
    "__set__": true,
    "elements": [
      "pyshacl"
    ]
  },
  "test.test_facade": {
    "__set__": true,
    "elements": [
      "smac"
    ]
  },
  "test.test_facade.test_bohb4hpo_facade": {
    "__set__": true,
    "elements": [
      "smac"
    ]
  },
  "test.test_facade.test_func_facade": {
    "__set__": true,
    "elements": [
      "smac"
    ]
  },
  "test.test_facade.test_hb4ac_facade": {
    "__set__": true,
    "elements": [
      "smac"
    ]
  },
  "test.test_facade.test_hydra_facade": {
    "__set__": true,
    "elements": [
      "smac"
    ]
  },
  "test.test_facade.test_psmac_facade": {
    "__set__": true,
    "elements": [
      "smac"
    ]
  },
  "test.test_facade.test_roar_facade": {
    "__set__": true,
    "elements": [
      "smac"
    ]
  },
  "test.test_facade.test_smac4bo_facade": {
    "__set__": true,
    "elements": [
      "smac"
    ]
  },
  "test.test_facade.test_smac4hpo_facade": {
    "__set__": true,
    "elements": [
      "smac"
    ]
  },
  "test.test_facade.test_smac_facade": {
    "__set__": true,
    "elements": [
      "smac"
    ]
  },
  "test.test_feed": {
    "__set__": true,
    "elements": [
      "asv"
    ]
  },
  "test.test_field": {
    "__set__": true,
    "elements": [
      "gars_field"
    ]
  },
  "test.test_find": {
    "__set__": true,
    "elements": [
      "asv"
    ]
  },
  "test.test_find_data_set": {
    "__set__": true,
    "elements": [
      "pyugrid"
    ]
  },
  "test.test_find_nodes": {
    "__set__": true,
    "elements": [
      "pyugrid"
    ]
  },
  "test.test_findiff": {
    "__set__": true,
    "elements": [
      "findiff"
    ]
  },
  "test.test_fit": {
    "__set__": true,
    "elements": [
      "botorch"
    ]
  },
  "test.test_fitting": {
    "__set__": true,
    "elements": [
      "muspinsim"
    ]
  },
  "test.test_fix": {
    "__set__": true,
    "elements": [
      "pip-audit"
    ]
  },
  "test.test_fixtures": {
    "__set__": true,
    "elements": [
      "fine"
    ]
  },
  "test.test_flake8": {
    "__set__": true,
    "elements": [
      "colcon-cmake"
    ]
  },
  "test.test_fmpy": {
    "__set__": true,
    "elements": [
      "otfmi"
    ]
  },
  "test.test_footnotes": {
    "__set__": true,
    "elements": [
      "mistletoe-ebp"
    ]
  },
  "test.test_format": {
    "__set__": true,
    "elements": [
      "geopy"
    ]
  },
  "test.test_frame_protocol": {
    "__set__": true,
    "elements": [
      "wsproto"
    ]
  },
  "test.test_full_load_hours": {
    "__set__": true,
    "elements": [
      "fine"
    ]
  },
  "test.test_func": {
    "__set__": true,
    "elements": [
      "pylint-django"
    ]
  },
  "test.test_function": {
    "__set__": true,
    "elements": [
      "pyspike"
    ]
  },
  "test.test_functions": {
    "__set__": true,
    "elements": [
      "botorch"
    ]
  },
  "test.test_functions.test_base": {
    "__set__": true,
    "elements": [
      "botorch"
    ]
  },
  "test.test_functions.test_multi_fidelity": {
    "__set__": true,
    "elements": [
      "botorch"
    ]
  },
  "test.test_functions.test_multi_objective": {
    "__set__": true,
    "elements": [
      "botorch"
    ]
  },
  "test.test_functions.test_synthetic": {
    "__set__": true,
    "elements": [
      "botorch"
    ]
  },
  "test.test_gallery": {
    "__set__": true,
    "elements": [
      "forest"
    ]
  },
  "test.test_gars": {
    "__set__": true,
    "elements": [
      "gars_field"
    ]
  },
  "test.test_gedgars": {
    "__set__": true,
    "elements": [
      "gars_field"
    ]
  },
  "test.test_gen": {
    "__set__": true,
    "elements": [
      "botorch"
    ]
  },
  "test.test_general": {
    "__set__": true,
    "elements": [
      "pymyami"
    ]
  },
  "test.test_generate": {
    "__set__": true,
    "elements": [
      "otter-grader"
    ]
  },
  "test.test_generate.test_autograder": {
    "__set__": true,
    "elements": [
      "otter-grader"
    ]
  },
  "test.test_generate.test_token": {
    "__set__": true,
    "elements": [
      "otter-grader"
    ]
  },
  "test.test_generation": {
    "__set__": true,
    "elements": [
      "svgelements"
    ]
  },
  "test.test_generic_interfaces": {
    "__set__": true,
    "elements": [
      "pyspike"
    ]
  },
  "test.test_geod": {
    "__set__": true,
    "elements": [
      "pyproj"
    ]
  },
  "test.test_gh_pages": {
    "__set__": true,
    "elements": [
      "asv"
    ]
  },
  "test.test_ghrsstl4": {
    "__set__": true,
    "elements": [
      "forest"
    ]
  },
  "test.test_glider_checks": {
    "__set__": true,
    "elements": [
      "ioos_qartod"
    ]
  },
  "test.test_global_interpolation": {
    "__set__": true,
    "elements": [
      "diffrax"
    ]
  },
  "test.test_glp": {
    "__set__": true,
    "elements": [
      "geotorch"
    ]
  },
  "test.test_goal_add_subgoal_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_goal_add_supporting_relationship_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_goal_add_supporting_work_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_goal_base": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_goal_compact": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_goal_gid_add_followers_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_goal_gid_add_supporting_relationship_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_goal_gid_remove_followers_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_goal_gid_remove_supporting_relationship_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_goal_gid_set_metric_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_goal_gid_set_metric_current_value_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_goal_membership_base": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_goal_membership_base_goal": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_goal_membership_compact": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_goal_membership_response": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_goal_membership_response_user": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_goal_membership_response_workspace": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_goal_metric_base": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_goal_metric_current_value_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_goal_metric_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_goal_relationship_base": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_goal_relationship_base_supported_goal": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_goal_relationship_base_supporting_resource": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_goal_relationship_compact": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_goal_relationship_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_goal_relationship_response": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_goal_relationship_response_array": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_goal_relationship_response_data": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_goal_relationships_api": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_goal_relationships_goal_relationship_gid_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_goal_remove_subgoal_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_goal_remove_supporting_relationship_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_goal_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_goal_request_base": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_goal_response": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_goal_response_array": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_goal_response_current_status_update": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_goal_response_data": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_goal_response_likes": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_goal_response_metric": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_goal_response_team": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_goal_response_time_period": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_goal_response_workspace": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_goal_update_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_goals_api": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_goals_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_goals_goal_gid_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_gradients": {
    "__set__": true,
    "elements": [
      "crypten"
    ]
  },
  "test.test_graph": {
    "__set__": true,
    "elements": [
      "asv"
    ]
  },
  "test.test_gravity": {
    "__set__": true,
    "elements": [
      "polyfempy"
    ]
  },
  "test.test_grid": {
    "__set__": true,
    "elements": [
      "abtem"
    ]
  },
  "test.test_grid_manipulation": {
    "__set__": true,
    "elements": [
      "pyugrid"
    ]
  },
  "test.test_gridded_forecast": {
    "__set__": true,
    "elements": [
      "forest"
    ]
  },
  "test.test_grids": {
    "__set__": true,
    "elements": [
      "findiff"
    ]
  },
  "test.test_group": {
    "__set__": true,
    "elements": [
      "svgelements"
    ]
  },
  "test.test_groups": {
    "__set__": true,
    "elements": [
      "mms-python-client"
    ]
  },
  "test.test_gui": {
    "__set__": true,
    "elements": [
      "micro_sam"
    ]
  },
  "test.test_hamiltonian": {
    "__set__": true,
    "elements": [
      "muspinsim"
    ]
  },
  "test.test_handshake": {
    "__set__": true,
    "elements": [
      "wsproto"
    ]
  },
  "test.test_heartbeat": {
    "__set__": true,
    "elements": [
      "apphb"
    ]
  },
  "test.test_heights": {
    "__set__": true,
    "elements": [
      "meshplex"
    ]
  },
  "test.test_help": {
    "__set__": true,
    "elements": [
      "marcel"
    ]
  },
  "test.test_helpers": {
    "__set__": true,
    "elements": [
      "chunky3d"
    ]
  },
  "test.test_heterodyne": {
    "__set__": true,
    "elements": [
      "cwinpy"
    ]
  },
  "test.test_hierarchical": {
    "__set__": true,
    "elements": [
      "cwinpy"
    ]
  },
  "test.test_homebase": {
    "__set__": true,
    "elements": [
      "homebase"
    ]
  },
  "test.test_hooks": {
    "__set__": true,
    "elements": [
      "neomodel"
    ]
  },
  "test.test_hopcroftkarp": {
    "__set__": true,
    "elements": [
      "hopcroftkarp"
    ]
  },
  "test.test_html_ready": {
    "__set__": true,
    "elements": [
      "forest"
    ]
  },
  "test.test_http": {
    "__set__": true,
    "elements": [
      "pykube"
    ]
  },
  "test.test_httpclient": {
    "__set__": true,
    "elements": [
      "pykube"
    ]
  },
  "test.test_iam": {
    "__set__": true,
    "elements": [
      "awssert"
    ]
  },
  "test.test_iam_authenticator": {
    "__set__": true,
    "elements": [
      "ibm-cloud-sdk-core"
    ]
  },
  "test.test_iam_token_manager": {
    "__set__": true,
    "elements": [
      "ibm-cloud-sdk-core"
    ]
  },
  "test.test_image": {
    "__set__": true,
    "elements": [
      "svgelements"
    ]
  },
  "test.test_image_controls": {
    "__set__": true,
    "elements": [
      "forest"
    ]
  },
  "test.test_import": {
    "__set__": true,
    "elements": [
      "boutdata",
      "boututils"
    ]
  },
  "test.test_indexing": {
    "__set__": true,
    "elements": [
      "neomodel"
    ]
  },
  "test.test_inflation": {
    "__set__": true,
    "elements": [
      "polyfempy"
    ]
  },
  "test.test_initTransmission": {
    "__set__": true,
    "elements": [
      "fine"
    ]
  },
  "test.test_initial_design": {
    "__set__": true,
    "elements": [
      "smac"
    ]
  },
  "test.test_initial_design.test_initial_design": {
    "__set__": true,
    "elements": [
      "smac"
    ]
  },
  "test.test_initial_design.test_sobol_design": {
    "__set__": true,
    "elements": [
      "smac"
    ]
  },
  "test.test_initialize": {
    "__set__": true,
    "elements": [
      "otfmi"
    ]
  },
  "test.test_inline_response412": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_inline_response412_errors": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_input": {
    "__set__": true,
    "elements": [
      "muspinsim"
    ]
  },
  "test.test_instance_segmentation": {
    "__set__": true,
    "elements": [
      "micro_sam"
    ]
  },
  "test.test_integrate": {
    "__set__": true,
    "elements": [
      "diffrax"
    ]
  },
  "test.test_integration": {
    "__set__": true,
    "elements": [
      "forest",
      "geotorch"
    ]
  },
  "test.test_intensify": {
    "__set__": true,
    "elements": [
      "smac"
    ]
  },
  "test.test_intensify.test_abstract_racer": {
    "__set__": true,
    "elements": [
      "smac"
    ]
  },
  "test.test_intensify.test_eval_utils": {
    "__set__": true,
    "elements": [
      "smac"
    ]
  },
  "test.test_intensify.test_hyperband": {
    "__set__": true,
    "elements": [
      "smac"
    ]
  },
  "test.test_intensify.test_intensify": {
    "__set__": true,
    "elements": [
      "smac"
    ]
  },
  "test.test_intensify.test_parallel_scheduler": {
    "__set__": true,
    "elements": [
      "smac"
    ]
  },
  "test.test_intensify.test_successive_halving": {
    "__set__": true,
    "elements": [
      "smac"
    ]
  },
  "test.test_interface": {
    "__set__": true,
    "elements": [
      "pdb2sql"
    ]
  },
  "test.test_interpolate": {
    "__set__": true,
    "elements": [
      "abtem"
    ]
  },
  "test.test_interpolation": {
    "__set__": true,
    "elements": [
      "diffrax"
    ]
  },
  "test.test_intersections": {
    "__set__": true,
    "elements": [
      "beziers",
      "svgelements"
    ]
  },
  "test.test_io": {
    "__set__": true,
    "elements": [
      "hole-filling-liepa",
      "meshplex"
    ]
  },
  "test.test_issue112": {
    "__set__": true,
    "elements": [
      "neomodel"
    ]
  },
  "test.test_iterstream": {
    "__set__": true,
    "elements": [
      "squirrel-core"
    ]
  },
  "test.test_iterstream.test_get_size": {
    "__set__": true,
    "elements": [
      "squirrel-core"
    ]
  },
  "test.test_iterstream.test_stream": {
    "__set__": true,
    "elements": [
      "squirrel-core"
    ]
  },
  "test.test_iterstream.test_torch_composables": {
    "__set__": true,
    "elements": [
      "squirrel-core"
    ]
  },
  "test.test_jax": {
    "__set__": true,
    "elements": [
      "pysr"
    ]
  },
  "test.test_jdbc": {
    "__set__": true,
    "elements": [
      "sqlalchemy-drill"
    ]
  },
  "test.test_job_base": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_job_base_new_project": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_job_base_new_project_template": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_job_base_new_task": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_job_compact": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_job_mode": {
    "__set__": true,
    "elements": [
      "kfp-server-api"
    ]
  },
  "test.test_job_response": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_job_response_data": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_job_service_api": {
    "__set__": true,
    "elements": [
      "kfp-server-api"
    ]
  },
  "test.test_jobs_api": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_js": {
    "__set__": true,
    "elements": [
      "forest",
      "pyshacl"
    ]
  },
  "test.test_js.conftest": {
    "__set__": true,
    "elements": [
      "pyshacl"
    ]
  },
  "test.test_js.test_js_constraint": {
    "__set__": true,
    "elements": [
      "pyshacl"
    ]
  },
  "test.test_js.test_js_constraint_component": {
    "__set__": true,
    "elements": [
      "pyshacl"
    ]
  },
  "test.test_js.test_js_constraint_path_component": {
    "__set__": true,
    "elements": [
      "pyshacl"
    ]
  },
  "test.test_js.test_js_function": {
    "__set__": true,
    "elements": [
      "pyshacl"
    ]
  },
  "test.test_js.test_js_rules": {
    "__set__": true,
    "elements": [
      "pyshacl"
    ]
  },
  "test.test_js.test_js_target": {
    "__set__": true,
    "elements": [
      "pyshacl"
    ]
  },
  "test.test_js.test_js_target_type": {
    "__set__": true,
    "elements": [
      "pyshacl"
    ]
  },
  "test.test_jwt_token_manager": {
    "__set__": true,
    "elements": [
      "ibm-cloud-sdk-core"
    ]
  },
  "test.test_key_press": {
    "__set__": true,
    "elements": [
      "forest"
    ]
  },
  "test.test_kirkland": {
    "__set__": true,
    "elements": [
      "abtem"
    ]
  },
  "test.test_label_install": {
    "__set__": true,
    "elements": [
      "neomodel"
    ]
  },
  "test.test_labeling": {
    "__set__": true,
    "elements": [
      "labeling"
    ]
  },
  "test.test_labelingdata": {
    "__set__": true,
    "elements": [
      "labeling"
    ]
  },
  "test.test_lakes": {
    "__set__": true,
    "elements": [
      "forest"
    ]
  },
  "test.test_lark": {
    "__set__": true,
    "elements": [
      "muspinsim"
    ]
  },
  "test.test_latex_token": {
    "__set__": true,
    "elements": [
      "mistletoe-ebp"
    ]
  },
  "test.test_layer_pool": {
    "__set__": true,
    "elements": [
      "forest"
    ]
  },
  "test.test_layers": {
    "__set__": true,
    "elements": [
      "forest"
    ]
  },
  "test.test_length": {
    "__set__": true,
    "elements": [
      "svgelements"
    ]
  },
  "test.test_library": {
    "__set__": true,
    "elements": [
      "ensureconda"
    ]
  },
  "test.test_like": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_likelihood": {
    "__set__": true,
    "elements": [
      "cwinpy"
    ]
  },
  "test.test_lindbladian": {
    "__set__": true,
    "elements": [
      "muspinsim"
    ]
  },
  "test.test_line": {
    "__set__": true,
    "elements": [
      "beziers"
    ]
  },
  "test.test_linkedQuantity": {
    "__set__": true,
    "elements": [
      "fine"
    ]
  },
  "test.test_list": {
    "__set__": true,
    "elements": [
      "pyproj"
    ]
  },
  "test.test_load": {
    "__set__": true,
    "elements": [
      "forest"
    ]
  },
  "test.test_local_interpolation": {
    "__set__": true,
    "elements": [
      "diffrax"
    ]
  },
  "test.test_location": {
    "__set__": true,
    "elements": [
      "geopy"
    ]
  },
  "test.test_logging": {
    "__set__": true,
    "elements": [
      "apphb",
      "botorch"
    ]
  },
  "test.test_login_request": {
    "__set__": true,
    "elements": [
      "mms-python-client"
    ]
  },
  "test.test_login_response": {
    "__set__": true,
    "elements": [
      "mms-python-client"
    ]
  },
  "test.test_login_response_data": {
    "__set__": true,
    "elements": [
      "mms-python-client"
    ]
  },
  "test.test_logistic_regression": {
    "__set__": true,
    "elements": [
      "cyanure"
    ]
  },
  "test.test_lowrank": {
    "__set__": true,
    "elements": [
      "geotorch"
    ]
  },
  "test.test_lt": {
    "__set__": true,
    "elements": [
      "galgebra"
    ]
  },
  "test.test_machine": {
    "__set__": true,
    "elements": [
      "asv"
    ]
  },
  "test.test_main": {
    "__set__": true,
    "elements": [
      "forest",
      "mycli",
      "python-hdfs",
      "sat-search",
      "satsearch",
      "shelephant"
    ]
  },
  "test.test_many2sql": {
    "__set__": true,
    "elements": [
      "pdb2sql"
    ]
  },
  "test.test_mark": {
    "__set__": true,
    "elements": [
      "forest"
    ]
  },
  "test.test_match_api": {
    "__set__": true,
    "elements": [
      "neomodel"
    ]
  },
  "test.test_matrix": {
    "__set__": true,
    "elements": [
      "svgelements"
    ]
  },
  "test.test_mcsp_authenticator": {
    "__set__": true,
    "elements": [
      "ibm-cloud-sdk-core"
    ]
  },
  "test.test_mcsp_token_manager": {
    "__set__": true,
    "elements": [
      "ibm-cloud-sdk-core"
    ]
  },
  "test.test_measure": {
    "__set__": true,
    "elements": [
      "abtem"
    ]
  },
  "test.test_member_compact": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_membership_compact": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_membership_compact_goal": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_membership_compact_member": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_membership_compact_parent": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_membership_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_membership_response": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_membership_response_array": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_membership_response_data": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_memberships_api": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_memberships_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_mesh_line": {
    "__set__": true,
    "elements": [
      "meshplex"
    ]
  },
  "test.test_mesh_tetra": {
    "__set__": true,
    "elements": [
      "meshplex"
    ]
  },
  "test.test_miniSystem": {
    "__set__": true,
    "elements": [
      "fine"
    ]
  },
  "test.test_minimumDownTime": {
    "__set__": true,
    "elements": [
      "fine"
    ]
  },
  "test.test_minimumPartLoad": {
    "__set__": true,
    "elements": [
      "fine"
    ]
  },
  "test.test_minimumUpTime": {
    "__set__": true,
    "elements": [
      "fine"
    ]
  },
  "test.test_misc": {
    "__set__": true,
    "elements": [
      "diffrax",
      "galgebra"
    ]
  },
  "test.test_model_types": {
    "__set__": true,
    "elements": [
      "gempy"
    ]
  },
  "test.test_model_types.test_example_models_I": {
    "__set__": true,
    "elements": [
      "gempy"
    ]
  },
  "test.test_model_types.test_subduction": {
    "__set__": true,
    "elements": [
      "gempy"
    ]
  },
  "test.test_models": {
    "__set__": true,
    "elements": [
      "crypten",
      "micro_sam",
      "neomodel",
      "radiant-mlhub"
    ]
  },
  "test.test_models.test_peft_sam": {
    "__set__": true,
    "elements": [
      "micro_sam"
    ]
  },
  "test.test_models.test_sam_3d_wrapper": {
    "__set__": true,
    "elements": [
      "micro_sam"
    ]
  },
  "test.test_models.test_simple_sam_3d_wrapper": {
    "__set__": true,
    "elements": [
      "micro_sam"
    ]
  },
  "test.test_modify_dependencies_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_modify_dependents_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_module": {
    "__set__": true,
    "elements": [
      "gpytorch"
    ]
  },
  "test.test_modules": {
    "__set__": true,
    "elements": [
      "gempy"
    ]
  },
  "test.test_modules._geophysics_TO_UPDATE": {
    "__set__": true,
    "elements": [
      "gempy"
    ]
  },
  "test.test_modules._geophysics_TO_UPDATE.test_gravity": {
    "__set__": true,
    "elements": [
      "gempy"
    ]
  },
  "test.test_modules.test_faults": {
    "__set__": true,
    "elements": [
      "gempy"
    ]
  },
  "test.test_modules.test_faults.test_finite_faults": {
    "__set__": true,
    "elements": [
      "gempy"
    ]
  },
  "test.test_modules.test_gempy_subsurface": {
    "__set__": true,
    "elements": [
      "gempy"
    ]
  },
  "test.test_modules.test_grids": {
    "__set__": true,
    "elements": [
      "gempy"
    ]
  },
  "test.test_modules.test_grids.test_custom_grid": {
    "__set__": true,
    "elements": [
      "gempy"
    ]
  },
  "test.test_modules.test_grids.test_diamond_square": {
    "__set__": true,
    "elements": [
      "gempy"
    ]
  },
  "test.test_modules.test_grids.test_grids_I": {
    "__set__": true,
    "elements": [
      "gempy"
    ]
  },
  "test.test_modules.test_grids.test_grids_sections": {
    "__set__": true,
    "elements": [
      "gempy"
    ]
  },
  "test.test_modules.test_pile": {
    "__set__": true,
    "elements": [
      "gempy"
    ]
  },
  "test.test_modules.test_pile.test_stratigraphic_pile": {
    "__set__": true,
    "elements": [
      "gempy"
    ]
  },
  "test.test_modules.test_transformed_space": {
    "__set__": true,
    "elements": [
      "gempy"
    ]
  },
  "test.test_mounts": {
    "__set__": true,
    "elements": [
      "mms-python-client"
    ]
  },
  "test.test_mpc": {
    "__set__": true,
    "elements": [
      "crypten"
    ]
  },
  "test.test_mpi": {
    "__set__": true,
    "elements": [
      "muspinsim"
    ]
  },
  "test.test_multi_dimensional_segmentation": {
    "__set__": true,
    "elements": [
      "micro_sam"
    ]
  },
  "test.test_multiprocessing": {
    "__set__": true,
    "elements": [
      "neomodel"
    ]
  },
  "test.test_mv": {
    "__set__": true,
    "elements": [
      "galgebra"
    ]
  },
  "test.test_naive_completion": {
    "__set__": true,
    "elements": [
      "mycli"
    ]
  },
  "test.test_namespace": {
    "__set__": true,
    "elements": [
      "marcel"
    ]
  },
  "test.test_native_filename_ops": {
    "__set__": true,
    "elements": [
      "marcel"
    ]
  },
  "test.test_navigator": {
    "__set__": true,
    "elements": [
      "forest"
    ]
  },
  "test.test_nested_tokenizer": {
    "__set__": true,
    "elements": [
      "mistletoe-ebp"
    ]
  },
  "test.test_network": {
    "__set__": true,
    "elements": [
      "pyproj"
    ]
  },
  "test.test_newton_solver": {
    "__set__": true,
    "elements": [
      "diffrax"
    ]
  },
  "test.test_next_page": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_nn": {
    "__set__": true,
    "elements": [
      "crypten"
    ]
  },
  "test.test_no_auth_authenticator": {
    "__set__": true,
    "elements": [
      "ibm-cloud-sdk-core"
    ]
  },
  "test.test_object_pool": {
    "__set__": true,
    "elements": [
      "forest"
    ]
  },
  "test.test_odbc": {
    "__set__": true,
    "elements": [
      "sqlalchemy-drill"
    ]
  },
  "test.test_offset": {
    "__set__": true,
    "elements": [
      "beziers"
    ]
  },
  "test.test_onnx_converter": {
    "__set__": true,
    "elements": [
      "crypten"
    ]
  },
  "test.test_operationHeatMap": {
    "__set__": true,
    "elements": [
      "fine"
    ]
  },
  "test.test_ops": {
    "__set__": true,
    "elements": [
      "marcel"
    ]
  },
  "test.test_optim": {
    "__set__": true,
    "elements": [
      "crypten"
    ]
  },
  "test.test_org": {
    "__set__": true,
    "elements": [
      "mms-python-client"
    ]
  },
  "test.test_org_api": {
    "__set__": true,
    "elements": [
      "mms-python-client"
    ]
  },
  "test.test_organization_export_base": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_organization_export_compact": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_organization_export_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_organization_export_response": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_organization_export_response_data": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_organization_exports_api": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_organization_exports_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_orgs": {
    "__set__": true,
    "elements": [
      "mms-python-client"
    ]
  },
  "test.test_orthogonal": {
    "__set__": true,
    "elements": [
      "geotorch"
    ]
  },
  "test.test_other_api": {
    "__set__": true,
    "elements": [
      "mms-python-client"
    ]
  },
  "test.test_overflow": {
    "__set__": true,
    "elements": [
      "pyinstrument"
    ]
  },
  "test.test_p2f": {
    "__set__": true,
    "elements": [
      "otfmi"
    ]
  },
  "test.test_package": {
    "__set__": true,
    "elements": [
      "argcomplete"
    ]
  },
  "test.test_package.setup": {
    "__set__": true,
    "elements": [
      "argcomplete"
    ]
  },
  "test.test_package.test_module": {
    "__set__": true,
    "elements": [
      "argcomplete"
    ]
  },
  "test.test_package.test_package": {
    "__set__": true,
    "elements": [
      "argcomplete"
    ]
  },
  "test.test_parse_args": {
    "__set__": true,
    "elements": [
      "forest"
    ]
  },
  "test.test_parse_cmake_version": {
    "__set__": true,
    "elements": [
      "colcon-cmake"
    ]
  },
  "test.test_parser": {
    "__set__": true,
    "elements": [
      "marcel",
      "sat-search",
      "satsearch"
    ]
  },
  "test.test_parseutils": {
    "__set__": true,
    "elements": [
      "mycli"
    ]
  },
  "test.test_parsing": {
    "__set__": true,
    "elements": [
      "svgelements"
    ]
  },
  "test.test_path": {
    "__set__": true,
    "elements": [
      "beziers",
      "svgelements"
    ]
  },
  "test.test_path_dunder": {
    "__set__": true,
    "elements": [
      "svgelements"
    ]
  },
  "test.test_path_segments": {
    "__set__": true,
    "elements": [
      "svgelements"
    ]
  },
  "test.test_paths": {
    "__set__": true,
    "elements": [
      "svgelements"
    ]
  },
  "test.test_pdb2sqlcore": {
    "__set__": true,
    "elements": [
      "pdb2sql"
    ]
  },
  "test.test_pde": {
    "__set__": true,
    "elements": [
      "findiff"
    ]
  },
  "test.test_pe": {
    "__set__": true,
    "elements": [
      "cwinpy"
    ]
  },
  "test.test_pe_simulation": {
    "__set__": true,
    "elements": [
      "cwinpy"
    ]
  },
  "test.test_pe_testing": {
    "__set__": true,
    "elements": [
      "cwinpy"
    ]
  },
  "test.test_permessage_deflate": {
    "__set__": true,
    "elements": [
      "wsproto"
    ]
  },
  "test.test_pickle": {
    "__set__": true,
    "elements": [
      "pyproj"
    ]
  },
  "test.test_pipeline_service_api": {
    "__set__": true,
    "elements": [
      "kfp-server-api"
    ]
  },
  "test.test_pipeline_upload_service_api": {
    "__set__": true,
    "elements": [
      "kfp-server-api"
    ]
  },
  "test.test_plane_hole": {
    "__set__": true,
    "elements": [
      "polyfempy"
    ]
  },
  "test.test_point": {
    "__set__": true,
    "elements": [
      "geopy",
      "svgelements"
    ]
  },
  "test.test_portfolio_add_item_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_portfolio_base": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_portfolio_compact": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_portfolio_gid_add_custom_field_setting_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_portfolio_gid_add_item_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_portfolio_gid_add_members_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_portfolio_gid_remove_custom_field_setting_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_portfolio_gid_remove_item_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_portfolio_gid_remove_members_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_portfolio_membership_base": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_portfolio_membership_base_portfolio": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_portfolio_membership_compact": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_portfolio_membership_response": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_portfolio_membership_response_array": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_portfolio_membership_response_data": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_portfolio_memberships_api": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_portfolio_remove_item_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_portfolio_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_portfolio_response": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_portfolio_response_array": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_portfolio_response_current_status_update": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_portfolio_response_custom_field_settings": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_portfolio_response_custom_fields": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_portfolio_response_data": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_portfolio_response_workspace": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_portfolios_api": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_portfolios_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_portfolios_portfolio_gid_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_positive_semidefinite": {
    "__set__": true,
    "elements": [
      "geotorch"
    ]
  },
  "test.test_potential_integration": {
    "__set__": true,
    "elements": [
      "abtem"
    ]
  },
  "test.test_potential_parametrization": {
    "__set__": true,
    "elements": [
      "abtem"
    ]
  },
  "test.test_potentials": {
    "__set__": true,
    "elements": [
      "abtem"
    ]
  },
  "test.test_prefixes": {
    "__set__": true,
    "elements": [
      "awssert"
    ]
  },
  "test.test_preselect": {
    "__set__": true,
    "elements": [
      "forest"
    ]
  },
  "test.test_presets": {
    "__set__": true,
    "elements": [
      "forest"
    ]
  },
  "test.test_presets_storage": {
    "__set__": true,
    "elements": [
      "forest"
    ]
  },
  "test.test_preview": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_printer": {
    "__set__": true,
    "elements": [
      "galgebra"
    ]
  },
  "test.test_prism": {
    "__set__": true,
    "elements": [
      "abtem"
    ]
  },
  "test.test_privacy_models": {
    "__set__": true,
    "elements": [
      "crypten"
    ]
  },
  "test.test_probe": {
    "__set__": true,
    "elements": [
      "abtem"
    ]
  },
  "test.test_processing": {
    "__set__": true,
    "elements": [
      "museotoolbox"
    ]
  },
  "test.test_processors": {
    "__set__": true,
    "elements": [
      "pyinstrument"
    ]
  },
  "test.test_product": {
    "__set__": true,
    "elements": [
      "geotorch"
    ]
  },
  "test.test_profile": {
    "__set__": true,
    "elements": [
      "asv",
      "forest"
    ]
  },
  "test.test_profiler": {
    "__set__": true,
    "elements": [
      "pyinstrument"
    ]
  },
  "test.test_profiler_async": {
    "__set__": true,
    "elements": [
      "pyinstrument"
    ]
  },
  "test.test_proj": {
    "__set__": true,
    "elements": [
      "pyproj"
    ]
  },
  "test.test_project": {
    "__set__": true,
    "elements": [
      "mms-python-client"
    ]
  },
  "test.test_project_api": {
    "__set__": true,
    "elements": [
      "mms-python-client"
    ]
  },
  "test.test_project_base": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_base_current_status": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_base_current_status_update": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_base_workspace": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_brief_base": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_brief_compact": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_brief_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_brief_response": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_brief_response_data": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_brief_response_project": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_briefs_api": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_briefs_project_brief_gid_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_compact": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_duplicate_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_duplicate_request_schedule_dates": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_gid_add_custom_field_setting_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_gid_add_followers_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_gid_add_members_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_gid_duplicate_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_gid_project_briefs_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_gid_project_statuses_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_gid_remove_custom_field_setting_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_gid_remove_followers_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_gid_remove_members_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_gid_save_as_template_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_gid_sections_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_membership_base": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_membership_compact": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_membership_compact_array": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_membership_compact_response": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_membership_compact_response_data": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_membership_normal_response": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_membership_normal_response_data": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_membership_response": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_membership_response_array": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_membership_response_data": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_membership_response_member": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_memberships_api": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_response": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_response_array": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_response_completed_by": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_response_created_from_template": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_response_data": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_response_project_brief": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_response_team": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_response_workspace": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_save_as_template_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_section_insert_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_status_base": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_status_compact": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_status_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_status_response": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_status_response_array": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_status_response_data": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_statuses_api": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_template_base": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_template_base_requested_dates": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_template_base_requested_roles": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_template_base_team": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_template_compact": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_template_gid_instantiate_project_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_template_instantiate_project_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_template_instantiate_project_request_requested_dates": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_template_instantiate_project_request_requested_roles": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_template_response": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_template_response_array": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_template_response_data": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_templates_api": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_project_update_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_projects": {
    "__set__": true,
    "elements": [
      "mms-python-client"
    ]
  },
  "test.test_projects_api": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_projects_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_projects_project_gid_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_prompt_based_segmentation": {
    "__set__": true,
    "elements": [
      "micro_sam"
    ]
  },
  "test.test_prompt_generators": {
    "__set__": true,
    "elements": [
      "micro_sam"
    ]
  },
  "test.test_prompt_utils": {
    "__set__": true,
    "elements": [
      "mycli"
    ]
  },
  "test.test_propagator": {
    "__set__": true,
    "elements": [
      "abtem"
    ]
  },
  "test.test_properties": {
    "__set__": true,
    "elements": [
      "neomodel"
    ]
  },
  "test.test_protobuf_any": {
    "__set__": true,
    "elements": [
      "kfp-server-api"
    ]
  },
  "test.test_proxy": {
    "__set__": true,
    "elements": [
      "geopy"
    ]
  },
  "test.test_publish": {
    "__set__": true,
    "elements": [
      "asv"
    ]
  },
  "test.test_px42csv": {
    "__set__": true,
    "elements": [
      "px4tools"
    ]
  },
  "test.test_pySmartDL": {
    "__set__": true,
    "elements": [
      "pysmartdl"
    ]
  },
  "test.test_pyfmi": {
    "__set__": true,
    "elements": [
      "otfmi"
    ]
  },
  "test.test_pylpg": {
    "__set__": true,
    "elements": [
      "pyloadprofilegenerator"
    ]
  },
  "test.test_pyreportjasper": {
    "__set__": true,
    "elements": [
      "pyreportjasper"
    ]
  },
  "test.test_qartod_qc": {
    "__set__": true,
    "elements": [
      "ioos_qartod"
    ]
  },
  "test.test_quadratic": {
    "__set__": true,
    "elements": [
      "beziers"
    ]
  },
  "test.test_quadratic_bezier": {
    "__set__": true,
    "elements": [
      "svgelements"
    ]
  },
  "test.test_quickstart": {
    "__set__": true,
    "elements": [
      "asv"
    ]
  },
  "test.test_rampDownMax": {
    "__set__": true,
    "elements": [
      "fine"
    ]
  },
  "test.test_rampUpMax": {
    "__set__": true,
    "elements": [
      "fine"
    ]
  },
  "test.test_rdt": {
    "__set__": true,
    "elements": [
      "forest"
    ]
  },
  "test.test_read": {
    "__set__": true,
    "elements": [
      "pyugrid"
    ]
  },
  "test.test_readability": {
    "__set__": true,
    "elements": [
      "py-readability-metrics"
    ]
  },
  "test.test_readme": {
    "__set__": true,
    "elements": [
      "meshplex"
    ]
  },
  "test.test_reconcile": {
    "__set__": true,
    "elements": [
      "pyspike"
    ]
  },
  "test.test_reducer": {
    "__set__": true,
    "elements": [
      "forest"
    ]
  },
  "test.test_redux": {
    "__set__": true,
    "elements": [
      "forest"
    ]
  },
  "test.test_ref": {
    "__set__": true,
    "elements": [
      "mms-python-client"
    ]
  },
  "test.test_ref_api": {
    "__set__": true,
    "elements": [
      "mms-python-client"
    ]
  },
  "test.test_refs": {
    "__set__": true,
    "elements": [
      "mms-python-client"
    ]
  },
  "test.test_regression": {
    "__set__": true,
    "elements": [
      "sklearn-json"
    ]
  },
  "test.test_rejectable_elements": {
    "__set__": true,
    "elements": [
      "mms-python-client"
    ]
  },
  "test.test_rejection": {
    "__set__": true,
    "elements": [
      "mms-python-client"
    ]
  },
  "test.test_relationship_models": {
    "__set__": true,
    "elements": [
      "neomodel"
    ]
  },
  "test.test_relationships": {
    "__set__": true,
    "elements": [
      "neomodel"
    ]
  },
  "test.test_relative_relationships": {
    "__set__": true,
    "elements": [
      "neomodel"
    ]
  },
  "test.test_remove_cells": {
    "__set__": true,
    "elements": [
      "meshplex"
    ]
  },
  "test.test_remove_custom_field_setting_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_remove_followers_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_remove_members_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_repo": {
    "__set__": true,
    "elements": [
      "asv"
    ]
  },
  "test.test_repo_template.asv_test_repo": {
    "__set__": true,
    "elements": [
      "asv"
    ]
  },
  "test.test_report": {
    "__set__": true,
    "elements": [
      "pyreportjasper"
    ]
  },
  "test.test_report_run_metrics_response_report_run_metric_result": {
    "__set__": true,
    "elements": [
      "kfp-server-api"
    ]
  },
  "test.test_report_run_metrics_response_report_run_metric_result_status": {
    "__set__": true,
    "elements": [
      "kfp-server-api"
    ]
  },
  "test.test_repr": {
    "__set__": true,
    "elements": [
      "svgelements"
    ]
  },
  "test.test_requested_role_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_results": {
    "__set__": true,
    "elements": [
      "asv"
    ]
  },
  "test.test_reusable_pool": {
    "__set__": true,
    "elements": [
      "forest"
    ]
  },
  "test.test_rm": {
    "__set__": true,
    "elements": [
      "asv"
    ]
  },
  "test.test_rule_trigger_gid_run_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_rule_trigger_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_rule_trigger_response": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_rule_trigger_response_data": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_rules_api": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_run": {
    "__set__": true,
    "elements": [
      "asv"
    ]
  },
  "test.test_run_metric_format": {
    "__set__": true,
    "elements": [
      "kfp-server-api"
    ]
  },
  "test.test_run_service_api": {
    "__set__": true,
    "elements": [
      "kfp-server-api"
    ]
  },
  "test.test_run_storage_state": {
    "__set__": true,
    "elements": [
      "kfp-server-api"
    ]
  },
  "test.test_runhistory": {
    "__set__": true,
    "elements": [
      "smac"
    ]
  },
  "test.test_runhistory.test_rfr_imputor": {
    "__set__": true,
    "elements": [
      "smac"
    ]
  },
  "test.test_runhistory.test_runhistory": {
    "__set__": true,
    "elements": [
      "smac"
    ]
  },
  "test.test_runhistory.test_runhistory2epm": {
    "__set__": true,
    "elements": [
      "smac"
    ]
  },
  "test.test_runner": {
    "__set__": true,
    "elements": [
      "asv"
    ]
  },
  "test.test_rx": {
    "__set__": true,
    "elements": [
      "forest"
    ]
  },
  "test.test_s3": {
    "__set__": true,
    "elements": [
      "awssert"
    ]
  },
  "test.test_samples": {
    "__set__": true,
    "elements": [
      "mistletoe-ebp"
    ]
  },
  "test.test_samples.benchmark": {
    "__set__": true,
    "elements": [
      "mistletoe-ebp"
    ]
  },
  "test.test_samples.mprofile": {
    "__set__": true,
    "elements": [
      "mistletoe-ebp"
    ]
  },
  "test.test_samples.test_samples": {
    "__set__": true,
    "elements": [
      "mistletoe-ebp"
    ]
  },
  "test.test_sampling": {
    "__set__": true,
    "elements": [
      "otfmi"
    ]
  },
  "test.test_save_as_netcdf": {
    "__set__": true,
    "elements": [
      "pyugrid"
    ]
  },
  "test.test_save_load": {
    "__set__": true,
    "elements": [
      "pyspike"
    ]
  },
  "test.test_saveat_solution": {
    "__set__": true,
    "elements": [
      "diffrax"
    ]
  },
  "test.test_scaling": {
    "__set__": true,
    "elements": [
      "findiff"
    ]
  },
  "test.test_scaling_group": {
    "__set__": true,
    "elements": [
      "forest"
    ]
  },
  "test.test_scan": {
    "__set__": true,
    "elements": [
      "abtem"
    ]
  },
  "test.test_scenario": {
    "__set__": true,
    "elements": [
      "smac"
    ]
  },
  "test.test_scenario.test_scenario": {
    "__set__": true,
    "elements": [
      "smac"
    ]
  },
  "test.test_scene": {
    "__set__": true,
    "elements": [
      "satsearch"
    ]
  },
  "test.test_schema_org": {
    "__set__": true,
    "elements": [
      "pyshacl"
    ]
  },
  "test.test_screen": {
    "__set__": true,
    "elements": [
      "forest"
    ]
  },
  "test.test_search": {
    "__set__": true,
    "elements": [
      "antares-client",
      "sat-search",
      "satsearch"
    ]
  },
  "test.test_search_request": {
    "__set__": true,
    "elements": [
      "mms-python-client"
    ]
  },
  "test.test_section_base": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_section_compact": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_section_gid_add_task_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_section_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_section_response": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_section_response_array": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_section_response_data": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_section_task_insert_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_sections_api": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_sections_insert_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_sections_section_gid_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_segmentation": {
    "__set__": true,
    "elements": [
      "fine"
    ]
  },
  "test.test_series": {
    "__set__": true,
    "elements": [
      "forest"
    ]
  },
  "test.test_server": {
    "__set__": true,
    "elements": [
      "wsproto"
    ]
  },
  "test.test_services_navigation": {
    "__set__": true,
    "elements": [
      "forest"
    ]
  },
  "test.test_session": {
    "__set__": true,
    "elements": [
      "pykube",
      "radiant-mlhub"
    ]
  },
  "test.test_settings": {
    "__set__": true,
    "elements": [
      "botorch",
      "gpytorch"
    ]
  },
  "test.test_shadowCostOutput": {
    "__set__": true,
    "elements": [
      "fine"
    ]
  },
  "test.test_shape": {
    "__set__": true,
    "elements": [
      "svgelements"
    ]
  },
  "test.test_show": {
    "__set__": true,
    "elements": [
      "asv"
    ]
  },
  "test.test_show_versions": {
    "__set__": true,
    "elements": [
      "pyproj"
    ]
  },
  "test.test_sht_validate": {
    "__set__": true,
    "elements": [
      "pyshacl"
    ]
  },
  "test.test_simpleMyopic": {
    "__set__": true,
    "elements": [
      "fine"
    ]
  },
  "test.test_skew": {
    "__set__": true,
    "elements": [
      "geotorch"
    ]
  },
  "test.test_smart_completion_public_schema_only": {
    "__set__": true,
    "elements": [
      "mycli"
    ]
  },
  "test.test_smbo": {
    "__set__": true,
    "elements": [
      "smac"
    ]
  },
  "test.test_smbo.test_acquisition": {
    "__set__": true,
    "elements": [
      "smac"
    ]
  },
  "test.test_smbo.test_ei_optimization": {
    "__set__": true,
    "elements": [
      "smac"
    ]
  },
  "test.test_smbo.test_epm_configuration_chooser": {
    "__set__": true,
    "elements": [
      "smac"
    ]
  },
  "test.test_smbo.test_pSMAC": {
    "__set__": true,
    "elements": [
      "smac"
    ]
  },
  "test.test_smbo.test_random_configuration_chooser": {
    "__set__": true,
    "elements": [
      "smac"
    ]
  },
  "test.test_smbo.test_smbo": {
    "__set__": true,
    "elements": [
      "smac"
    ]
  },
  "test.test_sns": {
    "__set__": true,
    "elements": [
      "awssert"
    ]
  },
  "test.test_solver": {
    "__set__": true,
    "elements": [
      "diffrax",
      "fine"
    ]
  },
  "test.test_span_token": {
    "__set__": true,
    "elements": [
      "mistletoe-ebp"
    ]
  },
  "test.test_sparkline": {
    "__set__": true,
    "elements": [
      "scalene"
    ]
  },
  "test.test_sparse": {
    "__set__": true,
    "elements": [
      "chunky3d"
    ]
  },
  "test.test_sparse_func": {
    "__set__": true,
    "elements": [
      "chunky3d"
    ]
  },
  "test.test_special_iocommands": {
    "__set__": true,
    "elements": [
      "mycli"
    ]
  },
  "test.test_spell_check": {
    "__set__": true,
    "elements": [
      "colcon-cmake"
    ]
  },
  "test.test_sphere": {
    "__set__": true,
    "elements": [
      "geotorch"
    ]
  },
  "test.test_spikes": {
    "__set__": true,
    "elements": [
      "pyspike"
    ]
  },
  "test.test_spinop": {
    "__set__": true,
    "elements": [
      "muspinsim"
    ]
  },
  "test.test_spinsys": {
    "__set__": true,
    "elements": [
      "muspinsim"
    ]
  },
  "test.test_sqlexecute": {
    "__set__": true,
    "elements": [
      "mycli"
    ]
  },
  "test.test_stack_sampler": {
    "__set__": true,
    "elements": [
      "pyinstrument"
    ]
  },
  "test.test_start": {
    "__set__": true,
    "elements": [
      "seml"
    ]
  },
  "test.test_state": {
    "__set__": true,
    "elements": [
      "forest",
      "pip-audit"
    ]
  },
  "test.test_static_libpython_warning": {
    "__set__": true,
    "elements": [
      "pysr"
    ]
  },
  "test.test_statistics": {
    "__set__": true,
    "elements": [
      "asv"
    ]
  },
  "test.test_stats": {
    "__set__": true,
    "elements": [
      "museotoolbox"
    ]
  },
  "test.test_status_update_base": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_status_update_compact": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_status_update_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_status_update_response": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_status_update_response_array": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_status_update_response_data": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_status_update_response_parent": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_status_updates_api": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_status_updates_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_stencils": {
    "__set__": true,
    "elements": [
      "findiff"
    ]
  },
  "test.test_step_detect": {
    "__set__": true,
    "elements": [
      "asv"
    ]
  },
  "test.test_step_to": {
    "__set__": true,
    "elements": [
      "diffrax"
    ]
  },
  "test.test_storageTimeseriesSetup": {
    "__set__": true,
    "elements": [
      "fine"
    ]
  },
  "test.test_stories_api": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_stories_story_gid_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_story_base": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_story_compact": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_story_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_story_response": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_story_response_array": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_story_response_assignee": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_story_response_custom_field": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_story_response_data": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_story_response_dates": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_story_response_old_dates": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_story_response_old_enum_value": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_story_response_old_section": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_story_response_previews": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_story_response_project": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_story_response_story": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_story_response_tag": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_story_response_target": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_story_response_task": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_stroke_width": {
    "__set__": true,
    "elements": [
      "svgelements"
    ]
  },
  "test.test_structureSimilarity": {
    "__set__": true,
    "elements": [
      "pdb2sql"
    ]
  },
  "test.test_structures": {
    "__set__": true,
    "elements": [
      "abtem"
    ]
  },
  "test.test_subdomain": {
    "__set__": true,
    "elements": [
      "meshplex"
    ]
  },
  "test.test_subprocess": {
    "__set__": true,
    "elements": [
      "asv",
      "pip-audit"
    ]
  },
  "test.test_suite": {
    "__set__": true,
    "elements": [
      "sqlalchemy-drill"
    ]
  },
  "test.test_superpose": {
    "__set__": true,
    "elements": [
      "pdb2sql"
    ]
  },
  "test.test_symbolic": {
    "__set__": true,
    "elements": [
      "findiff"
    ]
  },
  "test.test_symmetric": {
    "__set__": true,
    "elements": [
      "geotorch"
    ]
  },
  "test.test_sync": {
    "__set__": true,
    "elements": [
      "pyproj"
    ]
  },
  "test.test_sync_filter": {
    "__set__": true,
    "elements": [
      "pyspike"
    ]
  },
  "test.test_tab_completion": {
    "__set__": true,
    "elements": [
      "marcel"
    ]
  },
  "test.test_tabular_output": {
    "__set__": true,
    "elements": [
      "mycli"
    ]
  },
  "test.test_tae": {
    "__set__": true,
    "elements": [
      "smac"
    ]
  },
  "test.test_tae.dummy_ta_wrapper": {
    "__set__": true,
    "elements": [
      "smac"
    ]
  },
  "test.test_tae.dummy_ta_wrapper_aclib": {
    "__set__": true,
    "elements": [
      "smac"
    ]
  },
  "test.test_tae.test_exec_func": {
    "__set__": true,
    "elements": [
      "smac"
    ]
  },
  "test.test_tae.test_exec_tae_run": {
    "__set__": true,
    "elements": [
      "smac"
    ]
  },
  "test.test_tae.test_hydra_tae": {
    "__set__": true,
    "elements": [
      "smac"
    ]
  },
  "test.test_tae.test_parallel_runner": {
    "__set__": true,
    "elements": [
      "smac"
    ]
  },
  "test.test_tae.test_serial_runner": {
    "__set__": true,
    "elements": [
      "smac"
    ]
  },
  "test.test_tae.test_tae_aclib": {
    "__set__": true,
    "elements": [
      "smac"
    ]
  },
  "test.test_tae.test_tae_old": {
    "__set__": true,
    "elements": [
      "smac"
    ]
  },
  "test.test_tag_base": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_tag_compact": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_tag_create_tag_for_workspace_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_tag_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_tag_response": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_tag_response_array": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_tag_response_data": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_tags_api": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_tags_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_task_add_followers_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_task_add_project_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_task_add_tag_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_task_base": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_task_base_completed_by": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_task_base_dependencies": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_task_base_external": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_task_base_memberships": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_task_base_section": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_task_compact": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_task_count_response": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_task_count_response_data": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_task_duplicate_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_task_gid_add_dependencies_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_task_gid_add_dependents_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_task_gid_add_followers_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_task_gid_add_project_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_task_gid_add_tag_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_task_gid_duplicate_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_task_gid_remove_dependencies_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_task_gid_remove_dependents_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_task_gid_remove_followers_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_task_gid_remove_project_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_task_gid_remove_tag_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_task_gid_set_parent_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_task_gid_stories_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_task_gid_subtasks_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_task_gid_time_tracking_entries_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_task_remove_followers_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_task_remove_project_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_task_remove_tag_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_task_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_task_response": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_task_response_array": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_task_response_assignee_section": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_task_response_custom_fields": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_task_response_data": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_task_response_parent": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_task_response_tags": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_task_response_workspace": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_task_set_parent_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_task_template_base": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_task_template_compact": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_task_template_gid_instantiate_task_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_task_template_instantiate_task_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_task_template_recipe": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_task_template_recipe_attachments": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_task_template_recipe_compact": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_task_template_recipe_dependencies": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_task_template_response": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_task_template_response_array": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_task_template_response_data": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_task_templates_api": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_tasks_api": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_tasks_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_tasks_task_gid_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_team_add_user_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_team_base": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_team_compact": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_team_gid_add_user_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_team_gid_projects_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_team_gid_remove_user_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_team_membership_base": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_team_membership_compact": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_team_membership_response": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_team_membership_response_array": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_team_membership_response_data": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_team_memberships_api": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_team_remove_user_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_team_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_team_response": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_team_response_array": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_team_response_data": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_team_response_organization": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_teams_api": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_teams_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_teams_team_gid_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_temperature": {
    "__set__": true,
    "elements": [
      "abtem"
    ]
  },
  "test.test_template": {
    "__set__": true,
    "elements": [
      "forest"
    ]
  },
  "test.test_template_role": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_tensorboard": {
    "__set__": true,
    "elements": [
      "crypten"
    ]
  },
  "test.test_term": {
    "__set__": true,
    "elements": [
      "diffrax"
    ]
  },
  "test.test_test": {
    "__set__": true,
    "elements": [
      "galgebra"
    ]
  },
  "test.test_text": {
    "__set__": true,
    "elements": [
      "svgelements"
    ]
  },
  "test.test_threading": {
    "__set__": true,
    "elements": [
      "pyinstrument"
    ]
  },
  "test.test_ticket_api": {
    "__set__": true,
    "elements": [
      "mms-python-client"
    ]
  },
  "test.test_ticket_response": {
    "__set__": true,
    "elements": [
      "mms-python-client"
    ]
  },
  "test.test_time_controls": {
    "__set__": true,
    "elements": [
      "forest"
    ]
  },
  "test.test_time_period_base": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_time_period_compact": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_time_period_response": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_time_period_response_array": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_time_period_response_data": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_time_periods_api": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_time_tracking_entries_api": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_time_tracking_entries_time_tracking_entry_gid_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_time_tracking_entry_base": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_time_tracking_entry_base_data": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_time_tracking_entry_compact": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_time_tracking_entry_compact_array": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_time_ui": {
    "__set__": true,
    "elements": [
      "forest"
    ]
  },
  "test.test_timers": {
    "__set__": true,
    "elements": [
      "scalene"
    ]
  },
  "test.test_token_manager": {
    "__set__": true,
    "elements": [
      "ibm-cloud-sdk-core"
    ]
  },
  "test.test_tools": {
    "__set__": true,
    "elements": [
      "forest"
    ]
  },
  "test.test_torch": {
    "__set__": true,
    "elements": [
      "pysr"
    ]
  },
  "test.test_torsion": {
    "__set__": true,
    "elements": [
      "polyfempy"
    ]
  },
  "test.test_training": {
    "__set__": true,
    "elements": [
      "micro_sam"
    ]
  },
  "test.test_transactions": {
    "__set__": true,
    "elements": [
      "neomodel"
    ]
  },
  "test.test_transform": {
    "__set__": true,
    "elements": [
      "pdb2sql",
      "pyproj"
    ]
  },
  "test.test_transformation": {
    "__set__": true,
    "elements": [
      "beziers"
    ]
  },
  "test.test_transformer": {
    "__set__": true,
    "elements": [
      "pyproj"
    ]
  },
  "test.test_tutorial": {
    "__set__": true,
    "elements": [
      "forest"
    ]
  },
  "test.test_typeahead_api": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_ugrid": {
    "__set__": true,
    "elements": [
      "pyugrid"
    ]
  },
  "test.test_ulog2csv": {
    "__set__": true,
    "elements": [
      "pyulog"
    ]
  },
  "test.test_units": {
    "__set__": true,
    "elements": [
      "forest"
    ]
  },
  "test.test_update": {
    "__set__": true,
    "elements": [
      "asv"
    ]
  },
  "test.test_update_time_tracking_entry_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_use": {
    "__set__": true,
    "elements": [
      "svgelements"
    ]
  },
  "test.test_user_base": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_user_base_response": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_user_base_response_data": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_user_base_response_photo": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_user_compact": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_user_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_user_response": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_user_response_array": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_user_response_data": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_user_task_list_base": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_user_task_list_compact": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_user_task_list_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_user_task_list_response": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_user_task_list_response_data": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_user_task_lists_api": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_users_api": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_util": {
    "__set__": true,
    "elements": [
      "asv",
      "forest",
      "micro_sam",
      "pip-audit",
      "python-hdfs"
    ]
  },
  "test.test_utils": {
    "__set__": true,
    "elements": [
      "antares-client",
      "cwinpy",
      "findiff",
      "fine",
      "ibm-cloud-sdk-core",
      "muspinsim",
      "pdb2sql",
      "pyproj",
      "satsearch",
      "seml",
      "smac"
    ]
  },
  "test.test_utils.io": {
    "__set__": true,
    "elements": [
      "smac"
    ]
  },
  "test.test_utils.io.test_CMDReader": {
    "__set__": true,
    "elements": [
      "smac"
    ]
  },
  "test.test_utils.io.test_inputreader": {
    "__set__": true,
    "elements": [
      "smac"
    ]
  },
  "test.test_utils.io.test_traj_logging": {
    "__set__": true,
    "elements": [
      "smac"
    ]
  },
  "test.test_utils.test_validate": {
    "__set__": true,
    "elements": [
      "smac"
    ]
  },
  "test.test_variables": {
    "__set__": true,
    "elements": [
      "otfmi"
    ]
  },
  "test.test_vector": {
    "__set__": true,
    "elements": [
      "findiff"
    ]
  },
  "test.test_vendored": {
    "__set__": true,
    "elements": [
      "micro_sam"
    ]
  },
  "test.test_version": {
    "__set__": true,
    "elements": [
      "pip-audit"
    ]
  },
  "test.test_viewbox": {
    "__set__": true,
    "elements": [
      "svgelements"
    ]
  },
  "test.test_virtual_env": {
    "__set__": true,
    "elements": [
      "pip-audit"
    ]
  },
  "test.test_vmap": {
    "__set__": true,
    "elements": [
      "diffrax"
    ]
  },
  "test.test_vpc_instance_authenticator": {
    "__set__": true,
    "elements": [
      "ibm-cloud-sdk-core"
    ]
  },
  "test.test_vpc_instance_token_manager": {
    "__set__": true,
    "elements": [
      "ibm-cloud-sdk-core"
    ]
  },
  "test.test_warnings": {
    "__set__": true,
    "elements": [
      "fine"
    ]
  },
  "test.test_watersupply": {
    "__set__": true,
    "elements": [
      "fine"
    ]
  },
  "test.test_waves": {
    "__set__": true,
    "elements": [
      "abtem"
    ]
  },
  "test.test_web": {
    "__set__": true,
    "elements": [
      "asv"
    ]
  },
  "test.test_webhook_compact": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_webhook_compact_resource": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_webhook_filter": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_webhook_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_webhook_request_filters": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_webhook_response": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_webhook_response_array": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_webhook_response_data": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_webhook_update_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_webhooks_api": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_webhooks_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_webhooks_webhook_gid_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_workflow": {
    "__set__": true,
    "elements": [
      "asv"
    ]
  },
  "test.test_workspace_add_user_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_workspace_base": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_workspace_compact": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_workspace_gid_add_user_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_workspace_gid_projects_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_workspace_gid_remove_user_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_workspace_gid_tags_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_workspace_membership_base": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_workspace_membership_compact": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_workspace_membership_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_workspace_membership_response": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_workspace_membership_response_array": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_workspace_membership_response_data": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_workspace_membership_response_user_task_list": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_workspace_membership_response_vacation_dates": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_workspace_memberships_api": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_workspace_remove_user_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_workspace_request": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_workspace_response": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_workspace_response_array": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_workspace_response_data": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_workspaces_api": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_workspaces_workspace_gid_body": {
    "__set__": true,
    "elements": [
      "python-asana"
    ]
  },
  "test.test_write": {
    "__set__": true,
    "elements": [
      "svgelements"
    ]
  },
  "test.test_write_read": {
    "__set__": true,
    "elements": [
      "pyugrid"
    ]
  },
  "test.test_yaml": {
    "__set__": true,
    "elements": [
      "forest"
    ]
  },
  "test.test_zotero": {
    "__set__": true,
    "elements": [
      "pyzotero"
    ]
  }
}