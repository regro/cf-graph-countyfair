{
  "botorch.utils": {
    "__set__": true,
    "elements": [
      "botorch"
    ]
  },
  "botorch.utils.constants": {
    "__set__": true,
    "elements": [
      "botorch"
    ]
  },
  "botorch.utils.constraints": {
    "__set__": true,
    "elements": [
      "botorch"
    ]
  },
  "botorch.utils.containers": {
    "__set__": true,
    "elements": [
      "botorch"
    ]
  },
  "botorch.utils.context_managers": {
    "__set__": true,
    "elements": [
      "botorch"
    ]
  },
  "botorch.utils.datasets": {
    "__set__": true,
    "elements": [
      "botorch"
    ]
  },
  "botorch.utils.dispatcher": {
    "__set__": true,
    "elements": [
      "botorch"
    ]
  },
  "botorch.utils.feasible_volume": {
    "__set__": true,
    "elements": [
      "botorch"
    ]
  },
  "botorch.utils.gp_sampling": {
    "__set__": true,
    "elements": [
      "botorch"
    ]
  },
  "botorch.utils.low_rank": {
    "__set__": true,
    "elements": [
      "botorch"
    ]
  },
  "botorch.utils.multi_objective": {
    "__set__": true,
    "elements": [
      "botorch"
    ]
  },
  "botorch.utils.multi_objective.box_decomposition": {
    "__set__": true,
    "elements": [
      "botorch"
    ]
  },
  "botorch.utils.multi_objective.box_decompositions": {
    "__set__": true,
    "elements": [
      "botorch"
    ]
  },
  "botorch.utils.multi_objective.box_decompositions.box_decomposition": {
    "__set__": true,
    "elements": [
      "botorch"
    ]
  },
  "botorch.utils.multi_objective.box_decompositions.box_decomposition_list": {
    "__set__": true,
    "elements": [
      "botorch"
    ]
  },
  "botorch.utils.multi_objective.box_decompositions.dominated": {
    "__set__": true,
    "elements": [
      "botorch"
    ]
  },
  "botorch.utils.multi_objective.box_decompositions.non_dominated": {
    "__set__": true,
    "elements": [
      "botorch"
    ]
  },
  "botorch.utils.multi_objective.box_decompositions.utils": {
    "__set__": true,
    "elements": [
      "botorch"
    ]
  },
  "botorch.utils.multi_objective.hypervolume": {
    "__set__": true,
    "elements": [
      "botorch"
    ]
  },
  "botorch.utils.multi_objective.pareto": {
    "__set__": true,
    "elements": [
      "botorch"
    ]
  },
  "botorch.utils.multi_objective.scalarization": {
    "__set__": true,
    "elements": [
      "botorch"
    ]
  },
  "botorch.utils.multitask": {
    "__set__": true,
    "elements": [
      "botorch"
    ]
  },
  "botorch.utils.objective": {
    "__set__": true,
    "elements": [
      "botorch"
    ]
  },
  "botorch.utils.probability": {
    "__set__": true,
    "elements": [
      "botorch"
    ]
  },
  "botorch.utils.probability.bvn": {
    "__set__": true,
    "elements": [
      "botorch"
    ]
  },
  "botorch.utils.probability.lin_ess": {
    "__set__": true,
    "elements": [
      "botorch"
    ]
  },
  "botorch.utils.probability.linalg": {
    "__set__": true,
    "elements": [
      "botorch"
    ]
  },
  "botorch.utils.probability.mvnxpb": {
    "__set__": true,
    "elements": [
      "botorch"
    ]
  },
  "botorch.utils.probability.truncated_multivariate_normal": {
    "__set__": true,
    "elements": [
      "botorch"
    ]
  },
  "botorch.utils.probability.unified_skew_normal": {
    "__set__": true,
    "elements": [
      "botorch"
    ]
  },
  "botorch.utils.probability.utils": {
    "__set__": true,
    "elements": [
      "botorch"
    ]
  },
  "botorch.utils.rounding": {
    "__set__": true,
    "elements": [
      "botorch"
    ]
  },
  "botorch.utils.safe_math": {
    "__set__": true,
    "elements": [
      "botorch"
    ]
  },
  "botorch.utils.sampling": {
    "__set__": true,
    "elements": [
      "botorch"
    ]
  },
  "botorch.utils.test_helpers": {
    "__set__": true,
    "elements": [
      "botorch"
    ]
  },
  "botorch.utils.testing": {
    "__set__": true,
    "elements": [
      "botorch"
    ]
  },
  "botorch.utils.torch": {
    "__set__": true,
    "elements": [
      "botorch"
    ]
  },
  "botorch.utils.transforms": {
    "__set__": true,
    "elements": [
      "botorch"
    ]
  },
  "botorch.utils.types": {
    "__set__": true,
    "elements": [
      "botorch"
    ]
  }
}