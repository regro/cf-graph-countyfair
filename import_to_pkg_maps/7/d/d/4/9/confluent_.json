{
  "confluent_kafka": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka._model": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka._util": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka._util.conversion_util": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka._util.validation_util": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.admin": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.admin._acl": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.admin._cluster": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.admin._config": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.admin._group": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.admin._listoffsets": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.admin._metadata": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.admin._records": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.admin._resource": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.admin._scram": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.admin._topic": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.avro": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.avro.cached_schema_registry_client": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.avro.error": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.avro.load": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.avro.serializer": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.avro.serializer.message_serializer": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.cimpl": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.deserializing_consumer": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.error": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.kafkatest": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.kafkatest.verifiable_client": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.kafkatest.verifiable_consumer": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.kafkatest.verifiable_producer": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.schema_registry": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.schema_registry.avro": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.schema_registry.confluent": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.schema_registry.confluent.meta_pb2": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.schema_registry.confluent.types": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.schema_registry.confluent.types.decimal_pb2": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.schema_registry.error": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.schema_registry.json_schema": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.schema_registry.mock_schema_registry_client": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.schema_registry.protobuf": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.schema_registry.rule_registry": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.schema_registry.rules": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.schema_registry.rules.cel": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.schema_registry.rules.cel.cel_executor": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.schema_registry.rules.cel.cel_field_executor": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.schema_registry.rules.cel.cel_field_presence": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.schema_registry.rules.cel.constraints": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.schema_registry.rules.cel.extra_func": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.schema_registry.rules.cel.string_format": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.schema_registry.rules.encryption": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.schema_registry.rules.encryption.awskms": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.schema_registry.rules.encryption.awskms.aws_driver": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.schema_registry.rules.encryption.azurekms": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.schema_registry.rules.encryption.azurekms.azure_aead": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.schema_registry.rules.encryption.azurekms.azure_client": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.schema_registry.rules.encryption.azurekms.azure_driver": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.schema_registry.rules.encryption.dek_registry": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.schema_registry.rules.encryption.dek_registry.dek_registry_client": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.schema_registry.rules.encryption.dek_registry.mock_dek_registry_client": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.schema_registry.rules.encryption.encrypt_executor": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.schema_registry.rules.encryption.gcpkms": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.schema_registry.rules.encryption.gcpkms.gcp_client": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.schema_registry.rules.encryption.gcpkms.gcp_driver": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.schema_registry.rules.encryption.hcvault": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.schema_registry.rules.encryption.hcvault.hcvault_client": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.schema_registry.rules.encryption.hcvault.hcvault_driver": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.schema_registry.rules.encryption.kms_driver_registry": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.schema_registry.rules.encryption.localkms": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.schema_registry.rules.encryption.localkms.local_client": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.schema_registry.rules.encryption.localkms.local_driver": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.schema_registry.rules.jsonata": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.schema_registry.rules.jsonata.jsonata_executor": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.schema_registry.schema_registry_client": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.schema_registry.serde": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.schema_registry.wildcard_matcher": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.serialization": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  },
  "confluent_kafka.serializing_producer": {
    "__set__": true,
    "elements": [
      "python-confluent-kafka"
    ]
  }
}